
DeviceProcessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b8  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080099f0  080099f0  0000a9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009af0  08009af0  0000aaf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009af8  08009af8  0000aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009afc  08009afc  0000aafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000075  20000000  08009b00  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ab8  20000078  08009b75  0000b078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b30  08009b75  0000bb30  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b075  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b10d  00000000  00000000  0000b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003476  00000000  00000000  000261b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014a8  00000000  00000000  00029630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fd7  00000000  00000000  0002aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037924  00000000  00000000  0002baaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bb59  00000000  00000000  000633d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f4c6  00000000  00000000  0007ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001de3f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057f8  00000000  00000000  001de438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  001e3c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000078 	.word	0x20000078
 8000254:	00000000 	.word	0x00000000
 8000258:	080099d8 	.word	0x080099d8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000007c 	.word	0x2000007c
 8000274:	080099d8 	.word	0x080099d8

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800059e:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b4:	68fb      	ldr	r3, [r7, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	46020c00 	.word	0x46020c00

080005c8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005d6:	4909      	ldr	r1, [pc, #36]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	46020c00 	.word	0x46020c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 febc 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f815 	bl	8000636 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800060c:	f000 f877 	bl	80006fe <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 fa00 	bl	8000a14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000614:	f000 f882 	bl	800071c <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000618:	f000 f8c4 	bl	80007a4 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 800061c:	f000 f946 	bl	80008ac <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f97a 	bl	8000918 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000624:	f000 f9c4 	bl	80009b0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000628:	f000 f8d0 	bl	80007cc <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  run_device();
 800062c:	f000 fd76 	bl	800111c <run_device>
 8000630:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}

08000636 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b09e      	sub	sp, #120	@ 0x78
 800063a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063c:	f107 0318 	add.w	r3, r7, #24
 8000640:	2260      	movs	r2, #96	@ 0x60
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f009 f99a 	bl	800997e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800065e:	f002 ff6d 	bl	800353c <HAL_PWREx_ControlVoltageScaling>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000668:	f000 fab2 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800066c:	2332      	movs	r3, #50	@ 0x32
 800066e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000688:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800068c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000692:	2301      	movs	r3, #1
 8000694:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800069e:	2350      	movs	r3, #80	@ 0x50
 80006a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 f84a 	bl	8003754 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c6:	f000 fa83 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	231f      	movs	r3, #31
 80006cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2303      	movs	r3, #3
 80006d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	2104      	movs	r1, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 ff10 	bl	800450c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f2:	f000 fa6d 	bl	8000bd0 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3778      	adds	r7, #120	@ 0x78
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000702:	f003 f807 	bl	8003714 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000706:	2002      	movs	r0, #2
 8000708:	f002 ffa4 	bl	8003654 <HAL_PWREx_ConfigSupply>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000712:	f000 fa5d 	bl	8000bd0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000720:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <MX_ADC1_Init+0x80>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <MX_ADC1_Init+0x84>)
 8000724:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <MX_ADC1_Init+0x80>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <MX_ADC1_Init+0x80>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <MX_ADC1_Init+0x80>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_ADC1_Init+0x80>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <MX_ADC1_Init+0x80>)
 8000740:	2204      	movs	r2, #4
 8000742:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	@ (800079c <MX_ADC1_Init+0x80>)
 8000746:	2200      	movs	r2, #0
 8000748:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074a:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_ADC1_Init+0x80>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000752:	4b12      	ldr	r3, [pc, #72]	@ (800079c <MX_ADC1_Init+0x80>)
 8000754:	2201      	movs	r2, #1
 8000756:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_ADC1_Init+0x80>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_ADC1_Init+0x80>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_ADC1_Init+0x80>)
 800076a:	2200      	movs	r2, #0
 800076c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_ADC1_Init+0x80>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_ADC1_Init+0x80>)
 8000776:	2200      	movs	r2, #0
 8000778:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_ADC1_Init+0x80>)
 800077c:	2200      	movs	r2, #0
 800077e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_ADC1_Init+0x80>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_ADC1_Init+0x80>)
 800078a:	f000 ffe1 	bl	8001750 <HAL_ADC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000794:	f000 fa1c 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000094 	.word	0x20000094
 80007a0:	42028000 	.word	0x42028000

080007a4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f001 fe1f 	bl	80023ec <HAL_ICACHE_ConfigAssociativityMode>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007b4:	f000 fa0c 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007b8:	f001 fe38 	bl	800242c <HAL_ICACHE_Enable>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007c2:	f000 fa05 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007dc:	4b31      	ldr	r3, [pc, #196]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 80007de:	4a32      	ldr	r2, [pc, #200]	@ (80008a8 <MX_SPI1_Init+0xdc>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b30      	ldr	r3, [pc, #192]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 80007e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f0:	4b2c      	ldr	r3, [pc, #176]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 80007f2:	2207      	movs	r2, #7
 80007f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007f6:	4b2b      	ldr	r3, [pc, #172]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 80007f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80007fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fe:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000804:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000806:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800080a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080c:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b24      	ldr	r3, [pc, #144]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000826:	2207      	movs	r2, #7
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800082a:	4b1e      	ldr	r3, [pc, #120]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 800082c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000830:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000834:	2200      	movs	r2, #0
 8000836:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000838:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 800083a:	2200      	movs	r2, #0
 800083c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000840:	2200      	movs	r2, #0
 8000842:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000844:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000846:	2200      	movs	r2, #0
 8000848:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800084a:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 800084c:	2200      	movs	r2, #0
 800084e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000852:	2200      	movs	r2, #0
 8000854:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000858:	2200      	movs	r2, #0
 800085a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 800085e:	2200      	movs	r2, #0
 8000860:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 8000864:	2200      	movs	r2, #0
 8000866:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000868:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 800086a:	f006 feb7 	bl	80075dc <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000874:	f000 f9ac 	bl	8000bd0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800087c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <MX_SPI1_Init+0xd8>)
 800088c:	f007 fab5 	bl	8007dfa <HAL_SPIEx_SetConfigAutonomousMode>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000896:	f000 f99b 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000120 	.word	0x20000120
 80008a8:	40013000 	.word	0x40013000

080008ac <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
 80008c0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80008c2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80008c6:	f7ff fe7f 	bl	80005c8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f7ff fe60 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff fe5d 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80008d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008dc:	2303      	movs	r3, #3
 80008de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <MX_UCPD1_Init+0x64>)
 80008ea:	f008 f9fe 	bl	8008cea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80008ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008f4:	2303      	movs	r3, #3
 80008f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_UCPD1_Init+0x68>)
 8000902:	f008 f9f2 	bl	8008cea <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	42020400 	.word	0x42020400
 8000914:	42020000 	.word	0x42020000

08000918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800091c:	4b22      	ldr	r3, [pc, #136]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 800091e:	4a23      	ldr	r2, [pc, #140]	@ (80009ac <MX_USART1_UART_Init+0x94>)
 8000920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000922:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000960:	4811      	ldr	r0, [pc, #68]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000962:	f007 fa8b 	bl	8007e7c <HAL_UART_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800096c:	f000 f930 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000970:	2100      	movs	r1, #0
 8000972:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000974:	f007 ffa4 	bl	80088c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800097e:	f000 f927 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4808      	ldr	r0, [pc, #32]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000986:	f007 ffd9 	bl	800893c <HAL_UARTEx_SetRxFifoThreshold>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000990:	f000 f91e 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_USART1_UART_Init+0x90>)
 8000996:	f007 ff5a 	bl	800884e <HAL_UARTEx_DisableFifoMode>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009a0:	f000 f916 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200001b0 	.word	0x200001b0
 80009ac:	40013800 	.word	0x40013800

080009b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009bc:	2206      	movs	r2, #6
 80009be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f8:	f001 fd28 	bl	800244c <HAL_PCD_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a02:	f000 f8e5 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000244 	.word	0x20000244
 8000a10:	42040000 	.word	0x42040000

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b63      	ldr	r3, [pc, #396]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a30:	4a61      	ldr	r2, [pc, #388]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b5b      	ldr	r3, [pc, #364]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a4e:	4a5a      	ldr	r2, [pc, #360]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a58:	4b57      	ldr	r3, [pc, #348]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a66:	4b54      	ldr	r3, [pc, #336]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a6c:	4a52      	ldr	r2, [pc, #328]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a76:	4b50      	ldr	r3, [pc, #320]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b4c      	ldr	r3, [pc, #304]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a8a:	4a4b      	ldr	r2, [pc, #300]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a94:	4b48      	ldr	r3, [pc, #288]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b45      	ldr	r3, [pc, #276]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa8:	4a43      	ldr	r2, [pc, #268]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ab2:	4b41      	ldr	r3, [pc, #260]	@ (8000bb8 <MX_GPIO_Init+0x1a4>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f24d 5180 	movw	r1, #54656	@ 0xd580
 8000ac6:	483d      	ldr	r0, [pc, #244]	@ (8000bbc <MX_GPIO_Init+0x1a8>)
 8000ac8:	f001 fc78 	bl	80023bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 614a 	mov.w	r1, #3232	@ 0xca0
 8000ad2:	483b      	ldr	r0, [pc, #236]	@ (8000bc0 <MX_GPIO_Init+0x1ac>)
 8000ad4:	f001 fc72 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2104      	movs	r1, #4
 8000adc:	4839      	ldr	r0, [pc, #228]	@ (8000bc4 <MX_GPIO_Init+0x1b0>)
 8000ade:	f001 fc6d 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	4838      	ldr	r0, [pc, #224]	@ (8000bc8 <MX_GPIO_Init+0x1b4>)
 8000ae8:	f001 fc68 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af2:	4b36      	ldr	r3, [pc, #216]	@ (8000bcc <MX_GPIO_Init+0x1b8>)
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4831      	ldr	r0, [pc, #196]	@ (8000bc8 <MX_GPIO_Init+0x1b4>)
 8000b02:	f001 fa83 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE12
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 8000b06:	f24d 5380 	movw	r3, #54656	@ 0xd580
 8000b0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4827      	ldr	r0, [pc, #156]	@ (8000bbc <MX_GPIO_Init+0x1a8>)
 8000b20:	f001 fa74 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|UCPD_DBn_Pin;
 8000b24:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4820      	ldr	r0, [pc, #128]	@ (8000bc0 <MX_GPIO_Init+0x1ac>)
 8000b3e:	f001 fa65 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000b42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	481a      	ldr	r0, [pc, #104]	@ (8000bc0 <MX_GPIO_Init+0x1ac>)
 8000b58:	f001 fa58 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4814      	ldr	r0, [pc, #80]	@ (8000bc4 <MX_GPIO_Init+0x1b0>)
 8000b74:	f001 fa4a 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b78:	2380      	movs	r3, #128	@ 0x80
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b84:	2302      	movs	r3, #2
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480e      	ldr	r0, [pc, #56]	@ (8000bc8 <MX_GPIO_Init+0x1b4>)
 8000b90:	f001 fa3c 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_GPIO_Init+0x1ac>)
 8000bac:	f001 fa2e 	bl	800200c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	46020c00 	.word	0x46020c00
 8000bbc:	42021000 	.word	0x42021000
 8000bc0:	42020400 	.word	0x42020400
 8000bc4:	42021800 	.word	0x42021800
 8000bc8:	42020800 	.word	0x42020800
 8000bcc:	10210000 	.word	0x10210000

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <HAL_MspInit+0x38>)
 8000be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000be8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_MspInit+0x38>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_MspInit+0x38>)
 8000bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000c00:	f002 fd98 	bl	8003734 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000c04:	2004      	movs	r0, #4
 8000c06:	f001 f91a 	bl	8001e3e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	46020c00 	.word	0x46020c00

08000c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	22c0      	movs	r2, #192	@ 0xc0
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f008 fea0 	bl	800997e <memset>
  if(hadc->Instance==ADC1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a24      	ldr	r2, [pc, #144]	@ (8000cd4 <HAL_ADC_MspInit+0xbc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d140      	bne.n	8000cca <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000c48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000c54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4618      	mov	r0, r3
 8000c62:	f004 f823 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000c6c:	f7ff ffb0 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c70:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_ADC_MspInit+0xc0>)
 8000c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c76:	4a18      	ldr	r2, [pc, #96]	@ (8000cd8 <HAL_ADC_MspInit+0xc0>)
 8000c78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_ADC_MspInit+0xc0>)
 8000c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_ADC_MspInit+0xc0>)
 8000c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c94:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <HAL_ADC_MspInit+0xc0>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_ADC_MspInit+0xc0>)
 8000ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000cac:	2304      	movs	r3, #4
 8000cae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <HAL_ADC_MspInit+0xc4>)
 8000cc6:	f001 f9a1 	bl	800200c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cca:	bf00      	nop
 8000ccc:	37e8      	adds	r7, #232	@ 0xe8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	42028000 	.word	0x42028000
 8000cd8:	46020c00 	.word	0x46020c00
 8000cdc:	42020800 	.word	0x42020800

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	22c0      	movs	r2, #192	@ 0xc0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f008 fe3c 	bl	800997e <memset>
  if(hspi->Instance==SPI1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a27      	ldr	r2, [pc, #156]	@ (8000da8 <HAL_SPI_MspInit+0xc8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d146      	bne.n	8000d9e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_HSI;
 8000d1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 ffbf 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000d34:	f7ff ff4c 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d38:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <HAL_SPI_MspInit+0xcc>)
 8000d3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dac <HAL_SPI_MspInit+0xcc>)
 8000d40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d44:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d48:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <HAL_SPI_MspInit+0xcc>)
 8000d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <HAL_SPI_MspInit+0xcc>)
 8000d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d5c:	4a13      	ldr	r2, [pc, #76]	@ (8000dac <HAL_SPI_MspInit+0xcc>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <HAL_SPI_MspInit+0xcc>)
 8000d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d74:	23f0      	movs	r3, #240	@ 0xf0
 8000d76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <HAL_SPI_MspInit+0xd0>)
 8000d9a:	f001 f937 	bl	800200c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d9e:	bf00      	nop
 8000da0:	37e8      	adds	r7, #232	@ 0xe8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40013000 	.word	0x40013000
 8000dac:	46020c00 	.word	0x46020c00
 8000db0:	42020000 	.word	0x42020000

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0ba      	sub	sp, #232	@ 0xe8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	22c0      	movs	r2, #192	@ 0xc0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f008 fdd2 	bl	800997e <memset>
  if(huart->Instance==USART1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a26      	ldr	r2, [pc, #152]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d145      	bne.n	8000e70 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000de4:	f04f 0201 	mov.w	r2, #1
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000df0:	2300      	movs	r3, #0
 8000df2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 ff57 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e04:	f7ff fee4 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_UART_MspInit+0xc8>)
 8000e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <HAL_UART_MspInit+0xc8>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e14:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_UART_MspInit+0xc8>)
 8000e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_UART_MspInit+0xc8>)
 8000e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e2c:	4a13      	ldr	r2, [pc, #76]	@ (8000e7c <HAL_UART_MspInit+0xc8>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_UART_MspInit+0xc8>)
 8000e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000e44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e6c:	f001 f8ce 	bl	800200c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e70:	bf00      	nop
 8000e72:	37e8      	adds	r7, #232	@ 0xe8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	46020c00 	.word	0x46020c00
 8000e80:	42020000 	.word	0x42020000

08000e84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0bc      	sub	sp, #240	@ 0xf0
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	22c0      	movs	r2, #192	@ 0xc0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f008 fd6a 	bl	800997e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a3c      	ldr	r2, [pc, #240]	@ (8000fa0 <HAL_PCD_MspInit+0x11c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d171      	bne.n	8000f98 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000eb4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 feee 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000ed6:	f7ff fe7b 	bl	8000bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b32      	ldr	r3, [pc, #200]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee0:	4a30      	ldr	r2, [pc, #192]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000ef8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000efc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f12:	230a      	movs	r3, #10
 8000f14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4822      	ldr	r0, [pc, #136]	@ (8000fa8 <HAL_PCD_MspInit+0x124>)
 8000f20:	f001 f874 	bl	800200c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f24:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d119      	bne.n	8000f84 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f56:	4a13      	ldr	r2, [pc, #76]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000f6e:	f002 fbc1 	bl	80036f4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f78:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <HAL_PCD_MspInit+0x120>)
 8000f7a:	f023 0304 	bic.w	r3, r3, #4
 8000f7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000f82:	e001      	b.n	8000f88 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000f84:	f002 fbb6 	bl	80036f4 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2049      	movs	r0, #73	@ 0x49
 8000f8e:	f000 ff61 	bl	8001e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000f92:	2049      	movs	r0, #73	@ 0x49
 8000f94:	f000 ff78 	bl	8001e88 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f98:	bf00      	nop
 8000f9a:	37f0      	adds	r7, #240	@ 0xf0
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	42040000 	.word	0x42040000
 8000fa4:	46020c00 	.word	0x46020c00
 8000fa8:	42020000 	.word	0x42020000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f000 fa63 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <OTG_FS_IRQHandler+0x10>)
 8001012:	f001 fb33 	bl	800267c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000244 	.word	0x20000244

08001020 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <SystemInit+0x68>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800102a:	4a17      	ldr	r2, [pc, #92]	@ (8001088 <SystemInit+0x68>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <SystemInit+0x6c>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <SystemInit+0x6c>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <SystemInit+0x6c>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <SystemInit+0x6c>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <SystemInit+0x6c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <SystemInit+0x6c>)
 8001052:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001056:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800105a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <SystemInit+0x6c>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <SystemInit+0x6c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a09      	ldr	r2, [pc, #36]	@ (800108c <SystemInit+0x6c>)
 8001068:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800106c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <SystemInit+0x6c>)
 8001070:	2200      	movs	r2, #0
 8001072:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <SystemInit+0x68>)
 8001076:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800107a:	609a      	str	r2, [r3, #8]
  #endif
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	46020c00 	.word	0x46020c00

08001090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001094:	f7ff ffc4 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001098:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800109a:	e003      	b.n	80010a4 <LoopCopyDataInit>

0800109c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800109e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010a2:	3104      	adds	r1, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010a4:	480a      	ldr	r0, [pc, #40]	@ (80010d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010ac:	d3f6      	bcc.n	800109c <CopyDataInit>
	ldr	r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010b0:	e002      	b.n	80010b8 <LoopFillZerobss>

080010b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010b4:	f842 3b04 	str.w	r3, [r2], #4

080010b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <LoopForever+0x16>)
	cmp	r2, r3
 80010ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010bc:	d3f9      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f008 fc67 	bl	8009990 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c2:	f7ff fa9d 	bl	8000600 <main>

080010c6 <LoopForever>:

LoopForever:
    b LoopForever
 80010c6:	e7fe      	b.n	80010c6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80010c8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80010cc:	08009b00 	.word	0x08009b00
	ldr	r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010d4:	20000075 	.word	0x20000075
	ldr	r2, =_sbss
 80010d8:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80010dc:	20000b30 	.word	0x20000b30

080010e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_IRQHandler>
	...

080010e4 <init_register_map>:
 *      Author: User
 */

#include "../Inc/device_registers.h"

void init_register_map(RegisterMap_TypeDef* RegMap){
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e007      	b.n	8001102 <init_register_map+0x1e>
		RegMap->RegisterArray[i].RegData = 0xdeadbeef;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4908      	ldr	r1, [pc, #32]	@ (8001118 <init_register_map+0x34>)
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2bff      	cmp	r3, #255	@ 0xff
 8001106:	ddf4      	ble.n	80010f2 <init_register_map+0xe>
	}
//	RegMap->reg_read = get_register;
//	RegMap->reg_write = set_register;
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	deadbeef 	.word	0xdeadbeef

0800111c <run_device>:
uint8_t spiTxBuffer8[] = {0x21,0x00,0x40,0x76,0x40,0x00,0xC0,0x00,0x20,0x00};  // 11Hz
uint8_t spiTxBuffer9[] = {0x21,0x00,0x40,0x81,0x40,0x00,0xC0,0x00,0x20,0x00};  // 12Hz

uint8_t uartRxBuffer[4];  // 12Hz

void run_device(){
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
	init_register_map(&device_registers);
 8001122:	4888      	ldr	r0, [pc, #544]	@ (8001344 <run_device+0x228>)
 8001124:	f7ff ffde 	bl	80010e4 <init_register_map>

	HAL_SPI_Transmit(&hspi1, spiTxBuffer1, 10, 1000); //Sending in Blocking mode
 8001128:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112c:	220a      	movs	r2, #10
 800112e:	4986      	ldr	r1, [pc, #536]	@ (8001348 <run_device+0x22c>)
 8001130:	4886      	ldr	r0, [pc, #536]	@ (800134c <run_device+0x230>)
 8001132:	f006 fb69 	bl	8007808 <HAL_SPI_Transmit>
	HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f000 f9e8 	bl	800150c <HAL_Delay>
	while(1){
        if (HAL_UART_Receive(&huart1, uartRxBuffer, 4, HAL_MAX_DELAY) == HAL_OK) {
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	2204      	movs	r2, #4
 8001142:	4983      	ldr	r1, [pc, #524]	@ (8001350 <run_device+0x234>)
 8001144:	4883      	ldr	r0, [pc, #524]	@ (8001354 <run_device+0x238>)
 8001146:	f006 fee9 	bl	8007f1c <HAL_UART_Receive>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f5      	bne.n	800113c <run_device+0x20>
            // Combine the received bytes into a 32-bit variable
            uint32_t receivedData = (uartRxBuffer[3] << 24) |
 8001150:	4b7f      	ldr	r3, [pc, #508]	@ (8001350 <run_device+0x234>)
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	061a      	lsls	r2, r3, #24
                                    (uartRxBuffer[2] << 16) |
 8001156:	4b7e      	ldr	r3, [pc, #504]	@ (8001350 <run_device+0x234>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	041b      	lsls	r3, r3, #16
            uint32_t receivedData = (uartRxBuffer[3] << 24) |
 800115c:	431a      	orrs	r2, r3
                                    (uartRxBuffer[1] << 8)  |
 800115e:	4b7c      	ldr	r3, [pc, #496]	@ (8001350 <run_device+0x234>)
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	021b      	lsls	r3, r3, #8
                                    (uartRxBuffer[2] << 16) |
 8001164:	4313      	orrs	r3, r2
                                     uartRxBuffer[0];
 8001166:	4a7a      	ldr	r2, [pc, #488]	@ (8001350 <run_device+0x234>)
 8001168:	7812      	ldrb	r2, [r2, #0]
                                    (uartRxBuffer[1] << 8)  |
 800116a:	4313      	orrs	r3, r2
            uint32_t receivedData = (uartRxBuffer[3] << 24) |
 800116c:	60fb      	str	r3, [r7, #12]

            // Parse the received data
            uint8_t address = (receivedData >> 24) & 0xFF; // Upper 8 bits
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	0e1b      	lsrs	r3, r3, #24
 8001172:	72fb      	strb	r3, [r7, #11]
			uint32_t data = receivedData & 0xFFFFFF;       // Lower 24 bits
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800117a:	607b      	str	r3, [r7, #4]

			if(address == 0){
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d17e      	bne.n	8001280 <run_device+0x164>
				if(data == 1){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10a      	bne.n	800119e <run_device+0x82>
					HAL_SPI_Transmit(&hspi1, spiTxBuffer1, 10, 1000); //Sending in Blocking mode
 8001188:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118c:	220a      	movs	r2, #10
 800118e:	496e      	ldr	r1, [pc, #440]	@ (8001348 <run_device+0x22c>)
 8001190:	486e      	ldr	r0, [pc, #440]	@ (800134c <run_device+0x230>)
 8001192:	f006 fb39 	bl	8007808 <HAL_SPI_Transmit>
					HAL_Delay(100);
 8001196:	2064      	movs	r0, #100	@ 0x64
 8001198:	f000 f9b8 	bl	800150c <HAL_Delay>
 800119c:	e7ce      	b.n	800113c <run_device+0x20>
				}
				else if(data == 2){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d10a      	bne.n	80011ba <run_device+0x9e>
					HAL_SPI_Transmit(&hspi1, spiTxBuffer2, 10, 1000); //Sending in Blocking mode
 80011a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a8:	220a      	movs	r2, #10
 80011aa:	496b      	ldr	r1, [pc, #428]	@ (8001358 <run_device+0x23c>)
 80011ac:	4867      	ldr	r0, [pc, #412]	@ (800134c <run_device+0x230>)
 80011ae:	f006 fb2b 	bl	8007808 <HAL_SPI_Transmit>
					HAL_Delay(100);
 80011b2:	2064      	movs	r0, #100	@ 0x64
 80011b4:	f000 f9aa 	bl	800150c <HAL_Delay>
 80011b8:	e7c0      	b.n	800113c <run_device+0x20>
				}
				else if(data == 3){
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d10a      	bne.n	80011d6 <run_device+0xba>
					HAL_SPI_Transmit(&hspi1, spiTxBuffer3, 10, 1000); //Sending in Blocking mode
 80011c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c4:	220a      	movs	r2, #10
 80011c6:	4965      	ldr	r1, [pc, #404]	@ (800135c <run_device+0x240>)
 80011c8:	4860      	ldr	r0, [pc, #384]	@ (800134c <run_device+0x230>)
 80011ca:	f006 fb1d 	bl	8007808 <HAL_SPI_Transmit>
					HAL_Delay(100);
 80011ce:	2064      	movs	r0, #100	@ 0x64
 80011d0:	f000 f99c 	bl	800150c <HAL_Delay>
 80011d4:	e7b2      	b.n	800113c <run_device+0x20>
				}
				else if(data == 4){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d10a      	bne.n	80011f2 <run_device+0xd6>
					HAL_SPI_Transmit(&hspi1, spiTxBuffer4, 10, 1000); //Sending in Blocking mode
 80011dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e0:	220a      	movs	r2, #10
 80011e2:	495f      	ldr	r1, [pc, #380]	@ (8001360 <run_device+0x244>)
 80011e4:	4859      	ldr	r0, [pc, #356]	@ (800134c <run_device+0x230>)
 80011e6:	f006 fb0f 	bl	8007808 <HAL_SPI_Transmit>
					HAL_Delay(100);
 80011ea:	2064      	movs	r0, #100	@ 0x64
 80011ec:	f000 f98e 	bl	800150c <HAL_Delay>
 80011f0:	e7a4      	b.n	800113c <run_device+0x20>
				}
				else if(data == 5){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d10a      	bne.n	800120e <run_device+0xf2>
					HAL_SPI_Transmit(&hspi1, spiTxBuffer5, 10, 1000); //Sending in Blocking mode
 80011f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fc:	220a      	movs	r2, #10
 80011fe:	4959      	ldr	r1, [pc, #356]	@ (8001364 <run_device+0x248>)
 8001200:	4852      	ldr	r0, [pc, #328]	@ (800134c <run_device+0x230>)
 8001202:	f006 fb01 	bl	8007808 <HAL_SPI_Transmit>
					HAL_Delay(100);
 8001206:	2064      	movs	r0, #100	@ 0x64
 8001208:	f000 f980 	bl	800150c <HAL_Delay>
 800120c:	e796      	b.n	800113c <run_device+0x20>
				}
				else if(data == 6){
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b06      	cmp	r3, #6
 8001212:	d10a      	bne.n	800122a <run_device+0x10e>
					HAL_SPI_Transmit(&hspi1, spiTxBuffer6, 10, 1000); //Sending in Blocking mode
 8001214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001218:	220a      	movs	r2, #10
 800121a:	4953      	ldr	r1, [pc, #332]	@ (8001368 <run_device+0x24c>)
 800121c:	484b      	ldr	r0, [pc, #300]	@ (800134c <run_device+0x230>)
 800121e:	f006 faf3 	bl	8007808 <HAL_SPI_Transmit>
					HAL_Delay(100);
 8001222:	2064      	movs	r0, #100	@ 0x64
 8001224:	f000 f972 	bl	800150c <HAL_Delay>
 8001228:	e788      	b.n	800113c <run_device+0x20>
				}
				else if(data == 7){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b07      	cmp	r3, #7
 800122e:	d10a      	bne.n	8001246 <run_device+0x12a>
					HAL_SPI_Transmit(&hspi1, spiTxBuffer7, 10, 1000); //Sending in Blocking mode
 8001230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001234:	220a      	movs	r2, #10
 8001236:	494d      	ldr	r1, [pc, #308]	@ (800136c <run_device+0x250>)
 8001238:	4844      	ldr	r0, [pc, #272]	@ (800134c <run_device+0x230>)
 800123a:	f006 fae5 	bl	8007808 <HAL_SPI_Transmit>
					HAL_Delay(100);
 800123e:	2064      	movs	r0, #100	@ 0x64
 8001240:	f000 f964 	bl	800150c <HAL_Delay>
 8001244:	e77a      	b.n	800113c <run_device+0x20>
				}
				else if(data == 8){
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b08      	cmp	r3, #8
 800124a:	d10a      	bne.n	8001262 <run_device+0x146>
					HAL_SPI_Transmit(&hspi1, spiTxBuffer8, 10, 1000); //Sending in Blocking mode
 800124c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001250:	220a      	movs	r2, #10
 8001252:	4947      	ldr	r1, [pc, #284]	@ (8001370 <run_device+0x254>)
 8001254:	483d      	ldr	r0, [pc, #244]	@ (800134c <run_device+0x230>)
 8001256:	f006 fad7 	bl	8007808 <HAL_SPI_Transmit>
					HAL_Delay(100);
 800125a:	2064      	movs	r0, #100	@ 0x64
 800125c:	f000 f956 	bl	800150c <HAL_Delay>
 8001260:	e76c      	b.n	800113c <run_device+0x20>
				}
				else if(data == 9){
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b09      	cmp	r3, #9
 8001266:	f47f af69 	bne.w	800113c <run_device+0x20>
					HAL_SPI_Transmit(&hspi1, spiTxBuffer9, 10, 1000); //Sending in Blocking mode
 800126a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126e:	220a      	movs	r2, #10
 8001270:	4940      	ldr	r1, [pc, #256]	@ (8001374 <run_device+0x258>)
 8001272:	4836      	ldr	r0, [pc, #216]	@ (800134c <run_device+0x230>)
 8001274:	f006 fac8 	bl	8007808 <HAL_SPI_Transmit>
					HAL_Delay(100);
 8001278:	2064      	movs	r0, #100	@ 0x64
 800127a:	f000 f947 	bl	800150c <HAL_Delay>
 800127e:	e75d      	b.n	800113c <run_device+0x20>
				}
			}
			else if(address == 1){
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	2b01      	cmp	r3, #1
 8001284:	f47f af5a 	bne.w	800113c <run_device+0x20>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800128e:	483a      	ldr	r0, [pc, #232]	@ (8001378 <run_device+0x25c>)
 8001290:	f001 f894 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8001294:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001298:	f000 f938 	bl	800150c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012a2:	4835      	ldr	r0, [pc, #212]	@ (8001378 <run_device+0x25c>)
 80012a4:	f001 f88a 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80012a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012ac:	f000 f92e 	bl	800150c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b6:	4831      	ldr	r0, [pc, #196]	@ (800137c <run_device+0x260>)
 80012b8:	f001 f880 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80012bc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012c0:	f000 f924 	bl	800150c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ca:	482c      	ldr	r0, [pc, #176]	@ (800137c <run_device+0x260>)
 80012cc:	f001 f876 	bl	80023bc <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80012d0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012d4:	f000 f91a 	bl	800150c <HAL_Delay>
				if(data == 1){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d109      	bne.n	80012f2 <run_device+0x1d6>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012e4:	4824      	ldr	r0, [pc, #144]	@ (8001378 <run_device+0x25c>)
 80012e6:	f001 f869 	bl	80023bc <HAL_GPIO_WritePin>
					HAL_Delay(100);
 80012ea:	2064      	movs	r0, #100	@ 0x64
 80012ec:	f000 f90e 	bl	800150c <HAL_Delay>
 80012f0:	e724      	b.n	800113c <run_device+0x20>
				}
				else if(data == 2){
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d109      	bne.n	800130c <run_device+0x1f0>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012fe:	481e      	ldr	r0, [pc, #120]	@ (8001378 <run_device+0x25c>)
 8001300:	f001 f85c 	bl	80023bc <HAL_GPIO_WritePin>
					HAL_Delay(100);
 8001304:	2064      	movs	r0, #100	@ 0x64
 8001306:	f000 f901 	bl	800150c <HAL_Delay>
 800130a:	e717      	b.n	800113c <run_device+0x20>
				}
				else if(data == 3){
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d109      	bne.n	8001326 <run_device+0x20a>
					HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001318:	4818      	ldr	r0, [pc, #96]	@ (800137c <run_device+0x260>)
 800131a:	f001 f84f 	bl	80023bc <HAL_GPIO_WritePin>
					HAL_Delay(100);
 800131e:	2064      	movs	r0, #100	@ 0x64
 8001320:	f000 f8f4 	bl	800150c <HAL_Delay>
 8001324:	e70a      	b.n	800113c <run_device+0x20>
				}
				else if(data == 4){
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b04      	cmp	r3, #4
 800132a:	f47f af07 	bne.w	800113c <run_device+0x20>
					HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001334:	4811      	ldr	r0, [pc, #68]	@ (800137c <run_device+0x260>)
 8001336:	f001 f841 	bl	80023bc <HAL_GPIO_WritePin>
					HAL_Delay(100);
 800133a:	2064      	movs	r0, #100	@ 0x64
 800133c:	f000 f8e6 	bl	800150c <HAL_Delay>
        if (HAL_UART_Receive(&huart1, uartRxBuffer, 4, HAL_MAX_DELAY) == HAL_OK) {
 8001340:	e6fc      	b.n	800113c <run_device+0x20>
 8001342:	bf00      	nop
 8001344:	20000728 	.word	0x20000728
 8001348:	20000004 	.word	0x20000004
 800134c:	20000120 	.word	0x20000120
 8001350:	20000b28 	.word	0x20000b28
 8001354:	200001b0 	.word	0x200001b0
 8001358:	20000010 	.word	0x20000010
 800135c:	2000001c 	.word	0x2000001c
 8001360:	20000028 	.word	0x20000028
 8001364:	20000034 	.word	0x20000034
 8001368:	20000040 	.word	0x20000040
 800136c:	2000004c 	.word	0x2000004c
 8001370:	20000058 	.word	0x20000058
 8001374:	20000064 	.word	0x20000064
 8001378:	42020400 	.word	0x42020400
 800137c:	42021000 	.word	0x42021000

08001380 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_Init+0x50>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_Init+0x50>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 fd54 	bl	8001e3e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001396:	f003 faab 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 800139a:	4602      	mov	r2, r0
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HAL_Init+0x54>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	490c      	ldr	r1, [pc, #48]	@ (80013d8 <HAL_Init+0x58>)
 80013a6:	5ccb      	ldrb	r3, [r1, r3]
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ac:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_Init+0x5c>)
 80013ae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013b0:	2004      	movs	r0, #4
 80013b2:	f000 fd99 	bl	8001ee8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 f812 	bl	80013e0 <HAL_InitTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e002      	b.n	80013cc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013c6:	f7ff fc09 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40022000 	.word	0x40022000
 80013d4:	46020c00 	.word	0x46020c00
 80013d8:	080099f0 	.word	0x080099f0
 80013dc:	20000000 	.word	0x20000000

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80013ec:	4b33      	ldr	r3, [pc, #204]	@ (80014bc <HAL_InitTick+0xdc>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e05c      	b.n	80014b2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80013f8:	4b31      	ldr	r3, [pc, #196]	@ (80014c0 <HAL_InitTick+0xe0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b04      	cmp	r3, #4
 8001402:	d10c      	bne.n	800141e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001404:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <HAL_InitTick+0xe4>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <HAL_InitTick+0xdc>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e037      	b.n	800148e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800141e:	f000 fdbb 	bl	8001f98 <HAL_SYSTICK_GetCLKSourceConfig>
 8001422:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d023      	beq.n	8001472 <HAL_InitTick+0x92>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d82d      	bhi.n	800148c <HAL_InitTick+0xac>
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_InitTick+0x5e>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d00d      	beq.n	8001458 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800143c:	e026      	b.n	800148c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <HAL_InitTick+0xe4>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_InitTick+0xdc>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800144c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	60fb      	str	r3, [r7, #12]
        break;
 8001456:	e01a      	b.n	800148e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_InitTick+0xdc>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001462:	fbb3 f3f2 	udiv	r3, r3, r2
 8001466:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	60fb      	str	r3, [r7, #12]
        break;
 8001470:	e00d      	b.n	800148e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001472:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_InitTick+0xdc>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001480:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001484:	fbb2 f3f3 	udiv	r3, r2, r3
 8001488:	60fb      	str	r3, [r7, #12]
        break;
 800148a:	e000      	b.n	800148e <HAL_InitTick+0xae>
        break;
 800148c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 fd08 	bl	8001ea4 <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e009      	b.n	80014b2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149e:	2200      	movs	r2, #0
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	f04f 30ff 	mov.w	r0, #4294967295
 80014a6:	f000 fcd5 	bl	8001e54 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80014aa:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <HAL_InitTick+0xe8>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000074 	.word	0x20000074
 80014c0:	e000e010 	.word	0xe000e010
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000070 	.word	0x20000070

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000074 	.word	0x20000074
 80014f0:	20000b2c 	.word	0x20000b2c

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000b2c 	.word	0x20000b2c

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000074 	.word	0x20000074

08001554 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <LL_ADC_SetResolution+0x3c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d104      	bne.n	800159c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3b01      	subs	r3, #1
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f023 020c 	bic.w	r2, r3, #12
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60da      	str	r2, [r3, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	46021000 	.word	0x46021000

080015bc <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d002      	beq.n	80015ee <LL_ADC_SetGainCompensation+0x32>
 80015e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80015ec:	e000      	b.n	80015f0 <LL_ADC_SetGainCompensation+0x34>
 80015ee:	2200      	movs	r2, #0
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2107      	movs	r1, #7
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	401a      	ands	r2, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	431a      	orrs	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001650:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6093      	str	r3, [r2, #8]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001678:	d101      	bne.n	800167e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800169c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016c8:	d101      	bne.n	80016ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <LL_ADC_IsEnabled+0x18>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <LL_ADC_IsEnabled+0x1a>
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b04      	cmp	r3, #4
 8001714:	d101      	bne.n	800171a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b08      	cmp	r3, #8
 800173a:	d101      	bne.n	8001740 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	@ 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e2b3      	b.n	8001cd8 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a8b      	ldr	r2, [pc, #556]	@ (80019ac <HAL_ADC_Init+0x25c>)
 800177e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fa45 	bl	8000c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5f 	bl	8001664 <LL_ADC_IsDeepPowerDownEnabled>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff45 	bl	8001640 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff7a 	bl	80016b4 <LL_ADC_IsInternalRegulatorEnabled>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d115      	bne.n	80017f2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff5e 	bl	800168c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017d0:	4b77      	ldr	r3, [pc, #476]	@ (80019b0 <HAL_ADC_Init+0x260>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	4a77      	ldr	r2, [pc, #476]	@ (80019b4 <HAL_ADC_Init+0x264>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	3301      	adds	r3, #1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017e4:	e002      	b.n	80017ec <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f9      	bne.n	80017e6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff5c 	bl	80016b4 <LL_ADC_IsInternalRegulatorEnabled>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10e      	bne.n	8001820 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001806:	f043 0210 	orr.w	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff6c 	bl	8001702 <LL_ADC_REG_IsConversionOngoing>
 800182a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	f040 8244 	bne.w	8001cc2 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 8240 	bne.w	8001cc2 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001846:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800184a:	f043 0202 	orr.w	r2, r3, #2
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff40 	bl	80016dc <LL_ADC_IsEnabled>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d140      	bne.n	80018e4 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a51      	ldr	r2, [pc, #324]	@ (80019ac <HAL_ADC_Init+0x25c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d028      	beq.n	80018be <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a51      	ldr	r2, [pc, #324]	@ (80019b8 <HAL_ADC_Init+0x268>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d109      	bne.n	800188a <HAL_ADC_Init+0x13a>
 8001876:	4850      	ldr	r0, [pc, #320]	@ (80019b8 <HAL_ADC_Init+0x268>)
 8001878:	f7ff ff30 	bl	80016dc <LL_ADC_IsEnabled>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf0c      	ite	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2300      	movne	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	e008      	b.n	800189c <HAL_ADC_Init+0x14c>
 800188a:	4848      	ldr	r0, [pc, #288]	@ (80019ac <HAL_ADC_Init+0x25c>)
 800188c:	f7ff ff26 	bl	80016dc <LL_ADC_IsEnabled>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf0c      	ite	eq
 8001896:	2301      	moveq	r3, #1
 8001898:	2300      	movne	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d021      	beq.n	80018e4 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a44      	ldr	r2, [pc, #272]	@ (80019b8 <HAL_ADC_Init+0x268>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x15e>
 80018aa:	4a44      	ldr	r2, [pc, #272]	@ (80019bc <HAL_ADC_Init+0x26c>)
 80018ac:	e000      	b.n	80018b0 <HAL_ADC_Init+0x160>
 80018ae:	4a44      	ldr	r2, [pc, #272]	@ (80019c0 <HAL_ADC_Init+0x270>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f7ff fe4c 	bl	8001554 <LL_ADC_SetCommonClock>
 80018bc:	e012      	b.n	80018e4 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f7ff fe57 	bl	800157c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80018ce:	4b3c      	ldr	r3, [pc, #240]	@ (80019c0 <HAL_ADC_Init+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80018de:	4938      	ldr	r1, [pc, #224]	@ (80019c0 <HAL_ADC_Init+0x270>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a30      	ldr	r2, [pc, #192]	@ (80019ac <HAL_ADC_Init+0x25c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d010      	beq.n	8001910 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018f4:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80018fa:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001900:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001908:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800190a:	4313      	orrs	r3, r2
 800190c:	623b      	str	r3, [r7, #32]
 800190e:	e030      	b.n	8001972 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7f1b      	ldrb	r3, [r3, #28]
 8001914:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800191c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800191e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001924:	2a00      	cmp	r2, #0
 8001926:	d002      	beq.n	800192e <HAL_ADC_Init+0x1de>
 8001928:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800192c:	e000      	b.n	8001930 <HAL_ADC_Init+0x1e0>
 800192e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001930:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001936:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	da04      	bge.n	800194a <HAL_ADC_Init+0x1fa>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001948:	e001      	b.n	800194e <HAL_ADC_Init+0x1fe>
 800194a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800194e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4918      	ldr	r1, [pc, #96]	@ (80019b8 <HAL_ADC_Init+0x268>)
 8001956:	428b      	cmp	r3, r1
 8001958:	d103      	bne.n	8001962 <HAL_ADC_Init+0x212>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001960:	e003      	b.n	800196a <HAL_ADC_Init+0x21a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001968:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800196a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800196c:	6a3a      	ldr	r2, [r7, #32]
 800196e:	4313      	orrs	r3, r2
 8001970:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001978:	2b01      	cmp	r3, #1
 800197a:	d12f      	bne.n	80019dc <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_ADC_Init+0x25c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	3b01      	subs	r3, #1
 800198c:	045b      	lsls	r3, r3, #17
 800198e:	6a3a      	ldr	r2, [r7, #32]
 8001990:	4313      	orrs	r3, r2
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	e022      	b.n	80019dc <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d111      	bne.n	80019c4 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	e018      	b.n	80019dc <HAL_ADC_Init+0x28c>
 80019aa:	bf00      	nop
 80019ac:	46021000 	.word	0x46021000
 80019b0:	20000000 	.word	0x20000000
 80019b4:	053e2d63 	.word	0x053e2d63
 80019b8:	42028000 	.word	0x42028000
 80019bc:	42028308 	.word	0x42028308
 80019c0:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80019c8:	f043 0220 	orr.w	r2, r3, #32
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a92      	ldr	r2, [pc, #584]	@ (8001c2c <HAL_ADC_Init+0x4dc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d018      	beq.n	8001a18 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fa:	4313      	orrs	r3, r2
 80019fc:	6a3a      	ldr	r2, [r7, #32]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b89      	ldr	r3, [pc, #548]	@ (8001c30 <HAL_ADC_Init+0x4e0>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	6a39      	ldr	r1, [r7, #32]
 8001a12:	430b      	orrs	r3, r1
 8001a14:	60d3      	str	r3, [r2, #12]
 8001a16:	e031      	b.n	8001a7c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a24:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	6a3a      	ldr	r2, [r7, #32]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c34 <HAL_ADC_Init+0x4e4>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	6a39      	ldr	r1, [r7, #32]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a6a      	ldr	r2, [pc, #424]	@ (8001c2c <HAL_ADC_Init+0x4dc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	f000 8093 	beq.w	8001bae <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fe38 	bl	8001702 <LL_ADC_REG_IsConversionOngoing>
 8001a92:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fe45 	bl	8001728 <LL_ADC_INJ_IsConversionOngoing>
 8001a9e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d161      	bne.n	8001b6a <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d15e      	bne.n	8001b6a <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7f1b      	ldrb	r3, [r3, #28]
 8001ab0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4960      	ldr	r1, [pc, #384]	@ (8001c38 <HAL_ADC_Init+0x4e8>)
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	d102      	bne.n	8001ac2 <HAL_ADC_Init+0x372>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_Init+0x378>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac6:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ad6:	f023 0303 	bic.w	r3, r3, #3
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	6a39      	ldr	r1, [r7, #32]
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f7ff fd60 	bl	80015bc <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d11e      	bne.n	8001b44 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b0a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <HAL_ADC_Init+0x4ec>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b1a:	0411      	lsls	r1, r2, #16
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b20:	4311      	orrs	r1, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001b26:	4311      	orrs	r1, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001b2c:	4311      	orrs	r1, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001b32:	0892      	lsrs	r2, r2, #2
 8001b34:	430a      	orrs	r2, r1
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	e007      	b.n	8001b54 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d10c      	bne.n	8001b8c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b78:	f023 010f 	bic.w	r1, r3, #15
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b8a:	e007      	b.n	8001b9c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 020f 	bic.w	r2, r2, #15
 8001b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001ba0:	f023 0303 	bic.w	r3, r3, #3
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001bac:	e092      	b.n	8001cd4 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d111      	bne.n	8001bdc <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001bc0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001bc6:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001bcc:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <HAL_ADC_Init+0x4f0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	69f9      	ldr	r1, [r7, #28]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	f7ff fd01 	bl	8001602 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8001c0e:	f7ff fcf8 	bl	8001602 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d114      	bne.n	8001c44 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f062 020f 	orn	r2, r2, #15
 8001c28:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c2a:	e024      	b.n	8001c76 <HAL_ADC_Init+0x526>
 8001c2c:	46021000 	.word	0x46021000
 8001c30:	fff0c013 	.word	0xfff0c013
 8001c34:	ffde800d 	.word	0xffde800d
 8001c38:	42028000 	.word	0x42028000
 8001c3c:	fc00f81e 	.word	0xfc00f81e
 8001c40:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c4c:	d113      	bne.n	8001c76 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f003 031c 	and.w	r3, r3, #28
 8001c60:	f06f 020f 	mvn.w	r2, #15
 8001c64:	fa02 f103 	lsl.w	r1, r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_ADC_Init+0x590>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d10b      	bne.n	8001c9e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c90:	f023 0303 	bic.w	r3, r3, #3
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c9c:	e01a      	b.n	8001cd4 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001ca2:	f023 0312 	bic.w	r3, r3, #18
 8001ca6:	f043 0210 	orr.w	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001cc0:	e008      	b.n	8001cd4 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cc6:	f043 0210 	orr.w	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3728      	adds	r7, #40	@ 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	833ffff3 	.word	0x833ffff3

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ff4c 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e62:	f7ff ff63 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001e66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f7ff ffb3 	bl	8001dd8 <NVIC_EncodePriority>
 8001e72:	4602      	mov	r2, r0
 8001e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff82 	bl	8001d84 <__NVIC_SetPriority>
}
 8001e80:	bf00      	nop
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff56 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00d      	b.n	8001ed6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001eba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <HAL_SYSTICK_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <HAL_SYSTICK_Config+0x40>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_SYSTICK_Config+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <HAL_SYSTICK_Config+0x40>)
 8001ece:	f043 0303 	orr.w	r3, r3, #3
 8001ed2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d844      	bhi.n	8001f80 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8001efc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f1f 	.word	0x08001f1f
 8001f00:	08001f3d 	.word	0x08001f3d
 8001f04:	08001f5f 	.word	0x08001f5f
 8001f08:	08001f81 	.word	0x08001f81
 8001f0c:	08001f11 	.word	0x08001f11
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f10:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6013      	str	r3, [r2, #0]
      break;
 8001f1c:	e031      	b.n	8001f82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1b      	ldr	r2, [pc, #108]	@ (8001f90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f30:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f32:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f3a:	e022      	b.n	8001f82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f3c:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f42:	f023 0304 	bic.w	r3, r3, #4
 8001f46:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f52:	4a10      	ldr	r2, [pc, #64]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f5c:	e011      	b.n	8001f82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a0b      	ldr	r2, [pc, #44]	@ (8001f90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f70:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f74:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f7e:	e000      	b.n	8001f82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001f80:	bf00      	nop
  }
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010
 8001f94:	46020c00 	.word	0x46020c00

08001f98 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001f9e:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001faa:	2304      	movs	r3, #4
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	e021      	b.n	8001ff4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001fb0:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001fba:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fc2:	d011      	beq.n	8001fe8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fca:	d810      	bhi.n	8001fee <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fd8:	d003      	beq.n	8001fe2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001fda:	e008      	b.n	8001fee <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
        break;
 8001fe0:	e008      	b.n	8001ff4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
        break;
 8001fe6:	e005      	b.n	8001ff4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	607b      	str	r3, [r7, #4]
        break;
 8001fec:	e002      	b.n	8001ff4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
        break;
 8001ff2:	bf00      	nop
    }
  }
  return systick_source;
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e010 	.word	0xe000e010
 8002008:	46020c00 	.word	0x46020c00

0800200c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800201e:	e1ba      	b.n	8002396 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 81aa 	beq.w	8002390 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a55      	ldr	r2, [pc, #340]	@ (8002194 <HAL_GPIO_Init+0x188>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d15d      	bne.n	8002100 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800204a:	2201      	movs	r2, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	4013      	ands	r3, r2
 8002058:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	4313      	orrs	r3, r2
 800206c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002074:	4a48      	ldr	r2, [pc, #288]	@ (8002198 <HAL_GPIO_Init+0x18c>)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800207c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800207e:	4a46      	ldr	r2, [pc, #280]	@ (8002198 <HAL_GPIO_Init+0x18c>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	3208      	adds	r2, #8
 8002092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002096:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220b      	movs	r2, #11
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	3208      	adds	r2, #8
 80020ca:	69f9      	ldr	r1, [r7, #28]
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2202      	movs	r2, #2
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e067      	b.n	80021d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x104>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b12      	cmp	r3, #18
 800210e:	d145      	bne.n	800219c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	4013      	ands	r3, r2
 8002132:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f003 020f 	and.w	r2, r3, #15
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	4313      	orrs	r3, r2
 800214c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	69f9      	ldr	r1, [r7, #28]
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	4013      	ands	r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	4313      	orrs	r3, r2
 8002188:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e01e      	b.n	80021d0 <HAL_GPIO_Init+0x1c4>
 8002192:	bf00      	nop
 8002194:	46020000 	.word	0x46020000
 8002198:	08009a48 	.word	0x08009a48
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d00b      	beq.n	80021f0 <HAL_GPIO_Init+0x1e4>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d007      	beq.n	80021f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e4:	2b11      	cmp	r3, #17
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b12      	cmp	r3, #18
 80021ee:	d130      	bne.n	8002252 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	4013      	ands	r3, r2
 8002206:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	4313      	orrs	r3, r2
 8002218:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002226:	2201      	movs	r2, #1
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	4013      	ands	r3, r2
 8002234:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 0201 	and.w	r2, r3, #1
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	4313      	orrs	r3, r2
 800224a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d017      	beq.n	800228a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	4013      	ands	r3, r2
 8002270:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	4313      	orrs	r3, r2
 8002282:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d07c      	beq.n	8002390 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002296:	4a47      	ldr	r2, [pc, #284]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3318      	adds	r3, #24
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0a9a      	lsrs	r2, r3, #10
 80022be:	4b3e      	ldr	r3, [pc, #248]	@ (80023b8 <HAL_GPIO_Init+0x3ac>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	f002 0203 	and.w	r2, r2, #3
 80022c8:	00d2      	lsls	r2, r2, #3
 80022ca:	4093      	lsls	r3, r2
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022d2:	4938      	ldr	r1, [pc, #224]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3318      	adds	r3, #24
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022e0:	4b34      	ldr	r3, [pc, #208]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002304:	4a2b      	ldr	r2, [pc, #172]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800230a:	4b2a      	ldr	r3, [pc, #168]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43db      	mvns	r3, r3
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	4013      	ands	r3, r2
 8002318:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800232e:	4a21      	ldr	r2, [pc, #132]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002334:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 8002336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800233a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43db      	mvns	r3, r3
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	4013      	ands	r3, r2
 8002344:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800235a:	4a16      	ldr	r2, [pc, #88]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 8002364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002368:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	4013      	ands	r3, r2
 8002372:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_GPIO_Init+0x3a8>)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3301      	adds	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f47f ae3d 	bne.w	8002020 <HAL_GPIO_Init+0x14>
  }
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	3724      	adds	r7, #36	@ 0x24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	46022000 	.word	0x46022000
 80023b8:	002f7f7f 	.word	0x002f7f7f

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e007      	b.n	800241a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800240a:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 0204 	bic.w	r2, r3, #4
 8002412:	4905      	ldr	r1, [pc, #20]	@ (8002428 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
  }

  return status;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40030400 	.word	0x40030400

0800242c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <HAL_ICACHE_Enable+0x1c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_ICACHE_Enable+0x1c>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40030400 	.word	0x40030400

0800244c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e108      	b.n	8002670 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7fe fd03 	bl	8000e84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4a7b      	ldr	r2, [pc, #492]	@ (8002678 <HAL_PCD_Init+0x22c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d102      	bne.n	8002494 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f006 fd73 	bl	8008f84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7c1a      	ldrb	r2, [r3, #16]
 80024a6:	f88d 2000 	strb.w	r2, [sp]
 80024aa:	3304      	adds	r3, #4
 80024ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ae:	f006 fc9a 	bl	8008de6 <USB_CoreInit>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0d5      	b.n	8002670 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f006 fd6b 	bl	8008fa6 <USB_SetCurrentMode>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0c6      	b.n	8002670 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e04a      	b.n	800257e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3315      	adds	r3, #21
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3314      	adds	r3, #20
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	b298      	uxth	r0, r3
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	332e      	adds	r3, #46	@ 0x2e
 8002524:	4602      	mov	r2, r0
 8002526:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3318      	adds	r3, #24
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	331c      	adds	r3, #28
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3320      	adds	r3, #32
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3324      	adds	r3, #36	@ 0x24
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	3301      	adds	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	791b      	ldrb	r3, [r3, #4]
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3af      	bcc.n	80024e8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e044      	b.n	8002618 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	3301      	adds	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	791b      	ldrb	r3, [r3, #4]
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	429a      	cmp	r2, r3
 8002620:	d3b5      	bcc.n	800258e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7c1a      	ldrb	r2, [r3, #16]
 800262a:	f88d 2000 	strb.w	r2, [sp]
 800262e:	3304      	adds	r3, #4
 8002630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002632:	f006 fd05 	bl	8009040 <USB_DevInit>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e013      	b.n	8002670 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7b1b      	ldrb	r3, [r3, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 ff3c 	bl	80034dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f007 f813 	bl	8009694 <USB_DevDisconnect>

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	42040000 	.word	0x42040000

0800267c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b08d      	sub	sp, #52	@ 0x34
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f007 f8b2 	bl	80097fc <USB_GetMode>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 84b9 	bne.w	8003012 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f007 f816 	bl	80096d6 <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 84af 	beq.w	8003010 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f007 f803 	bl	80096d6 <USB_ReadInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d107      	bne.n	80026ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f002 0202 	and.w	r2, r2, #2
 80026e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f006 fff1 	bl	80096d6 <USB_ReadInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d161      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0210 	bic.w	r2, r2, #16
 800270c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f003 020f 	and.w	r2, r3, #15
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	3304      	adds	r3, #4
 800272c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	0c5b      	lsrs	r3, r3, #17
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	2b02      	cmp	r3, #2
 8002738:	d124      	bne.n	8002784 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d035      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002750:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	6a38      	ldr	r0, [r7, #32]
 800275a:	f006 ff43 	bl	80095e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276a:	441a      	add	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277c:	441a      	add	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	615a      	str	r2, [r3, #20]
 8002782:	e016      	b.n	80027b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	0c5b      	lsrs	r3, r3, #17
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	2b06      	cmp	r3, #6
 800278e:	d110      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002796:	2208      	movs	r2, #8
 8002798:	4619      	mov	r1, r3
 800279a:	6a38      	ldr	r0, [r7, #32]
 800279c:	f006 ff22 	bl	80095e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ac:	441a      	add	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0210 	orr.w	r2, r2, #16
 80027c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f006 ff85 	bl	80096d6 <USB_ReadInterrupts>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027d6:	f040 80a7 	bne.w	8002928 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f006 ff8a 	bl	80096fc <USB_ReadDevAllOutEpInterrupt>
 80027e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027ea:	e099      	b.n	8002920 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 808e 	beq.w	8002914 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f006 ffae 	bl	8009764 <USB_ReadDevOutEPInterrupt>
 8002808:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00c      	beq.n	800282e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002820:	461a      	mov	r2, r3
 8002822:	2301      	movs	r3, #1
 8002824:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002826:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fd29 	bl	8003280 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00c      	beq.n	8002852 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	4413      	add	r3, r2
 8002840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002844:	461a      	mov	r2, r3
 8002846:	2308      	movs	r3, #8
 8002848:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800284a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fdff 	bl	8003450 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002868:	461a      	mov	r2, r3
 800286a:	2310      	movs	r3, #16
 800286c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d030      	beq.n	80028da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002880:	2b80      	cmp	r3, #128	@ 0x80
 8002882:	d109      	bne.n	8002898 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002896:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	3304      	adds	r3, #4
 80028ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	78db      	ldrb	r3, [r3, #3]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d108      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fbf2 	bl	80030ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d4:	461a      	mov	r2, r3
 80028d6:	2302      	movs	r3, #2
 80028d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f0:	461a      	mov	r2, r3
 80028f2:	2320      	movs	r3, #32
 80028f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800290c:	461a      	mov	r2, r3
 800290e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002912:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	3301      	adds	r3, #1
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800291a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	2b00      	cmp	r3, #0
 8002924:	f47f af62 	bne.w	80027ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f006 fed2 	bl	80096d6 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002938:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800293c:	f040 80db 	bne.w	8002af6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f006 fef3 	bl	8009730 <USB_ReadDevAllInEpInterrupt>
 800294a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002950:	e0cd      	b.n	8002aee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80c2 	beq.w	8002ae2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f006 ff19 	bl	80097a0 <USB_ReadDevInEPInterrupt>
 800296e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d057      	beq.n	8002a2a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	2201      	movs	r2, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800298e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43db      	mvns	r3, r3
 8002994:	69f9      	ldr	r1, [r7, #28]
 8002996:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800299a:	4013      	ands	r3, r2
 800299c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029aa:	461a      	mov	r2, r3
 80029ac:	2301      	movs	r3, #1
 80029ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	799b      	ldrb	r3, [r3, #6]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d132      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3320      	adds	r3, #32
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4403      	add	r3, r0
 80029d8:	331c      	adds	r3, #28
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4419      	add	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4403      	add	r3, r0
 80029ec:	3320      	adds	r3, #32
 80029ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d113      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x3a2>
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3324      	adds	r3, #36	@ 0x24
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d108      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a16:	461a      	mov	r2, r3
 8002a18:	2101      	movs	r1, #1
 8002a1a:	f006 ff21 	bl	8009860 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fb03 	bl	8003030 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a40:	461a      	mov	r2, r3
 8002a42:	2308      	movs	r3, #8
 8002a44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2310      	movs	r3, #16
 8002a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2340      	movs	r3, #64	@ 0x40
 8002a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d023      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a8a:	6a38      	ldr	r0, [r7, #32]
 8002a8c:	f006 fc24 	bl	80092d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	78db      	ldrb	r3, [r3, #3]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d108      	bne.n	8002abe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fb03 	bl	80030c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aca:	461a      	mov	r2, r3
 8002acc:	2302      	movs	r3, #2
 8002ace:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ada:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fb42 	bl	8003166 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f47f af2e 	bne.w	8002952 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f006 fdeb 	bl	80096d6 <USB_ReadInterrupts>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b0a:	d122      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d108      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b32:	2100      	movs	r1, #0
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fcf5 	bl	8003524 <HAL_PCDEx_LPM_Callback>
 8002b3a:	e002      	b.n	8002b42 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 faab 	bl	8003098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f006 fdbd 	bl	80096d6 <USB_ReadInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b66:	d112      	bne.n	8002b8e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d102      	bne.n	8002b7e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fa83 	bl	8003084 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f006 fd9f 	bl	80096d6 <USB_ReadInterrupts>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ba2:	d121      	bne.n	8002be8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002bb2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d111      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bd8:	2101      	movs	r1, #1
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fca2 	bl	8003524 <HAL_PCDEx_LPM_Callback>
 8002be0:	e002      	b.n	8002be8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa4e 	bl	8003084 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f006 fd72 	bl	80096d6 <USB_ReadInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bfc:	f040 80b7 	bne.w	8002d6e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2110      	movs	r1, #16
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f006 fb5c 	bl	80092d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c24:	e046      	b.n	8002cb4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c32:	461a      	mov	r2, r3
 8002c34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c38:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c4a:	0151      	lsls	r1, r2, #5
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	440a      	add	r2, r1
 8002c50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c66:	461a      	mov	r2, r3
 8002c68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c6c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c7e:	0151      	lsls	r1, r2, #5
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	440a      	add	r2, r1
 8002c84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c9e:	0151      	lsls	r1, r2, #5
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	440a      	add	r2, r1
 8002ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ca8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	791b      	ldrb	r3, [r3, #4]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d3b2      	bcc.n	8002c26 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cce:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cd2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7bdb      	ldrb	r3, [r3, #15]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d016      	beq.n	8002d0a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cec:	f043 030b 	orr.w	r3, r3, #11
 8002cf0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d02:	f043 030b 	orr.w	r3, r3, #11
 8002d06:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d08:	e015      	b.n	8002d36 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d1c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d20:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d30:	f043 030b 	orr.w	r3, r3, #11
 8002d34:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d44:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d48:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f006 fd81 	bl	8009860 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f006 fcaf 	bl	80096d6 <USB_ReadInterrupts>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d82:	d123      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f006 fd45 	bl	8009818 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f006 fb19 	bl	80093ca <USB_GetDevSpeed>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681c      	ldr	r4, [r3, #0]
 8002da4:	f001 fea6 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8002da8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dae:	461a      	mov	r2, r3
 8002db0:	4620      	mov	r0, r4
 8002db2:	f006 f845 	bl	8008e40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f95a 	bl	8003070 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f006 fc80 	bl	80096d6 <USB_ReadInterrupts>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d10a      	bne.n	8002df6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f93b 	bl	800305c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f002 0208 	and.w	r2, r2, #8
 8002df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f006 fc6b 	bl	80096d6 <USB_ReadInterrupts>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e06:	2b80      	cmp	r3, #128	@ 0x80
 8002e08:	d123      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e16:	2301      	movs	r3, #1
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1a:	e014      	b.n	8002e46 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f962 	bl	8003104 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	3301      	adds	r3, #1
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	791b      	ldrb	r3, [r3, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d3e4      	bcc.n	8002e1c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f006 fc3d 	bl	80096d6 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e66:	d13c      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e68:	2301      	movs	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6c:	e02b      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3318      	adds	r3, #24
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d115      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da12      	bge.n	8002ec0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3317      	adds	r3, #23
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f922 	bl	8003104 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	791b      	ldrb	r3, [r3, #4]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d3cd      	bcc.n	8002e6e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f006 fbf5 	bl	80096d6 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ef6:	d156      	bne.n	8002fa6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef8:	2301      	movs	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efc:	e045      	b.n	8002f8a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d12e      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	da2b      	bge.n	8002f84 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f38:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d121      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f80:	6053      	str	r3, [r2, #4]
            break;
 8002f82:	e008      	b.n	8002f96 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	3301      	adds	r3, #1
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	791b      	ldrb	r3, [r3, #4]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d3b3      	bcc.n	8002efe <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f006 fb93 	bl	80096d6 <USB_ReadInterrupts>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fba:	d10a      	bne.n	8002fd2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f88d 	bl	80030dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f006 fb7d 	bl	80096d6 <USB_ReadInterrupts>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d115      	bne.n	8003012 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f879 	bl	80030f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	e000      	b.n	8003012 <HAL_PCD_IRQHandler+0x996>
      return;
 8003010:	bf00      	nop
    }
  }
}
 8003012:	3734      	adds	r7, #52	@ 0x34
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}

08003018 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003114:	2b00      	cmp	r3, #0
 8003116:	da0c      	bge.n	8003132 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	3310      	adds	r3, #16
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	3304      	adds	r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e00c      	b.n	800314c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 020f 	and.w	r2, r3, #15
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68f9      	ldr	r1, [r7, #12]
 8003152:	4618      	mov	r0, r3
 8003154:	f006 f95e 	bl	8009414 <USB_EPStopXfer>
 8003158:	4603      	mov	r3, r0
 800315a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800315c:	7afb      	ldrb	r3, [r7, #11]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08a      	sub	sp, #40	@ 0x28
 800316a:	af02      	add	r7, sp, #8
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	3310      	adds	r3, #16
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	429a      	cmp	r2, r3
 8003198:	d901      	bls.n	800319e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06b      	b.n	8003276 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d902      	bls.n	80031ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3303      	adds	r3, #3
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031c2:	e02a      	b.n	800321a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d902      	bls.n	80031e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	3303      	adds	r3, #3
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68d9      	ldr	r1, [r3, #12]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	4603      	mov	r3, r0
 80031fc:	6978      	ldr	r0, [r7, #20]
 80031fe:	f006 f9b3 	bl	8009568 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	441a      	add	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	441a      	add	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	429a      	cmp	r2, r3
 800322e:	d809      	bhi.n	8003244 <PCD_WriteEmptyTxFifo+0xde>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003238:	429a      	cmp	r2, r3
 800323a:	d203      	bcs.n	8003244 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1bf      	bne.n	80031c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	429a      	cmp	r2, r3
 800324e:	d811      	bhi.n	8003274 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	2201      	movs	r2, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	43db      	mvns	r3, r3
 800326a:	6939      	ldr	r1, [r7, #16]
 800326c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003270:	4013      	ands	r3, r2
 8003272:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	333c      	adds	r3, #60	@ 0x3c
 8003298:	3304      	adds	r3, #4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	799b      	ldrb	r3, [r3, #6]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d17b      	bne.n	80033ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4a61      	ldr	r2, [pc, #388]	@ (8003448 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	f240 80b9 	bls.w	800343c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80b3 	beq.w	800343c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e2:	461a      	mov	r2, r3
 80032e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032e8:	6093      	str	r3, [r2, #8]
 80032ea:	e0a7      	b.n	800343c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003302:	461a      	mov	r2, r3
 8003304:	2320      	movs	r3, #32
 8003306:	6093      	str	r3, [r2, #8]
 8003308:	e098      	b.n	800343c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	f040 8093 	bne.w	800343c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	4a4b      	ldr	r2, [pc, #300]	@ (8003448 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d90f      	bls.n	800333e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800333a:	6093      	str	r3, [r2, #8]
 800333c:	e07e      	b.n	800343c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	3304      	adds	r3, #4
 8003352:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1a      	ldr	r2, [r3, #32]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	0159      	lsls	r1, r3, #5
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	440b      	add	r3, r1
 8003360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336a:	1ad2      	subs	r2, r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d114      	bne.n	80033a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003388:	461a      	mov	r2, r3
 800338a:	2101      	movs	r1, #1
 800338c:	f006 fa68 	bl	8009860 <USB_EP0_OutStart>
 8003390:	e006      	b.n	80033a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	441a      	add	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	4619      	mov	r1, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff fe36 	bl	8003018 <HAL_PCD_DataOutStageCallback>
 80033ac:	e046      	b.n	800343c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	4a26      	ldr	r2, [pc, #152]	@ (800344c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d124      	bne.n	8003400 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033cc:	461a      	mov	r2, r3
 80033ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033d2:	6093      	str	r3, [r2, #8]
 80033d4:	e032      	b.n	800343c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ec:	461a      	mov	r2, r3
 80033ee:	2320      	movs	r3, #32
 80033f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fe0d 	bl	8003018 <HAL_PCD_DataOutStageCallback>
 80033fe:	e01d      	b.n	800343c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d114      	bne.n	8003430 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d108      	bne.n	8003430 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003428:	461a      	mov	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	f006 fa18 	bl	8009860 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fdee 	bl	8003018 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	4f54300a 	.word	0x4f54300a
 800344c:	4f54310a 	.word	0x4f54310a

08003450 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	333c      	adds	r3, #60	@ 0x3c
 8003468:	3304      	adds	r3, #4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4a15      	ldr	r2, [pc, #84]	@ (80034d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d90e      	bls.n	80034a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800349c:	461a      	mov	r2, r3
 800349e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff fdcf 	bl	8003048 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	@ (80034d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d90c      	bls.n	80034cc <PCD_EP_OutSetupPacket_int+0x7c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	799b      	ldrb	r3, [r3, #6]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d108      	bne.n	80034cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034c4:	461a      	mov	r2, r3
 80034c6:	2101      	movs	r1, #1
 80034c8:	f006 f9ca 	bl	8009860 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	4f54300a 	.word	0x4f54300a

080034dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800350e:	f043 0303 	orr.w	r3, r3, #3
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003544:	4b39      	ldr	r3, [pc, #228]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800354c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d10b      	bne.n	800356e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355c:	d905      	bls.n	800356a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800355e:	4b33      	ldr	r3, [pc, #204]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4a32      	ldr	r2, [pc, #200]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003568:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	e057      	b.n	800361e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003574:	d90a      	bls.n	800358c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003576:	4b2d      	ldr	r3, [pc, #180]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4313      	orrs	r3, r2
 8003582:	4a2a      	ldr	r2, [pc, #168]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003588:	60d3      	str	r3, [r2, #12]
 800358a:	e007      	b.n	800359c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800358c:	4b27      	ldr	r3, [pc, #156]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003594:	4925      	ldr	r1, [pc, #148]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4313      	orrs	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800359c:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a24      	ldr	r2, [pc, #144]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	2232      	movs	r2, #50	@ 0x32
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	4a21      	ldr	r2, [pc, #132]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	3301      	adds	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035ba:	e002      	b.n	80035c2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3b01      	subs	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035c2:	4b1a      	ldr	r3, [pc, #104]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f3      	bne.n	80035bc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01b      	beq.n	8003612 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035da:	4b15      	ldr	r3, [pc, #84]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a15      	ldr	r2, [pc, #84]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	2232      	movs	r2, #50	@ 0x32
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	4a11      	ldr	r2, [pc, #68]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	3301      	adds	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80035f8:	e002      	b.n	8003600 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003600:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f3      	bne.n	80035fa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e000      	b.n	800361e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	46020800 	.word	0x46020800
 8003630:	20000000 	.word	0x20000000
 8003634:	10624dd3 	.word	0x10624dd3

08003638 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <HAL_PWREx_GetVoltageRange+0x18>)
 800363e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	46020800 	.word	0x46020800

08003654 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800365c:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <HAL_PWREx_ConfigSupply+0x94>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a22      	ldr	r2, [pc, #136]	@ (80036ec <HAL_PWREx_ConfigSupply+0x98>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	2232      	movs	r2, #50	@ 0x32
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	4a1f      	ldr	r2, [pc, #124]	@ (80036ec <HAL_PWREx_ConfigSupply+0x98>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	3301      	adds	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d113      	bne.n	80036a8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a1a      	ldr	r2, [pc, #104]	@ (80036f0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003686:	f023 0302 	bic.w	r3, r3, #2
 800368a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800368c:	e002      	b.n	8003694 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3b01      	subs	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003694:	4b16      	ldr	r3, [pc, #88]	@ (80036f0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d116      	bne.n	80036ce <HAL_PWREx_ConfigSupply+0x7a>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f3      	bne.n	800368e <HAL_PWREx_ConfigSupply+0x3a>
 80036a6:	e012      	b.n	80036ce <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80036a8:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <HAL_PWREx_ConfigSupply+0x9c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a10      	ldr	r2, [pc, #64]	@ (80036f0 <HAL_PWREx_ConfigSupply+0x9c>)
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80036b4:	e002      	b.n	80036bc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80036bc:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <HAL_PWREx_ConfigSupply+0x9c>)
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <HAL_PWREx_ConfigSupply+0x7a>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f3      	bne.n	80036b6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e000      	b.n	80036da <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000
 80036ec:	10624dd3 	.word	0x10624dd3
 80036f0:	46020800 	.word	0x46020800

080036f4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4a04      	ldr	r2, [pc, #16]	@ (8003710 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003702:	6113      	str	r3, [r2, #16]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	46020800 	.word	0x46020800

08003714 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_PWREx_EnableVddIO2+0x1c>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	4a04      	ldr	r2, [pc, #16]	@ (8003730 <HAL_PWREx_EnableVddIO2+0x1c>)
 800371e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003722:	6113      	str	r3, [r2, #16]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	46020800 	.word	0x46020800

08003734 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <HAL_PWREx_EnableVddA+0x1c>)
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	4a04      	ldr	r2, [pc, #16]	@ (8003750 <HAL_PWREx_EnableVddA+0x1c>)
 800373e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003742:	6113      	str	r3, [r2, #16]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	46020800 	.word	0x46020800

08003754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	@ 0x38
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800375c:	2300      	movs	r3, #0
 800375e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f000 bec8 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376e:	4b99      	ldr	r3, [pc, #612]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003778:	4b96      	ldr	r3, [pc, #600]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 800377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 816c 	beq.w	8003a68 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_RCC_OscConfig+0x52>
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	2b0c      	cmp	r3, #12
 800379a:	f040 80de 	bne.w	800395a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800379e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	f040 80da 	bne.w	800395a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f000 bea5 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037b8:	4b86      	ldr	r3, [pc, #536]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <HAL_RCC_OscConfig+0x7a>
 80037c4:	4b83      	ldr	r3, [pc, #524]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037cc:	e005      	b.n	80037da <HAL_RCC_OscConfig+0x86>
 80037ce:	4b81      	ldr	r3, [pc, #516]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037d4:	041b      	lsls	r3, r3, #16
 80037d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037da:	4293      	cmp	r3, r2
 80037dc:	d255      	bcs.n	800388a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 f9d9 	bl	8004ba0 <RCC_SetFlashLatencyFromMSIRange>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f000 be82 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80037fa:	4b76      	ldr	r3, [pc, #472]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4a75      	ldr	r2, [pc, #468]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003800:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003804:	6093      	str	r3, [r2, #8]
 8003806:	4b73      	ldr	r3, [pc, #460]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	4970      	ldr	r1, [pc, #448]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003820:	d309      	bcc.n	8003836 <HAL_RCC_OscConfig+0xe2>
 8003822:	4b6c      	ldr	r3, [pc, #432]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f023 021f 	bic.w	r2, r3, #31
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4969      	ldr	r1, [pc, #420]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003830:	4313      	orrs	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
 8003834:	e07e      	b.n	8003934 <HAL_RCC_OscConfig+0x1e0>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	da0a      	bge.n	8003854 <HAL_RCC_OscConfig+0x100>
 800383e:	4b65      	ldr	r3, [pc, #404]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	015b      	lsls	r3, r3, #5
 800384c:	4961      	ldr	r1, [pc, #388]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 800384e:	4313      	orrs	r3, r2
 8003850:	60cb      	str	r3, [r1, #12]
 8003852:	e06f      	b.n	8003934 <HAL_RCC_OscConfig+0x1e0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385c:	d30a      	bcc.n	8003874 <HAL_RCC_OscConfig+0x120>
 800385e:	4b5d      	ldr	r3, [pc, #372]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	029b      	lsls	r3, r3, #10
 800386c:	4959      	ldr	r1, [pc, #356]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 800386e:	4313      	orrs	r3, r2
 8003870:	60cb      	str	r3, [r1, #12]
 8003872:	e05f      	b.n	8003934 <HAL_RCC_OscConfig+0x1e0>
 8003874:	4b57      	ldr	r3, [pc, #348]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	03db      	lsls	r3, r3, #15
 8003882:	4954      	ldr	r1, [pc, #336]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003884:	4313      	orrs	r3, r2
 8003886:	60cb      	str	r3, [r1, #12]
 8003888:	e054      	b.n	8003934 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800388a:	4b52      	ldr	r3, [pc, #328]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4a51      	ldr	r2, [pc, #324]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003890:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003894:	6093      	str	r3, [r2, #8]
 8003896:	4b4f      	ldr	r3, [pc, #316]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	494c      	ldr	r1, [pc, #304]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80038b0:	d309      	bcc.n	80038c6 <HAL_RCC_OscConfig+0x172>
 80038b2:	4b48      	ldr	r3, [pc, #288]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f023 021f 	bic.w	r2, r3, #31
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4945      	ldr	r1, [pc, #276]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60cb      	str	r3, [r1, #12]
 80038c4:	e028      	b.n	8003918 <HAL_RCC_OscConfig+0x1c4>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	da0a      	bge.n	80038e4 <HAL_RCC_OscConfig+0x190>
 80038ce:	4b41      	ldr	r3, [pc, #260]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	015b      	lsls	r3, r3, #5
 80038dc:	493d      	ldr	r1, [pc, #244]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	60cb      	str	r3, [r1, #12]
 80038e2:	e019      	b.n	8003918 <HAL_RCC_OscConfig+0x1c4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ec:	d30a      	bcc.n	8003904 <HAL_RCC_OscConfig+0x1b0>
 80038ee:	4b39      	ldr	r3, [pc, #228]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	029b      	lsls	r3, r3, #10
 80038fc:	4935      	ldr	r1, [pc, #212]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	60cb      	str	r3, [r1, #12]
 8003902:	e009      	b.n	8003918 <HAL_RCC_OscConfig+0x1c4>
 8003904:	4b33      	ldr	r3, [pc, #204]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	03db      	lsls	r3, r3, #15
 8003912:	4930      	ldr	r1, [pc, #192]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003914:	4313      	orrs	r3, r2
 8003916:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	4618      	mov	r0, r3
 8003924:	f001 f93c 	bl	8004ba0 <RCC_SetFlashLatencyFromMSIRange>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f000 bde5 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003934:	f001 f8de 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003938:	4b27      	ldr	r3, [pc, #156]	@ (80039d8 <HAL_RCC_OscConfig+0x284>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7fd fd4f 	bl	80013e0 <HAL_InitTick>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 808a 	beq.w	8003a66 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003956:	f000 bdd2 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d066      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003962:	4b1c      	ldr	r3, [pc, #112]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1b      	ldr	r2, [pc, #108]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800396e:	f7fd fdc1 	bl	80014f4 <HAL_GetTick>
 8003972:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003974:	e009      	b.n	800398a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003976:	f7fd fdbd 	bl	80014f4 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d902      	bls.n	800398a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	f000 bdba 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800398a:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ef      	beq.n	8003976 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003996:	4b0f      	ldr	r3, [pc, #60]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4a0e      	ldr	r2, [pc, #56]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 800399c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039a0:	6093      	str	r3, [r2, #8]
 80039a2:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	4909      	ldr	r1, [pc, #36]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039bc:	d30e      	bcc.n	80039dc <HAL_RCC_OscConfig+0x288>
 80039be:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f023 021f 	bic.w	r2, r3, #31
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4902      	ldr	r1, [pc, #8]	@ (80039d4 <HAL_RCC_OscConfig+0x280>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60cb      	str	r3, [r1, #12]
 80039d0:	e04a      	b.n	8003a68 <HAL_RCC_OscConfig+0x314>
 80039d2:	bf00      	nop
 80039d4:	46020c00 	.word	0x46020c00
 80039d8:	20000070 	.word	0x20000070
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da0a      	bge.n	80039fa <HAL_RCC_OscConfig+0x2a6>
 80039e4:	4b98      	ldr	r3, [pc, #608]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	015b      	lsls	r3, r3, #5
 80039f2:	4995      	ldr	r1, [pc, #596]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60cb      	str	r3, [r1, #12]
 80039f8:	e036      	b.n	8003a68 <HAL_RCC_OscConfig+0x314>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a02:	d30a      	bcc.n	8003a1a <HAL_RCC_OscConfig+0x2c6>
 8003a04:	4b90      	ldr	r3, [pc, #576]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	029b      	lsls	r3, r3, #10
 8003a12:	498d      	ldr	r1, [pc, #564]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60cb      	str	r3, [r1, #12]
 8003a18:	e026      	b.n	8003a68 <HAL_RCC_OscConfig+0x314>
 8003a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	03db      	lsls	r3, r3, #15
 8003a28:	4987      	ldr	r1, [pc, #540]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60cb      	str	r3, [r1, #12]
 8003a2e:	e01b      	b.n	8003a68 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003a30:	4b85      	ldr	r3, [pc, #532]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a84      	ldr	r2, [pc, #528]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a3c:	f7fd fd5a 	bl	80014f4 <HAL_GetTick>
 8003a40:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a42:	e009      	b.n	8003a58 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a44:	f7fd fd56 	bl	80014f4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	f000 bd53 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a58:	4b7b      	ldr	r3, [pc, #492]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ef      	bne.n	8003a44 <HAL_RCC_OscConfig+0x2f0>
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003a66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 808b 	beq.w	8003b8c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_OscConfig+0x334>
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d17d      	bne.n	8003b8c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f000 bd34 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x35a>
 8003aa0:	4b69      	ldr	r3, [pc, #420]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a68      	ldr	r2, [pc, #416]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e041      	b.n	8003b32 <HAL_RCC_OscConfig+0x3de>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab6:	d112      	bne.n	8003ade <HAL_RCC_OscConfig+0x38a>
 8003ab8:	4b63      	ldr	r3, [pc, #396]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a62      	ldr	r2, [pc, #392]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003abe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b60      	ldr	r3, [pc, #384]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5f      	ldr	r2, [pc, #380]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003aca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b5d      	ldr	r3, [pc, #372]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5c      	ldr	r2, [pc, #368]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e029      	b.n	8003b32 <HAL_RCC_OscConfig+0x3de>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003ae6:	d112      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3ba>
 8003ae8:	4b57      	ldr	r3, [pc, #348]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a56      	ldr	r2, [pc, #344]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003aee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	4b54      	ldr	r3, [pc, #336]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a53      	ldr	r2, [pc, #332]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b51      	ldr	r3, [pc, #324]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a50      	ldr	r2, [pc, #320]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	e011      	b.n	8003b32 <HAL_RCC_OscConfig+0x3de>
 8003b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4d      	ldr	r2, [pc, #308]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b48      	ldr	r3, [pc, #288]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a47      	ldr	r2, [pc, #284]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d014      	beq.n	8003b64 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003b3a:	f7fd fcdb 	bl	80014f4 <HAL_GetTick>
 8003b3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b40:	e009      	b.n	8003b56 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b42:	f7fd fcd7 	bl	80014f4 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b64      	cmp	r3, #100	@ 0x64
 8003b4e:	d902      	bls.n	8003b56 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	f000 bcd4 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b56:	4b3c      	ldr	r3, [pc, #240]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ef      	beq.n	8003b42 <HAL_RCC_OscConfig+0x3ee>
 8003b62:	e013      	b.n	8003b8c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003b64:	f7fd fcc6 	bl	80014f4 <HAL_GetTick>
 8003b68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6a:	e009      	b.n	8003b80 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fcc2 	bl	80014f4 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	@ 0x64
 8003b78:	d902      	bls.n	8003b80 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	f000 bcbf 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b80:	4b31      	ldr	r3, [pc, #196]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ef      	bne.n	8003b6c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d05f      	beq.n	8003c58 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d005      	beq.n	8003baa <HAL_RCC_OscConfig+0x456>
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	2b0c      	cmp	r3, #12
 8003ba2:	d114      	bne.n	8003bce <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d111      	bne.n	8003bce <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f000 bca3 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b23      	ldr	r3, [pc, #140]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	4920      	ldr	r1, [pc, #128]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003bcc:	e044      	b.n	8003c58 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d024      	beq.n	8003c20 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003be2:	f7fd fc87 	bl	80014f4 <HAL_GetTick>
 8003be6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be8:	e009      	b.n	8003bfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bea:	f7fd fc83 	bl	80014f4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d902      	bls.n	8003bfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	f000 bc80 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bfe:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ef      	beq.n	8003bea <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	490b      	ldr	r1, [pc, #44]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	610b      	str	r3, [r1, #16]
 8003c1e:	e01b      	b.n	8003c58 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003c20:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a08      	ldr	r2, [pc, #32]	@ (8003c48 <HAL_RCC_OscConfig+0x4f4>)
 8003c26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c2a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c2c:	f7fd fc62 	bl	80014f4 <HAL_GetTick>
 8003c30:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fd fc5e 	bl	80014f4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d904      	bls.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	f000 bc5b 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
 8003c48:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c4c:	4baf      	ldr	r3, [pc, #700]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ed      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80c8 	beq.w	8003df6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6c:	4ba7      	ldr	r3, [pc, #668]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d111      	bne.n	8003c9e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	4ba4      	ldr	r3, [pc, #656]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c80:	4aa2      	ldr	r2, [pc, #648]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003c82:	f043 0304 	orr.w	r3, r3, #4
 8003c86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c8a:	4ba0      	ldr	r3, [pc, #640]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8003f10 <HAL_RCC_OscConfig+0x7bc>)
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d119      	bne.n	8003cde <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003caa:	4b99      	ldr	r3, [pc, #612]	@ (8003f10 <HAL_RCC_OscConfig+0x7bc>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	4a98      	ldr	r2, [pc, #608]	@ (8003f10 <HAL_RCC_OscConfig+0x7bc>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fc1d 	bl	80014f4 <HAL_GetTick>
 8003cba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cbc:	e009      	b.n	8003cd2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fd fc19 	bl	80014f4 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d902      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f000 bc16 	b.w	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cd2:	4b8f      	ldr	r3, [pc, #572]	@ (8003f10 <HAL_RCC_OscConfig+0x7bc>)
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0ef      	beq.n	8003cbe <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d05f      	beq.n	8003da6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003ce6:	4b89      	ldr	r3, [pc, #548]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cec:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d037      	beq.n	8003d6c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e3f4      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01b      	beq.n	8003d56 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d24:	4a79      	ldr	r2, [pc, #484]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003d26:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003d2e:	f7fd fbe1 	bl	80014f4 <HAL_GetTick>
 8003d32:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d36:	f7fd fbdd 	bl	80014f4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e3da      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d48:	4b70      	ldr	r3, [pc, #448]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ef      	bne.n	8003d36 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003d56:	4b6d      	ldr	r3, [pc, #436]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d5c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4969      	ldr	r1, [pc, #420]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003d6c:	4b67      	ldr	r3, [pc, #412]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d72:	4a66      	ldr	r2, [pc, #408]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003d74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d7c:	f7fd fbba 	bl	80014f4 <HAL_GetTick>
 8003d80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fd fbb6 	bl	80014f4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e3b3      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d96:	4b5d      	ldr	r3, [pc, #372]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ef      	beq.n	8003d84 <HAL_RCC_OscConfig+0x630>
 8003da4:	e01b      	b.n	8003dde <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003da6:	4b59      	ldr	r3, [pc, #356]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dac:	4a57      	ldr	r2, [pc, #348]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003dae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003db2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003db6:	f7fd fb9d 	bl	80014f4 <HAL_GetTick>
 8003dba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fd fb99 	bl	80014f4 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e396      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ef      	bne.n	8003dbe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dde:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de6:	4b49      	ldr	r3, [pc, #292]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dec:	4a47      	ldr	r2, [pc, #284]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003dee:	f023 0304 	bic.w	r3, r3, #4
 8003df2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8111 	beq.w	8004026 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0a:	4b40      	ldr	r3, [pc, #256]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d111      	bne.n	8003e3c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b3c      	ldr	r3, [pc, #240]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e28:	4b38      	ldr	r3, [pc, #224]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e3c:	4b34      	ldr	r3, [pc, #208]	@ (8003f10 <HAL_RCC_OscConfig+0x7bc>)
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d118      	bne.n	8003e7a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e48:	4b31      	ldr	r3, [pc, #196]	@ (8003f10 <HAL_RCC_OscConfig+0x7bc>)
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4c:	4a30      	ldr	r2, [pc, #192]	@ (8003f10 <HAL_RCC_OscConfig+0x7bc>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e54:	f7fd fb4e 	bl	80014f4 <HAL_GetTick>
 8003e58:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5c:	f7fd fb4a 	bl	80014f4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e347      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e6e:	4b28      	ldr	r3, [pc, #160]	@ (8003f10 <HAL_RCC_OscConfig+0x7bc>)
 8003e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01f      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d010      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e92:	4b1e      	ldr	r3, [pc, #120]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e98:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ea8:	4a18      	ldr	r2, [pc, #96]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003eb2:	e018      	b.n	8003ee6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003eb4:	4b15      	ldr	r3, [pc, #84]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eba:	4a14      	ldr	r2, [pc, #80]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ec4:	e00f      	b.n	8003ee6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ec6:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ecc:	4a0f      	ldr	r2, [pc, #60]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003edc:	4a0b      	ldr	r2, [pc, #44]	@ (8003f0c <HAL_RCC_OscConfig+0x7b8>)
 8003ede:	f023 0304 	bic.w	r3, r3, #4
 8003ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d057      	beq.n	8003f9e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003eee:	f7fd fb01 	bl	80014f4 <HAL_GetTick>
 8003ef2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef4:	e00e      	b.n	8003f14 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fd fafd 	bl	80014f4 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d905      	bls.n	8003f14 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e2f8      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
 8003f0c:	46020c00 	.word	0x46020c00
 8003f10:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f14:	4b9c      	ldr	r3, [pc, #624]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0e9      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01b      	beq.n	8003f66 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f2e:	4b96      	ldr	r3, [pc, #600]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f34:	4a94      	ldr	r2, [pc, #592]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fd fad8 	bl	80014f4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e2d3      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f56:	4b8c      	ldr	r3, [pc, #560]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ed      	beq.n	8003f40 <HAL_RCC_OscConfig+0x7ec>
 8003f64:	e053      	b.n	800400e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f66:	4b88      	ldr	r3, [pc, #544]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f6c:	4a86      	ldr	r2, [pc, #536]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7fd fabc 	bl	80014f4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e2b7      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f8e:	4b7e      	ldr	r3, [pc, #504]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ed      	bne.n	8003f78 <HAL_RCC_OscConfig+0x824>
 8003f9c:	e037      	b.n	800400e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003f9e:	f7fd faa9 	bl	80014f4 <HAL_GetTick>
 8003fa2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fd faa5 	bl	80014f4 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e2a0      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fbc:	4b72      	ldr	r3, [pc, #456]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1ed      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003fca:	4b6f      	ldr	r3, [pc, #444]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01a      	beq.n	800400e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fde:	4a6a      	ldr	r2, [pc, #424]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8003fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd fa83 	bl	80014f4 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e27e      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004000:	4b61      	ldr	r3, [pc, #388]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1ed      	bne.n	8003fea <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800400e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004016:	4b5c      	ldr	r3, [pc, #368]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800401c:	4a5a      	ldr	r2, [pc, #360]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 800401e:	f023 0304 	bic.w	r3, r3, #4
 8004022:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d036      	beq.n	80040a0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d019      	beq.n	800406e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800403a:	4b53      	ldr	r3, [pc, #332]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a52      	ldr	r2, [pc, #328]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004040:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004044:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004046:	f7fd fa55 	bl	80014f4 <HAL_GetTick>
 800404a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800404e:	f7fd fa51 	bl	80014f4 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e24e      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004060:	4b49      	ldr	r3, [pc, #292]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x8fa>
 800406c:	e018      	b.n	80040a0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800406e:	4b46      	ldr	r3, [pc, #280]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a45      	ldr	r2, [pc, #276]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004074:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004078:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800407a:	f7fd fa3b 	bl	80014f4 <HAL_GetTick>
 800407e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004082:	f7fd fa37 	bl	80014f4 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e234      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004094:	4b3c      	ldr	r3, [pc, #240]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d036      	beq.n	800411a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d019      	beq.n	80040e8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80040b4:	4b34      	ldr	r3, [pc, #208]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a33      	ldr	r2, [pc, #204]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 80040ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040c0:	f7fd fa18 	bl	80014f4 <HAL_GetTick>
 80040c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80040c8:	f7fd fa14 	bl	80014f4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e211      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040da:	4b2b      	ldr	r3, [pc, #172]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x974>
 80040e6:	e018      	b.n	800411a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80040e8:	4b27      	ldr	r3, [pc, #156]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a26      	ldr	r2, [pc, #152]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 80040ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040f4:	f7fd f9fe 	bl	80014f4 <HAL_GetTick>
 80040f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80040fc:	f7fd f9fa 	bl	80014f4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1f7      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800410e:	4b1e      	ldr	r3, [pc, #120]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d07f      	beq.n	8004226 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412a:	2b00      	cmp	r3, #0
 800412c:	d062      	beq.n	80041f4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800412e:	4b16      	ldr	r3, [pc, #88]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4a15      	ldr	r2, [pc, #84]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004134:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004138:	6093      	str	r3, [r2, #8]
 800413a:	4b13      	ldr	r3, [pc, #76]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	4910      	ldr	r1, [pc, #64]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004154:	d309      	bcc.n	800416a <HAL_RCC_OscConfig+0xa16>
 8004156:	4b0c      	ldr	r3, [pc, #48]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f023 021f 	bic.w	r2, r3, #31
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4909      	ldr	r1, [pc, #36]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004164:	4313      	orrs	r3, r2
 8004166:	60cb      	str	r3, [r1, #12]
 8004168:	e02a      	b.n	80041c0 <HAL_RCC_OscConfig+0xa6c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	da0c      	bge.n	800418c <HAL_RCC_OscConfig+0xa38>
 8004172:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	015b      	lsls	r3, r3, #5
 8004180:	4901      	ldr	r1, [pc, #4]	@ (8004188 <HAL_RCC_OscConfig+0xa34>)
 8004182:	4313      	orrs	r3, r2
 8004184:	60cb      	str	r3, [r1, #12]
 8004186:	e01b      	b.n	80041c0 <HAL_RCC_OscConfig+0xa6c>
 8004188:	46020c00 	.word	0x46020c00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004194:	d30a      	bcc.n	80041ac <HAL_RCC_OscConfig+0xa58>
 8004196:	4ba1      	ldr	r3, [pc, #644]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	029b      	lsls	r3, r3, #10
 80041a4:	499d      	ldr	r1, [pc, #628]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60cb      	str	r3, [r1, #12]
 80041aa:	e009      	b.n	80041c0 <HAL_RCC_OscConfig+0xa6c>
 80041ac:	4b9b      	ldr	r3, [pc, #620]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	03db      	lsls	r3, r3, #15
 80041ba:	4998      	ldr	r1, [pc, #608]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80041c0:	4b96      	ldr	r3, [pc, #600]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a95      	ldr	r2, [pc, #596]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80041c6:	f043 0310 	orr.w	r3, r3, #16
 80041ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041cc:	f7fd f992 	bl	80014f4 <HAL_GetTick>
 80041d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80041d4:	f7fd f98e 	bl	80014f4 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e18b      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041e6:	4b8d      	ldr	r3, [pc, #564]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0xa80>
 80041f2:	e018      	b.n	8004226 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80041f4:	4b89      	ldr	r3, [pc, #548]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a88      	ldr	r2, [pc, #544]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004200:	f7fd f978 	bl	80014f4 <HAL_GetTick>
 8004204:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004208:	f7fd f974 	bl	80014f4 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e171      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800421a:	4b80      	ldr	r3, [pc, #512]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8166 	beq.w	80044fc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004230:	2300      	movs	r3, #0
 8004232:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004236:	4b79      	ldr	r3, [pc, #484]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b0c      	cmp	r3, #12
 8004240:	f000 80f2 	beq.w	8004428 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004248:	2b02      	cmp	r3, #2
 800424a:	f040 80c5 	bne.w	80043d8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800424e:	4b73      	ldr	r3, [pc, #460]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a72      	ldr	r2, [pc, #456]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004254:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004258:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800425a:	f7fd f94b 	bl	80014f4 <HAL_GetTick>
 800425e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004262:	f7fd f947 	bl	80014f4 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e144      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004274:	4b69      	ldr	r3, [pc, #420]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004280:	4b66      	ldr	r3, [pc, #408]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d111      	bne.n	80042b2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	4b63      	ldr	r3, [pc, #396]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004294:	4a61      	ldr	r2, [pc, #388]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800429e:	4b5f      	ldr	r3, [pc, #380]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80042a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80042ac:	2301      	movs	r3, #1
 80042ae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80042b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004420 <HAL_RCC_OscConfig+0xccc>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042be:	d102      	bne.n	80042c6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80042c6:	4b56      	ldr	r3, [pc, #344]	@ (8004420 <HAL_RCC_OscConfig+0xccc>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	4a55      	ldr	r2, [pc, #340]	@ (8004420 <HAL_RCC_OscConfig+0xccc>)
 80042cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042d0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80042d2:	4b52      	ldr	r3, [pc, #328]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80042d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042e6:	3a01      	subs	r2, #1
 80042e8:	0212      	lsls	r2, r2, #8
 80042ea:	4311      	orrs	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80042f0:	430a      	orrs	r2, r1
 80042f2:	494a      	ldr	r1, [pc, #296]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80042f8:	4b48      	ldr	r3, [pc, #288]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80042fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042fc:	4b49      	ldr	r3, [pc, #292]	@ (8004424 <HAL_RCC_OscConfig+0xcd0>)
 80042fe:	4013      	ands	r3, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004304:	3a01      	subs	r2, #1
 8004306:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800430e:	3a01      	subs	r2, #1
 8004310:	0252      	lsls	r2, r2, #9
 8004312:	b292      	uxth	r2, r2
 8004314:	4311      	orrs	r1, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800431a:	3a01      	subs	r2, #1
 800431c:	0412      	lsls	r2, r2, #16
 800431e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004322:	4311      	orrs	r1, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004328:	3a01      	subs	r2, #1
 800432a:	0612      	lsls	r2, r2, #24
 800432c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004330:	430a      	orrs	r2, r1
 8004332:	493a      	ldr	r1, [pc, #232]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004334:	4313      	orrs	r3, r2
 8004336:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004338:	4b38      	ldr	r3, [pc, #224]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	4a37      	ldr	r2, [pc, #220]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004348:	4a34      	ldr	r2, [pc, #208]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800434e:	4b33      	ldr	r3, [pc, #204]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	4a32      	ldr	r2, [pc, #200]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004354:	f043 0310 	orr.w	r3, r3, #16
 8004358:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800435a:	4b30      	ldr	r3, [pc, #192]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	f023 020c 	bic.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004366:	492d      	ldr	r1, [pc, #180]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004368:	4313      	orrs	r3, r2
 800436a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800436c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004374:	4b2a      	ldr	r3, [pc, #168]	@ (8004420 <HAL_RCC_OscConfig+0xccc>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a29      	ldr	r2, [pc, #164]	@ (8004420 <HAL_RCC_OscConfig+0xccc>)
 800437a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800437e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004380:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004384:	2b01      	cmp	r3, #1
 8004386:	d107      	bne.n	8004398 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004388:	4b24      	ldr	r3, [pc, #144]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800438e:	4a23      	ldr	r2, [pc, #140]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004398:	4b20      	ldr	r3, [pc, #128]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 800439e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043a4:	f7fd f8a6 	bl	80014f4 <HAL_GetTick>
 80043a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fd f8a2 	bl	80014f4 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e09f      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043be:	4b17      	ldr	r3, [pc, #92]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043ca:	4b14      	ldr	r3, [pc, #80]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	4a13      	ldr	r2, [pc, #76]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d4:	6293      	str	r3, [r2, #40]	@ 0x28
 80043d6:	e091      	b.n	80044fc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80043d8:	4b10      	ldr	r3, [pc, #64]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0f      	ldr	r2, [pc, #60]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 80043de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043e4:	f7fd f886 	bl	80014f4 <HAL_GetTick>
 80043e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fd f882 	bl	80014f4 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e07f      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043fe:	4b07      	ldr	r3, [pc, #28]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800440a:	4b04      	ldr	r3, [pc, #16]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 800440c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440e:	4a03      	ldr	r2, [pc, #12]	@ (800441c <HAL_RCC_OscConfig+0xcc8>)
 8004410:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004414:	f023 0303 	bic.w	r3, r3, #3
 8004418:	6293      	str	r3, [r2, #40]	@ 0x28
 800441a:	e06f      	b.n	80044fc <HAL_RCC_OscConfig+0xda8>
 800441c:	46020c00 	.word	0x46020c00
 8004420:	46020800 	.word	0x46020800
 8004424:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004428:	4b37      	ldr	r3, [pc, #220]	@ (8004508 <HAL_RCC_OscConfig+0xdb4>)
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800442e:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <HAL_RCC_OscConfig+0xdb4>)
 8004430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004432:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	2b01      	cmp	r3, #1
 800443a:	d039      	beq.n	80044b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0203 	and.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d132      	bne.n	80044b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d129      	bne.n	80044b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d122      	bne.n	80044b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004474:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d11a      	bne.n	80044b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	0a5b      	lsrs	r3, r3, #9
 800447e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004486:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d111      	bne.n	80044b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004498:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d108      	bne.n	80044b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	0e1b      	lsrs	r3, r3, #24
 80044a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e024      	b.n	80044fe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044b4:	4b14      	ldr	r3, [pc, #80]	@ (8004508 <HAL_RCC_OscConfig+0xdb4>)
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d01a      	beq.n	80044fc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80044c6:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <HAL_RCC_OscConfig+0xdb4>)
 80044c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004508 <HAL_RCC_OscConfig+0xdb4>)
 80044cc:	f023 0310 	bic.w	r3, r3, #16
 80044d0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fd f80f 	bl	80014f4 <HAL_GetTick>
 80044d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80044d8:	bf00      	nop
 80044da:	f7fd f80b 	bl	80014f4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d0f9      	beq.n	80044da <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ea:	4a07      	ldr	r2, [pc, #28]	@ (8004508 <HAL_RCC_OscConfig+0xdb4>)
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80044f0:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <HAL_RCC_OscConfig+0xdb4>)
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	4a04      	ldr	r2, [pc, #16]	@ (8004508 <HAL_RCC_OscConfig+0xdb4>)
 80044f6:	f043 0310 	orr.w	r3, r3, #16
 80044fa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3738      	adds	r7, #56	@ 0x38
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	46020c00 	.word	0x46020c00

0800450c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e1d9      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004520:	4b9b      	ldr	r3, [pc, #620]	@ (8004790 <HAL_RCC_ClockConfig+0x284>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d910      	bls.n	8004550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b98      	ldr	r3, [pc, #608]	@ (8004790 <HAL_RCC_ClockConfig+0x284>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	4996      	ldr	r1, [pc, #600]	@ (8004790 <HAL_RCC_ClockConfig+0x284>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b94      	ldr	r3, [pc, #592]	@ (8004790 <HAL_RCC_ClockConfig+0x284>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e1c1      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d010      	beq.n	800457e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	4b8c      	ldr	r3, [pc, #560]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004568:	429a      	cmp	r2, r3
 800456a:	d908      	bls.n	800457e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800456c:	4b89      	ldr	r3, [pc, #548]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	4986      	ldr	r1, [pc, #536]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 800457a:	4313      	orrs	r3, r2
 800457c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d012      	beq.n	80045b0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	4b81      	ldr	r3, [pc, #516]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004598:	429a      	cmp	r2, r3
 800459a:	d909      	bls.n	80045b0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800459c:	4b7d      	ldr	r3, [pc, #500]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	497a      	ldr	r1, [pc, #488]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d010      	beq.n	80045de <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	4b74      	ldr	r3, [pc, #464]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d908      	bls.n	80045de <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80045cc:	4b71      	ldr	r3, [pc, #452]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	496e      	ldr	r1, [pc, #440]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	4b69      	ldr	r3, [pc, #420]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d908      	bls.n	800460c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80045fa:	4b66      	ldr	r3, [pc, #408]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 020f 	bic.w	r2, r3, #15
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	4963      	ldr	r1, [pc, #396]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004608:	4313      	orrs	r3, r2
 800460a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80d2 	beq.w	80047be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800461a:	2300      	movs	r3, #0
 800461c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d143      	bne.n	80046ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004626:	4b5b      	ldr	r3, [pc, #364]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d110      	bne.n	8004656 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004634:	4b57      	ldr	r3, [pc, #348]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800463a:	4a56      	ldr	r2, [pc, #344]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 800463c:	f043 0304 	orr.w	r3, r3, #4
 8004640:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004644:	4b53      	ldr	r3, [pc, #332]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004656:	f7fc ff4d 	bl	80014f4 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800465c:	4b4e      	ldr	r3, [pc, #312]	@ (8004798 <HAL_RCC_ClockConfig+0x28c>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00f      	beq.n	8004688 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800466a:	f7fc ff43 	bl	80014f4 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e12b      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800467c:	4b46      	ldr	r3, [pc, #280]	@ (8004798 <HAL_RCC_ClockConfig+0x28c>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d107      	bne.n	800469e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800468e:	4b41      	ldr	r3, [pc, #260]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004694:	4a3f      	ldr	r2, [pc, #252]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004696:	f023 0304 	bic.w	r3, r3, #4
 800469a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800469e:	4b3d      	ldr	r3, [pc, #244]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d121      	bne.n	80046ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e112      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046b6:	4b37      	ldr	r3, [pc, #220]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d115      	bne.n	80046ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e106      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80046ce:	4b31      	ldr	r3, [pc, #196]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e0fa      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046de:	4b2d      	ldr	r3, [pc, #180]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0f2      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4b29      	ldr	r3, [pc, #164]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4926      	ldr	r1, [pc, #152]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004700:	f7fc fef8 	bl	80014f4 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b03      	cmp	r3, #3
 800470c:	d112      	bne.n	8004734 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004710:	f7fc fef0 	bl	80014f4 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e0d6      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004726:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d1ee      	bne.n	8004710 <HAL_RCC_ClockConfig+0x204>
 8004732:	e044      	b.n	80047be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d112      	bne.n	8004762 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800473c:	e00a      	b.n	8004754 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800473e:	f7fc fed9 	bl	80014f4 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e0bf      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d1ee      	bne.n	800473e <HAL_RCC_ClockConfig+0x232>
 8004760:	e02d      	b.n	80047be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d123      	bne.n	80047b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fc fec2 	bl	80014f4 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e0a8      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004782:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <HAL_RCC_ClockConfig+0x288>)
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1ee      	bne.n	800476c <HAL_RCC_ClockConfig+0x260>
 800478e:	e016      	b.n	80047be <HAL_RCC_ClockConfig+0x2b2>
 8004790:	40022000 	.word	0x40022000
 8004794:	46020c00 	.word	0x46020c00
 8004798:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479c:	f7fc feaa 	bl	80014f4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e090      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80047b2:	4b4a      	ldr	r3, [pc, #296]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d1ee      	bne.n	800479c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	4b43      	ldr	r3, [pc, #268]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d208      	bcs.n	80047ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80047da:	4b40      	ldr	r3, [pc, #256]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 020f 	bic.w	r2, r3, #15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	493d      	ldr	r1, [pc, #244]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ec:	4b3c      	ldr	r3, [pc, #240]	@ (80048e0 <HAL_RCC_ClockConfig+0x3d4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d210      	bcs.n	800481c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fa:	4b39      	ldr	r3, [pc, #228]	@ (80048e0 <HAL_RCC_ClockConfig+0x3d4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 020f 	bic.w	r2, r3, #15
 8004802:	4937      	ldr	r1, [pc, #220]	@ (80048e0 <HAL_RCC_ClockConfig+0x3d4>)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	4b35      	ldr	r3, [pc, #212]	@ (80048e0 <HAL_RCC_ClockConfig+0x3d4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e05b      	b.n	80048d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d010      	beq.n	800484a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	4b2b      	ldr	r3, [pc, #172]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004834:	429a      	cmp	r2, r3
 8004836:	d208      	bcs.n	800484a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004838:	4b28      	ldr	r3, [pc, #160]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4925      	ldr	r1, [pc, #148]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 8004846:	4313      	orrs	r3, r2
 8004848:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d012      	beq.n	800487c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	4b20      	ldr	r3, [pc, #128]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004864:	429a      	cmp	r2, r3
 8004866:	d209      	bcs.n	800487c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004868:	4b1c      	ldr	r3, [pc, #112]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	4919      	ldr	r1, [pc, #100]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 8004878:	4313      	orrs	r3, r2
 800487a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	4b13      	ldr	r3, [pc, #76]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004894:	429a      	cmp	r2, r3
 8004896:	d208      	bcs.n	80048aa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004898:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	490d      	ldr	r1, [pc, #52]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048aa:	f000 f821 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80048ae:	4602      	mov	r2, r0
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <HAL_RCC_ClockConfig+0x3d0>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	490a      	ldr	r1, [pc, #40]	@ (80048e4 <HAL_RCC_ClockConfig+0x3d8>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
 80048c0:	4a09      	ldr	r2, [pc, #36]	@ (80048e8 <HAL_RCC_ClockConfig+0x3dc>)
 80048c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048c4:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <HAL_RCC_ClockConfig+0x3e0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fc fd89 	bl	80013e0 <HAL_InitTick>
 80048ce:	4603      	mov	r3, r0
 80048d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	46020c00 	.word	0x46020c00
 80048e0:	40022000 	.word	0x40022000
 80048e4:	080099f0 	.word	0x080099f0
 80048e8:	20000000 	.word	0x20000000
 80048ec:	20000070 	.word	0x20000070

080048f0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b08b      	sub	sp, #44	@ 0x2c
 80048f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fe:	4b78      	ldr	r3, [pc, #480]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004908:	4b75      	ldr	r3, [pc, #468]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x34>
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d121      	bne.n	8004962 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d11e      	bne.n	8004962 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004924:	4b6e      	ldr	r3, [pc, #440]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004930:	4b6b      	ldr	r3, [pc, #428]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004936:	0b1b      	lsrs	r3, r3, #12
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
 800493e:	e005      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004940:	4b67      	ldr	r3, [pc, #412]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	0f1b      	lsrs	r3, r3, #28
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800494c:	4a65      	ldr	r2, [pc, #404]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d110      	bne.n	800497e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004960:	e00d      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004962:	4b5f      	ldr	r3, [pc, #380]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b04      	cmp	r3, #4
 800496c:	d102      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800496e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	e004      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d101      	bne.n	800497e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800497a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800497c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	f040 80a5 	bne.w	8004ad0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004986:	4b56      	ldr	r3, [pc, #344]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004990:	4b53      	ldr	r3, [pc, #332]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	0a1b      	lsrs	r3, r3, #8
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	3301      	adds	r3, #1
 800499c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800499e:	4b50      	ldr	r3, [pc, #320]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80049aa:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	08db      	lsrs	r3, r3, #3
 80049b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d003      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0xe4>
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d022      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x128>
 80049d2:	e043      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049de:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004aec <HAL_RCC_GetSysClockFreq+0x1fc>
 80049e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049f6:	ed97 6a01 	vldr	s12, [r7, #4]
 80049fa:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004af0 <HAL_RCC_GetSysClockFreq+0x200>
 80049fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a16:	e046      	b.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004aec <HAL_RCC_GetSysClockFreq+0x1fc>
 8004a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a3a:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a3e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004af0 <HAL_RCC_GetSysClockFreq+0x200>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a5a:	e024      	b.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a84:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a88:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004af0 <HAL_RCC_GetSysClockFreq+0x200>
 8004a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aa4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aaa:	0e1b      	lsrs	r3, r3, #24
 8004aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aca:	ee17 3a90 	vmov	r3, s15
 8004ace:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	372c      	adds	r7, #44	@ 0x2c
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	46020c00 	.word	0x46020c00
 8004ae4:	08009a08 	.word	0x08009a08
 8004ae8:	00f42400 	.word	0x00f42400
 8004aec:	4b742400 	.word	0x4b742400
 8004af0:	46000000 	.word	0x46000000

08004af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004af8:	f7ff fefa 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <HAL_RCC_GetHCLKFreq+0x28>)
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	4906      	ldr	r1, [pc, #24]	@ (8004b20 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b08:	5ccb      	ldrb	r3, [r1, r3]
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	4a05      	ldr	r2, [pc, #20]	@ (8004b24 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b10:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004b12:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b14:	681b      	ldr	r3, [r3, #0]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	46020c00 	.word	0x46020c00
 8004b20:	080099f0 	.word	0x080099f0
 8004b24:	20000000 	.word	0x20000000

08004b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004b2c:	f7ff ffe2 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4903      	ldr	r1, [pc, #12]	@ (8004b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	46020c00 	.word	0x46020c00
 8004b4c:	08009a00 	.word	0x08009a00

08004b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004b54:	f7ff ffce 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4903      	ldr	r1, [pc, #12]	@ (8004b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	46020c00 	.word	0x46020c00
 8004b74:	08009a00 	.word	0x08009a00

08004b78 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004b7c:	f7ff ffba 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	4903      	ldr	r1, [pc, #12]	@ (8004b9c <HAL_RCC_GetPCLK3Freq+0x24>)
 8004b8e:	5ccb      	ldrb	r3, [r1, r3]
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	46020c00 	.word	0x46020c00
 8004b9c:	08009a00 	.word	0x08009a00

08004ba0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bb6:	f7fe fd3f 	bl	8003638 <HAL_PWREx_GetVoltageRange>
 8004bba:	6178      	str	r0, [r7, #20]
 8004bbc:	e019      	b.n	8004bf2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	4b39      	ldr	r3, [pc, #228]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc4:	4a37      	ldr	r2, [pc, #220]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bc6:	f043 0304 	orr.w	r3, r3, #4
 8004bca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004bce:	4b35      	ldr	r3, [pc, #212]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bdc:	f7fe fd2c 	bl	8003638 <HAL_PWREx_GetVoltageRange>
 8004be0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004be2:	4b30      	ldr	r3, [pc, #192]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be8:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bea:	f023 0304 	bic.w	r3, r3, #4
 8004bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bf8:	d003      	beq.n	8004c02 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c00:	d109      	bne.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c08:	d202      	bcs.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004c0e:	e033      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004c14:	e030      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c1c:	d208      	bcs.n	8004c30 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c24:	d102      	bne.n	8004c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004c26:	2303      	movs	r3, #3
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e025      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e035      	b.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c36:	d90f      	bls.n	8004c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c44:	d902      	bls.n	8004c4c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	e015      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	e012      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004c52:	2300      	movs	r3, #0
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	e00f      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c5e:	d109      	bne.n	8004c74 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c66:	d102      	bne.n	8004c6e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004c68:	2301      	movs	r3, #1
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	e004      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004c6e:	2302      	movs	r3, #2
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e001      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004c74:	2301      	movs	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 020f 	bic.w	r2, r3, #15
 8004c80:	4909      	ldr	r1, [pc, #36]	@ (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c88:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	46020c00 	.word	0x46020c00
 8004ca8:	40022000 	.word	0x40022000

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb0:	b0b8      	sub	sp, #224	@ 0xe0
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f002 0401 	and.w	r4, r2, #1
 8004cd0:	2500      	movs	r5, #0
 8004cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8004cd6:	d00b      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004cd8:	4bca      	ldr	r3, [pc, #808]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cde:	f023 0103 	bic.w	r1, r3, #3
 8004ce2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce8:	4ac6      	ldr	r2, [pc, #792]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cea:	430b      	orrs	r3, r1
 8004cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f002 0802 	and.w	r8, r2, #2
 8004cfc:	f04f 0900 	mov.w	r9, #0
 8004d00:	ea58 0309 	orrs.w	r3, r8, r9
 8004d04:	d00b      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004d06:	4bbf      	ldr	r3, [pc, #764]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d0c:	f023 010c 	bic.w	r1, r3, #12
 8004d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d16:	4abb      	ldr	r2, [pc, #748]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f002 0a04 	and.w	sl, r2, #4
 8004d2a:	f04f 0b00 	mov.w	fp, #0
 8004d2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d32:	d00b      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004d34:	4bb3      	ldr	r3, [pc, #716]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d3a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d44:	4aaf      	ldr	r2, [pc, #700]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d46:	430b      	orrs	r3, r1
 8004d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f002 0308 	and.w	r3, r2, #8
 8004d58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	d00b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004d6c:	4ba5      	ldr	r3, [pc, #660]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7c:	4aa1      	ldr	r2, [pc, #644]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f002 0310 	and.w	r3, r2, #16
 8004d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4313      	orrs	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004da4:	4b97      	ldr	r3, [pc, #604]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004daa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db4:	4a93      	ldr	r2, [pc, #588]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004db6:	430b      	orrs	r3, r1
 8004db8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f002 0320 	and.w	r3, r2, #32
 8004dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004ddc:	4b89      	ldr	r3, [pc, #548]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004de2:	f023 0107 	bic.w	r1, r3, #7
 8004de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dec:	4a85      	ldr	r2, [pc, #532]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e04:	2300      	movs	r3, #0
 8004e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004e14:	4b7b      	ldr	r3, [pc, #492]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e1a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004e1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e24:	4a77      	ldr	r2, [pc, #476]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e26:	430b      	orrs	r3, r1
 8004e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004e38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e42:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	d00b      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e5c:	4a69      	ldr	r2, [pc, #420]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004e84:	4b5f      	ldr	r3, [pc, #380]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e94:	4a5b      	ldr	r2, [pc, #364]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e96:	430b      	orrs	r3, r1
 8004e98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004ea8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eac:	2300      	movs	r3, #0
 8004eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004eb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004ebc:	4b51      	ldr	r3, [pc, #324]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ec2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ecc:	4a4d      	ldr	r2, [pc, #308]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	d00b      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004ef4:	4b43      	ldr	r3, [pc, #268]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004efa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f04:	4a3f      	ldr	r2, [pc, #252]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f06:	430b      	orrs	r3, r1
 8004f08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f26:	460b      	mov	r3, r1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004f2c:	4b35      	ldr	r3, [pc, #212]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f32:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004f36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f3c:	4a31      	ldr	r2, [pc, #196]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f52:	2300      	movs	r3, #0
 8004f54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f56:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	d00c      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004f60:	4b28      	ldr	r3, [pc, #160]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f72:	4a24      	ldr	r2, [pc, #144]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f74:	430b      	orrs	r3, r1
 8004f76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f86:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f88:	2300      	movs	r3, #0
 8004f8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004f90:	460b      	mov	r3, r1
 8004f92:	4313      	orrs	r3, r2
 8004f94:	d04f      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9e:	2b80      	cmp	r3, #128	@ 0x80
 8004fa0:	d02d      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004fa2:	2b80      	cmp	r3, #128	@ 0x80
 8004fa4:	d827      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004fa6:	2b60      	cmp	r3, #96	@ 0x60
 8004fa8:	d02e      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004faa:	2b60      	cmp	r3, #96	@ 0x60
 8004fac:	d823      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004fae:	2b40      	cmp	r3, #64	@ 0x40
 8004fb0:	d006      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004fb2:	2b40      	cmp	r3, #64	@ 0x40
 8004fb4:	d81f      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d011      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004fbe:	e01a      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fc0:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fcc:	e01d      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f002 f9d1 	bl	800737c <RCCEx_PLL2_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fe0:	e013      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fe6:	332c      	adds	r3, #44	@ 0x2c
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 fa5f 	bl	80074ac <RCCEx_PLL3_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ff4:	e009      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004ffc:	e005      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004ffe:	bf00      	nop
 8005000:	e003      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005002:	bf00      	nop
 8005004:	46020c00 	.word	0x46020c00
        break;
 8005008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10d      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005012:	4bb6      	ldr	r3, [pc, #728]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005014:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005018:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800501c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005024:	4ab1      	ldr	r2, [pc, #708]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005026:	430b      	orrs	r3, r1
 8005028:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800502c:	e003      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005032:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005042:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005044:	2300      	movs	r3, #0
 8005046:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005048:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800504c:	460b      	mov	r3, r1
 800504e:	4313      	orrs	r3, r2
 8005050:	d053      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005052:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505e:	d033      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005064:	d82c      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800506a:	d02f      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800506c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005070:	d826      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005076:	d008      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800507c:	d820      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005086:	d011      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005088:	e01a      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800508a:	4b98      	ldr	r3, [pc, #608]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	4a97      	ldr	r2, [pc, #604]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005094:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005096:	e01a      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800509c:	3308      	adds	r3, #8
 800509e:	4618      	mov	r0, r3
 80050a0:	f002 f96c 	bl	800737c <RCCEx_PLL2_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050aa:	e010      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050b0:	332c      	adds	r3, #44	@ 0x2c
 80050b2:	4618      	mov	r0, r3
 80050b4:	f002 f9fa 	bl	80074ac <RCCEx_PLL3_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050be:	e006      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80050c6:	e002      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80050c8:	bf00      	nop
 80050ca:	e000      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80050cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80050d6:	4b85      	ldr	r3, [pc, #532]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80050e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050e8:	4a80      	ldr	r2, [pc, #512]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050ea:	430b      	orrs	r3, r1
 80050ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050f0:	e003      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050f6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80050fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005106:	663b      	str	r3, [r7, #96]	@ 0x60
 8005108:	2300      	movs	r3, #0
 800510a:	667b      	str	r3, [r7, #100]	@ 0x64
 800510c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005110:	460b      	mov	r3, r1
 8005112:	4313      	orrs	r3, r2
 8005114:	d046      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005116:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800511a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800511e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005122:	d028      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005124:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005128:	d821      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800512a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800512e:	d022      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005130:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005134:	d81b      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005136:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800513a:	d01c      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800513c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005140:	d815      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005146:	d008      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800514c:	d80f      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d011      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005156:	d00e      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005158:	e009      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800515a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800515e:	3308      	adds	r3, #8
 8005160:	4618      	mov	r0, r3
 8005162:	f002 f90b 	bl	800737c <RCCEx_PLL2_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800516c:	e004      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005174:	e000      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005178:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10d      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005180:	4b5a      	ldr	r3, [pc, #360]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005186:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800518a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800518e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005192:	4a56      	ldr	r2, [pc, #344]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005194:	430b      	orrs	r3, r1
 8005196:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800519a:	e003      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051a0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80051a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80051b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051b2:	2300      	movs	r3, #0
 80051b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d03f      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80051c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d81e      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80051cc:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	08005213 	.word	0x08005213
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051f7 	.word	0x080051f7
 80051e0:	08005213 	.word	0x08005213
 80051e4:	08005213 	.word	0x08005213
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051e8:	4b40      	ldr	r3, [pc, #256]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ec:	4a3f      	ldr	r2, [pc, #252]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80051f4:	e00e      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051fa:	332c      	adds	r3, #44	@ 0x2c
 80051fc:	4618      	mov	r0, r3
 80051fe:	f002 f955 	bl	80074ac <RCCEx_PLL3_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005208:	e004      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005210:	e000      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8005212:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005214:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10d      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800521c:	4b33      	ldr	r3, [pc, #204]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800521e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005222:	f023 0107 	bic.w	r1, r3, #7
 8005226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522e:	4a2f      	ldr	r2, [pc, #188]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005230:	430b      	orrs	r3, r1
 8005232:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005236:	e003      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800523c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005240:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800524c:	653b      	str	r3, [r7, #80]	@ 0x50
 800524e:	2300      	movs	r3, #0
 8005250:	657b      	str	r3, [r7, #84]	@ 0x54
 8005252:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	d04d      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800525c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005264:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005268:	d028      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x610>
 800526a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800526e:	d821      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005270:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005274:	d024      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005276:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800527a:	d81b      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800527c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005280:	d00e      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005286:	d815      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005290:	d110      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005292:	4b16      	ldr	r3, [pc, #88]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005296:	4a15      	ldr	r2, [pc, #84]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800529e:	e012      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052a4:	332c      	adds	r3, #44	@ 0x2c
 80052a6:	4618      	mov	r0, r3
 80052a8:	f002 f900 	bl	80074ac <RCCEx_PLL3_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052b2:	e008      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052ba:	e004      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80052bc:	bf00      	nop
 80052be:	e002      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80052c0:	bf00      	nop
 80052c2:	e000      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80052c4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052c6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d110      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80052ce:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80052d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052e0:	4a02      	ldr	r2, [pc, #8]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052e2:	430b      	orrs	r3, r1
 80052e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052e8:	e006      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80052ea:	bf00      	nop
 80052ec:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052f4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005306:	2300      	movs	r3, #0
 8005308:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800530a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800530e:	460b      	mov	r3, r1
 8005310:	4313      	orrs	r3, r2
 8005312:	f000 80b5 	beq.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531c:	4b9d      	ldr	r3, [pc, #628]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800531e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d113      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532a:	4b9a      	ldr	r3, [pc, #616]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800532c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005330:	4a98      	ldr	r2, [pc, #608]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800533a:	4b96      	ldr	r3, [pc, #600]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800533c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005348:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005352:	4b91      	ldr	r3, [pc, #580]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005356:	4a90      	ldr	r2, [pc, #576]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800535e:	f7fc f8c9 	bl	80014f4 <HAL_GetTick>
 8005362:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005366:	e00b      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005368:	f7fc f8c4 	bl	80014f4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d903      	bls.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800537e:	e005      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005380:	4b85      	ldr	r3, [pc, #532]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ed      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800538c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005390:	2b00      	cmp	r3, #0
 8005392:	d165      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005394:	4b7f      	ldr	r3, [pc, #508]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800539a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800539e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80053a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d023      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 80053aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053ae:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01b      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053ba:	4b76      	ldr	r3, [pc, #472]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053c8:	4b72      	ldr	r3, [pc, #456]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053ce:	4a71      	ldr	r2, [pc, #452]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053d8:	4b6e      	ldr	r3, [pc, #440]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053de:	4a6d      	ldr	r2, [pc, #436]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053e8:	4a6a      	ldr	r2, [pc, #424]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d019      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fe:	f7fc f879 	bl	80014f4 <HAL_GetTick>
 8005402:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005406:	e00d      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005408:	f7fc f874 	bl	80014f4 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005412:	1ad2      	subs	r2, r2, r3
 8005414:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005418:	429a      	cmp	r2, r3
 800541a:	d903      	bls.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8005422:	e006      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005424:	4b5b      	ldr	r3, [pc, #364]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0ea      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005432:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10d      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800543a:	4b56      	ldr	r3, [pc, #344]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800543c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005440:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005448:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800544c:	4a51      	ldr	r2, [pc, #324]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800544e:	430b      	orrs	r3, r1
 8005450:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005454:	e008      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005456:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800545a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800545e:	e003      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005464:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005468:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800546c:	2b01      	cmp	r3, #1
 800546e:	d107      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005470:	4b48      	ldr	r3, [pc, #288]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005476:	4a47      	ldr	r2, [pc, #284]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005478:	f023 0304 	bic.w	r3, r3, #4
 800547c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800548c:	643b      	str	r3, [r7, #64]	@ 0x40
 800548e:	2300      	movs	r3, #0
 8005490:	647b      	str	r3, [r7, #68]	@ 0x44
 8005492:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005496:	460b      	mov	r3, r1
 8005498:	4313      	orrs	r3, r2
 800549a:	d042      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800549c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80054a8:	d022      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80054aa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80054ae:	d81b      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80054b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b4:	d011      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80054b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054ba:	d815      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80054c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054c4:	d110      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054ca:	3308      	adds	r3, #8
 80054cc:	4618      	mov	r0, r3
 80054ce:	f001 ff55 	bl	800737c <RCCEx_PLL2_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054d8:	e00d      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054da:	4b2e      	ldr	r3, [pc, #184]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	4a2d      	ldr	r2, [pc, #180]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80054e6:	e006      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054ee:	e002      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80054f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10d      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80054fe:	4b25      	ldr	r3, [pc, #148]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005504:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800550c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005510:	4a20      	ldr	r2, [pc, #128]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005512:	430b      	orrs	r3, r1
 8005514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800551e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800552e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005530:	2300      	movs	r3, #0
 8005532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005534:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005538:	460b      	mov	r3, r1
 800553a:	4313      	orrs	r3, r2
 800553c:	d032      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800553e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800554a:	d00b      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800554c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005550:	d804      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800555a:	d007      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005562:	e004      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005564:	bf00      	nop
 8005566:	e002      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005568:	bf00      	nop
 800556a:	e000      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800556c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800556e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005572:	2b00      	cmp	r3, #0
 8005574:	d112      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005576:	4b07      	ldr	r3, [pc, #28]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005578:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800557c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005584:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005588:	4a02      	ldr	r2, [pc, #8]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800558a:	430b      	orrs	r3, r1
 800558c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005590:	e008      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005592:	bf00      	nop
 8005594:	46020c00 	.word	0x46020c00
 8005598:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80055a0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80055a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80055b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b2:	2300      	movs	r3, #0
 80055b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80055ba:	460b      	mov	r3, r1
 80055bc:	4313      	orrs	r3, r2
 80055be:	d019      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80055c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055cc:	d105      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055ce:	4b88      	ldr	r3, [pc, #544]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d2:	4a87      	ldr	r2, [pc, #540]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80055da:	4b85      	ldr	r3, [pc, #532]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80055e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055ec:	4a80      	ldr	r2, [pc, #512]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055ee:	430b      	orrs	r3, r1
 80055f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80055f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005602:	2300      	movs	r3, #0
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005606:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d00c      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005610:	4b77      	ldr	r3, [pc, #476]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005616:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800561a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800561e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005622:	4973      	ldr	r1, [pc, #460]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800562a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005636:	623b      	str	r3, [r7, #32]
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
 800563c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005640:	460b      	mov	r3, r1
 8005642:	4313      	orrs	r3, r2
 8005644:	d00c      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005646:	4b6a      	ldr	r3, [pc, #424]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800564c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005658:	4965      	ldr	r1, [pc, #404]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005676:	460b      	mov	r3, r1
 8005678:	4313      	orrs	r3, r2
 800567a:	d00c      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800567c:	4b5c      	ldr	r3, [pc, #368]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800567e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005682:	f023 0218 	bic.w	r2, r3, #24
 8005686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800568a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800568e:	4958      	ldr	r1, [pc, #352]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80056ac:	460b      	mov	r3, r1
 80056ae:	4313      	orrs	r3, r2
 80056b0:	d032      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80056b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056be:	d105      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c0:	4b4b      	ldr	r3, [pc, #300]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	4a4a      	ldr	r2, [pc, #296]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ca:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80056cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056d8:	d108      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056de:	3308      	adds	r3, #8
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fe4b 	bl	800737c <RCCEx_PLL2_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80056ec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10d      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80056f4:	4b3e      	ldr	r3, [pc, #248]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005706:	493a      	ldr	r1, [pc, #232]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800570e:	e003      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005714:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d03a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005740:	d00e      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005742:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005746:	d815      	bhi.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d017      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800574c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005750:	d110      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005752:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	4a26      	ldr	r2, [pc, #152]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800575e:	e00e      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005764:	3308      	adds	r3, #8
 8005766:	4618      	mov	r0, r3
 8005768:	f001 fe08 	bl	800737c <RCCEx_PLL2_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005772:	e004      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800577c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800577e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005786:	4b1a      	ldr	r3, [pc, #104]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800578c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005798:	4915      	ldr	r1, [pc, #84]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80057a0:	e003      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80057a6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80057aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	2300      	movs	r3, #0
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057c0:	460b      	mov	r3, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	d00c      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80057c6:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057cc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80057d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057d8:	4905      	ldr	r1, [pc, #20]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80057e0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	37e0      	adds	r7, #224	@ 0xe0
 80057e8:	46bd      	mov	sp, r7
 80057ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ee:	bf00      	nop
 80057f0:	46020c00 	.word	0x46020c00

080057f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b089      	sub	sp, #36	@ 0x24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80057fc:	4ba6      	ldr	r3, [pc, #664]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005804:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005806:	4ba4      	ldr	r3, [pc, #656]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005810:	4ba1      	ldr	r3, [pc, #644]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005814:	0a1b      	lsrs	r3, r3, #8
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	3301      	adds	r3, #1
 800581c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800581e:	4b9e      	ldr	r3, [pc, #632]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800582a:	4b9b      	ldr	r3, [pc, #620]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800582c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582e:	08db      	lsrs	r3, r3, #3
 8005830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d062      	beq.n	8005912 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b03      	cmp	r3, #3
 8005850:	f200 8081 	bhi.w	8005956 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d024      	beq.n	80058a4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d17a      	bne.n	8005956 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005a9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	4b89      	ldr	r3, [pc, #548]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005882:	ed97 6a02 	vldr	s12, [r7, #8]
 8005886:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005896:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a2:	e08f      	b.n	80059c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058a4:	4b7c      	ldr	r3, [pc, #496]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80058b0:	4b79      	ldr	r3, [pc, #484]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	0f1b      	lsrs	r3, r3, #28
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	e006      	b.n	80058ca <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80058bc:	4b76      	ldr	r3, [pc, #472]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	0f1b      	lsrs	r3, r3, #28
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	4a76      	ldr	r2, [pc, #472]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80058cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d0:	ee07 3a90 	vmov	s15, r3
 80058d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80058f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005900:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005904:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005910:	e058      	b.n	80059c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	ee07 3a90 	vmov	s15, r3
 8005918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005924:	4b5c      	ldr	r3, [pc, #368]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005934:	ed97 6a02 	vldr	s12, [r7, #8]
 8005938:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800593c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005940:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005944:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005948:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800594c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005950:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005954:	e036      	b.n	80059c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005956:	4b50      	ldr	r3, [pc, #320]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005962:	4b4d      	ldr	r3, [pc, #308]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0f1b      	lsrs	r3, r3, #28
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	e006      	b.n	800597c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800596e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005974:	041b      	lsls	r3, r3, #16
 8005976:	0f1b      	lsrs	r3, r3, #28
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	4a49      	ldr	r2, [pc, #292]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800597e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059a6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80059aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80059ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059c2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80059c4:	4b34      	ldr	r3, [pc, #208]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d017      	beq.n	8005a00 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059d0:	4b31      	ldr	r3, [pc, #196]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d4:	0a5b      	lsrs	r3, r3, #9
 80059d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80059e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f6:	ee17 2a90 	vmov	r2, s15
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e002      	b.n	8005a06 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005a06:	4b24      	ldr	r3, [pc, #144]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d017      	beq.n	8005a42 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a12:	4b21      	ldr	r3, [pc, #132]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005a24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a28:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a38:	ee17 2a90 	vmov	r2, s15
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005a48:	4b13      	ldr	r3, [pc, #76]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d017      	beq.n	8005a84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a54:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a58:	0e1b      	lsrs	r3, r3, #24
 8005a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005a66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7a:	ee17 2a90 	vmov	r2, s15
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a82:	e002      	b.n	8005a8a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	609a      	str	r2, [r3, #8]
}
 8005a8a:	bf00      	nop
 8005a8c:	3724      	adds	r7, #36	@ 0x24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	46020c00 	.word	0x46020c00
 8005a9c:	4b742400 	.word	0x4b742400
 8005aa0:	46000000 	.word	0x46000000
 8005aa4:	08009a08 	.word	0x08009a08

08005aa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b089      	sub	sp, #36	@ 0x24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005ab0:	4ba6      	ldr	r3, [pc, #664]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005aba:	4ba4      	ldr	r3, [pc, #656]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005ac4:	4ba1      	ldr	r3, [pc, #644]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	3301      	adds	r3, #1
 8005ad0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005ad2:	4b9e      	ldr	r3, [pc, #632]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005ade:	4b9b      	ldr	r3, [pc, #620]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	08db      	lsrs	r3, r3, #3
 8005ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d062      	beq.n	8005bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	f200 8081 	bhi.w	8005c0a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d024      	beq.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d17a      	bne.n	8005c0a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b26:	4b89      	ldr	r3, [pc, #548]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b3a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b56:	e08f      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005b58:	4b7c      	ldr	r3, [pc, #496]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005b64:	4b79      	ldr	r3, [pc, #484]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	0f1b      	lsrs	r3, r3, #28
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	e006      	b.n	8005b7e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005b70:	4b76      	ldr	r3, [pc, #472]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	0f1b      	lsrs	r3, r3, #28
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	4a76      	ldr	r2, [pc, #472]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ba8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bc4:	e058      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005be8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c08:	e036      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005c0a:	4b50      	ldr	r3, [pc, #320]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005c16:	4b4d      	ldr	r3, [pc, #308]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	0f1b      	lsrs	r3, r3, #28
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	e006      	b.n	8005c30 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005c22:	4b4a      	ldr	r3, [pc, #296]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	0f1b      	lsrs	r3, r3, #28
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	4a49      	ldr	r2, [pc, #292]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c5a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c76:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005c78:	4b34      	ldr	r3, [pc, #208]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d017      	beq.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c84:	4b31      	ldr	r3, [pc, #196]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	0a5b      	lsrs	r3, r3, #9
 8005c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005caa:	ee17 2a90 	vmov	r2, s15
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	e002      	b.n	8005cba <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005cba:	4b24      	ldr	r3, [pc, #144]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d017      	beq.n	8005cf6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005cc6:	4b21      	ldr	r3, [pc, #132]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cca:	0c1b      	lsrs	r3, r3, #16
 8005ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005cd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cec:	ee17 2a90 	vmov	r2, s15
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	605a      	str	r2, [r3, #4]
 8005cf4:	e002      	b.n	8005cfc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005cfc:	4b13      	ldr	r3, [pc, #76]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d017      	beq.n	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d08:	4b10      	ldr	r3, [pc, #64]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0c:	0e1b      	lsrs	r3, r3, #24
 8005d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2e:	ee17 2a90 	vmov	r2, s15
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d36:	e002      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	609a      	str	r2, [r3, #8]
}
 8005d3e:	bf00      	nop
 8005d40:	3724      	adds	r7, #36	@ 0x24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	46020c00 	.word	0x46020c00
 8005d50:	4b742400 	.word	0x4b742400
 8005d54:	46000000 	.word	0x46000000
 8005d58:	08009a08 	.word	0x08009a08

08005d5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b089      	sub	sp, #36	@ 0x24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005d64:	4ba6      	ldr	r3, [pc, #664]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005d6e:	4ba4      	ldr	r3, [pc, #656]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005d78:	4ba1      	ldr	r3, [pc, #644]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	3301      	adds	r3, #1
 8005d84:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005d86:	4b9e      	ldr	r3, [pc, #632]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8a:	091b      	lsrs	r3, r3, #4
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005d92:	4b9b      	ldr	r3, [pc, #620]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d96:	08db      	lsrs	r3, r3, #3
 8005d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d062      	beq.n	8005e7a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	f200 8081 	bhi.w	8005ebe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d024      	beq.n	8005e0c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d17a      	bne.n	8005ebe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dda:	4b89      	ldr	r3, [pc, #548]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005e0a:	e08f      	b.n	8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e0c:	4b7c      	ldr	r3, [pc, #496]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005e18:	4b79      	ldr	r3, [pc, #484]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	0f1b      	lsrs	r3, r3, #28
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	e006      	b.n	8005e32 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005e24:	4b76      	ldr	r3, [pc, #472]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	0f1b      	lsrs	r3, r3, #28
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	4a76      	ldr	r2, [pc, #472]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	ee07 3a90 	vmov	s15, r3
 8005e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e58:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e5c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e78:	e058      	b.n	8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e84:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ea0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ebc:	e036      	b.n	8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ebe:	4b50      	ldr	r3, [pc, #320]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005eca:	4b4d      	ldr	r3, [pc, #308]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0f1b      	lsrs	r3, r3, #28
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005edc:	041b      	lsls	r3, r3, #16
 8005ede:	0f1b      	lsrs	r3, r3, #28
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	4a49      	ldr	r2, [pc, #292]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f2a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005f2c:	4b34      	ldr	r3, [pc, #208]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d017      	beq.n	8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f38:	4b31      	ldr	r3, [pc, #196]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3c:	0a5b      	lsrs	r3, r3, #9
 8005f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5e:	ee17 2a90 	vmov	r2, s15
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005f6e:	4b24      	ldr	r3, [pc, #144]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d017      	beq.n	8005faa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f7a:	4b21      	ldr	r3, [pc, #132]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f90:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa0:	ee17 2a90 	vmov	r2, s15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	605a      	str	r2, [r3, #4]
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005fb0:	4b13      	ldr	r3, [pc, #76]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d017      	beq.n	8005fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fbc:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc0:	0e1b      	lsrs	r3, r3, #24
 8005fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe2:	ee17 2a90 	vmov	r2, s15
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fea:	e002      	b.n	8005ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	609a      	str	r2, [r3, #8]
}
 8005ff2:	bf00      	nop
 8005ff4:	3724      	adds	r7, #36	@ 0x24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	46020c00 	.word	0x46020c00
 8006004:	4b742400 	.word	0x4b742400
 8006008:	46000000 	.word	0x46000000
 800600c:	08009a08 	.word	0x08009a08

08006010 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08e      	sub	sp, #56	@ 0x38
 8006014:	af00      	add	r7, sp, #0
 8006016:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800601a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800601e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006022:	430b      	orrs	r3, r1
 8006024:	d145      	bne.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006026:	4baa      	ldr	r3, [pc, #680]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800602c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006030:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006032:	4ba7      	ldr	r3, [pc, #668]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d108      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006046:	d104      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006048:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
 800604e:	f001 b987 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006052:	4b9f      	ldr	r3, [pc, #636]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800605c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006060:	d114      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006068:	d110      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800606a:	4b99      	ldr	r3, [pc, #612]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800606c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006078:	d103      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800607a:	23fa      	movs	r3, #250	@ 0xfa
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800607e:	f001 b96f 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006082:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006086:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006088:	f001 b96a 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800608c:	4b90      	ldr	r3, [pc, #576]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006098:	d107      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060a0:	d103      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80060a2:	4b8c      	ldr	r3, [pc, #560]	@ (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80060a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a6:	f001 b95b 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ae:	f001 b957 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80060b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060ba:	430b      	orrs	r3, r1
 80060bc:	d151      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80060be:	4b84      	ldr	r3, [pc, #528]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80060c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060c4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80060c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	2b80      	cmp	r3, #128	@ 0x80
 80060ce:	d035      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	2b80      	cmp	r3, #128	@ 0x80
 80060d4:	d841      	bhi.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	2b60      	cmp	r3, #96	@ 0x60
 80060da:	d02a      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	2b60      	cmp	r3, #96	@ 0x60
 80060e0:	d83b      	bhi.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	2b40      	cmp	r3, #64	@ 0x40
 80060e6:	d009      	beq.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	2b40      	cmp	r3, #64	@ 0x40
 80060ec:	d835      	bhi.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00c      	beq.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d012      	beq.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80060fa:	e02e      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fb77 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800610a:	f001 b929 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800610e:	f107 0318 	add.w	r3, r7, #24
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff fcc8 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800611c:	f001 b920 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006120:	f107 030c 	add.w	r3, r7, #12
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fe19 	bl	8005d5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800612e:	f001 b917 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006132:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006138:	f001 b912 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800613c:	4b64      	ldr	r3, [pc, #400]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006148:	d103      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800614a:	4b63      	ldr	r3, [pc, #396]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800614e:	f001 b907 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006156:	f001 b903 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800615e:	f001 b8ff 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006166:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800616a:	430b      	orrs	r3, r1
 800616c:	d158      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800616e:	4b58      	ldr	r3, [pc, #352]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006170:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006174:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006180:	d03b      	beq.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006188:	d846      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006190:	d02e      	beq.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006198:	d83e      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a0:	d00b      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a8:	d836      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00d      	beq.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b6:	d012      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80061b8:	e02e      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff fb18 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061c8:	f001 b8ca 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061cc:	f107 0318 	add.w	r3, r7, #24
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fc69 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061da:	f001 b8c1 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061de:	f107 030c 	add.w	r3, r7, #12
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fdba 	bl	8005d5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061ec:	f001 b8b8 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061f0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061f6:	f001 b8b3 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061fa:	4b35      	ldr	r3, [pc, #212]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006206:	d103      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006208:	4b33      	ldr	r3, [pc, #204]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800620a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800620c:	f001 b8a8 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006214:	f001 b8a4 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800621c:	f001 b8a0 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006224:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006228:	430b      	orrs	r3, r1
 800622a:	d16e      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800622c:	4b28      	ldr	r3, [pc, #160]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800622e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006232:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006236:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800623e:	d034      	beq.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8006240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006242:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006246:	d85c      	bhi.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800624e:	d00b      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006256:	d854      	bhi.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	2b00      	cmp	r3, #0
 800625c:	d016      	beq.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006264:	d009      	beq.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006266:	e04c      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fac1 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006276:	f001 b873 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800627a:	f107 0318 	add.w	r3, r7, #24
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff fc12 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006288:	f001 b86a 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800628c:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006298:	d103      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800629a:	4b10      	ldr	r3, [pc, #64]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800629c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800629e:	f001 b85f 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062a6:	f001 b85b 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80062aa:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d121      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062b6:	4b06      	ldr	r3, [pc, #24]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80062c2:	4b03      	ldr	r3, [pc, #12]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	0e1b      	lsrs	r3, r3, #24
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	e00f      	b.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80062ce:	bf00      	nop
 80062d0:	46020c00 	.word	0x46020c00
 80062d4:	0007a120 	.word	0x0007a120
 80062d8:	00f42400 	.word	0x00f42400
 80062dc:	02dc6c00 	.word	0x02dc6c00
 80062e0:	4ba7      	ldr	r3, [pc, #668]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062e6:	041b      	lsls	r3, r3, #16
 80062e8:	0e1b      	lsrs	r3, r3, #24
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	4aa5      	ldr	r2, [pc, #660]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80062f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062f6:	f001 b833 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062fe:	f001 b82f 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006306:	f001 b82b 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800630a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630e:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006312:	430b      	orrs	r3, r1
 8006314:	d17f      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006316:	4b9a      	ldr	r3, [pc, #616]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006318:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800631c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006320:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	2b00      	cmp	r3, #0
 8006326:	d165      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006328:	4b95      	ldr	r3, [pc, #596]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800632a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800632e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006332:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006336:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800633a:	d034      	beq.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006342:	d853      	bhi.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800634a:	d00b      	beq.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006352:	d84b      	bhi.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	2b00      	cmp	r3, #0
 8006358:	d016      	beq.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006360:	d009      	beq.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006362:	e043      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff fa43 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006372:	f000 bff5 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006376:	f107 0318 	add.w	r3, r7, #24
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fb94 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006384:	f000 bfec 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006388:	4b7d      	ldr	r3, [pc, #500]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006394:	d103      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8006396:	4b7c      	ldr	r3, [pc, #496]	@ (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006398:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800639a:	f000 bfe1 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063a2:	f000 bfdd 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063a6:	4b76      	ldr	r3, [pc, #472]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d118      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063b2:	4b73      	ldr	r3, [pc, #460]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80063be:	4b70      	ldr	r3, [pc, #448]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	0e1b      	lsrs	r3, r3, #24
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	e006      	b.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80063ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	0e1b      	lsrs	r3, r3, #24
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	4a6a      	ldr	r2, [pc, #424]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80063da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80063e0:	f000 bfbe 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063e8:	f000 bfba 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063f0:	f000 bfb6 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80063f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063fa:	d108      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff f9f7 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	637b      	str	r3, [r7, #52]	@ 0x34
 800640a:	f000 bfa9 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
 8006412:	f000 bfa5 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641a:	1e51      	subs	r1, r2, #1
 800641c:	430b      	orrs	r3, r1
 800641e:	d136      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006420:	4b57      	ldr	r3, [pc, #348]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006432:	f7fe fb8d 	bl	8004b50 <HAL_RCC_GetPCLK2Freq>
 8006436:	6378      	str	r0, [r7, #52]	@ 0x34
 8006438:	f000 bf92 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	2b01      	cmp	r3, #1
 8006440:	d104      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006442:	f7fe fa55 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8006446:	6378      	str	r0, [r7, #52]	@ 0x34
 8006448:	f000 bf8a 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800644c:	4b4c      	ldr	r3, [pc, #304]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006458:	d106      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	2b02      	cmp	r3, #2
 800645e:	d103      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006460:	4b4a      	ldr	r3, [pc, #296]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
 8006464:	f000 bf7c 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006468:	4b45      	ldr	r3, [pc, #276]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800646a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b02      	cmp	r3, #2
 8006474:	d107      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	2b03      	cmp	r3, #3
 800647a:	d104      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800647c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006480:	637b      	str	r3, [r7, #52]	@ 0x34
 8006482:	f000 bf6d 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	637b      	str	r3, [r7, #52]	@ 0x34
 800648a:	f000 bf69 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800648e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006492:	1e91      	subs	r1, r2, #2
 8006494:	430b      	orrs	r3, r1
 8006496:	d136      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006498:	4b39      	ldr	r3, [pc, #228]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800649a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800649e:	f003 030c 	and.w	r3, r3, #12
 80064a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064aa:	f7fe fb3d 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 80064ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80064b0:	f000 bf56 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d104      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064ba:	f7fe fa19 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80064be:	6378      	str	r0, [r7, #52]	@ 0x34
 80064c0:	f000 bf4e 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80064c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d0:	d106      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d103      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80064d8:	4b2c      	ldr	r3, [pc, #176]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34
 80064dc:	f000 bf40 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80064e0:	4b27      	ldr	r3, [pc, #156]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d107      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	2b0c      	cmp	r3, #12
 80064f2:	d104      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80064f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fa:	f000 bf31 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	637b      	str	r3, [r7, #52]	@ 0x34
 8006502:	f000 bf2d 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650a:	1f11      	subs	r1, r2, #4
 800650c:	430b      	orrs	r3, r1
 800650e:	d13f      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006510:	4b1b      	ldr	r3, [pc, #108]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006516:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800651a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006522:	f7fe fb01 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006526:	6378      	str	r0, [r7, #52]	@ 0x34
 8006528:	f000 bf1a 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	2b10      	cmp	r3, #16
 8006530:	d104      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006532:	f7fe f9dd 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8006536:	6378      	str	r0, [r7, #52]	@ 0x34
 8006538:	f000 bf12 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800653c:	4b10      	ldr	r3, [pc, #64]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006548:	d106      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	2b20      	cmp	r3, #32
 800654e:	d103      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006550:	4b0e      	ldr	r3, [pc, #56]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006552:	637b      	str	r3, [r7, #52]	@ 0x34
 8006554:	f000 bf04 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006558:	4b09      	ldr	r3, [pc, #36]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800655a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b02      	cmp	r3, #2
 8006564:	d107      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	2b30      	cmp	r3, #48	@ 0x30
 800656a:	d104      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800656c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
 8006572:	f000 bef5 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
 800657a:	f000 bef1 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800657e:	bf00      	nop
 8006580:	46020c00 	.word	0x46020c00
 8006584:	08009a08 	.word	0x08009a08
 8006588:	02dc6c00 	.word	0x02dc6c00
 800658c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006594:	f1a2 0108 	sub.w	r1, r2, #8
 8006598:	430b      	orrs	r3, r1
 800659a:	d136      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800659c:	4ba4      	ldr	r3, [pc, #656]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800659e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d104      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065ae:	f7fe fabb 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 80065b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80065b4:	f000 bed4 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80065b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ba:	2b40      	cmp	r3, #64	@ 0x40
 80065bc:	d104      	bne.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065be:	f7fe f997 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80065c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80065c4:	f000 becc 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80065c8:	4b99      	ldr	r3, [pc, #612]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065d4:	d106      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	2b80      	cmp	r3, #128	@ 0x80
 80065da:	d103      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80065dc:	4b95      	ldr	r3, [pc, #596]	@ (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80065de:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e0:	f000 bebe 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80065e4:	4b92      	ldr	r3, [pc, #584]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d107      	bne.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80065f6:	d104      	bne.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 80065f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065fe:	f000 beaf 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
 8006606:	f000 beab 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800660a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800660e:	f1a2 0110 	sub.w	r1, r2, #16
 8006612:	430b      	orrs	r3, r1
 8006614:	d139      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006616:	4b86      	ldr	r3, [pc, #536]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800661c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006620:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006628:	f7fe fa7e 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 800662c:	6378      	str	r0, [r7, #52]	@ 0x34
 800662e:	f000 be97 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006638:	d104      	bne.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800663a:	f7fe f959 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 800663e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006640:	f000 be8e 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006644:	4b7a      	ldr	r3, [pc, #488]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800664c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006650:	d107      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006658:	d103      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800665a:	4b76      	ldr	r3, [pc, #472]	@ (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800665c:	637b      	str	r3, [r7, #52]	@ 0x34
 800665e:	f000 be7f 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006662:	4b73      	ldr	r3, [pc, #460]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d108      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006676:	d104      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006678:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
 800667e:	f000 be6f 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	637b      	str	r3, [r7, #52]	@ 0x34
 8006686:	f000 be6b 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800668a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668e:	f1a2 0120 	sub.w	r1, r2, #32
 8006692:	430b      	orrs	r3, r1
 8006694:	d158      	bne.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006696:	4b66      	ldr	r3, [pc, #408]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80066a8:	f7fe fa66 	bl	8004b78 <HAL_RCC_GetPCLK3Freq>
 80066ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80066ae:	f000 be57 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d104      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066b8:	f7fe f91a 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80066bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80066be:	f000 be4f 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80066c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ce:	d106      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d103      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80066d6:	4b57      	ldr	r3, [pc, #348]	@ (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80066d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066da:	f000 be41 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80066de:	4b54      	ldr	r3, [pc, #336]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d107      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d104      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80066f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f8:	f000 be32 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80066fc:	4b4c      	ldr	r3, [pc, #304]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b20      	cmp	r3, #32
 8006706:	d11b      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	2b04      	cmp	r3, #4
 800670c:	d118      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800670e:	4b48      	ldr	r3, [pc, #288]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800671a:	4b45      	ldr	r3, [pc, #276]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	0e1b      	lsrs	r3, r3, #24
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	e006      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006726:	4b42      	ldr	r3, [pc, #264]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	0e1b      	lsrs	r3, r3, #24
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	4a40      	ldr	r2, [pc, #256]	@ (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
 800673c:	f000 be10 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	637b      	str	r3, [r7, #52]	@ 0x34
 8006744:	f000 be0c 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800674c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006750:	430b      	orrs	r3, r1
 8006752:	d173      	bne.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006754:	4b36      	ldr	r3, [pc, #216]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800675a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800675e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006766:	d104      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006768:	f7fe f8c2 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 800676c:	6378      	str	r0, [r7, #52]	@ 0x34
 800676e:	f000 bdf7 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006778:	d108      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800677a:	f107 0318 	add.w	r3, r7, #24
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff f992 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	637b      	str	r3, [r7, #52]	@ 0x34
 8006788:	f000 bdea 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006792:	f7fe f9af 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8006796:	6378      	str	r0, [r7, #52]	@ 0x34
 8006798:	f000 bde2 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067a2:	d122      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067a4:	4b22      	ldr	r3, [pc, #136]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d118      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80067bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	0e1b      	lsrs	r3, r3, #24
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	e006      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80067c8:	4b19      	ldr	r3, [pc, #100]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	0e1b      	lsrs	r3, r3, #24
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	4a18      	ldr	r2, [pc, #96]	@ (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80067d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067de:	f000 bdbf 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e6:	f000 bdbb 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80067ea:	4b11      	ldr	r3, [pc, #68]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f6:	d107      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067fe:	d103      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006800:	4b0c      	ldr	r3, [pc, #48]	@ (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006802:	637b      	str	r3, [r7, #52]	@ 0x34
 8006804:	f000 bdac 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006808:	4b09      	ldr	r3, [pc, #36]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006814:	d107      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800681c:	d103      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800681e:	4b05      	ldr	r3, [pc, #20]	@ (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
 8006822:	f000 bd9d 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
 800682a:	f000 bd99 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800682e:	bf00      	nop
 8006830:	46020c00 	.word	0x46020c00
 8006834:	00f42400 	.word	0x00f42400
 8006838:	08009a08 	.word	0x08009a08
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800683c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006840:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006844:	430b      	orrs	r3, r1
 8006846:	d158      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006848:	4bad      	ldr	r3, [pc, #692]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800684a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	2b04      	cmp	r3, #4
 8006858:	d84b      	bhi.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800685a:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006899 	.word	0x08006899
 8006864:	08006875 	.word	0x08006875
 8006868:	08006887 	.word	0x08006887
 800686c:	080068a3 	.word	0x080068a3
 8006870:	080068ad 	.word	0x080068ad
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe ffbb 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006882:	f000 bd6d 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006886:	f107 030c 	add.w	r3, r7, #12
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff fa66 	bl	8005d5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006894:	f000 bd64 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006898:	f7fe f92c 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 800689c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800689e:	f000 bd5f 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068a8:	f000 bd5a 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068ac:	4b94      	ldr	r3, [pc, #592]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b20      	cmp	r3, #32
 80068b6:	d118      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068b8:	4b91      	ldr	r3, [pc, #580]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80068c4:	4b8e      	ldr	r3, [pc, #568]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	0e1b      	lsrs	r3, r3, #24
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	e006      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80068d0:	4b8b      	ldr	r3, [pc, #556]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068d6:	041b      	lsls	r3, r3, #16
 80068d8:	0e1b      	lsrs	r3, r3, #24
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	4a89      	ldr	r2, [pc, #548]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80068e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068e6:	f000 bd3b 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068ee:	f000 bd37 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068f6:	f000 bd33 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80068fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068fe:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006902:	430b      	orrs	r3, r1
 8006904:	d167      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006906:	4b7e      	ldr	r3, [pc, #504]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800690c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006910:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006918:	d036      	beq.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006920:	d855      	bhi.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006928:	d029      	beq.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006930:	d84d      	bhi.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006938:	d013      	beq.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006940:	d845      	bhi.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	2b00      	cmp	r3, #0
 8006946:	d015      	beq.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694e:	d13e      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe ff4d 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800695e:	f000 bcff 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006962:	f107 030c 	add.w	r3, r7, #12
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff f9f8 	bl	8005d5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006970:	f000 bcf6 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006974:	f7fe f8be 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8006978:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800697a:	f000 bcf1 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800697e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006984:	f000 bcec 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006988:	4b5d      	ldr	r3, [pc, #372]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b20      	cmp	r3, #32
 8006992:	d118      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006994:	4b5a      	ldr	r3, [pc, #360]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80069a0:	4b57      	ldr	r3, [pc, #348]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	0e1b      	lsrs	r3, r3, #24
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	e006      	b.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80069ac:	4b54      	ldr	r3, [pc, #336]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	4a52      	ldr	r2, [pc, #328]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80069bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069c2:	f000 bccd 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ca:	f000 bcc9 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069d2:	f000 bcc5 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80069d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069da:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80069de:	430b      	orrs	r3, r1
 80069e0:	d14c      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80069e2:	4b47      	ldr	r3, [pc, #284]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069f4:	f7fe f898 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 80069f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80069fa:	f000 bcb1 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a04:	d104      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a06:	f7fd ff73 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8006a0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a0c:	f000 bca8 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006a10:	4b3b      	ldr	r3, [pc, #236]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1c:	d107      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a24:	d103      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006a26:	4b38      	ldr	r3, [pc, #224]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2a:	f000 bc99 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006a2e:	4b34      	ldr	r3, [pc, #208]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d11c      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a40:	d118      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a42:	4b2f      	ldr	r3, [pc, #188]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	0e1b      	lsrs	r3, r3, #24
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	e006      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8006a5a:	4b29      	ldr	r3, [pc, #164]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	0e1b      	lsrs	r3, r3, #24
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	4a26      	ldr	r2, [pc, #152]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a70:	f000 bc76 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a78:	f000 bc72 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a80:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006a84:	430b      	orrs	r3, r1
 8006a86:	d152      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006a88:	4b1d      	ldr	r3, [pc, #116]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a8e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a92:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d104      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a9a:	f7fe f845 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006a9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006aa0:	f000 bc5e 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aaa:	d104      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006aac:	f7fd ff20 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8006ab0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ab2:	f000 bc55 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006ab6:	4b12      	ldr	r3, [pc, #72]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac2:	d107      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aca:	d103      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006acc:	4b0e      	ldr	r3, [pc, #56]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad0:	f000 bc46 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d122      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ae6:	d11e      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ae8:	4b05      	ldr	r3, [pc, #20]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006af4:	4b02      	ldr	r3, [pc, #8]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	0e1b      	lsrs	r3, r3, #24
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	e00c      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006b00:	46020c00 	.word	0x46020c00
 8006b04:	08009a08 	.word	0x08009a08
 8006b08:	00f42400 	.word	0x00f42400
 8006b0c:	4ba1      	ldr	r3, [pc, #644]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b12:	041b      	lsls	r3, r3, #16
 8006b14:	0e1b      	lsrs	r3, r3, #24
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	4a9f      	ldr	r2, [pc, #636]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b22:	f000 bc1d 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2a:	f000 bc19 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b32:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006b36:	430b      	orrs	r3, r1
 8006b38:	d151      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b3a:	4b96      	ldr	r3, [pc, #600]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b40:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b44:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b4a:	d024      	beq.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b50:	d842      	bhi.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	2b80      	cmp	r3, #128	@ 0x80
 8006b56:	d00d      	beq.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	2b80      	cmp	r3, #128	@ 0x80
 8006b5c:	d83c      	bhi.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	2b40      	cmp	r3, #64	@ 0x40
 8006b68:	d011      	beq.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8006b6a:	e035      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006b6c:	f7fe f804 	bl	8004b78 <HAL_RCC_GetPCLK3Freq>
 8006b70:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b72:	e3f5      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b74:	4b87      	ldr	r3, [pc, #540]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b80:	d102      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006b82:	4b86      	ldr	r3, [pc, #536]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006b84:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b86:	e3eb      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b8c:	e3e8      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006b8e:	f7fd feaf 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8006b92:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b94:	e3e4      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b96:	4b7f      	ldr	r3, [pc, #508]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d117      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8006bae:	4b79      	ldr	r3, [pc, #484]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	0e1b      	lsrs	r3, r3, #24
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	e006      	b.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006bba:	4b76      	ldr	r3, [pc, #472]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bc0:	041b      	lsls	r3, r3, #16
 8006bc2:	0e1b      	lsrs	r3, r3, #24
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	4a73      	ldr	r2, [pc, #460]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bd0:	e3c6      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bd6:	e3c3      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bdc:	e3c0      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be2:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006be6:	430b      	orrs	r3, r1
 8006be8:	d147      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006bea:	4b6a      	ldr	r3, [pc, #424]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006bf4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bfc:	f7fd ff94 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006c00:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c02:	e3ad      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c0a:	d103      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c0c:	f7fd fe70 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8006c10:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c12:	e3a5      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006c14:	4b5f      	ldr	r3, [pc, #380]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c20:	d106      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c28:	d102      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8006c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2e:	e397      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006c30:	4b58      	ldr	r3, [pc, #352]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d11b      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c42:	d117      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c44:	4b53      	ldr	r3, [pc, #332]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006c50:	4b50      	ldr	r3, [pc, #320]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	0e1b      	lsrs	r3, r3, #24
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	e006      	b.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c62:	041b      	lsls	r3, r3, #16
 8006c64:	0e1b      	lsrs	r3, r3, #24
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c72:	e375      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c78:	e372      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c7e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006c82:	430b      	orrs	r3, r1
 8006c84:	d164      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006c86:	4b43      	ldr	r3, [pc, #268]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c90:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d120      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c98:	4b3e      	ldr	r3, [pc, #248]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d117      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006cb0:	4b38      	ldr	r3, [pc, #224]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	0e1b      	lsrs	r3, r3, #24
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	e006      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006cbc:	4b35      	ldr	r3, [pc, #212]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	0e1b      	lsrs	r3, r3, #24
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	4a33      	ldr	r2, [pc, #204]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd2:	e345      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd8:	e342      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006cda:	4b2e      	ldr	r3, [pc, #184]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ce8:	d112      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf0:	d10e      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cf2:	4b28      	ldr	r3, [pc, #160]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d00:	d102      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006d02:	23fa      	movs	r3, #250	@ 0xfa
 8006d04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d06:	e32b      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d0e:	e327      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006d10:	4b20      	ldr	r3, [pc, #128]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d1c:	d106      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d24:	d102      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006d26:	4b1d      	ldr	r3, [pc, #116]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d2a:	e319      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006d2c:	4b19      	ldr	r3, [pc, #100]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d107      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d40:	d103      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d48:	e30a      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4e:	e307      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d54:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	d16b      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d62:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d66:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d127      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d6e:	4b09      	ldr	r3, [pc, #36]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d11e      	bne.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d7a:	4b06      	ldr	r3, [pc, #24]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00c      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006d86:	4b03      	ldr	r3, [pc, #12]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	0e1b      	lsrs	r3, r3, #24
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	e00d      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006d92:	bf00      	nop
 8006d94:	46020c00 	.word	0x46020c00
 8006d98:	08009a08 	.word	0x08009a08
 8006d9c:	00f42400 	.word	0x00f42400
 8006da0:	4b94      	ldr	r3, [pc, #592]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006da6:	041b      	lsls	r3, r3, #16
 8006da8:	0e1b      	lsrs	r3, r3, #24
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	4a92      	ldr	r2, [pc, #584]	@ (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db6:	e2d3      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dbc:	e2d0      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dcc:	d112      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd4:	d10e      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dd6:	4b87      	ldr	r3, [pc, #540]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006de4:	d102      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006de6:	23fa      	movs	r3, #250	@ 0xfa
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dea:	e2b9      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006dec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006df0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006df2:	e2b5      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006df4:	4b7f      	ldr	r3, [pc, #508]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e00:	d106      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e08:	d102      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0e:	e2a7      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006e10:	4b78      	ldr	r3, [pc, #480]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d107      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e24:	d103      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2c:	e298      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e32:	e295      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e38:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	d147      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006e40:	4b6c      	ldr	r3, [pc, #432]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e46:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006e4a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e52:	f7fd fe69 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006e56:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e58:	e282      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006e5a:	4b66      	ldr	r3, [pc, #408]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e68:	d112      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e70:	d10e      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e72:	4b60      	ldr	r3, [pc, #384]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e80:	d102      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006e82:	23fa      	movs	r3, #250	@ 0xfa
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e86:	e26b      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e88:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e8e:	e267      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006e90:	4b58      	ldr	r3, [pc, #352]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e9c:	d106      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ea4:	d102      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006ea6:	4b55      	ldr	r3, [pc, #340]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eaa:	e259      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006eac:	4b51      	ldr	r3, [pc, #324]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d107      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006ec0:	d103      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec8:	e24a      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ece:	e247      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	d12d      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006edc:	4b45      	ldr	r3, [pc, #276]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ee2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006ee6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006ee8:	4b42      	ldr	r3, [pc, #264]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ef4:	d105      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006efc:	4b3f      	ldr	r3, [pc, #252]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f00:	e22e      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f08:	d107      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fc70 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f18:	e222      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f20:	d107      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f22:	f107 0318 	add.w	r3, r7, #24
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fdbe 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f30:	e216      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f36:	e213      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f3c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006f40:	430b      	orrs	r3, r1
 8006f42:	d15d      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006f44:	4b2b      	ldr	r3, [pc, #172]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f4a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006f4e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f56:	d028      	beq.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f5e:	d845      	bhi.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f66:	d013      	beq.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f6e:	d83d      	bhi.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f7c:	d004      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006f7e:	e035      	b.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006f80:	f7fd fde6 	bl	8004b50 <HAL_RCC_GetPCLK2Freq>
 8006f84:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f86:	e1eb      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f88:	f7fd fcb2 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8006f8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f8e:	e1e7      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f90:	4b18      	ldr	r3, [pc, #96]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f9c:	d102      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006f9e:	4b17      	ldr	r3, [pc, #92]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fa2:	e1dd      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fa8:	e1da      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006faa:	4b12      	ldr	r3, [pc, #72]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d117      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	0e1b      	lsrs	r3, r3, #24
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	e006      	b.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006fce:	4b09      	ldr	r3, [pc, #36]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	0e1b      	lsrs	r3, r3, #24
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	4a06      	ldr	r2, [pc, #24]	@ (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fe4:	e1bc      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fea:	e1b9      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ff0:	e1b6      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006ff2:	bf00      	nop
 8006ff4:	46020c00 	.word	0x46020c00
 8006ff8:	08009a08 	.word	0x08009a08
 8006ffc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007004:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007008:	430b      	orrs	r3, r1
 800700a:	d156      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800700c:	4ba5      	ldr	r3, [pc, #660]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800700e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007016:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800701e:	d028      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007026:	d845      	bhi.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800702e:	d013      	beq.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8007030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007032:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007036:	d83d      	bhi.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703a:	2b00      	cmp	r3, #0
 800703c:	d004      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007044:	d004      	beq.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007046:	e035      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007048:	f7fd fd6e 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 800704c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800704e:	e187      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007050:	f7fd fc4e 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8007054:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007056:	e183      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007058:	4b92      	ldr	r3, [pc, #584]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007064:	d102      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8007066:	4b90      	ldr	r3, [pc, #576]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800706a:	e179      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007070:	e176      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007072:	4b8c      	ldr	r3, [pc, #560]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b20      	cmp	r3, #32
 800707c:	d117      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800707e:	4b89      	ldr	r3, [pc, #548]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800708a:	4b86      	ldr	r3, [pc, #536]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	0e1b      	lsrs	r3, r3, #24
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	e006      	b.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8007096:	4b83      	ldr	r3, [pc, #524]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	0e1b      	lsrs	r3, r3, #24
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	4a81      	ldr	r2, [pc, #516]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80070a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070ac:	e158      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070b2:	e155      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070b8:	e152      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80070ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070be:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80070c2:	430b      	orrs	r3, r1
 80070c4:	d177      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80070c6:	4b77      	ldr	r3, [pc, #476]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070cc:	f003 0318 	and.w	r3, r3, #24
 80070d0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	2b18      	cmp	r3, #24
 80070d6:	d86b      	bhi.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80070d8:	a201      	add	r2, pc, #4	@ (adr r2, 80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	08007145 	.word	0x08007145
 80070e4:	080071b1 	.word	0x080071b1
 80070e8:	080071b1 	.word	0x080071b1
 80070ec:	080071b1 	.word	0x080071b1
 80070f0:	080071b1 	.word	0x080071b1
 80070f4:	080071b1 	.word	0x080071b1
 80070f8:	080071b1 	.word	0x080071b1
 80070fc:	080071b1 	.word	0x080071b1
 8007100:	0800714d 	.word	0x0800714d
 8007104:	080071b1 	.word	0x080071b1
 8007108:	080071b1 	.word	0x080071b1
 800710c:	080071b1 	.word	0x080071b1
 8007110:	080071b1 	.word	0x080071b1
 8007114:	080071b1 	.word	0x080071b1
 8007118:	080071b1 	.word	0x080071b1
 800711c:	080071b1 	.word	0x080071b1
 8007120:	08007155 	.word	0x08007155
 8007124:	080071b1 	.word	0x080071b1
 8007128:	080071b1 	.word	0x080071b1
 800712c:	080071b1 	.word	0x080071b1
 8007130:	080071b1 	.word	0x080071b1
 8007134:	080071b1 	.word	0x080071b1
 8007138:	080071b1 	.word	0x080071b1
 800713c:	080071b1 	.word	0x080071b1
 8007140:	0800716f 	.word	0x0800716f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007144:	f7fd fd18 	bl	8004b78 <HAL_RCC_GetPCLK3Freq>
 8007148:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800714a:	e109      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800714c:	f7fd fbd0 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8007150:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007152:	e105      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007154:	4b53      	ldr	r3, [pc, #332]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800715c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007160:	d102      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8007162:	4b51      	ldr	r3, [pc, #324]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007164:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007166:	e0fb      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800716c:	e0f8      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800716e:	4b4d      	ldr	r3, [pc, #308]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b20      	cmp	r3, #32
 8007178:	d117      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800717a:	4b4a      	ldr	r3, [pc, #296]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8007186:	4b47      	ldr	r3, [pc, #284]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	0e1b      	lsrs	r3, r3, #24
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	e006      	b.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007192:	4b44      	ldr	r3, [pc, #272]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	0e1b      	lsrs	r3, r3, #24
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	4a42      	ldr	r2, [pc, #264]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80071a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071a8:	e0da      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ae:	e0d7      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071b4:	e0d4      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80071b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ba:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80071be:	430b      	orrs	r3, r1
 80071c0:	d155      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80071c2:	4b38      	ldr	r3, [pc, #224]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80071cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071d4:	d013      	beq.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071dc:	d844      	bhi.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071e4:	d013      	beq.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071ec:	d83c      	bhi.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d014      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071fa:	d014      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80071fc:	e034      	b.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071fe:	f107 0318 	add.w	r3, r7, #24
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fc50 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800720c:	e0a8      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800720e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe faee 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800721c:	e0a0      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800721e:	f7fd fb67 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8007222:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007224:	e09c      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007226:	4b1f      	ldr	r3, [pc, #124]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b20      	cmp	r3, #32
 8007230:	d117      	bne.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007232:	4b1c      	ldr	r3, [pc, #112]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d005      	beq.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800723e:	4b19      	ldr	r3, [pc, #100]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	0e1b      	lsrs	r3, r3, #24
 8007244:	f003 030f 	and.w	r3, r3, #15
 8007248:	e006      	b.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800724a:	4b16      	ldr	r3, [pc, #88]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800724c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007250:	041b      	lsls	r3, r3, #16
 8007252:	0e1b      	lsrs	r3, r3, #24
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	4a14      	ldr	r2, [pc, #80]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800725a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800725e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007260:	e07e      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007266:	e07b      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800726c:	e078      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800726e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007272:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007276:	430b      	orrs	r3, r1
 8007278:	d138      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800727a:	4b0a      	ldr	r3, [pc, #40]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800727c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007284:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007286:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b02      	cmp	r3, #2
 8007292:	d10d      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10a      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800729a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800729e:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a0:	e05e      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80072a2:	bf00      	nop
 80072a4:	46020c00 	.word	0x46020c00
 80072a8:	00f42400 	.word	0x00f42400
 80072ac:	08009a08 	.word	0x08009a08
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80072b0:	4b2e      	ldr	r3, [pc, #184]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072be:	d112      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c6:	d10e      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072c8:	4b28      	ldr	r3, [pc, #160]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072d6:	d102      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80072d8:	23fa      	movs	r3, #250	@ 0xfa
 80072da:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072dc:	e040      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80072de:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072e2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072e4:	e03c      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ea:	e039      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80072ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80072f4:	430b      	orrs	r3, r1
 80072f6:	d131      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80072f8:	4b1c      	ldr	r3, [pc, #112]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007302:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007304:	4b19      	ldr	r3, [pc, #100]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800730c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007310:	d105      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007318:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800731a:	637b      	str	r3, [r7, #52]	@ 0x34
 800731c:	e020      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800731e:	4b13      	ldr	r3, [pc, #76]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800732a:	d106      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007332:	d102      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007334:	4b0f      	ldr	r3, [pc, #60]	@ (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
 8007338:	e012      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800733a:	4b0c      	ldr	r3, [pc, #48]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007346:	d106      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800734e:	d102      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007350:	4b09      	ldr	r3, [pc, #36]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007352:	637b      	str	r3, [r7, #52]	@ 0x34
 8007354:	e004      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	637b      	str	r3, [r7, #52]	@ 0x34
 800735a:	e001      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007362:	4618      	mov	r0, r3
 8007364:	3738      	adds	r7, #56	@ 0x38
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	46020c00 	.word	0x46020c00
 8007370:	02dc6c00 	.word	0x02dc6c00
 8007374:	016e3600 	.word	0x016e3600
 8007378:	00f42400 	.word	0x00f42400

0800737c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007384:	4b47      	ldr	r3, [pc, #284]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a46      	ldr	r2, [pc, #280]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 800738a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800738e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007390:	f7fa f8b0 	bl	80014f4 <HAL_GetTick>
 8007394:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007396:	e008      	b.n	80073aa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007398:	f7fa f8ac 	bl	80014f4 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e077      	b.n	800749a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073aa:	4b3e      	ldr	r3, [pc, #248]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f0      	bne.n	8007398 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80073b6:	4b3b      	ldr	r3, [pc, #236]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 80073b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6811      	ldr	r1, [r2, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6852      	ldr	r2, [r2, #4]
 80073ca:	3a01      	subs	r2, #1
 80073cc:	0212      	lsls	r2, r2, #8
 80073ce:	430a      	orrs	r2, r1
 80073d0:	4934      	ldr	r1, [pc, #208]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80073d6:	4b33      	ldr	r3, [pc, #204]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 80073d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073da:	4b33      	ldr	r3, [pc, #204]	@ (80074a8 <RCCEx_PLL2_Config+0x12c>)
 80073dc:	4013      	ands	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6892      	ldr	r2, [r2, #8]
 80073e2:	3a01      	subs	r2, #1
 80073e4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68d2      	ldr	r2, [r2, #12]
 80073ec:	3a01      	subs	r2, #1
 80073ee:	0252      	lsls	r2, r2, #9
 80073f0:	b292      	uxth	r2, r2
 80073f2:	4311      	orrs	r1, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6912      	ldr	r2, [r2, #16]
 80073f8:	3a01      	subs	r2, #1
 80073fa:	0412      	lsls	r2, r2, #16
 80073fc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007400:	4311      	orrs	r1, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6952      	ldr	r2, [r2, #20]
 8007406:	3a01      	subs	r2, #1
 8007408:	0612      	lsls	r2, r2, #24
 800740a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800740e:	430a      	orrs	r2, r1
 8007410:	4924      	ldr	r1, [pc, #144]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007412:	4313      	orrs	r3, r2
 8007414:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007416:	4b23      	ldr	r3, [pc, #140]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	f023 020c 	bic.w	r2, r3, #12
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	4920      	ldr	r1, [pc, #128]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007424:	4313      	orrs	r3, r2
 8007426:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007428:	4b1e      	ldr	r3, [pc, #120]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 800742a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	491c      	ldr	r1, [pc, #112]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007432:	4313      	orrs	r3, r2
 8007434:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007436:	4b1b      	ldr	r3, [pc, #108]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743a:	4a1a      	ldr	r2, [pc, #104]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 800743c:	f023 0310 	bic.w	r3, r3, #16
 8007440:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007442:	4b18      	ldr	r3, [pc, #96]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800744a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	69d2      	ldr	r2, [r2, #28]
 8007452:	00d2      	lsls	r2, r2, #3
 8007454:	4913      	ldr	r1, [pc, #76]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007456:	4313      	orrs	r3, r2
 8007458:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800745a:	4b12      	ldr	r3, [pc, #72]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	4a11      	ldr	r2, [pc, #68]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007460:	f043 0310 	orr.w	r3, r3, #16
 8007464:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007466:	4b0f      	ldr	r3, [pc, #60]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a0e      	ldr	r2, [pc, #56]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 800746c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007470:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007472:	f7fa f83f 	bl	80014f4 <HAL_GetTick>
 8007476:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007478:	e008      	b.n	800748c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800747a:	f7fa f83b 	bl	80014f4 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e006      	b.n	800749a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800748c:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <RCCEx_PLL2_Config+0x128>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007498:	2300      	movs	r3, #0

}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	46020c00 	.word	0x46020c00
 80074a8:	80800000 	.word	0x80800000

080074ac <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80074b4:	4b47      	ldr	r3, [pc, #284]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a46      	ldr	r2, [pc, #280]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 80074ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074c0:	f7fa f818 	bl	80014f4 <HAL_GetTick>
 80074c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074c6:	e008      	b.n	80074da <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074c8:	f7fa f814 	bl	80014f4 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d901      	bls.n	80074da <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e077      	b.n	80075ca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074da:	4b3e      	ldr	r3, [pc, #248]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f0      	bne.n	80074c8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80074e6:	4b3b      	ldr	r3, [pc, #236]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 80074e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6811      	ldr	r1, [r2, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6852      	ldr	r2, [r2, #4]
 80074fa:	3a01      	subs	r2, #1
 80074fc:	0212      	lsls	r2, r2, #8
 80074fe:	430a      	orrs	r2, r1
 8007500:	4934      	ldr	r1, [pc, #208]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007502:	4313      	orrs	r3, r2
 8007504:	630b      	str	r3, [r1, #48]	@ 0x30
 8007506:	4b33      	ldr	r3, [pc, #204]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800750a:	4b33      	ldr	r3, [pc, #204]	@ (80075d8 <RCCEx_PLL3_Config+0x12c>)
 800750c:	4013      	ands	r3, r2
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6892      	ldr	r2, [r2, #8]
 8007512:	3a01      	subs	r2, #1
 8007514:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	68d2      	ldr	r2, [r2, #12]
 800751c:	3a01      	subs	r2, #1
 800751e:	0252      	lsls	r2, r2, #9
 8007520:	b292      	uxth	r2, r2
 8007522:	4311      	orrs	r1, r2
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	6912      	ldr	r2, [r2, #16]
 8007528:	3a01      	subs	r2, #1
 800752a:	0412      	lsls	r2, r2, #16
 800752c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007530:	4311      	orrs	r1, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6952      	ldr	r2, [r2, #20]
 8007536:	3a01      	subs	r2, #1
 8007538:	0612      	lsls	r2, r2, #24
 800753a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800753e:	430a      	orrs	r2, r1
 8007540:	4924      	ldr	r1, [pc, #144]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007542:	4313      	orrs	r3, r2
 8007544:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007546:	4b23      	ldr	r3, [pc, #140]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754a:	f023 020c 	bic.w	r2, r3, #12
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	4920      	ldr	r1, [pc, #128]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007554:	4313      	orrs	r3, r2
 8007556:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007558:	4b1e      	ldr	r3, [pc, #120]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 800755a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	491c      	ldr	r1, [pc, #112]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007562:	4313      	orrs	r3, r2
 8007564:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007566:	4b1b      	ldr	r3, [pc, #108]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756a:	4a1a      	ldr	r2, [pc, #104]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 800756c:	f023 0310 	bic.w	r3, r3, #16
 8007570:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007572:	4b18      	ldr	r3, [pc, #96]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800757a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	69d2      	ldr	r2, [r2, #28]
 8007582:	00d2      	lsls	r2, r2, #3
 8007584:	4913      	ldr	r1, [pc, #76]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007586:	4313      	orrs	r3, r2
 8007588:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800758a:	4b12      	ldr	r3, [pc, #72]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758e:	4a11      	ldr	r2, [pc, #68]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007590:	f043 0310 	orr.w	r3, r3, #16
 8007594:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007596:	4b0f      	ldr	r3, [pc, #60]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a0e      	ldr	r2, [pc, #56]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 800759c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075a0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075a2:	f7f9 ffa7 	bl	80014f4 <HAL_GetTick>
 80075a6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075a8:	e008      	b.n	80075bc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075aa:	f7f9 ffa3 	bl	80014f4 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e006      	b.n	80075ca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075bc:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <RCCEx_PLL3_Config+0x128>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0f0      	beq.n	80075aa <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	46020c00 	.word	0x46020c00
 80075d8:	80800000 	.word	0x80800000

080075dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e0fb      	b.n	80077e6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a7f      	ldr	r2, [pc, #508]	@ (80077f0 <HAL_SPI_Init+0x214>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_SPI_Init+0x26>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a7d      	ldr	r2, [pc, #500]	@ (80077f4 <HAL_SPI_Init+0x218>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	e000      	b.n	8007604 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007602:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a78      	ldr	r2, [pc, #480]	@ (80077f0 <HAL_SPI_Init+0x214>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d004      	beq.n	800761e <HAL_SPI_Init+0x42>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a76      	ldr	r2, [pc, #472]	@ (80077f4 <HAL_SPI_Init+0x218>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d105      	bne.n	800762a <HAL_SPI_Init+0x4e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b0f      	cmp	r3, #15
 8007624:	d901      	bls.n	800762a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e0dd      	b.n	80077e6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fbca 	bl	8007dc4 <SPI_GetPacketSize>
 8007630:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a6e      	ldr	r2, [pc, #440]	@ (80077f0 <HAL_SPI_Init+0x214>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d004      	beq.n	8007646 <HAL_SPI_Init+0x6a>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a6c      	ldr	r2, [pc, #432]	@ (80077f4 <HAL_SPI_Init+0x218>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d102      	bne.n	800764c <HAL_SPI_Init+0x70>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b08      	cmp	r3, #8
 800764a:	d816      	bhi.n	800767a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007650:	4a69      	ldr	r2, [pc, #420]	@ (80077f8 <HAL_SPI_Init+0x21c>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a68      	ldr	r2, [pc, #416]	@ (80077fc <HAL_SPI_Init+0x220>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_SPI_Init+0x98>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a66      	ldr	r2, [pc, #408]	@ (8007800 <HAL_SPI_Init+0x224>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_SPI_Init+0x98>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a65      	ldr	r2, [pc, #404]	@ (8007804 <HAL_SPI_Init+0x228>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d104      	bne.n	800767e <HAL_SPI_Init+0xa2>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b10      	cmp	r3, #16
 8007678:	d901      	bls.n	800767e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e0b3      	b.n	80077e6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7f9 fb24 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0201 	bic.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80076ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076c4:	d119      	bne.n	80076fa <HAL_SPI_Init+0x11e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ce:	d103      	bne.n	80076d8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d008      	beq.n	80076ea <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10c      	bne.n	80076fa <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80076e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076e8:	d107      	bne.n	80076fa <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00f      	beq.n	8007726 <HAL_SPI_Init+0x14a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	2b06      	cmp	r3, #6
 800770c:	d90b      	bls.n	8007726 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e007      	b.n	8007736 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007734:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69da      	ldr	r2, [r3, #28]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773e:	431a      	orrs	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007748:	ea42 0103 	orr.w	r1, r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	431a      	orrs	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	431a      	orrs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	431a      	orrs	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a2:	ea42 0103 	orr.w	r1, r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	46002000 	.word	0x46002000
 80077f4:	56002000 	.word	0x56002000
 80077f8:	40013000 	.word	0x40013000
 80077fc:	50013000 	.word	0x50013000
 8007800:	40003800 	.word	0x40003800
 8007804:	50003800 	.word	0x50003800

08007808 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af02      	add	r7, sp, #8
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3320      	adds	r3, #32
 800781e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007820:	f7f9 fe68 	bl	80014f4 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b01      	cmp	r3, #1
 8007830:	d001      	beq.n	8007836 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007832:	2302      	movs	r3, #2
 8007834:	e1f3      	b.n	8007c1e <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <HAL_SPI_Transmit+0x3a>
 800783c:	88fb      	ldrh	r3, [r7, #6]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e1eb      	b.n	8007c1e <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_SPI_Transmit+0x4c>
 8007850:	2302      	movs	r3, #2
 8007852:	e1e4      	b.n	8007c1e <HAL_SPI_Transmit+0x416>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2203      	movs	r2, #3
 8007860:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80078ac:	d108      	bne.n	80078c0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	e009      	b.n	80078d4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80078d2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	0c1b      	lsrs	r3, r3, #16
 80078dc:	041b      	lsls	r3, r3, #16
 80078de:	88f9      	ldrh	r1, [r7, #6]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	6812      	ldr	r2, [r2, #0]
 80078e4:	430b      	orrs	r3, r1
 80078e6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10c      	bne.n	8007920 <HAL_SPI_Transmit+0x118>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800790e:	d107      	bne.n	8007920 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800791e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	2b0f      	cmp	r3, #15
 8007926:	d95b      	bls.n	80079e0 <HAL_SPI_Transmit+0x1d8>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a8f      	ldr	r2, [pc, #572]	@ (8007b6c <HAL_SPI_Transmit+0x364>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d04f      	beq.n	80079d2 <HAL_SPI_Transmit+0x1ca>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a8e      	ldr	r2, [pc, #568]	@ (8007b70 <HAL_SPI_Transmit+0x368>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d04a      	beq.n	80079d2 <HAL_SPI_Transmit+0x1ca>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a8c      	ldr	r2, [pc, #560]	@ (8007b74 <HAL_SPI_Transmit+0x36c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d045      	beq.n	80079d2 <HAL_SPI_Transmit+0x1ca>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a8b      	ldr	r2, [pc, #556]	@ (8007b78 <HAL_SPI_Transmit+0x370>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d147      	bne.n	80079e0 <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007950:	e03f      	b.n	80079d2 <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	d114      	bne.n	800798a <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6812      	ldr	r2, [r2, #0]
 800796a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007970:	1d1a      	adds	r2, r3, #4
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007988:	e023      	b.n	80079d2 <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800798a:	f7f9 fdb3 	bl	80014f4 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d803      	bhi.n	80079a2 <HAL_SPI_Transmit+0x19a>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a0:	d102      	bne.n	80079a8 <HAL_SPI_Transmit+0x1a0>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d114      	bne.n	80079d2 <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f93d 	bl	8007c28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e125      	b.n	8007c1e <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1b9      	bne.n	8007952 <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80079de:	e0f8      	b.n	8007bd2 <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b07      	cmp	r3, #7
 80079e6:	f240 80ed 	bls.w	8007bc4 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80079ea:	e05d      	b.n	8007aa8 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d132      	bne.n	8007a60 <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d918      	bls.n	8007a38 <HAL_SPI_Transmit+0x230>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d014      	beq.n	8007a38 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6812      	ldr	r2, [r2, #0]
 8007a18:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a1e:	1d1a      	adds	r2, r3, #4
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b02      	subs	r3, #2
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a36:	e037      	b.n	8007aa8 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a3c:	881a      	ldrh	r2, [r3, #0]
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a46:	1c9a      	adds	r2, r3, #2
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a5e:	e023      	b.n	8007aa8 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a60:	f7f9 fd48 	bl	80014f4 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d803      	bhi.n	8007a78 <HAL_SPI_Transmit+0x270>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d102      	bne.n	8007a7e <HAL_SPI_Transmit+0x276>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d114      	bne.n	8007aa8 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f8d2 	bl	8007c28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e0ba      	b.n	8007c1e <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d19b      	bne.n	80079ec <HAL_SPI_Transmit+0x1e4>
 8007ab4:	e08d      	b.n	8007bd2 <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d15b      	bne.n	8007b7c <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d918      	bls.n	8007b02 <HAL_SPI_Transmit+0x2fa>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad4:	2b40      	cmp	r3, #64	@ 0x40
 8007ad6:	d914      	bls.n	8007b02 <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ae8:	1d1a      	adds	r2, r3, #4
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b04      	subs	r3, #4
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b00:	e060      	b.n	8007bc4 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d917      	bls.n	8007b3e <HAL_SPI_Transmit+0x336>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d013      	beq.n	8007b3e <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b1a:	881a      	ldrh	r2, [r3, #0]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b24:	1c9a      	adds	r2, r3, #2
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b02      	subs	r3, #2
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b3c:	e042      	b.n	8007bc4 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3320      	adds	r3, #32
 8007b48:	7812      	ldrb	r2, [r2, #0]
 8007b4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b68:	e02c      	b.n	8007bc4 <HAL_SPI_Transmit+0x3bc>
 8007b6a:	bf00      	nop
 8007b6c:	40013000 	.word	0x40013000
 8007b70:	50013000 	.word	0x50013000
 8007b74:	40003800 	.word	0x40003800
 8007b78:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b7c:	f7f9 fcba 	bl	80014f4 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d803      	bhi.n	8007b94 <HAL_SPI_Transmit+0x38c>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	d102      	bne.n	8007b9a <HAL_SPI_Transmit+0x392>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d114      	bne.n	8007bc4 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f844 	bl	8007c28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ba6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e02c      	b.n	8007c1e <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f af72 	bne.w	8007ab6 <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2108      	movs	r1, #8
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f8c3 	bl	8007d68 <SPI_WaitOnFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d007      	beq.n	8007bf8 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bee:	f043 0220 	orr.w	r2, r3, #32
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f815 	bl	8007c28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
  }
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop

08007c28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699a      	ldr	r2, [r3, #24]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0208 	orr.w	r2, r2, #8
 8007c46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0210 	orr.w	r2, r2, #16
 8007c56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0201 	bic.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6812      	ldr	r2, [r2, #0]
 8007c72:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007c8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d014      	beq.n	8007cc2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ca8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0220 	orr.w	r2, r2, #32
 8007cc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d014      	beq.n	8007cf8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00f      	beq.n	8007cf8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cde:	f043 0204 	orr.w	r2, r3, #4
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cf6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00f      	beq.n	8007d22 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d08:	f043 0201 	orr.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00f      	beq.n	8007d4c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d32:	f043 0208 	orr.w	r2, r3, #8
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	4613      	mov	r3, r2
 8007d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d78:	e010      	b.n	8007d9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d7a:	f7f9 fbbb 	bl	80014f4 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d803      	bhi.n	8007d92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d102      	bne.n	8007d98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e00f      	b.n	8007dbc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695a      	ldr	r2, [r3, #20]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	4013      	ands	r3, r2
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	bf0c      	ite	eq
 8007dac:	2301      	moveq	r3, #1
 8007dae:	2300      	movne	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	461a      	mov	r2, r3
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d0df      	beq.n	8007d7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	3307      	adds	r3, #7
 8007de2:	08db      	lsrs	r3, r3, #3
 8007de4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	fb02 f303 	mul.w	r3, r2, r3
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d12e      	bne.n	8007e6e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e028      	b.n	8007e70 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007e4a:	ea42 0103 	orr.w	r1, r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e000      	b.n	8007e70 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
  }
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e042      	b.n	8007f14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d106      	bne.n	8007ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7f8 ff87 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2224      	movs	r2, #36	@ 0x24
 8007eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0201 	bic.w	r2, r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 faa2 	bl	8008410 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f8fd 	bl	80080cc <UART_SetConfig>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e01b      	b.n	8007f14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fb21 	bl	8008554 <UART_CheckIdleState>
 8007f12:	4603      	mov	r3, r0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08a      	sub	sp, #40	@ 0x28
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	f040 80c4 	bne.w	80080c0 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <HAL_UART_Receive+0x28>
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e0bc      	b.n	80080c2 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f52:	2b40      	cmp	r3, #64	@ 0x40
 8007f54:	d107      	bne.n	8007f66 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f64:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2222      	movs	r2, #34	@ 0x22
 8007f72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f7c:	f7f9 faba 	bl	80014f4 <HAL_GetTick>
 8007f80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	88fa      	ldrh	r2, [r7, #6]
 8007f86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	88fa      	ldrh	r2, [r7, #6]
 8007f8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f9a:	d10e      	bne.n	8007fba <HAL_UART_Receive+0x9e>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d105      	bne.n	8007fb0 <HAL_UART_Receive+0x94>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007faa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007fae:	e02d      	b.n	800800c <HAL_UART_Receive+0xf0>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	22ff      	movs	r2, #255	@ 0xff
 8007fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007fb8:	e028      	b.n	800800c <HAL_UART_Receive+0xf0>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10d      	bne.n	8007fde <HAL_UART_Receive+0xc2>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <HAL_UART_Receive+0xb8>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	22ff      	movs	r2, #255	@ 0xff
 8007fce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007fd2:	e01b      	b.n	800800c <HAL_UART_Receive+0xf0>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	227f      	movs	r2, #127	@ 0x7f
 8007fd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007fdc:	e016      	b.n	800800c <HAL_UART_Receive+0xf0>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fe6:	d10d      	bne.n	8008004 <HAL_UART_Receive+0xe8>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d104      	bne.n	8007ffa <HAL_UART_Receive+0xde>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	227f      	movs	r2, #127	@ 0x7f
 8007ff4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ff8:	e008      	b.n	800800c <HAL_UART_Receive+0xf0>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	223f      	movs	r2, #63	@ 0x3f
 8007ffe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008002:	e003      	b.n	800800c <HAL_UART_Receive+0xf0>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008012:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800801c:	d108      	bne.n	8008030 <HAL_UART_Receive+0x114>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d104      	bne.n	8008030 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	e003      	b.n	8008038 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008034:	2300      	movs	r3, #0
 8008036:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008038:	e036      	b.n	80080a8 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2200      	movs	r2, #0
 8008042:	2120      	movs	r1, #32
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fb2f 	bl	80086a8 <UART_WaitOnFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2220      	movs	r2, #32
 8008054:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e032      	b.n	80080c2 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10c      	bne.n	800807c <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008068:	b29a      	uxth	r2, r3
 800806a:	8a7b      	ldrh	r3, [r7, #18]
 800806c:	4013      	ands	r3, r2
 800806e:	b29a      	uxth	r2, r3
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	3302      	adds	r3, #2
 8008078:	61bb      	str	r3, [r7, #24]
 800807a:	e00c      	b.n	8008096 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008082:	b2da      	uxtb	r2, r3
 8008084:	8a7b      	ldrh	r3, [r7, #18]
 8008086:	b2db      	uxtb	r3, r3
 8008088:	4013      	ands	r3, r2
 800808a:	b2da      	uxtb	r2, r3
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1c2      	bne.n	800803a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3720      	adds	r7, #32
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080d0:	b094      	sub	sp, #80	@ 0x50
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	4b7e      	ldr	r3, [pc, #504]	@ (80082dc <UART_SetConfig+0x210>)
 80080e2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4977      	ldr	r1, [pc, #476]	@ (80082e0 <UART_SetConfig+0x214>)
 8008104:	4019      	ands	r1, r3
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800810c:	430b      	orrs	r3, r1
 800810e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800811a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811c:	68d9      	ldr	r1, [r3, #12]
 800811e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	ea40 0301 	orr.w	r3, r0, r1
 8008126:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800812e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	4b6a      	ldr	r3, [pc, #424]	@ (80082dc <UART_SetConfig+0x210>)
 8008134:	429a      	cmp	r2, r3
 8008136:	d009      	beq.n	800814c <UART_SetConfig+0x80>
 8008138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	4b69      	ldr	r3, [pc, #420]	@ (80082e4 <UART_SetConfig+0x218>)
 800813e:	429a      	cmp	r2, r3
 8008140:	d004      	beq.n	800814c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008144:	6a1a      	ldr	r2, [r3, #32]
 8008146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008148:	4313      	orrs	r3, r2
 800814a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800814c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008156:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800815a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008160:	430b      	orrs	r3, r1
 8008162:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816a:	f023 000f 	bic.w	r0, r3, #15
 800816e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008170:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	ea40 0301 	orr.w	r3, r0, r1
 800817a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	4b59      	ldr	r3, [pc, #356]	@ (80082e8 <UART_SetConfig+0x21c>)
 8008182:	429a      	cmp	r2, r3
 8008184:	d102      	bne.n	800818c <UART_SetConfig+0xc0>
 8008186:	2301      	movs	r3, #1
 8008188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800818a:	e029      	b.n	80081e0 <UART_SetConfig+0x114>
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	4b56      	ldr	r3, [pc, #344]	@ (80082ec <UART_SetConfig+0x220>)
 8008192:	429a      	cmp	r2, r3
 8008194:	d102      	bne.n	800819c <UART_SetConfig+0xd0>
 8008196:	2302      	movs	r3, #2
 8008198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800819a:	e021      	b.n	80081e0 <UART_SetConfig+0x114>
 800819c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	4b53      	ldr	r3, [pc, #332]	@ (80082f0 <UART_SetConfig+0x224>)
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d102      	bne.n	80081ac <UART_SetConfig+0xe0>
 80081a6:	2304      	movs	r3, #4
 80081a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081aa:	e019      	b.n	80081e0 <UART_SetConfig+0x114>
 80081ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	4b50      	ldr	r3, [pc, #320]	@ (80082f4 <UART_SetConfig+0x228>)
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d102      	bne.n	80081bc <UART_SetConfig+0xf0>
 80081b6:	2308      	movs	r3, #8
 80081b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ba:	e011      	b.n	80081e0 <UART_SetConfig+0x114>
 80081bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	4b4d      	ldr	r3, [pc, #308]	@ (80082f8 <UART_SetConfig+0x22c>)
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d102      	bne.n	80081cc <UART_SetConfig+0x100>
 80081c6:	2310      	movs	r3, #16
 80081c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ca:	e009      	b.n	80081e0 <UART_SetConfig+0x114>
 80081cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	4b42      	ldr	r3, [pc, #264]	@ (80082dc <UART_SetConfig+0x210>)
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d102      	bne.n	80081dc <UART_SetConfig+0x110>
 80081d6:	2320      	movs	r3, #32
 80081d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081da:	e001      	b.n	80081e0 <UART_SetConfig+0x114>
 80081dc:	2300      	movs	r3, #0
 80081de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	4b3d      	ldr	r3, [pc, #244]	@ (80082dc <UART_SetConfig+0x210>)
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d005      	beq.n	80081f6 <UART_SetConfig+0x12a>
 80081ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4b3d      	ldr	r3, [pc, #244]	@ (80082e4 <UART_SetConfig+0x218>)
 80081f0:	429a      	cmp	r2, r3
 80081f2:	f040 8085 	bne.w	8008300 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80081f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081f8:	2200      	movs	r2, #0
 80081fa:	623b      	str	r3, [r7, #32]
 80081fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80081fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008202:	f7fd ff05 	bl	8006010 <HAL_RCCEx_GetPeriphCLKFreq>
 8008206:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80e8 	beq.w	80083e0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008214:	4a39      	ldr	r2, [pc, #228]	@ (80082fc <UART_SetConfig+0x230>)
 8008216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800821a:	461a      	mov	r2, r3
 800821c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800821e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	4413      	add	r3, r2
 800822e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008230:	429a      	cmp	r2, r3
 8008232:	d305      	bcc.n	8008240 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800823a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800823c:	429a      	cmp	r2, r3
 800823e:	d903      	bls.n	8008248 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008246:	e048      	b.n	80082da <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800824a:	2200      	movs	r2, #0
 800824c:	61bb      	str	r3, [r7, #24]
 800824e:	61fa      	str	r2, [r7, #28]
 8008250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008254:	4a29      	ldr	r2, [pc, #164]	@ (80082fc <UART_SetConfig+0x230>)
 8008256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800825a:	b29b      	uxth	r3, r3
 800825c:	2200      	movs	r2, #0
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	617a      	str	r2, [r7, #20]
 8008262:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008266:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800826a:	f7f8 f805 	bl	8000278 <__aeabi_uldivmod>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4610      	mov	r0, r2
 8008274:	4619      	mov	r1, r3
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	020b      	lsls	r3, r1, #8
 8008280:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008284:	0202      	lsls	r2, r0, #8
 8008286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008288:	6849      	ldr	r1, [r1, #4]
 800828a:	0849      	lsrs	r1, r1, #1
 800828c:	2000      	movs	r0, #0
 800828e:	460c      	mov	r4, r1
 8008290:	4605      	mov	r5, r0
 8008292:	eb12 0804 	adds.w	r8, r2, r4
 8008296:	eb43 0905 	adc.w	r9, r3, r5
 800829a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	60bb      	str	r3, [r7, #8]
 80082a2:	60fa      	str	r2, [r7, #12]
 80082a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082a8:	4640      	mov	r0, r8
 80082aa:	4649      	mov	r1, r9
 80082ac:	f7f7 ffe4 	bl	8000278 <__aeabi_uldivmod>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4613      	mov	r3, r2
 80082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082be:	d308      	bcc.n	80082d2 <UART_SetConfig+0x206>
 80082c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082c6:	d204      	bcs.n	80082d2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80082c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80082ce:	60da      	str	r2, [r3, #12]
 80082d0:	e003      	b.n	80082da <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80082d8:	e082      	b.n	80083e0 <UART_SetConfig+0x314>
 80082da:	e081      	b.n	80083e0 <UART_SetConfig+0x314>
 80082dc:	46002400 	.word	0x46002400
 80082e0:	cfff69f3 	.word	0xcfff69f3
 80082e4:	56002400 	.word	0x56002400
 80082e8:	40013800 	.word	0x40013800
 80082ec:	40004400 	.word	0x40004400
 80082f0:	40004800 	.word	0x40004800
 80082f4:	40004c00 	.word	0x40004c00
 80082f8:	40005000 	.word	0x40005000
 80082fc:	08009ac8 	.word	0x08009ac8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008308:	d13c      	bne.n	8008384 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800830a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800830c:	2200      	movs	r2, #0
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	607a      	str	r2, [r7, #4]
 8008312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008316:	f7fd fe7b 	bl	8006010 <HAL_RCCEx_GetPeriphCLKFreq>
 800831a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800831c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	d05e      	beq.n	80083e0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008326:	4a39      	ldr	r2, [pc, #228]	@ (800840c <UART_SetConfig+0x340>)
 8008328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800832c:	461a      	mov	r2, r3
 800832e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008330:	fbb3 f3f2 	udiv	r3, r3, r2
 8008334:	005a      	lsls	r2, r3, #1
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	085b      	lsrs	r3, r3, #1
 800833c:	441a      	add	r2, r3
 800833e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	fbb2 f3f3 	udiv	r3, r2, r3
 8008346:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800834a:	2b0f      	cmp	r3, #15
 800834c:	d916      	bls.n	800837c <UART_SetConfig+0x2b0>
 800834e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008354:	d212      	bcs.n	800837c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008358:	b29b      	uxth	r3, r3
 800835a:	f023 030f 	bic.w	r3, r3, #15
 800835e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	b29b      	uxth	r3, r3
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	b29a      	uxth	r2, r3
 800836c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800836e:	4313      	orrs	r3, r2
 8008370:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008378:	60da      	str	r2, [r3, #12]
 800837a:	e031      	b.n	80083e0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008382:	e02d      	b.n	80083e0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008386:	2200      	movs	r2, #0
 8008388:	469a      	mov	sl, r3
 800838a:	4693      	mov	fp, r2
 800838c:	4650      	mov	r0, sl
 800838e:	4659      	mov	r1, fp
 8008390:	f7fd fe3e 	bl	8006010 <HAL_RCCEx_GetPeriphCLKFreq>
 8008394:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	d021      	beq.n	80083e0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800839c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a0:	4a1a      	ldr	r2, [pc, #104]	@ (800840c <UART_SetConfig+0x340>)
 80083a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083a6:	461a      	mov	r2, r3
 80083a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	085b      	lsrs	r3, r3, #1
 80083b4:	441a      	add	r2, r3
 80083b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c2:	2b0f      	cmp	r3, #15
 80083c4:	d909      	bls.n	80083da <UART_SetConfig+0x30e>
 80083c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083cc:	d205      	bcs.n	80083da <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60da      	str	r2, [r3, #12]
 80083d8:	e002      	b.n	80083e0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e2:	2201      	movs	r2, #1
 80083e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ea:	2201      	movs	r2, #1
 80083ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f2:	2200      	movs	r2, #0
 80083f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80083f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f8:	2200      	movs	r2, #0
 80083fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80083fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008400:	4618      	mov	r0, r3
 8008402:	3750      	adds	r7, #80	@ 0x50
 8008404:	46bd      	mov	sp, r7
 8008406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800840a:	bf00      	nop
 800840c:	08009ac8 	.word	0x08009ac8

08008410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841c:	f003 0308 	and.w	r3, r3, #8
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00a      	beq.n	800843a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008482:	f003 0304 	and.w	r3, r3, #4
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a4:	f003 0310 	and.w	r3, r3, #16
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01a      	beq.n	8008526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800850a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800850e:	d10a      	bne.n	8008526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	605a      	str	r2, [r3, #4]
  }
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b098      	sub	sp, #96	@ 0x60
 8008558:	af02      	add	r7, sp, #8
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008564:	f7f8 ffc6 	bl	80014f4 <HAL_GetTick>
 8008568:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0308 	and.w	r3, r3, #8
 8008574:	2b08      	cmp	r3, #8
 8008576:	d12f      	bne.n	80085d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008578:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008580:	2200      	movs	r2, #0
 8008582:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f88e 	bl	80086a8 <UART_WaitOnFlagUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d022      	beq.n	80085d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e6      	bne.n	8008592 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e063      	b.n	80086a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d149      	bne.n	800867a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ee:	2200      	movs	r2, #0
 80085f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f857 	bl	80086a8 <UART_WaitOnFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d03c      	beq.n	800867a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	623b      	str	r3, [r7, #32]
   return(result);
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800861e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008620:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800862c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e6      	bne.n	8008600 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	60fb      	str	r3, [r7, #12]
   return(result);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3308      	adds	r3, #8
 8008650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008652:	61fa      	str	r2, [r7, #28]
 8008654:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	69b9      	ldr	r1, [r7, #24]
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	617b      	str	r3, [r7, #20]
   return(result);
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e5      	bne.n	8008632 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e012      	b.n	80086a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2220      	movs	r2, #32
 8008686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3758      	adds	r7, #88	@ 0x58
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	4613      	mov	r3, r2
 80086b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086b8:	e04f      	b.n	800875a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d04b      	beq.n	800875a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086c2:	f7f8 ff17 	bl	80014f4 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d302      	bcc.n	80086d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e04e      	b.n	800877a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0304 	and.w	r3, r3, #4
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d037      	beq.n	800875a <UART_WaitOnFlagUntilTimeout+0xb2>
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b80      	cmp	r3, #128	@ 0x80
 80086ee:	d034      	beq.n	800875a <UART_WaitOnFlagUntilTimeout+0xb2>
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2b40      	cmp	r3, #64	@ 0x40
 80086f4:	d031      	beq.n	800875a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b08      	cmp	r3, #8
 8008702:	d110      	bne.n	8008726 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2208      	movs	r2, #8
 800870a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 f838 	bl	8008782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2208      	movs	r2, #8
 8008716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e029      	b.n	800877a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008734:	d111      	bne.n	800875a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800873e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f81e 	bl	8008782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2220      	movs	r2, #32
 800874a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e00f      	b.n	800877a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69da      	ldr	r2, [r3, #28]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4013      	ands	r3, r2
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	429a      	cmp	r2, r3
 8008768:	bf0c      	ite	eq
 800876a:	2301      	moveq	r3, #1
 800876c:	2300      	movne	r3, #0
 800876e:	b2db      	uxtb	r3, r3
 8008770:	461a      	mov	r2, r3
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	429a      	cmp	r2, r3
 8008776:	d0a0      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008782:	b480      	push	{r7}
 8008784:	b095      	sub	sp, #84	@ 0x54
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800879e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80087aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e6      	bne.n	800878a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087d2:	f023 0301 	bic.w	r3, r3, #1
 80087d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3308      	adds	r3, #8
 80087de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087e8:	e841 2300 	strex	r3, r2, [r1]
 80087ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e3      	bne.n	80087bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d118      	bne.n	800882e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	60bb      	str	r3, [r7, #8]
   return(result);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f023 0310 	bic.w	r3, r3, #16
 8008810:	647b      	str	r3, [r7, #68]	@ 0x44
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800881a:	61bb      	str	r3, [r7, #24]
 800881c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881e:	6979      	ldr	r1, [r7, #20]
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	613b      	str	r3, [r7, #16]
   return(result);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e6      	bne.n	80087fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008842:	bf00      	nop
 8008844:	3754      	adds	r7, #84	@ 0x54
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800884e:	b480      	push	{r7}
 8008850:	b085      	sub	sp, #20
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_UARTEx_DisableFifoMode+0x16>
 8008860:	2302      	movs	r3, #2
 8008862:	e027      	b.n	80088b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2224      	movs	r2, #36	@ 0x24
 8008870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 0201 	bic.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008892:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d101      	bne.n	80088d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088d4:	2302      	movs	r3, #2
 80088d6:	e02d      	b.n	8008934 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2224      	movs	r2, #36	@ 0x24
 80088e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0201 	bic.w	r2, r2, #1
 80088fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f84f 	bl	80089b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800894c:	2b01      	cmp	r3, #1
 800894e:	d101      	bne.n	8008954 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008950:	2302      	movs	r3, #2
 8008952:	e02d      	b.n	80089b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2224      	movs	r2, #36	@ 0x24
 8008960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0201 	bic.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f811 	bl	80089b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d108      	bne.n	80089da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089d8:	e031      	b.n	8008a3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089da:	2308      	movs	r3, #8
 80089dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089de:	2308      	movs	r3, #8
 80089e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	0e5b      	lsrs	r3, r3, #25
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	0f5b      	lsrs	r3, r3, #29
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	7b3a      	ldrb	r2, [r7, #12]
 8008a06:	4911      	ldr	r1, [pc, #68]	@ (8008a4c <UARTEx_SetNbDataToProcess+0x94>)
 8008a08:	5c8a      	ldrb	r2, [r1, r2]
 8008a0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a0e:	7b3a      	ldrb	r2, [r7, #12]
 8008a10:	490f      	ldr	r1, [pc, #60]	@ (8008a50 <UARTEx_SetNbDataToProcess+0x98>)
 8008a12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	7b7a      	ldrb	r2, [r7, #13]
 8008a24:	4909      	ldr	r1, [pc, #36]	@ (8008a4c <UARTEx_SetNbDataToProcess+0x94>)
 8008a26:	5c8a      	ldrb	r2, [r1, r2]
 8008a28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a2c:	7b7a      	ldrb	r2, [r7, #13]
 8008a2e:	4908      	ldr	r1, [pc, #32]	@ (8008a50 <UARTEx_SetNbDataToProcess+0x98>)
 8008a30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a32:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a3e:	bf00      	nop
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	08009ae0 	.word	0x08009ae0
 8008a50:	08009ae8 	.word	0x08009ae8

08008a54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b08b      	sub	sp, #44	@ 0x2c
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	fa93 f3a3 	rbit	r3, r3
 8008a6e:	613b      	str	r3, [r7, #16]
  return result;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008a7a:	2320      	movs	r3, #32
 8008a7c:	e003      	b.n	8008a86 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	fab3 f383 	clz	r3, r3
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	005b      	lsls	r3, r3, #1
 8008a88:	2103      	movs	r1, #3
 8008a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8e:	43db      	mvns	r3, r3
 8008a90:	401a      	ands	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	fa93 f3a3 	rbit	r3, r3
 8008a9c:	61fb      	str	r3, [r7, #28]
  return result;
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008aa8:	2320      	movs	r3, #32
 8008aaa:	e003      	b.n	8008ab4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aae:	fab3 f383 	clz	r3, r3
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8008abc:	431a      	orrs	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8008ac2:	bf00      	nop
 8008ac4:	372c      	adds	r7, #44	@ 0x2c
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	401a      	ands	r2, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	fb01 f303 	mul.w	r3, r1, r3
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	605a      	str	r2, [r3, #4]
}
 8008af2:	bf00      	nop
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b08b      	sub	sp, #44	@ 0x2c
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	fa93 f3a3 	rbit	r3, r3
 8008b18:	613b      	str	r3, [r7, #16]
  return result;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008b24:	2320      	movs	r3, #32
 8008b26:	e003      	b.n	8008b30 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	fab3 f383 	clz	r3, r3
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	2103      	movs	r1, #3
 8008b34:	fa01 f303 	lsl.w	r3, r1, r3
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	401a      	ands	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	fa93 f3a3 	rbit	r3, r3
 8008b46:	61fb      	str	r3, [r7, #28]
  return result;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008b52:	2320      	movs	r3, #32
 8008b54:	e003      	b.n	8008b5e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	fab3 f383 	clz	r3, r3
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	fa01 f303 	lsl.w	r3, r1, r3
 8008b66:	431a      	orrs	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 8008b6c:	bf00      	nop
 8008b6e:	372c      	adds	r7, #44	@ 0x2c
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b08b      	sub	sp, #44	@ 0x2c
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	fa93 f3a3 	rbit	r3, r3
 8008b92:	613b      	str	r3, [r7, #16]
  return result;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008b9e:	2320      	movs	r3, #32
 8008ba0:	e003      	b.n	8008baa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	fab3 f383 	clz	r3, r3
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	2103      	movs	r1, #3
 8008bae:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb2:	43db      	mvns	r3, r3
 8008bb4:	401a      	ands	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	fa93 f3a3 	rbit	r3, r3
 8008bc0:	61fb      	str	r3, [r7, #28]
  return result;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008bcc:	2320      	movs	r3, #32
 8008bce:	e003      	b.n	8008bd8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	fab3 f383 	clz	r3, r3
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008be0:	431a      	orrs	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 8008be6:	bf00      	nop
 8008be8:	372c      	adds	r7, #44	@ 0x2c
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b08b      	sub	sp, #44	@ 0x2c
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a1a      	ldr	r2, [r3, #32]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	fa93 f3a3 	rbit	r3, r3
 8008c0c:	613b      	str	r3, [r7, #16]
  return result;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008c18:	2320      	movs	r3, #32
 8008c1a:	e003      	b.n	8008c24 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	fab3 f383 	clz	r3, r3
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	210f      	movs	r1, #15
 8008c28:	fa01 f303 	lsl.w	r3, r1, r3
 8008c2c:	43db      	mvns	r3, r3
 8008c2e:	401a      	ands	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	fa93 f3a3 	rbit	r3, r3
 8008c3a:	61fb      	str	r3, [r7, #28]
  return result;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008c46:	2320      	movs	r3, #32
 8008c48:	e003      	b.n	8008c52 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	fab3 f383 	clz	r3, r3
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8008c60:	bf00      	nop
 8008c62:	372c      	adds	r7, #44	@ 0x2c
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b08b      	sub	sp, #44	@ 0x2c
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	fa93 f3a3 	rbit	r3, r3
 8008c88:	613b      	str	r3, [r7, #16]
  return result;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008c94:	2320      	movs	r3, #32
 8008c96:	e003      	b.n	8008ca0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	fab3 f383 	clz	r3, r3
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	210f      	movs	r1, #15
 8008ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca8:	43db      	mvns	r3, r3
 8008caa:	401a      	ands	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	0a1b      	lsrs	r3, r3, #8
 8008cb0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	fa93 f3a3 	rbit	r3, r3
 8008cb8:	61fb      	str	r3, [r7, #28]
  return result;
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	e003      	b.n	8008cd0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cca:	fab3 f383 	clz	r3, r3
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 8008cde:	bf00      	nop
 8008ce0:	372c      	adds	r7, #44	@ 0x2c
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b08a      	sub	sp, #40	@ 0x28
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	fa93 f3a3 	rbit	r3, r3
 8008d00:	617b      	str	r3, [r7, #20]
  return result;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <LL_GPIO_Init+0x26>
    return 32U;
 8008d0c:	2320      	movs	r3, #32
 8008d0e:	e003      	b.n	8008d18 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	fab3 f383 	clz	r3, r3
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008d1a:	e058      	b.n	8008dce <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	2101      	movs	r1, #1
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	fa01 f303 	lsl.w	r3, r1, r3
 8008d28:	4013      	ands	r3, r2
 8008d2a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d04a      	beq.n	8008dc8 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d003      	beq.n	8008d42 <LL_GPIO_Init+0x58>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d10e      	bne.n	8008d60 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	461a      	mov	r2, r3
 8008d48:	6a39      	ldr	r1, [r7, #32]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff fed7 	bl	8008afe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	6819      	ldr	r1, [r3, #0]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff feb7 	bl	8008ace <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6a39      	ldr	r1, [r7, #32]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff ff05 	bl	8008b78 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d121      	bne.n	8008dba <LL_GPIO_Init+0xd0>
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	fa93 f3a3 	rbit	r3, r3
 8008d80:	60bb      	str	r3, [r7, #8]
  return result;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <LL_GPIO_Init+0xa6>
    return 32U;
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	e003      	b.n	8008d98 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	fab3 f383 	clz	r3, r3
 8008d96:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8008d98:	2b07      	cmp	r3, #7
 8008d9a:	d807      	bhi.n	8008dac <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	461a      	mov	r2, r3
 8008da2:	6a39      	ldr	r1, [r7, #32]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff ff24 	bl	8008bf2 <LL_GPIO_SetAFPin_0_7>
 8008daa:	e006      	b.n	8008dba <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6a39      	ldr	r1, [r7, #32]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff ff59 	bl	8008c6c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	6a39      	ldr	r1, [r7, #32]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff fe46 	bl	8008a54 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	3301      	adds	r3, #1
 8008dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d19f      	bne.n	8008d1c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3728      	adds	r7, #40	@ 0x28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008de6:	b084      	sub	sp, #16
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	f107 001c 	add.w	r0, r7, #28
 8008df4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fd89 	bl	800991c <USB_CoreReset>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008e0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e22:	e005      	b.n	8008e30 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e3c:	b004      	add	sp, #16
 8008e3e:	4770      	bx	lr

08008e40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d165      	bne.n	8008f20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4a41      	ldr	r2, [pc, #260]	@ (8008f5c <USB_SetTurnaroundTime+0x11c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d906      	bls.n	8008e6a <USB_SetTurnaroundTime+0x2a>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	4a40      	ldr	r2, [pc, #256]	@ (8008f60 <USB_SetTurnaroundTime+0x120>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d202      	bcs.n	8008e6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e64:	230f      	movs	r3, #15
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	e062      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	4a3c      	ldr	r2, [pc, #240]	@ (8008f60 <USB_SetTurnaroundTime+0x120>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d306      	bcc.n	8008e80 <USB_SetTurnaroundTime+0x40>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	4a3b      	ldr	r2, [pc, #236]	@ (8008f64 <USB_SetTurnaroundTime+0x124>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d202      	bcs.n	8008e80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e7a:	230e      	movs	r3, #14
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	e057      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4a38      	ldr	r2, [pc, #224]	@ (8008f64 <USB_SetTurnaroundTime+0x124>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d306      	bcc.n	8008e96 <USB_SetTurnaroundTime+0x56>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4a37      	ldr	r2, [pc, #220]	@ (8008f68 <USB_SetTurnaroundTime+0x128>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d202      	bcs.n	8008e96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e90:	230d      	movs	r3, #13
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e04c      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	4a33      	ldr	r2, [pc, #204]	@ (8008f68 <USB_SetTurnaroundTime+0x128>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d306      	bcc.n	8008eac <USB_SetTurnaroundTime+0x6c>
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4a32      	ldr	r2, [pc, #200]	@ (8008f6c <USB_SetTurnaroundTime+0x12c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d802      	bhi.n	8008eac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	e041      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4a2f      	ldr	r2, [pc, #188]	@ (8008f6c <USB_SetTurnaroundTime+0x12c>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d906      	bls.n	8008ec2 <USB_SetTurnaroundTime+0x82>
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8008f70 <USB_SetTurnaroundTime+0x130>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d802      	bhi.n	8008ec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ebc:	230b      	movs	r3, #11
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	e036      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8008f70 <USB_SetTurnaroundTime+0x130>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d906      	bls.n	8008ed8 <USB_SetTurnaroundTime+0x98>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	4a29      	ldr	r2, [pc, #164]	@ (8008f74 <USB_SetTurnaroundTime+0x134>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d802      	bhi.n	8008ed8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ed2:	230a      	movs	r3, #10
 8008ed4:	617b      	str	r3, [r7, #20]
 8008ed6:	e02b      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4a26      	ldr	r2, [pc, #152]	@ (8008f74 <USB_SetTurnaroundTime+0x134>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d906      	bls.n	8008eee <USB_SetTurnaroundTime+0xae>
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4a25      	ldr	r2, [pc, #148]	@ (8008f78 <USB_SetTurnaroundTime+0x138>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d202      	bcs.n	8008eee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008ee8:	2309      	movs	r3, #9
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	e020      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	4a21      	ldr	r2, [pc, #132]	@ (8008f78 <USB_SetTurnaroundTime+0x138>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d306      	bcc.n	8008f04 <USB_SetTurnaroundTime+0xc4>
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	4a20      	ldr	r2, [pc, #128]	@ (8008f7c <USB_SetTurnaroundTime+0x13c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d802      	bhi.n	8008f04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008efe:	2308      	movs	r3, #8
 8008f00:	617b      	str	r3, [r7, #20]
 8008f02:	e015      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	4a1d      	ldr	r2, [pc, #116]	@ (8008f7c <USB_SetTurnaroundTime+0x13c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d906      	bls.n	8008f1a <USB_SetTurnaroundTime+0xda>
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8008f80 <USB_SetTurnaroundTime+0x140>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d202      	bcs.n	8008f1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008f14:	2307      	movs	r3, #7
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	e00a      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008f1a:	2306      	movs	r3, #6
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	e007      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008f26:	2309      	movs	r3, #9
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	e001      	b.n	8008f30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f2c:	2309      	movs	r3, #9
 8008f2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	029b      	lsls	r3, r3, #10
 8008f44:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	00d8acbf 	.word	0x00d8acbf
 8008f60:	00e4e1c0 	.word	0x00e4e1c0
 8008f64:	00f42400 	.word	0x00f42400
 8008f68:	01067380 	.word	0x01067380
 8008f6c:	011a499f 	.word	0x011a499f
 8008f70:	01312cff 	.word	0x01312cff
 8008f74:	014ca43f 	.word	0x014ca43f
 8008f78:	016e3600 	.word	0x016e3600
 8008f7c:	01a6ab1f 	.word	0x01a6ab1f
 8008f80:	01e84800 	.word	0x01e84800

08008f84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f023 0201 	bic.w	r2, r3, #1
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d115      	bne.n	8008ff4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008fd4:	200a      	movs	r0, #10
 8008fd6:	f7f8 fa99 	bl	800150c <HAL_Delay>
      ms += 10U;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	330a      	adds	r3, #10
 8008fde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc0b 	bl	80097fc <USB_GetMode>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d01e      	beq.n	800902a <USB_SetCurrentMode+0x84>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ff0:	d9f0      	bls.n	8008fd4 <USB_SetCurrentMode+0x2e>
 8008ff2:	e01a      	b.n	800902a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d115      	bne.n	8009026 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009006:	200a      	movs	r0, #10
 8009008:	f7f8 fa80 	bl	800150c <HAL_Delay>
      ms += 10U;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	330a      	adds	r3, #10
 8009010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fbf2 	bl	80097fc <USB_GetMode>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <USB_SetCurrentMode+0x84>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2bc7      	cmp	r3, #199	@ 0xc7
 8009022:	d9f0      	bls.n	8009006 <USB_SetCurrentMode+0x60>
 8009024:	e001      	b.n	800902a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e005      	b.n	8009036 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2bc8      	cmp	r3, #200	@ 0xc8
 800902e:	d101      	bne.n	8009034 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e000      	b.n	8009036 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009040:	b084      	sub	sp, #16
 8009042:	b580      	push	{r7, lr}
 8009044:	b086      	sub	sp, #24
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800904e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800905a:	2300      	movs	r3, #0
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	e009      	b.n	8009074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	3340      	adds	r3, #64	@ 0x40
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	2200      	movs	r2, #0
 800906c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	3301      	adds	r3, #1
 8009072:	613b      	str	r3, [r7, #16]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2b0e      	cmp	r3, #14
 8009078:	d9f2      	bls.n	8009060 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800907a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800907e:	2b00      	cmp	r3, #0
 8009080:	d11c      	bne.n	80090bc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009090:	f043 0302 	orr.w	r3, r3, #2
 8009094:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	e005      	b.n	80090c8 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090ce:	461a      	mov	r2, r3
 80090d0:	2300      	movs	r3, #0
 80090d2:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090d4:	2103      	movs	r1, #3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f95e 	bl	8009398 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090dc:	2110      	movs	r1, #16
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f8fa 	bl	80092d8 <USB_FlushTxFifo>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f924 	bl	800933c <USB_FlushRxFifo>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009104:	461a      	mov	r2, r3
 8009106:	2300      	movs	r3, #0
 8009108:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009110:	461a      	mov	r2, r3
 8009112:	2300      	movs	r3, #0
 8009114:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800911c:	461a      	mov	r2, r3
 800911e:	2300      	movs	r3, #0
 8009120:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009122:	2300      	movs	r3, #0
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	e043      	b.n	80091b0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800913a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800913e:	d118      	bne.n	8009172 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009152:	461a      	mov	r2, r3
 8009154:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	e013      	b.n	8009184 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009168:	461a      	mov	r2, r3
 800916a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	e008      	b.n	8009184 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800917e:	461a      	mov	r2, r3
 8009180:	2300      	movs	r3, #0
 8009182:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009190:	461a      	mov	r2, r3
 8009192:	2300      	movs	r3, #0
 8009194:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	015a      	lsls	r2, r3, #5
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4413      	add	r3, r2
 800919e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a2:	461a      	mov	r2, r3
 80091a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	3301      	adds	r3, #1
 80091ae:	613b      	str	r3, [r7, #16]
 80091b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80091b4:	461a      	mov	r2, r3
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d3b5      	bcc.n	8009128 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091bc:	2300      	movs	r3, #0
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	e043      	b.n	800924a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091d8:	d118      	bne.n	800920c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ec:	461a      	mov	r2, r3
 80091ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	e013      	b.n	800921e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009202:	461a      	mov	r2, r3
 8009204:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	e008      	b.n	800921e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009218:	461a      	mov	r2, r3
 800921a:	2300      	movs	r3, #0
 800921c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800922a:	461a      	mov	r2, r3
 800922c:	2300      	movs	r3, #0
 800922e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800923c:	461a      	mov	r2, r3
 800923e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	3301      	adds	r3, #1
 8009248:	613b      	str	r3, [r7, #16]
 800924a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800924e:	461a      	mov	r2, r3
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	4293      	cmp	r3, r2
 8009254:	d3b5      	bcc.n	80091c2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009268:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009276:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009278:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800927c:	2b00      	cmp	r3, #0
 800927e:	d105      	bne.n	800928c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	f043 0210 	orr.w	r2, r3, #16
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699a      	ldr	r2, [r3, #24]
 8009290:	4b10      	ldr	r3, [pc, #64]	@ (80092d4 <USB_DevInit+0x294>)
 8009292:	4313      	orrs	r3, r2
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009298:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	f043 0208 	orr.w	r2, r3, #8
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d107      	bne.n	80092c4 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092bc:	f043 0304 	orr.w	r3, r3, #4
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092d0:	b004      	add	sp, #16
 80092d2:	4770      	bx	lr
 80092d4:	803c3800 	.word	0x803c3800

080092d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092f2:	d901      	bls.n	80092f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e01b      	b.n	8009330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	daf2      	bge.n	80092e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	019b      	lsls	r3, r3, #6
 8009308:	f043 0220 	orr.w	r2, r3, #32
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3301      	adds	r3, #1
 8009314:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800931c:	d901      	bls.n	8009322 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e006      	b.n	8009330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	f003 0320 	and.w	r3, r3, #32
 800932a:	2b20      	cmp	r3, #32
 800932c:	d0f0      	beq.n	8009310 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3301      	adds	r3, #1
 800934c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009354:	d901      	bls.n	800935a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e018      	b.n	800938c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	daf2      	bge.n	8009348 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2210      	movs	r2, #16
 800936a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3301      	adds	r3, #1
 8009370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009378:	d901      	bls.n	800937e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e006      	b.n	800938c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	f003 0310 	and.w	r3, r3, #16
 8009386:	2b10      	cmp	r3, #16
 8009388:	d0f0      	beq.n	800936c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	68f9      	ldr	r1, [r7, #12]
 80093b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093b8:	4313      	orrs	r3, r2
 80093ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b087      	sub	sp, #28
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f003 0306 	and.w	r3, r3, #6
 80093e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d102      	bne.n	80093f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80093ea:	2300      	movs	r3, #0
 80093ec:	75fb      	strb	r3, [r7, #23]
 80093ee:	e00a      	b.n	8009406 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d002      	beq.n	80093fc <USB_GetDevSpeed+0x32>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b06      	cmp	r3, #6
 80093fa:	d102      	bne.n	8009402 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80093fc:	2302      	movs	r3, #2
 80093fe:	75fb      	strb	r3, [r7, #23]
 8009400:	e001      	b.n	8009406 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009402:	230f      	movs	r3, #15
 8009404:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009406:	7dfb      	ldrb	r3, [r7, #23]
}
 8009408:	4618      	mov	r0, r3
 800940a:	371c      	adds	r7, #28
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	785b      	ldrb	r3, [r3, #1]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d14a      	bne.n	80094c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009446:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800944a:	f040 8086 	bne.w	800955a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	7812      	ldrb	r2, [r2, #0]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800946c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009470:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	7812      	ldrb	r2, [r2, #0]
 8009486:	0151      	lsls	r1, r2, #5
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	440a      	add	r2, r1
 800948c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009490:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009494:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3301      	adds	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d902      	bls.n	80094ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	75fb      	strb	r3, [r7, #23]
          break;
 80094aa:	e056      	b.n	800955a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094c4:	d0e7      	beq.n	8009496 <USB_EPStopXfer+0x82>
 80094c6:	e048      	b.n	800955a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094e0:	d13b      	bne.n	800955a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	7812      	ldrb	r2, [r2, #0]
 80094f6:	0151      	lsls	r1, r2, #5
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	440a      	add	r2, r1
 80094fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009500:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009504:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	7812      	ldrb	r2, [r2, #0]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	440a      	add	r2, r1
 8009520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009524:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009528:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3301      	adds	r3, #1
 800952e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009536:	4293      	cmp	r3, r2
 8009538:	d902      	bls.n	8009540 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	75fb      	strb	r3, [r7, #23]
          break;
 800953e:	e00c      	b.n	800955a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009558:	d0e7      	beq.n	800952a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800955a:	7dfb      	ldrb	r3, [r7, #23]
}
 800955c:	4618      	mov	r0, r3
 800955e:	371c      	adds	r7, #28
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009568:	b480      	push	{r7}
 800956a:	b089      	sub	sp, #36	@ 0x24
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4611      	mov	r1, r2
 8009574:	461a      	mov	r2, r3
 8009576:	460b      	mov	r3, r1
 8009578:	71fb      	strb	r3, [r7, #7]
 800957a:	4613      	mov	r3, r2
 800957c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009586:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	d123      	bne.n	80095d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800958e:	88bb      	ldrh	r3, [r7, #4]
 8009590:	3303      	adds	r3, #3
 8009592:	089b      	lsrs	r3, r3, #2
 8009594:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009596:	2300      	movs	r3, #0
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	e018      	b.n	80095ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	031a      	lsls	r2, r3, #12
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095a8:	461a      	mov	r2, r3
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	3301      	adds	r3, #1
 80095b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	3301      	adds	r3, #1
 80095ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	3301      	adds	r3, #1
 80095c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	3301      	adds	r3, #1
 80095c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	3301      	adds	r3, #1
 80095cc:	61bb      	str	r3, [r7, #24]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d3e2      	bcc.n	800959c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3724      	adds	r7, #36	@ 0x24
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b08b      	sub	sp, #44	@ 0x2c
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	089b      	lsrs	r3, r3, #2
 80095fe:	b29b      	uxth	r3, r3
 8009600:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009602:	88fb      	ldrh	r3, [r7, #6]
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800960a:	2300      	movs	r3, #0
 800960c:	623b      	str	r3, [r7, #32]
 800960e:	e014      	b.n	800963a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	601a      	str	r2, [r3, #0]
    pDest++;
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	3301      	adds	r3, #1
 8009620:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	3301      	adds	r3, #1
 8009626:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	3301      	adds	r3, #1
 800962c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009630:	3301      	adds	r3, #1
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	3301      	adds	r3, #1
 8009638:	623b      	str	r3, [r7, #32]
 800963a:	6a3a      	ldr	r2, [r7, #32]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	429a      	cmp	r2, r3
 8009640:	d3e6      	bcc.n	8009610 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009642:	8bfb      	ldrh	r3, [r7, #30]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01e      	beq.n	8009686 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009652:	461a      	mov	r2, r3
 8009654:	f107 0310 	add.w	r3, r7, #16
 8009658:	6812      	ldr	r2, [r2, #0]
 800965a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	b2db      	uxtb	r3, r3
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	fa22 f303 	lsr.w	r3, r2, r3
 8009668:	b2da      	uxtb	r2, r3
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	701a      	strb	r2, [r3, #0]
      i++;
 800966e:	6a3b      	ldr	r3, [r7, #32]
 8009670:	3301      	adds	r3, #1
 8009672:	623b      	str	r3, [r7, #32]
      pDest++;
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	3301      	adds	r3, #1
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800967a:	8bfb      	ldrh	r3, [r7, #30]
 800967c:	3b01      	subs	r3, #1
 800967e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009680:	8bfb      	ldrh	r3, [r7, #30]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1ea      	bne.n	800965c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009688:	4618      	mov	r0, r3
 800968a:	372c      	adds	r7, #44	@ 0x2c
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80096ae:	f023 0303 	bic.w	r3, r3, #3
 80096b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096c2:	f043 0302 	orr.w	r3, r3, #2
 80096c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b085      	sub	sp, #20
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4013      	ands	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80096ee:	68fb      	ldr	r3, [r7, #12]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	4013      	ands	r3, r2
 800971e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	0c1b      	lsrs	r3, r3, #16
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	4013      	ands	r3, r2
 8009752:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	b29b      	uxth	r3, r3
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	4013      	ands	r3, r2
 8009790:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009792:	68bb      	ldr	r3, [r7, #8]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	f003 030f 	and.w	r3, r3, #15
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	fa22 f303 	lsr.w	r3, r2, r3
 80097d0:	01db      	lsls	r3, r3, #7
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	4013      	ands	r3, r2
 80097ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097ee:	68bb      	ldr	r3, [r7, #8]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	f003 0301 	and.w	r3, r3, #1
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009832:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009836:	f023 0307 	bic.w	r3, r3, #7
 800983a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800984a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800984e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
	...

08009860 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	460b      	mov	r3, r1
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	333c      	adds	r3, #60	@ 0x3c
 8009876:	3304      	adds	r3, #4
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	4a26      	ldr	r2, [pc, #152]	@ (8009918 <USB_EP0_OutStart+0xb8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d90a      	bls.n	800989a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009894:	d101      	bne.n	800989a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e037      	b.n	800990a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a0:	461a      	mov	r2, r3
 80098a2:	2300      	movs	r3, #0
 80098a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098c8:	f043 0318 	orr.w	r3, r3, #24
 80098cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80098e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80098e2:	7afb      	ldrb	r3, [r7, #11]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d10f      	bne.n	8009908 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ee:	461a      	mov	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009902:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009906:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	4f54300a 	.word	0x4f54300a

0800991c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009934:	d901      	bls.n	800993a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e01b      	b.n	8009972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	2b00      	cmp	r3, #0
 8009940:	daf2      	bge.n	8009928 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f043 0201 	orr.w	r2, r3, #1
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800995e:	d901      	bls.n	8009964 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e006      	b.n	8009972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b01      	cmp	r3, #1
 800996e:	d0f0      	beq.n	8009952 <USB_CoreReset+0x36>

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <memset>:
 800997e:	4402      	add	r2, r0
 8009980:	4603      	mov	r3, r0
 8009982:	4293      	cmp	r3, r2
 8009984:	d100      	bne.n	8009988 <memset+0xa>
 8009986:	4770      	bx	lr
 8009988:	f803 1b01 	strb.w	r1, [r3], #1
 800998c:	e7f9      	b.n	8009982 <memset+0x4>
	...

08009990 <__libc_init_array>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	4d0d      	ldr	r5, [pc, #52]	@ (80099c8 <__libc_init_array+0x38>)
 8009994:	2600      	movs	r6, #0
 8009996:	4c0d      	ldr	r4, [pc, #52]	@ (80099cc <__libc_init_array+0x3c>)
 8009998:	1b64      	subs	r4, r4, r5
 800999a:	10a4      	asrs	r4, r4, #2
 800999c:	42a6      	cmp	r6, r4
 800999e:	d109      	bne.n	80099b4 <__libc_init_array+0x24>
 80099a0:	4d0b      	ldr	r5, [pc, #44]	@ (80099d0 <__libc_init_array+0x40>)
 80099a2:	2600      	movs	r6, #0
 80099a4:	4c0b      	ldr	r4, [pc, #44]	@ (80099d4 <__libc_init_array+0x44>)
 80099a6:	f000 f817 	bl	80099d8 <_init>
 80099aa:	1b64      	subs	r4, r4, r5
 80099ac:	10a4      	asrs	r4, r4, #2
 80099ae:	42a6      	cmp	r6, r4
 80099b0:	d105      	bne.n	80099be <__libc_init_array+0x2e>
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b8:	3601      	adds	r6, #1
 80099ba:	4798      	blx	r3
 80099bc:	e7ee      	b.n	800999c <__libc_init_array+0xc>
 80099be:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c2:	3601      	adds	r6, #1
 80099c4:	4798      	blx	r3
 80099c6:	e7f2      	b.n	80099ae <__libc_init_array+0x1e>
 80099c8:	08009af8 	.word	0x08009af8
 80099cc:	08009af8 	.word	0x08009af8
 80099d0:	08009af8 	.word	0x08009af8
 80099d4:	08009afc 	.word	0x08009afc

080099d8 <_init>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	bf00      	nop
 80099dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099de:	bc08      	pop	{r3}
 80099e0:	469e      	mov	lr, r3
 80099e2:	4770      	bx	lr

080099e4 <_fini>:
 80099e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e6:	bf00      	nop
 80099e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ea:	bc08      	pop	{r3}
 80099ec:	469e      	mov	lr, r3
 80099ee:	4770      	bx	lr
