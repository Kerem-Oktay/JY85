
DeviceProcessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb90  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800bdc8  0800bdc8  0000cdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bec8  0800bec8  0000cec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bed0  0800bed0  0000ced0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bed4  0800bed4  0000ced4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  0800bed8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000085c  2000000c  0800bee1  0000d00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000868  0800bee1  0000d868  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021ab9  00000000  00000000  0000d03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003cbb  00000000  00000000  0002eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c10  00000000  00000000  000327b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015d6  00000000  00000000  000343c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038fa9  00000000  00000000  0003599e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002390d  00000000  00000000  0006e947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f992  00000000  00000000  00092254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00201be6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a80  00000000  00000000  00201c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  002096ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bdb0 	.word	0x0800bdb0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	0800bdb0 	.word	0x0800bdb0

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800059e:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b4:	68fb      	ldr	r3, [r7, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	46020c00 	.word	0x46020c00

080005c8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005d6:	4909      	ldr	r1, [pc, #36]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	46020c00 	.word	0x46020c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint16_t dmaValCheck[500];
  for(int i = 0; i < 500; i++){
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 800060e:	e00e      	b.n	800062e <main+0x2e>
	  dmaValCheck[i] = 0xbeef;
 8000610:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000614:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8000618:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 800061c:	f64b 61ef 	movw	r1, #48879	@ 0xbeef
 8000620:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(int i = 0; i < 500; i++){
 8000624:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8000628:	3301      	adds	r3, #1
 800062a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 800062e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8000632:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000636:	dbeb      	blt.n	8000610 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f001 f99e 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800063c:	f000 f898 	bl	8000770 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f832 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 fc50 	bl	8000ee8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000648:	f000 f8f8 	bl	800083c <MX_GPDMA1_Init>
  MX_ADC1_Init();
 800064c:	f000 f89e 	bl	800078c <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000650:	f000 f914 	bl	800087c <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8000654:	f000 fb94 	bl	8000d80 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000658:	f000 fbc8 	bl	8000dec <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800065c:	f000 f922 	bl	80008a4 <MX_SPI1_Init>
  MX_FLASH_Init();
 8000660:	f000 f8da 	bl	8000818 <MX_FLASH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000664:	f000 fc0e 	bl	8000e84 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM15_Init();
 8000668:	f000 fa44 	bl	8000af4 <MX_TIM15_Init>
  MX_TIM16_Init();
 800066c:	f000 fa94 	bl	8000b98 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000670:	f000 fb0c 	bl	8000c8c <MX_TIM17_Init>
  MX_TIM8_Init();
 8000674:	f000 f986 	bl	8000984 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  TIM8->ARR = 4-1;
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <main+0x98>)
 800067a:	2203      	movs	r2, #3
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_1);
 800067e:	2100      	movs	r1, #0
 8000680:	4806      	ldr	r0, [pc, #24]	@ (800069c <main+0x9c>)
 8000682:	f008 fb2f 	bl	8008ce4 <HAL_TIM_OC_Start>
  HAL_DMA_Start(&handle_GPDMA1_Channel12,(uint32_t)&GPIOE->IDR,(uint32_t)&dmaValCheck,500*sizeof(uint16_t));
 8000686:	1d3a      	adds	r2, r7, #4
 8000688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068c:	4904      	ldr	r1, [pc, #16]	@ (80006a0 <main+0xa0>)
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <main+0xa4>)
 8000690:	f002 f8e4 	bl	800285c <HAL_DMA_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <main+0x94>
 8000698:	40013400 	.word	0x40013400
 800069c:	20000144 	.word	0x20000144
 80006a0:	42021010 	.word	0x42021010
 80006a4:	20000274 	.word	0x20000274

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09e      	sub	sp, #120	@ 0x78
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	2260      	movs	r2, #96	@ 0x60
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f00b fb4d 	bl	800bd56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006cc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80006d0:	f004 f856 	bl	8004780 <HAL_PWREx_ControlVoltageScaling>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006da:	f000 fd33 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006de:	2322      	movs	r3, #34	@ 0x22
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2310      	movs	r3, #16
 80006f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f6:	2302      	movs	r3, #2
 80006f8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000702:	2314      	movs	r3, #20
 8000704:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000712:	230c      	movs	r3, #12
 8000714:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4618      	mov	r0, r3
 8000720:	f004 f93a 	bl	8004998 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800072a:	f000 fd0b 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	231f      	movs	r3, #31
 8000730:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	2104      	movs	r1, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f005 f800 	bl	8005750 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000756:	f000 fcf5 	bl	8001144 <Error_Handler>
  }

  /** MCO configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_8);
 800075a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800075e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000762:	2000      	movs	r0, #0
 8000764:	f005 f9e6 	bl	8005b34 <HAL_RCC_MCOConfig>
}
 8000768:	bf00      	nop
 800076a:	3778      	adds	r7, #120	@ 0x78
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000774:	f004 f8f0 	bl	8004958 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000778:	2002      	movs	r0, #2
 800077a:	f004 f88d 	bl	8004898 <HAL_PWREx_ConfigSupply>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000784:	f000 fcde 	bl	8001144 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_ADC1_Init+0x84>)
 8000792:	4a20      	ldr	r2, [pc, #128]	@ (8000814 <MX_ADC1_Init+0x88>)
 8000794:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000796:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_ADC1_Init+0x84>)
 8000798:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800079c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007be:	2201      	movs	r2, #1
 80007c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007dc:	2200      	movs	r2, #0
 80007de:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007f2:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_ADC1_Init+0x84>)
 80007fc:	f001 faa4 	bl	8001d48 <HAL_ADC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000806:	f000 fc9d 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000028 	.word	0x20000028
 8000814:	42028000 	.word	0x42028000

08000818 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 800081c:	f002 fca0 	bl	8003160 <HAL_FLASH_Unlock>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 8000826:	f000 fc8d 	bl	8001144 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 800082a:	f002 fcbb 	bl	80031a4 <HAL_FLASH_Lock>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000834:	f000 fc86 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <MX_GPDMA1_Init+0x3c>)
 8000844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000848:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <MX_GPDMA1_Init+0x3c>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_GPDMA1_Init+0x3c>)
 8000854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2054      	movs	r0, #84	@ 0x54
 8000866:	f001 fdf1 	bl	800244c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 800086a:	2054      	movs	r0, #84	@ 0x54
 800086c:	f001 fe08 	bl	8002480 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	46020c00 	.word	0x46020c00

0800087c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000880:	2000      	movs	r0, #0
 8000882:	f002 fed5 	bl	8003630 <HAL_ICACHE_ConfigAssociativityMode>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800088c:	f000 fc5a 	bl	8001144 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000890:	f002 feee 	bl	8003670 <HAL_ICACHE_Enable>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800089a:	f000 fc53 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b4:	4b31      	ldr	r3, [pc, #196]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008b6:	4a32      	ldr	r2, [pc, #200]	@ (8000980 <MX_SPI1_Init+0xdc>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b30      	ldr	r3, [pc, #192]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b2c      	ldr	r3, [pc, #176]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80008d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d6:	4b29      	ldr	r3, [pc, #164]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008dc:	4b27      	ldr	r3, [pc, #156]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008de:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80008e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e4:	4b25      	ldr	r3, [pc, #148]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f0:	4b22      	ldr	r3, [pc, #136]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <MX_SPI1_Init+0xd8>)
 80008fe:	2207      	movs	r2, #7
 8000900:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000902:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <MX_SPI1_Init+0xd8>)
 8000904:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000908:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800090a:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <MX_SPI1_Init+0xd8>)
 800090c:	2200      	movs	r2, #0
 800090e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000910:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <MX_SPI1_Init+0xd8>)
 8000912:	2200      	movs	r2, #0
 8000914:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_SPI1_Init+0xd8>)
 8000918:	2200      	movs	r2, #0
 800091a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800091c:	4b17      	ldr	r3, [pc, #92]	@ (800097c <MX_SPI1_Init+0xd8>)
 800091e:	2200      	movs	r2, #0
 8000920:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_SPI1_Init+0xd8>)
 8000924:	2200      	movs	r2, #0
 8000926:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_SPI1_Init+0xd8>)
 800092a:	2200      	movs	r2, #0
 800092c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <MX_SPI1_Init+0xd8>)
 8000930:	2200      	movs	r2, #0
 8000932:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_SPI1_Init+0xd8>)
 8000936:	2200      	movs	r2, #0
 8000938:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <MX_SPI1_Init+0xd8>)
 800093c:	2200      	movs	r2, #0
 800093e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000940:	480e      	ldr	r0, [pc, #56]	@ (800097c <MX_SPI1_Init+0xd8>)
 8000942:	f007 ffa5 	bl	8008890 <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 800094c:	f000 fbfa 	bl	8001144 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000954:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000958:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	@ (800097c <MX_SPI1_Init+0xd8>)
 8000964:	f008 f8c5 	bl	8008af2 <HAL_SPIEx_SetConfigAutonomousMode>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 800096e:	f000 fbe9 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000b4 	.word	0x200000b4
 8000980:	40013000 	.word	0x40013000

08000984 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	@ 0x70
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000998:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]
 80009b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2234      	movs	r2, #52	@ 0x34
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f00b f9c9 	bl	800bd56 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009c4:	4b49      	ldr	r3, [pc, #292]	@ (8000aec <MX_TIM8_Init+0x168>)
 80009c6:	4a4a      	ldr	r2, [pc, #296]	@ (8000af0 <MX_TIM8_Init+0x16c>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009ca:	4b48      	ldr	r3, [pc, #288]	@ (8000aec <MX_TIM8_Init+0x168>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b46      	ldr	r3, [pc, #280]	@ (8000aec <MX_TIM8_Init+0x168>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80009d6:	4b45      	ldr	r3, [pc, #276]	@ (8000aec <MX_TIM8_Init+0x168>)
 80009d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b43      	ldr	r3, [pc, #268]	@ (8000aec <MX_TIM8_Init+0x168>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009e4:	4b41      	ldr	r3, [pc, #260]	@ (8000aec <MX_TIM8_Init+0x168>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ea:	4b40      	ldr	r3, [pc, #256]	@ (8000aec <MX_TIM8_Init+0x168>)
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009f0:	483e      	ldr	r0, [pc, #248]	@ (8000aec <MX_TIM8_Init+0x168>)
 80009f2:	f008 f8bf 	bl	8008b74 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f000 fba2 	bl	8001144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a06:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4837      	ldr	r0, [pc, #220]	@ (8000aec <MX_TIM8_Init+0x168>)
 8000a0e:	f008 fcab 	bl	8009368 <HAL_TIM_ConfigClockSource>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000a18:	f000 fb94 	bl	8001144 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000a1c:	4833      	ldr	r0, [pc, #204]	@ (8000aec <MX_TIM8_Init+0x168>)
 8000a1e:	f008 f900 	bl	8008c22 <HAL_TIM_OC_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000a28:	f000 fb8c 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	482b      	ldr	r0, [pc, #172]	@ (8000aec <MX_TIM8_Init+0x168>)
 8000a40:	f009 fb32 	bl	800a0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000a4a:	f000 fb7b 	bl	8001144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a4e:	2330      	movs	r3, #48	@ 0x30
 8000a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a56:	2300      	movs	r3, #0
 8000a58:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	481e      	ldr	r0, [pc, #120]	@ (8000aec <MX_TIM8_Init+0x168>)
 8000a74:	f008 faea 	bl	800904c <HAL_TIM_OC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000a7e:	f000 fb61 	bl	8001144 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_TIM8_Init+0x168>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	699a      	ldr	r2, [r3, #24]
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_TIM8_Init+0x168>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f042 0208 	orr.w	r2, r2, #8
 8000a90:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ab8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4807      	ldr	r0, [pc, #28]	@ (8000aec <MX_TIM8_Init+0x168>)
 8000ad0:	f009 fbac 	bl	800a22c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8000ada:	f000 fb33 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ade:	4803      	ldr	r0, [pc, #12]	@ (8000aec <MX_TIM8_Init+0x168>)
 8000ae0:	f000 fd16 	bl	8001510 <HAL_TIM_MspPostInit>

}
 8000ae4:	bf00      	nop
 8000ae6:	3770      	adds	r7, #112	@ 0x70
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000144 	.word	0x20000144
 8000af0:	40013400 	.word	0x40013400

08000af4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b14:	4a1f      	ldr	r2, [pc, #124]	@ (8000b94 <MX_TIM15_Init+0xa0>)
 8000b16:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b2a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000b3e:	4814      	ldr	r0, [pc, #80]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b40:	f008 f818 	bl	8008b74 <HAL_TIM_Base_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000b4a:	f000 fafb 	bl	8001144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b5c:	f008 fc04 	bl	8009368 <HAL_TIM_ConfigClockSource>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000b66:	f000 faed 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <MX_TIM15_Init+0x9c>)
 8000b78:	f009 fa96 	bl	800a0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000b82:	f000 fadf 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	3720      	adds	r7, #32
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000190 	.word	0x20000190
 8000b94:	40014000 	.word	0x40014000

08000b98 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	@ 0x50
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2234      	movs	r2, #52	@ 0x34
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f00b f8cc 	bl	800bd56 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bbe:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000bc0:	4a31      	ldr	r2, [pc, #196]	@ (8000c88 <MX_TIM16_Init+0xf0>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000bd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bde:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be4:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bea:	4826      	ldr	r0, [pc, #152]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000bec:	f007 ffc2 	bl	8008b74 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000bf6:	f000 faa5 	bl	8001144 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000bfa:	4822      	ldr	r0, [pc, #136]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000bfc:	f008 f811 	bl	8008c22 <HAL_TIM_OC_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000c06:	f000 fa9d 	bl	8001144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c16:	2300      	movs	r3, #0
 8000c18:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4815      	ldr	r0, [pc, #84]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000c30:	f008 fa0c 	bl	800904c <HAL_TIM_OC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000c3a:	f000 fa83 	bl	8001144 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000c66:	f009 fae1 	bl	800a22c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000c70:	f000 fa68 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c74:	4803      	ldr	r0, [pc, #12]	@ (8000c84 <MX_TIM16_Init+0xec>)
 8000c76:	f000 fc4b 	bl	8001510 <HAL_TIM_MspPostInit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	@ 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001dc 	.word	0x200001dc
 8000c88:	40014400 	.word	0x40014400

08000c8c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	@ 0x50
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2234      	movs	r2, #52	@ 0x34
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f00b f852 	bl	800bd56 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000cb2:	4b31      	ldr	r3, [pc, #196]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000cb4:	4a31      	ldr	r2, [pc, #196]	@ (8000d7c <MX_TIM17_Init+0xf0>)
 8000cb6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cca:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cde:	4826      	ldr	r0, [pc, #152]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000ce0:	f007 ff48 	bl	8008b74 <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000cea:	f000 fa2b 	bl	8001144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000cee:	4822      	ldr	r0, [pc, #136]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000cf0:	f008 f94a 	bl	8008f88 <HAL_TIM_PWM_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000cfa:	f000 fa23 	bl	8001144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfe:	2360      	movs	r3, #96	@ 0x60
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4619      	mov	r1, r3
 8000d22:	4815      	ldr	r0, [pc, #84]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000d24:	f008 fa0c 	bl	8009140 <HAL_TIM_PWM_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000d2e:	f000 fa09 	bl	8001144 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000d5a:	f009 fa67 	bl	800a22c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000d64:	f000 f9ee 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000d68:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <MX_TIM17_Init+0xec>)
 8000d6a:	f000 fbd1 	bl	8001510 <HAL_TIM_MspPostInit>

}
 8000d6e:	bf00      	nop
 8000d70:	3750      	adds	r7, #80	@ 0x50
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000228 	.word	0x20000228
 8000d7c:	40014800 	.word	0x40014800

08000d80 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000d96:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000d9a:	f7ff fc15 	bl	80005c8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f7ff fbf6 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fbf3 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000db0:	2303      	movs	r3, #3
 8000db2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <MX_UCPD1_Init+0x64>)
 8000dbe:	f00a f980 	bl	800b0c2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dc6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <MX_UCPD1_Init+0x68>)
 8000dd6:	f00a f974 	bl	800b0c2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	42020400 	.word	0x42020400
 8000de8:	42020000 	.word	0x42020000

08000dec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000df2:	4a23      	ldr	r2, [pc, #140]	@ (8000e80 <MX_USART1_UART_Init+0x94>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000df6:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e36:	f009 fae5 	bl	800a404 <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e40:	f000 f980 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e48:	f009 ff26 	bl	800ac98 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e52:	f000 f977 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e5a:	f009 ff5b 	bl	800ad14 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f000 f96e 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <MX_USART1_UART_Init+0x90>)
 8000e6a:	f009 fedc 	bl	800ac26 <HAL_UARTEx_DisableFifoMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f000 f966 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200002ec 	.word	0x200002ec
 8000e80:	40013800 	.word	0x40013800

08000e84 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e90:	2206      	movs	r2, #6
 8000e92:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e96:	2202      	movs	r2, #2
 8000e98:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ecc:	f002 fbe0 	bl	8003690 <HAL_PCD_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ed6:	f000 f935 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000380 	.word	0x20000380
 8000ee4:	42040000 	.word	0x42040000

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	@ 0x30
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	4b87      	ldr	r3, [pc, #540]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f04:	4a85      	ldr	r2, [pc, #532]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f0e:	4b83      	ldr	r3, [pc, #524]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1c:	4b7f      	ldr	r3, [pc, #508]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f22:	4a7e      	ldr	r2, [pc, #504]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f2c:	4b7b      	ldr	r3, [pc, #492]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3a:	4b78      	ldr	r3, [pc, #480]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f40:	4a76      	ldr	r2, [pc, #472]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f42:	f043 0320 	orr.w	r3, r3, #32
 8000f46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f4a:	4b74      	ldr	r3, [pc, #464]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f50:	f003 0320 	and.w	r3, r3, #32
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b70      	ldr	r3, [pc, #448]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f68:	4b6c      	ldr	r3, [pc, #432]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b69      	ldr	r3, [pc, #420]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f7c:	4a67      	ldr	r2, [pc, #412]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f86:	4b65      	ldr	r3, [pc, #404]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f94:	4b61      	ldr	r3, [pc, #388]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	4a60      	ldr	r2, [pc, #384]	@ (800111c <MX_GPIO_Init+0x234>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fa4:	4b5d      	ldr	r3, [pc, #372]	@ (800111c <MX_GPIO_Init+0x234>)
 8000fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800111c <MX_GPIO_Init+0x234>)
 8000fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb8:	4a58      	ldr	r2, [pc, #352]	@ (800111c <MX_GPIO_Init+0x234>)
 8000fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc2:	4b56      	ldr	r3, [pc, #344]	@ (800111c <MX_GPIO_Init+0x234>)
 8000fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 614a 	mov.w	r1, #3232	@ 0xca0
 8000fd6:	4852      	ldr	r0, [pc, #328]	@ (8001120 <MX_GPIO_Init+0x238>)
 8000fd8:	f002 fad6 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2104      	movs	r1, #4
 8000fe0:	4850      	ldr	r0, [pc, #320]	@ (8001124 <MX_GPIO_Init+0x23c>)
 8000fe2:	f002 fad1 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2180      	movs	r1, #128	@ 0x80
 8000fea:	484f      	ldr	r0, [pc, #316]	@ (8001128 <MX_GPIO_Init+0x240>)
 8000fec:	f002 facc 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ff0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4849      	ldr	r0, [pc, #292]	@ (800112c <MX_GPIO_Init+0x244>)
 8001006:	f002 f8e7 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800100a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001010:	4b47      	ldr	r3, [pc, #284]	@ (8001130 <MX_GPIO_Init+0x248>)
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4842      	ldr	r0, [pc, #264]	@ (8001128 <MX_GPIO_Init+0x240>)
 8001020:	f002 f8da 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001028:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <MX_GPIO_Init+0x24c>)
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4840      	ldr	r0, [pc, #256]	@ (8001138 <MX_GPIO_Init+0x250>)
 8001038:	f002 f8ce 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|UCPD_DBn_Pin;
 800103c:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4832      	ldr	r0, [pc, #200]	@ (8001120 <MX_GPIO_Init+0x238>)
 8001056:	f002 f8bf 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800105a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	482c      	ldr	r0, [pc, #176]	@ (8001120 <MX_GPIO_Init+0x238>)
 8001070:	f002 f8b2 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001074:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001078:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	482c      	ldr	r0, [pc, #176]	@ (800113c <MX_GPIO_Init+0x254>)
 800108a:	f002 f8a5 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800108e:	2304      	movs	r3, #4
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	481f      	ldr	r0, [pc, #124]	@ (8001124 <MX_GPIO_Init+0x23c>)
 80010a6:	f002 f897 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4819      	ldr	r0, [pc, #100]	@ (8001128 <MX_GPIO_Init+0x240>)
 80010c2:	f002 f889 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4817      	ldr	r0, [pc, #92]	@ (8001140 <MX_GPIO_Init+0x258>)
 80010e4:	f002 f878 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80010e8:	2380      	movs	r3, #128	@ 0x80
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f4:	2302      	movs	r3, #2
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4808      	ldr	r0, [pc, #32]	@ (8001120 <MX_GPIO_Init+0x238>)
 8001100:	f002 f86a 	bl	80031d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	200c      	movs	r0, #12
 800110a:	f001 f99f 	bl	800244c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800110e:	200c      	movs	r0, #12
 8001110:	f001 f9b6 	bl	8002480 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001114:	bf00      	nop
 8001116:	3730      	adds	r7, #48	@ 0x30
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	46020c00 	.word	0x46020c00
 8001120:	42020400 	.word	0x42020400
 8001124:	42021800 	.word	0x42021800
 8001128:	42020800 	.word	0x42020800
 800112c:	42021000 	.word	0x42021000
 8001130:	10210000 	.word	0x10210000
 8001134:	10110000 	.word	0x10110000
 8001138:	42021400 	.word	0x42021400
 800113c:	42020c00 	.word	0x42020c00
 8001140:	42020000 	.word	0x42020000

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_MspInit+0x38>)
 8001158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <HAL_MspInit+0x38>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_MspInit+0x38>)
 8001168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001174:	f003 fc00 	bl	8004978 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001178:	2004      	movs	r0, #4
 800117a:	f001 f95c 	bl	8002436 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	46020c00 	.word	0x46020c00

0800118c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0bc      	sub	sp, #240	@ 0xf0
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	22c0      	movs	r2, #192	@ 0xc0
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00a fdd2 	bl	800bd56 <memset>
  if(hadc->Instance==ADC1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a33      	ldr	r2, [pc, #204]	@ (8001284 <HAL_ADC_MspInit+0xf8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d15e      	bne.n	800127a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80011bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80011c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fec3 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80011e0:	f7ff ffb0 	bl	8001144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <HAL_ADC_MspInit+0xfc>)
 80011e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ea:	4a27      	ldr	r2, [pc, #156]	@ (8001288 <HAL_ADC_MspInit+0xfc>)
 80011ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <HAL_ADC_MspInit+0xfc>)
 80011f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <HAL_ADC_MspInit+0xfc>)
 8001204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001208:	4a1f      	ldr	r2, [pc, #124]	@ (8001288 <HAL_ADC_MspInit+0xfc>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001212:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <HAL_ADC_MspInit+0xfc>)
 8001214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_ADC_MspInit+0xfc>)
 8001222:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001226:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <HAL_ADC_MspInit+0xfc>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <HAL_ADC_MspInit+0xfc>)
 8001232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800123e:	2304      	movs	r3, #4
 8001240:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	2303      	movs	r3, #3
 8001246:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	@ (800128c <HAL_ADC_MspInit+0x100>)
 8001258:	f001 ffbe 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001272:	4619      	mov	r1, r3
 8001274:	4806      	ldr	r0, [pc, #24]	@ (8001290 <HAL_ADC_MspInit+0x104>)
 8001276:	f001 ffaf 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800127a:	bf00      	nop
 800127c:	37f0      	adds	r7, #240	@ 0xf0
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	42028000 	.word	0x42028000
 8001288:	46020c00 	.word	0x46020c00
 800128c:	42020800 	.word	0x42020800
 8001290:	42020400 	.word	0x42020400

08001294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0bc      	sub	sp, #240	@ 0xf0
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	22c0      	movs	r2, #192	@ 0xc0
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00a fd4e 	bl	800bd56 <memset>
  if(hspi->Instance==SPI1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a39      	ldr	r2, [pc, #228]	@ (80013a4 <HAL_SPI_MspInit+0x110>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d16a      	bne.n	800139a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_HSI;
 80012d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80012d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 fe3f 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80012e8:	f7ff ff2c 	bl	8001144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ec:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <HAL_SPI_MspInit+0x114>)
 80012ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012f2:	4a2d      	ldr	r2, [pc, #180]	@ (80013a8 <HAL_SPI_MspInit+0x114>)
 80012f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012f8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80012fc:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <HAL_SPI_MspInit+0x114>)
 80012fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <HAL_SPI_MspInit+0x114>)
 800130c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001310:	4a25      	ldr	r2, [pc, #148]	@ (80013a8 <HAL_SPI_MspInit+0x114>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800131a:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <HAL_SPI_MspInit+0x114>)
 800131c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <HAL_SPI_MspInit+0x114>)
 800132a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132e:	4a1e      	ldr	r2, [pc, #120]	@ (80013a8 <HAL_SPI_MspInit+0x114>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_SPI_MspInit+0x114>)
 800133a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001346:	23e0      	movs	r3, #224	@ 0xe0
 8001348:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135e:	2305      	movs	r3, #5
 8001360:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001368:	4619      	mov	r1, r3
 800136a:	4810      	ldr	r0, [pc, #64]	@ (80013ac <HAL_SPI_MspInit+0x118>)
 800136c:	f001 ff34 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001370:	2301      	movs	r3, #1
 8001372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001388:	2305      	movs	r3, #5
 800138a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001392:	4619      	mov	r1, r3
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <HAL_SPI_MspInit+0x11c>)
 8001396:	f001 ff1f 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	37f0      	adds	r7, #240	@ 0xf0
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40013000 	.word	0x40013000
 80013a8:	46020c00 	.word	0x46020c00
 80013ac:	42020000 	.word	0x42020000
 80013b0:	42020400 	.word	0x42020400

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	@ (80014f4 <HAL_TIM_Base_MspInit+0x140>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10f      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013c6:	4b4c      	ldr	r3, [pc, #304]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 80013c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013cc:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 80013ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013d2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80013d6:	4b48      	ldr	r3, [pc, #288]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 80013d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80013e4:	e081      	b.n	80014ea <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM15)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a44      	ldr	r2, [pc, #272]	@ (80014fc <HAL_TIM_Base_MspInit+0x148>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d10f      	bne.n	8001410 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80013f0:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 80013f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013f6:	4a40      	ldr	r2, [pc, #256]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001400:	4b3d      	ldr	r3, [pc, #244]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 8001402:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
}
 800140e:	e06c      	b.n	80014ea <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM16)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a3a      	ldr	r2, [pc, #232]	@ (8001500 <HAL_TIM_Base_MspInit+0x14c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d153      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800141a:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 800141c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001420:	4a35      	ldr	r2, [pc, #212]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 8001422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001426:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800142a:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 800142c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8001438:	4b32      	ldr	r3, [pc, #200]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 800143a:	4a33      	ldr	r2, [pc, #204]	@ (8001508 <HAL_TIM_Base_MspInit+0x154>)
 800143c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM16_UP;
 800143e:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001440:	2253      	movs	r2, #83	@ 0x53
 8001442:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001444:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144a:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 8001450:	4b2c      	ldr	r3, [pc, #176]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001458:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800145c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800145e:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001460:	2201      	movs	r2, #1
 8001462:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001464:	4b27      	ldr	r3, [pc, #156]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001466:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800146a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800146c:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 800146e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001472:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 8001474:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001476:	2201      	movs	r2, #1
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 800147c:	2201      	movs	r2, #1
 800147e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 800148e:	2200      	movs	r2, #0
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8001492:	481c      	ldr	r0, [pc, #112]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 8001494:	f001 f8b6 	bl	8002604 <HAL_DMA_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 800149e:	f7ff fe51 	bl	8001144 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel12);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 80014a6:	621a      	str	r2, [r3, #32]
 80014a8:	4a16      	ldr	r2, [pc, #88]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014ae:	2110      	movs	r1, #16
 80014b0:	4814      	ldr	r0, [pc, #80]	@ (8001504 <HAL_TIM_Base_MspInit+0x150>)
 80014b2:	f001 fb74 	bl	8002b9e <HAL_DMA_ConfigChannelAttributes>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d016      	beq.n	80014ea <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 80014bc:	f7ff fe42 	bl	8001144 <Error_Handler>
}
 80014c0:	e013      	b.n	80014ea <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM17)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a11      	ldr	r2, [pc, #68]	@ (800150c <HAL_TIM_Base_MspInit+0x158>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d10e      	bne.n	80014ea <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80014cc:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 80014ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_TIM_Base_MspInit+0x144>)
 80014de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013400 	.word	0x40013400
 80014f8:	46020c00 	.word	0x46020c00
 80014fc:	40014000 	.word	0x40014000
 8001500:	40014400 	.word	0x40014400
 8001504:	20000274 	.word	0x20000274
 8001508:	40020650 	.word	0x40020650
 800150c:	40014800 	.word	0x40014800

08001510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a38      	ldr	r2, [pc, #224]	@ (8001610 <HAL_TIM_MspPostInit+0x100>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d11f      	bne.n	8001572 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b38      	ldr	r3, [pc, #224]	@ (8001614 <HAL_TIM_MspPostInit+0x104>)
 8001534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001538:	4a36      	ldr	r2, [pc, #216]	@ (8001614 <HAL_TIM_MspPostInit+0x104>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001542:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_TIM_MspPostInit+0x104>)
 8001544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001550:	2340      	movs	r3, #64	@ 0x40
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001560:	2303      	movs	r3, #3
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	482b      	ldr	r0, [pc, #172]	@ (8001618 <HAL_TIM_MspPostInit+0x108>)
 800156c:	f001 fe34 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001570:	e04a      	b.n	8001608 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM16)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a29      	ldr	r2, [pc, #164]	@ (800161c <HAL_TIM_MspPostInit+0x10c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d120      	bne.n	80015be <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <HAL_TIM_MspPostInit+0x104>)
 800157e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001582:	4a24      	ldr	r2, [pc, #144]	@ (8001614 <HAL_TIM_MspPostInit+0x104>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800158c:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <HAL_TIM_MspPostInit+0x104>)
 800158e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800159a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80015ac:	230e      	movs	r3, #14
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	481a      	ldr	r0, [pc, #104]	@ (8001620 <HAL_TIM_MspPostInit+0x110>)
 80015b8:	f001 fe0e 	bl	80031d8 <HAL_GPIO_Init>
}
 80015bc:	e024      	b.n	8001608 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM17)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_TIM_MspPostInit+0x114>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d11f      	bne.n	8001608 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_TIM_MspPostInit+0x104>)
 80015ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ce:	4a11      	ldr	r2, [pc, #68]	@ (8001614 <HAL_TIM_MspPostInit+0x104>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <HAL_TIM_MspPostInit+0x104>)
 80015da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 80015f8:	230e      	movs	r3, #14
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4807      	ldr	r0, [pc, #28]	@ (8001620 <HAL_TIM_MspPostInit+0x110>)
 8001604:	f001 fde8 	bl	80031d8 <HAL_GPIO_Init>
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	@ 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40013400 	.word	0x40013400
 8001614:	46020c00 	.word	0x46020c00
 8001618:	42020800 	.word	0x42020800
 800161c:	40014400 	.word	0x40014400
 8001620:	42020400 	.word	0x42020400
 8001624:	40014800 	.word	0x40014800

08001628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0ba      	sub	sp, #232	@ 0xe8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	22c0      	movs	r2, #192	@ 0xc0
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f00a fb84 	bl	800bd56 <memset>
  if(huart->Instance==USART1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a26      	ldr	r2, [pc, #152]	@ (80016ec <HAL_UART_MspInit+0xc4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d145      	bne.n	80016e4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001658:	f04f 0201 	mov.w	r2, #1
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001664:	2300      	movs	r3, #0
 8001666:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4618      	mov	r0, r3
 800166e:	f004 fc77 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001678:	f7ff fd64 	bl	8001144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <HAL_UART_MspInit+0xc8>)
 800167e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001682:	4a1b      	ldr	r2, [pc, #108]	@ (80016f0 <HAL_UART_MspInit+0xc8>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001688:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_UART_MspInit+0xc8>)
 800168e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_UART_MspInit+0xc8>)
 800169c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a0:	4a13      	ldr	r2, [pc, #76]	@ (80016f0 <HAL_UART_MspInit+0xc8>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_UART_MspInit+0xc8>)
 80016ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80016b8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d2:	2307      	movs	r3, #7
 80016d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016dc:	4619      	mov	r1, r3
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <HAL_UART_MspInit+0xcc>)
 80016e0:	f001 fd7a 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016e4:	bf00      	nop
 80016e6:	37e8      	adds	r7, #232	@ 0xe8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40013800 	.word	0x40013800
 80016f0:	46020c00 	.word	0x46020c00
 80016f4:	42020000 	.word	0x42020000

080016f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0bc      	sub	sp, #240	@ 0xf0
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	22c0      	movs	r2, #192	@ 0xc0
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f00a fb1c 	bl	800bd56 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a3c      	ldr	r2, [pc, #240]	@ (8001814 <HAL_PCD_MspInit+0x11c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d171      	bne.n	800180c <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001728:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173a:	f107 0318 	add.w	r3, r7, #24
 800173e:	4618      	mov	r0, r3
 8001740:	f004 fc0e 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 800174a:	f7ff fcfb 	bl	8001144 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 8001750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001754:	4a30      	ldr	r2, [pc, #192]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800175e:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 8001760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800176c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001770:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001786:	230a      	movs	r3, #10
 8001788:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001790:	4619      	mov	r1, r3
 8001792:	4822      	ldr	r0, [pc, #136]	@ (800181c <HAL_PCD_MspInit+0x124>)
 8001794:	f001 fd20 	bl	80031d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001798:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 800179a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179e:	4a1e      	ldr	r2, [pc, #120]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 80017aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d119      	bne.n	80017f8 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ca:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 80017d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80017e2:	f003 f8a9 	bl	8004938 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 80017e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <HAL_PCD_MspInit+0x120>)
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017f6:	e001      	b.n	80017fc <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80017f8:	f003 f89e 	bl	8004938 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2049      	movs	r0, #73	@ 0x49
 8001802:	f000 fe23 	bl	800244c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001806:	2049      	movs	r0, #73	@ 0x49
 8001808:	f000 fe3a 	bl	8002480 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800180c:	bf00      	nop
 800180e:	37f0      	adds	r7, #240	@ 0xf0
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	42040000 	.word	0x42040000
 8001818:	46020c00 	.word	0x46020c00
 800181c:	42020000 	.word	0x42020000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <NMI_Handler+0x4>

08001828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <MemManage_Handler+0x4>

08001838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <UsageFault_Handler+0x4>

08001848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001876:	f000 f925 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}

0800187e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001882:	2002      	movs	r0, #2
 8001884:	f001 fe98 	bl	80035b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <OTG_FS_IRQHandler+0x10>)
 8001892:	f002 f815 	bl	80038c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000380 	.word	0x20000380

080018a0 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <GPDMA1_Channel12_IRQHandler+0x10>)
 80018a6:	f001 f819 	bl	80028dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000274 	.word	0x20000274

080018b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018b8:	4b18      	ldr	r3, [pc, #96]	@ (800191c <SystemInit+0x68>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <SystemInit+0x68>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80018c8:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <SystemInit+0x6c>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80018ce:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <SystemInit+0x6c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <SystemInit+0x6c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <SystemInit+0x6c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <SystemInit+0x6c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001920 <SystemInit+0x6c>)
 80018e6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80018ea:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80018ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <SystemInit+0x6c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <SystemInit+0x6c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <SystemInit+0x6c>)
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001900:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <SystemInit+0x6c>)
 8001904:	2200      	movs	r2, #0
 8001906:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <SystemInit+0x68>)
 800190a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800190e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00
 8001920:	46020c00 	.word	0x46020c00

08001924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800195c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001928:	f7ff ffc4 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800192c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800192e:	e003      	b.n	8001938 <LoopCopyDataInit>

08001930 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001932:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001934:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001936:	3104      	adds	r1, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001938:	480a      	ldr	r0, [pc, #40]	@ (8001964 <LoopForever+0xa>)
	ldr	r3, =_edata
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <LoopForever+0xe>)
	adds	r2, r0, r1
 800193c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800193e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001940:	d3f6      	bcc.n	8001930 <CopyDataInit>
	ldr	r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001944:	e002      	b.n	800194c <LoopFillZerobss>

08001946 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001946:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001948:	f842 3b04 	str.w	r3, [r2], #4

0800194c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <LoopForever+0x16>)
	cmp	r2, r3
 800194e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001950:	d3f9      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001952:	f00a fa09 	bl	800bd68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001956:	f7fe fe53 	bl	8000600 <main>

0800195a <LoopForever>:

LoopForever:
    b LoopForever
 800195a:	e7fe      	b.n	800195a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800195c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001960:	0800bed8 	.word	0x0800bed8
	ldr	r0, =_sdata
 8001964:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001968:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 800196c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001970:	20000868 	.word	0x20000868

08001974 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC1_IRQHandler>
	...

08001978 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_Init+0x50>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a11      	ldr	r2, [pc, #68]	@ (80019c8 <HAL_Init+0x50>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 fd54 	bl	8002436 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800198e:	f004 f909 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8001992:	4602      	mov	r2, r0
 8001994:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <HAL_Init+0x54>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	490c      	ldr	r1, [pc, #48]	@ (80019d0 <HAL_Init+0x58>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	4a0b      	ldr	r2, [pc, #44]	@ (80019d4 <HAL_Init+0x5c>)
 80019a6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80019a8:	2004      	movs	r0, #4
 80019aa:	f000 fd99 	bl	80024e0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 f812 	bl	80019d8 <HAL_InitTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e002      	b.n	80019c4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019be:	f7ff fbc7 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40022000 	.word	0x40022000
 80019cc:	46020c00 	.word	0x46020c00
 80019d0:	0800bdc8 	.word	0x0800bdc8
 80019d4:	20000000 	.word	0x20000000

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80019e4:	4b33      	ldr	r3, [pc, #204]	@ (8001ab4 <HAL_InitTick+0xdc>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e05c      	b.n	8001aaa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <HAL_InitTick+0xe0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d10c      	bne.n	8001a16 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80019fc:	4b2f      	ldr	r3, [pc, #188]	@ (8001abc <HAL_InitTick+0xe4>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <HAL_InitTick+0xdc>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e037      	b.n	8001a86 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001a16:	f000 fdbb 	bl	8002590 <HAL_SYSTICK_GetCLKSourceConfig>
 8001a1a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d023      	beq.n	8001a6a <HAL_InitTick+0x92>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d82d      	bhi.n	8001a84 <HAL_InitTick+0xac>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_InitTick+0x5e>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d00d      	beq.n	8001a50 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001a34:	e026      	b.n	8001a84 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001a36:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <HAL_InitTick+0xe4>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <HAL_InitTick+0xdc>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a44:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
        break;
 8001a4e:	e01a      	b.n	8001a86 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <HAL_InitTick+0xdc>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a5e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	60fb      	str	r3, [r7, #12]
        break;
 8001a68:	e00d      	b.n	8001a86 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a6a:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_InitTick+0xdc>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a78:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	60fb      	str	r3, [r7, #12]
        break;
 8001a82:	e000      	b.n	8001a86 <HAL_InitTick+0xae>
        break;
 8001a84:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 fd08 	bl	800249c <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e009      	b.n	8001aaa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a96:	2200      	movs	r2, #0
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9e:	f000 fcd5 	bl	800244c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001aa2:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <HAL_InitTick+0xe8>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	e000e010 	.word	0xe000e010
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000864 	.word	0x20000864

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	@ (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000864 	.word	0x20000864

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff ffee 	bl	8001aec <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <HAL_Delay+0x44>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2a:	bf00      	nop
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f7      	bhi.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008

08001b4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <LL_ADC_SetResolution+0x3c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d104      	bne.n	8001b94 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f023 020c 	bic.w	r2, r3, #12
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	60da      	str	r2, [r3, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	46021000 	.word	0x46021000

08001bb4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bc6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d002      	beq.n	8001be6 <LL_ADC_SetGainCompensation+0x32>
 8001be0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001be4:	e000      	b.n	8001be8 <LL_ADC_SetGainCompensation+0x34>
 8001be6:	2200      	movs	r2, #0
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2107      	movs	r1, #7
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	431a      	orrs	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6093      	str	r3, [r2, #8]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c70:	d101      	bne.n	8001c76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cc0:	d101      	bne.n	8001cc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <LL_ADC_IsEnabled+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_ADC_IsEnabled+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d101      	bne.n	8001d38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e2b3      	b.n	80022d0 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a8b      	ldr	r2, [pc, #556]	@ (8001fa4 <HAL_ADC_Init+0x25c>)
 8001d76:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fa03 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff5f 	bl	8001c5c <LL_ADC_IsDeepPowerDownEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff45 	bl	8001c38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff7a 	bl	8001cac <LL_ADC_IsInternalRegulatorEnabled>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d115      	bne.n	8001dea <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff5e 	bl	8001c84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc8:	4b77      	ldr	r3, [pc, #476]	@ (8001fa8 <HAL_ADC_Init+0x260>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	4a77      	ldr	r2, [pc, #476]	@ (8001fac <HAL_ADC_Init+0x264>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ddc:	e002      	b.n	8001de4 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f9      	bne.n	8001dde <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff5c 	bl	8001cac <LL_ADC_IsInternalRegulatorEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10e      	bne.n	8001e18 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001dfe:	f043 0210 	orr.w	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff6c 	bl	8001cfa <LL_ADC_REG_IsConversionOngoing>
 8001e22:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 8244 	bne.w	80022ba <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f040 8240 	bne.w	80022ba <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e3e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e42:	f043 0202 	orr.w	r2, r3, #2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff40 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d140      	bne.n	8001edc <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a51      	ldr	r2, [pc, #324]	@ (8001fa4 <HAL_ADC_Init+0x25c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d028      	beq.n	8001eb6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a51      	ldr	r2, [pc, #324]	@ (8001fb0 <HAL_ADC_Init+0x268>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_Init+0x13a>
 8001e6e:	4850      	ldr	r0, [pc, #320]	@ (8001fb0 <HAL_ADC_Init+0x268>)
 8001e70:	f7ff ff30 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	e008      	b.n	8001e94 <HAL_ADC_Init+0x14c>
 8001e82:	4848      	ldr	r0, [pc, #288]	@ (8001fa4 <HAL_ADC_Init+0x25c>)
 8001e84:	f7ff ff26 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf0c      	ite	eq
 8001e8e:	2301      	moveq	r3, #1
 8001e90:	2300      	movne	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d021      	beq.n	8001edc <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a44      	ldr	r2, [pc, #272]	@ (8001fb0 <HAL_ADC_Init+0x268>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_Init+0x15e>
 8001ea2:	4a44      	ldr	r2, [pc, #272]	@ (8001fb4 <HAL_ADC_Init+0x26c>)
 8001ea4:	e000      	b.n	8001ea8 <HAL_ADC_Init+0x160>
 8001ea6:	4a44      	ldr	r2, [pc, #272]	@ (8001fb8 <HAL_ADC_Init+0x270>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f7ff fe4c 	bl	8001b4c <LL_ADC_SetCommonClock>
 8001eb4:	e012      	b.n	8001edc <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f7ff fe57 	bl	8001b74 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb8 <HAL_ADC_Init+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001ed6:	4938      	ldr	r1, [pc, #224]	@ (8001fb8 <HAL_ADC_Init+0x270>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a30      	ldr	r2, [pc, #192]	@ (8001fa4 <HAL_ADC_Init+0x25c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d010      	beq.n	8001f08 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eec:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001ef2:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001ef8:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001f00:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001f02:	4313      	orrs	r3, r2
 8001f04:	623b      	str	r3, [r7, #32]
 8001f06:	e030      	b.n	8001f6a <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7f1b      	ldrb	r3, [r3, #28]
 8001f0c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f14:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f16:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f1c:	2a00      	cmp	r2, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_ADC_Init+0x1de>
 8001f20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_Init+0x1e0>
 8001f26:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f28:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001f2e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	da04      	bge.n	8001f42 <HAL_ADC_Init+0x1fa>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f40:	e001      	b.n	8001f46 <HAL_ADC_Init+0x1fe>
 8001f42:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001f46:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4918      	ldr	r1, [pc, #96]	@ (8001fb0 <HAL_ADC_Init+0x268>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	d103      	bne.n	8001f5a <HAL_ADC_Init+0x212>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f58:	e003      	b.n	8001f62 <HAL_ADC_Init+0x21a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f60:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f62:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d12f      	bne.n	8001fd4 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_ADC_Init+0x25c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	3b01      	subs	r3, #1
 8001f84:	045b      	lsls	r3, r3, #17
 8001f86:	6a3a      	ldr	r2, [r7, #32]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	e022      	b.n	8001fd4 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d111      	bne.n	8001fbc <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	e018      	b.n	8001fd4 <HAL_ADC_Init+0x28c>
 8001fa2:	bf00      	nop
 8001fa4:	46021000 	.word	0x46021000
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	053e2d63 	.word	0x053e2d63
 8001fb0:	42028000 	.word	0x42028000
 8001fb4:	42028308 	.word	0x42028308
 8001fb8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a92      	ldr	r2, [pc, #584]	@ (8002224 <HAL_ADC_Init+0x4dc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d018      	beq.n	8002010 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fea:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	4b89      	ldr	r3, [pc, #548]	@ (8002228 <HAL_ADC_Init+0x4e0>)
 8002002:	4013      	ands	r3, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	6a39      	ldr	r1, [r7, #32]
 800200a:	430b      	orrs	r3, r1
 800200c:	60d3      	str	r3, [r2, #12]
 800200e:	e031      	b.n	8002074 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002024:	4313      	orrs	r3, r2
 8002026:	6a3a      	ldr	r2, [r7, #32]
 8002028:	4313      	orrs	r3, r2
 800202a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	4b7e      	ldr	r3, [pc, #504]	@ (800222c <HAL_ADC_Init+0x4e4>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	6a39      	ldr	r1, [r7, #32]
 800203c:	430b      	orrs	r3, r1
 800203e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a6a      	ldr	r2, [pc, #424]	@ (8002224 <HAL_ADC_Init+0x4dc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	f000 8093 	beq.w	80021a6 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe38 	bl	8001cfa <LL_ADC_REG_IsConversionOngoing>
 800208a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fe45 	bl	8001d20 <LL_ADC_INJ_IsConversionOngoing>
 8002096:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d161      	bne.n	8002162 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d15e      	bne.n	8002162 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7f1b      	ldrb	r3, [r3, #28]
 80020a8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4960      	ldr	r1, [pc, #384]	@ (8002230 <HAL_ADC_Init+0x4e8>)
 80020b0:	428b      	cmp	r3, r1
 80020b2:	d102      	bne.n	80020ba <HAL_ADC_Init+0x372>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	e002      	b.n	80020c0 <HAL_ADC_Init+0x378>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020be:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020c0:	4313      	orrs	r3, r2
 80020c2:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	6a39      	ldr	r1, [r7, #32]
 80020d8:	430b      	orrs	r3, r1
 80020da:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f7ff fd60 	bl	8001bb4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d11e      	bne.n	800213c <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002102:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	4b4a      	ldr	r3, [pc, #296]	@ (8002234 <HAL_ADC_Init+0x4ec>)
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002112:	0411      	lsls	r1, r2, #16
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002118:	4311      	orrs	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800212a:	0892      	lsrs	r2, r2, #2
 800212c:	430a      	orrs	r2, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	e007      	b.n	800214c <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10c      	bne.n	8002184 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	f023 010f 	bic.w	r1, r3, #15
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30
 8002182:	e007      	b.n	8002194 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 020f 	bic.w	r2, r2, #15
 8002192:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002198:	f023 0303 	bic.w	r3, r3, #3
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021a4:	e092      	b.n	80022cc <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d111      	bne.n	80021d4 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80021b8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80021be:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80021c4:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <HAL_ADC_Init+0x4f0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	69f9      	ldr	r1, [r7, #28]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f0:	461a      	mov	r2, r3
 80021f2:	2100      	movs	r1, #0
 80021f4:	f7ff fd01 	bl	8001bfa <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002200:	461a      	mov	r2, r3
 8002202:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002206:	f7ff fcf8 	bl	8001bfa <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d114      	bne.n	800223c <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f062 020f 	orn	r2, r2, #15
 8002220:	629a      	str	r2, [r3, #40]	@ 0x28
 8002222:	e024      	b.n	800226e <HAL_ADC_Init+0x526>
 8002224:	46021000 	.word	0x46021000
 8002228:	fff0c013 	.word	0xfff0c013
 800222c:	ffde800d 	.word	0xffde800d
 8002230:	42028000 	.word	0x42028000
 8002234:	fc00f81e 	.word	0xfc00f81e
 8002238:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002244:	d113      	bne.n	800226e <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f003 031c 	and.w	r3, r3, #28
 8002258:	f06f 020f 	mvn.w	r2, #15
 800225c:	fa02 f103 	lsl.w	r1, r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <HAL_ADC_Init+0x590>)
 8002276:	4013      	ands	r3, r2
 8002278:	6a3a      	ldr	r2, [r7, #32]
 800227a:	429a      	cmp	r2, r3
 800227c:	d10b      	bne.n	8002296 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002288:	f023 0303 	bic.w	r3, r3, #3
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002294:	e01a      	b.n	80022cc <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800229a:	f023 0312 	bic.w	r3, r3, #18
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022b8:	e008      	b.n	80022cc <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022be:	f043 0210 	orr.w	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80022cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3728      	adds	r7, #40	@ 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	833ffff3 	.word	0x833ffff3

080022dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002304:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230e:	4a04      	ldr	r2, [pc, #16]	@ (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <__NVIC_GetPriorityGrouping+0x18>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0307 	and.w	r3, r3, #7
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4907      	ldr	r1, [pc, #28]	@ (8002378 <__NVIC_EnableIRQ+0x38>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000e100 	.word	0xe000e100

0800237c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	db0a      	blt.n	80023a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	490c      	ldr	r1, [pc, #48]	@ (80023c8 <__NVIC_SetPriority+0x4c>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	440b      	add	r3, r1
 80023a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a4:	e00a      	b.n	80023bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4908      	ldr	r1, [pc, #32]	@ (80023cc <__NVIC_SetPriority+0x50>)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3b04      	subs	r3, #4
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	440b      	add	r3, r1
 80023ba:	761a      	strb	r2, [r3, #24]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	@ 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f1c3 0307 	rsb	r3, r3, #7
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf28      	it	cs
 80023ee:	2304      	movcs	r3, #4
 80023f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d902      	bls.n	8002400 <NVIC_EncodePriority+0x30>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3b03      	subs	r3, #3
 80023fe:	e000      	b.n	8002402 <NVIC_EncodePriority+0x32>
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002418:	f04f 31ff 	mov.w	r1, #4294967295
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43d9      	mvns	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	4313      	orrs	r3, r2
         );
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	@ 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff4c 	bl	80022dc <__NVIC_SetPriorityGrouping>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800245a:	f7ff ff63 	bl	8002324 <__NVIC_GetPriorityGrouping>
 800245e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	6978      	ldr	r0, [r7, #20]
 8002466:	f7ff ffb3 	bl	80023d0 <NVIC_EncodePriority>
 800246a:	4602      	mov	r2, r0
 800246c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff82 	bl	800237c <__NVIC_SetPriority>
}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff56 	bl	8002340 <__NVIC_EnableIRQ>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00d      	b.n	80024ce <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_SYSTICK_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80024ba:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <HAL_SYSTICK_Config+0x40>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_SYSTICK_Config+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <HAL_SYSTICK_Config+0x40>)
 80024c6:	f043 0303 	orr.w	r3, r3, #3
 80024ca:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d844      	bhi.n	8002578 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80024ee:	a201      	add	r2, pc, #4	@ (adr r2, 80024f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	08002517 	.word	0x08002517
 80024f8:	08002535 	.word	0x08002535
 80024fc:	08002557 	.word	0x08002557
 8002500:	08002579 	.word	0x08002579
 8002504:	08002509 	.word	0x08002509
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002508:	4b1f      	ldr	r3, [pc, #124]	@ (8002588 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6013      	str	r3, [r2, #0]
      break;
 8002514:	e031      	b.n	800257a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002516:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1b      	ldr	r2, [pc, #108]	@ (8002588 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002522:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002528:	4a18      	ldr	r2, [pc, #96]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800252a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800252e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002532:	e022      	b.n	800257a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002534:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a13      	ldr	r2, [pc, #76]	@ (8002588 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002546:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800254a:	4a10      	ldr	r2, [pc, #64]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800254c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002550:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002554:	e011      	b.n	800257a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002556:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a0b      	ldr	r2, [pc, #44]	@ (8002588 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002568:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800256c:	4a07      	ldr	r2, [pc, #28]	@ (800258c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800256e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002572:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002576:	e000      	b.n	800257a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002578:	bf00      	nop
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010
 800258c:	46020c00 	.word	0x46020c00

08002590 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002596:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80025a2:	2304      	movs	r3, #4
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	e021      	b.n	80025ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80025a8:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ae:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80025b2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025ba:	d011      	beq.n	80025e0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025c2:	d810      	bhi.n	80025e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025d0:	d003      	beq.n	80025da <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80025d2:	e008      	b.n	80025e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80025d4:	2300      	movs	r3, #0
 80025d6:	607b      	str	r3, [r7, #4]
        break;
 80025d8:	e008      	b.n	80025ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80025da:	2301      	movs	r3, #1
 80025dc:	607b      	str	r3, [r7, #4]
        break;
 80025de:	e005      	b.n	80025ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80025e0:	2302      	movs	r3, #2
 80025e2:	607b      	str	r3, [r7, #4]
        break;
 80025e4:	e002      	b.n	80025ec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
        break;
 80025ea:	bf00      	nop
    }
  }
  return systick_source;
 80025ec:	687b      	ldr	r3, [r7, #4]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010
 8002600:	46020c00 	.word	0x46020c00

08002604 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff fa6e 	bl	8001aec <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0db      	b.n	80027d4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6e      	ldr	r2, [pc, #440]	@ (80027dc <HAL_DMA_Init+0x1d8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f000 809f 	beq.w	8002766 <HAL_DMA_Init+0x162>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6c      	ldr	r2, [pc, #432]	@ (80027e0 <HAL_DMA_Init+0x1dc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	f000 8099 	beq.w	8002766 <HAL_DMA_Init+0x162>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6a      	ldr	r2, [pc, #424]	@ (80027e4 <HAL_DMA_Init+0x1e0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f000 8093 	beq.w	8002766 <HAL_DMA_Init+0x162>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a68      	ldr	r2, [pc, #416]	@ (80027e8 <HAL_DMA_Init+0x1e4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	f000 808d 	beq.w	8002766 <HAL_DMA_Init+0x162>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a66      	ldr	r2, [pc, #408]	@ (80027ec <HAL_DMA_Init+0x1e8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	f000 8087 	beq.w	8002766 <HAL_DMA_Init+0x162>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a64      	ldr	r2, [pc, #400]	@ (80027f0 <HAL_DMA_Init+0x1ec>)
 800265e:	4293      	cmp	r3, r2
 8002660:	f000 8081 	beq.w	8002766 <HAL_DMA_Init+0x162>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a62      	ldr	r2, [pc, #392]	@ (80027f4 <HAL_DMA_Init+0x1f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d07b      	beq.n	8002766 <HAL_DMA_Init+0x162>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a61      	ldr	r2, [pc, #388]	@ (80027f8 <HAL_DMA_Init+0x1f4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d076      	beq.n	8002766 <HAL_DMA_Init+0x162>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a5f      	ldr	r2, [pc, #380]	@ (80027fc <HAL_DMA_Init+0x1f8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d071      	beq.n	8002766 <HAL_DMA_Init+0x162>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5e      	ldr	r2, [pc, #376]	@ (8002800 <HAL_DMA_Init+0x1fc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d06c      	beq.n	8002766 <HAL_DMA_Init+0x162>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5c      	ldr	r2, [pc, #368]	@ (8002804 <HAL_DMA_Init+0x200>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d067      	beq.n	8002766 <HAL_DMA_Init+0x162>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5b      	ldr	r2, [pc, #364]	@ (8002808 <HAL_DMA_Init+0x204>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d062      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a59      	ldr	r2, [pc, #356]	@ (800280c <HAL_DMA_Init+0x208>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d05d      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a58      	ldr	r2, [pc, #352]	@ (8002810 <HAL_DMA_Init+0x20c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d058      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a56      	ldr	r2, [pc, #344]	@ (8002814 <HAL_DMA_Init+0x210>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d053      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a55      	ldr	r2, [pc, #340]	@ (8002818 <HAL_DMA_Init+0x214>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d04e      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a53      	ldr	r2, [pc, #332]	@ (800281c <HAL_DMA_Init+0x218>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d049      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a52      	ldr	r2, [pc, #328]	@ (8002820 <HAL_DMA_Init+0x21c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d044      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a50      	ldr	r2, [pc, #320]	@ (8002824 <HAL_DMA_Init+0x220>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d03f      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002828 <HAL_DMA_Init+0x224>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d03a      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a4d      	ldr	r2, [pc, #308]	@ (800282c <HAL_DMA_Init+0x228>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d035      	beq.n	8002766 <HAL_DMA_Init+0x162>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a4c      	ldr	r2, [pc, #304]	@ (8002830 <HAL_DMA_Init+0x22c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d030      	beq.n	8002766 <HAL_DMA_Init+0x162>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a4a      	ldr	r2, [pc, #296]	@ (8002834 <HAL_DMA_Init+0x230>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02b      	beq.n	8002766 <HAL_DMA_Init+0x162>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a49      	ldr	r2, [pc, #292]	@ (8002838 <HAL_DMA_Init+0x234>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d026      	beq.n	8002766 <HAL_DMA_Init+0x162>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a47      	ldr	r2, [pc, #284]	@ (800283c <HAL_DMA_Init+0x238>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d021      	beq.n	8002766 <HAL_DMA_Init+0x162>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a46      	ldr	r2, [pc, #280]	@ (8002840 <HAL_DMA_Init+0x23c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d01c      	beq.n	8002766 <HAL_DMA_Init+0x162>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a44      	ldr	r2, [pc, #272]	@ (8002844 <HAL_DMA_Init+0x240>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d017      	beq.n	8002766 <HAL_DMA_Init+0x162>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a43      	ldr	r2, [pc, #268]	@ (8002848 <HAL_DMA_Init+0x244>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d012      	beq.n	8002766 <HAL_DMA_Init+0x162>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a41      	ldr	r2, [pc, #260]	@ (800284c <HAL_DMA_Init+0x248>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_DMA_Init+0x162>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a40      	ldr	r2, [pc, #256]	@ (8002850 <HAL_DMA_Init+0x24c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d008      	beq.n	8002766 <HAL_DMA_Init+0x162>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3e      	ldr	r2, [pc, #248]	@ (8002854 <HAL_DMA_Init+0x250>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d003      	beq.n	8002766 <HAL_DMA_Init+0x162>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3d      	ldr	r2, [pc, #244]	@ (8002858 <HAL_DMA_Init+0x254>)
 8002764:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0206 	orr.w	r2, r2, #6
 8002784:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002786:	e00f      	b.n	80027a8 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002788:	f7ff f9b0 	bl	8001aec <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b05      	cmp	r3, #5
 8002794:	d908      	bls.n	80027a8 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2210      	movs	r2, #16
 800279a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2203      	movs	r2, #3
 80027a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e015      	b.n	80027d4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e8      	bne.n	8002788 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa52 	bl	8002c60 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40020050 	.word	0x40020050
 80027e0:	50020050 	.word	0x50020050
 80027e4:	400200d0 	.word	0x400200d0
 80027e8:	500200d0 	.word	0x500200d0
 80027ec:	40020150 	.word	0x40020150
 80027f0:	50020150 	.word	0x50020150
 80027f4:	400201d0 	.word	0x400201d0
 80027f8:	500201d0 	.word	0x500201d0
 80027fc:	40020250 	.word	0x40020250
 8002800:	50020250 	.word	0x50020250
 8002804:	400202d0 	.word	0x400202d0
 8002808:	500202d0 	.word	0x500202d0
 800280c:	40020350 	.word	0x40020350
 8002810:	50020350 	.word	0x50020350
 8002814:	400203d0 	.word	0x400203d0
 8002818:	500203d0 	.word	0x500203d0
 800281c:	40020450 	.word	0x40020450
 8002820:	50020450 	.word	0x50020450
 8002824:	400204d0 	.word	0x400204d0
 8002828:	500204d0 	.word	0x500204d0
 800282c:	40020550 	.word	0x40020550
 8002830:	50020550 	.word	0x50020550
 8002834:	400205d0 	.word	0x400205d0
 8002838:	500205d0 	.word	0x500205d0
 800283c:	40020650 	.word	0x40020650
 8002840:	50020650 	.word	0x50020650
 8002844:	400206d0 	.word	0x400206d0
 8002848:	500206d0 	.word	0x500206d0
 800284c:	40020750 	.word	0x40020750
 8002850:	50020750 	.word	0x50020750
 8002854:	400207d0 	.word	0x400207d0
 8002858:	500207d0 	.word	0x500207d0

0800285c <HAL_DMA_Start>:
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *const hdma,
                                uint32_t SrcAddress,
                                uint32_t DstAddress,
                                uint32_t SrcDataSize)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_DMA_Start+0x18>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e02f      	b.n	80028d4 <HAL_DMA_Start+0x78>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_DMA_Start+0x26>
 800287e:	2302      	movs	r3, #2
 8002880:	e028      	b.n	80028d4 <HAL_DMA_Start+0x78>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d116      	bne.n	80028c4 <HAL_DMA_Start+0x68>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f9b3 	bl	8002c16 <DMA_SetConfig>

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e007      	b.n	80028d4 <HAL_DMA_Start+0x78>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2240      	movs	r2, #64	@ 0x40
 80028c8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80028ec:	f023 030f 	bic.w	r3, r3, #15
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fa:	3b50      	subs	r3, #80	@ 0x50
 80028fc:	09db      	lsrs	r3, r3, #7
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2201      	movs	r2, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 813b 	beq.w	8002b92 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002926:	2b00      	cmp	r3, #0
 8002928:	d011      	beq.n	800294e <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002940:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002958:	2b00      	cmp	r3, #0
 800295a:	d011      	beq.n	8002980 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002972:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	f043 0202 	orr.w	r2, r3, #2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d011      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029a4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	f043 0204 	orr.w	r2, r3, #4
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d011      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029d6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	f043 0208 	orr.w	r2, r3, #8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d013      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00c      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a08:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d04c      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d045      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a3e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d12e      	bne.n	8002aaa <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a5a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0202 	orr.w	r2, r2, #2
 8002a6a:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a84:	2201      	movs	r2, #1
 8002a86:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d07a      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
        }

        return;
 8002aa8:	e075      	b.n	8002b96 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2205      	movs	r2, #5
 8002aae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d039      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d032      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d012      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d111      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	731a      	strb	r2, [r3, #12]
 8002b0e:	e008      	b.n	8002b22 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002b2a:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d025      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0202 	orr.w	r2, r2, #2
 8002b5a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b74:	2201      	movs	r2, #1
 8002b76:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
 8002b90:	e002      	b.n	8002b98 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002b96:	bf00      	nop
    }
  }
}
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e02b      	b.n	8002c0a <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002bba:	f023 030f 	bic.w	r3, r3, #15
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc8:	3b50      	subs	r3, #80	@ 0x50
 8002bca:	09db      	lsrs	r3, r3, #7
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d012      	beq.n	8002c08 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f003 0311 	and.w	r3, r3, #17
 8002be8:	2b11      	cmp	r3, #17
 8002bea:	d106      	bne.n	8002bfa <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	e006      	b.n	8002c08 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	401a      	ands	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	b291      	uxth	r1, r2
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	430b      	orrs	r3, r1
 8002c38:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002c42:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a53      	ldr	r2, [pc, #332]	@ (8002dec <DMA_Init+0x18c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	f000 80a0 	beq.w	8002de6 <DMA_Init+0x186>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a51      	ldr	r2, [pc, #324]	@ (8002df0 <DMA_Init+0x190>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	f000 809a 	beq.w	8002de6 <DMA_Init+0x186>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a4f      	ldr	r2, [pc, #316]	@ (8002df4 <DMA_Init+0x194>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	f000 8094 	beq.w	8002de6 <DMA_Init+0x186>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4d      	ldr	r2, [pc, #308]	@ (8002df8 <DMA_Init+0x198>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	f000 808e 	beq.w	8002de6 <DMA_Init+0x186>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a4b      	ldr	r2, [pc, #300]	@ (8002dfc <DMA_Init+0x19c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	f000 8088 	beq.w	8002de6 <DMA_Init+0x186>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a49      	ldr	r2, [pc, #292]	@ (8002e00 <DMA_Init+0x1a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	f000 8082 	beq.w	8002de6 <DMA_Init+0x186>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a47      	ldr	r2, [pc, #284]	@ (8002e04 <DMA_Init+0x1a4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d07c      	beq.n	8002de6 <DMA_Init+0x186>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a45      	ldr	r2, [pc, #276]	@ (8002e08 <DMA_Init+0x1a8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d077      	beq.n	8002de6 <DMA_Init+0x186>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a44      	ldr	r2, [pc, #272]	@ (8002e0c <DMA_Init+0x1ac>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d072      	beq.n	8002de6 <DMA_Init+0x186>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a42      	ldr	r2, [pc, #264]	@ (8002e10 <DMA_Init+0x1b0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d06d      	beq.n	8002de6 <DMA_Init+0x186>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a41      	ldr	r2, [pc, #260]	@ (8002e14 <DMA_Init+0x1b4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d068      	beq.n	8002de6 <DMA_Init+0x186>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3f      	ldr	r2, [pc, #252]	@ (8002e18 <DMA_Init+0x1b8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d063      	beq.n	8002de6 <DMA_Init+0x186>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3e      	ldr	r2, [pc, #248]	@ (8002e1c <DMA_Init+0x1bc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d05e      	beq.n	8002de6 <DMA_Init+0x186>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e20 <DMA_Init+0x1c0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d059      	beq.n	8002de6 <DMA_Init+0x186>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3b      	ldr	r2, [pc, #236]	@ (8002e24 <DMA_Init+0x1c4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d054      	beq.n	8002de6 <DMA_Init+0x186>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a39      	ldr	r2, [pc, #228]	@ (8002e28 <DMA_Init+0x1c8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d04f      	beq.n	8002de6 <DMA_Init+0x186>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a38      	ldr	r2, [pc, #224]	@ (8002e2c <DMA_Init+0x1cc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d04a      	beq.n	8002de6 <DMA_Init+0x186>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a36      	ldr	r2, [pc, #216]	@ (8002e30 <DMA_Init+0x1d0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d045      	beq.n	8002de6 <DMA_Init+0x186>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a35      	ldr	r2, [pc, #212]	@ (8002e34 <DMA_Init+0x1d4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d040      	beq.n	8002de6 <DMA_Init+0x186>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a33      	ldr	r2, [pc, #204]	@ (8002e38 <DMA_Init+0x1d8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d03b      	beq.n	8002de6 <DMA_Init+0x186>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a32      	ldr	r2, [pc, #200]	@ (8002e3c <DMA_Init+0x1dc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d036      	beq.n	8002de6 <DMA_Init+0x186>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a30      	ldr	r2, [pc, #192]	@ (8002e40 <DMA_Init+0x1e0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d031      	beq.n	8002de6 <DMA_Init+0x186>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2f      	ldr	r2, [pc, #188]	@ (8002e44 <DMA_Init+0x1e4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d02c      	beq.n	8002de6 <DMA_Init+0x186>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2d      	ldr	r2, [pc, #180]	@ (8002e48 <DMA_Init+0x1e8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d027      	beq.n	8002de6 <DMA_Init+0x186>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002e4c <DMA_Init+0x1ec>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d022      	beq.n	8002de6 <DMA_Init+0x186>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e50 <DMA_Init+0x1f0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01d      	beq.n	8002de6 <DMA_Init+0x186>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a29      	ldr	r2, [pc, #164]	@ (8002e54 <DMA_Init+0x1f4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d018      	beq.n	8002de6 <DMA_Init+0x186>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a27      	ldr	r2, [pc, #156]	@ (8002e58 <DMA_Init+0x1f8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <DMA_Init+0x186>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a26      	ldr	r2, [pc, #152]	@ (8002e5c <DMA_Init+0x1fc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00e      	beq.n	8002de6 <DMA_Init+0x186>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a24      	ldr	r2, [pc, #144]	@ (8002e60 <DMA_Init+0x200>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d009      	beq.n	8002de6 <DMA_Init+0x186>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a23      	ldr	r2, [pc, #140]	@ (8002e64 <DMA_Init+0x204>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d004      	beq.n	8002de6 <DMA_Init+0x186>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a21      	ldr	r2, [pc, #132]	@ (8002e68 <DMA_Init+0x208>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d142      	bne.n	8002e6c <DMA_Init+0x20c>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e041      	b.n	8002e6e <DMA_Init+0x20e>
 8002dea:	bf00      	nop
 8002dec:	40020050 	.word	0x40020050
 8002df0:	50020050 	.word	0x50020050
 8002df4:	400200d0 	.word	0x400200d0
 8002df8:	500200d0 	.word	0x500200d0
 8002dfc:	40020150 	.word	0x40020150
 8002e00:	50020150 	.word	0x50020150
 8002e04:	400201d0 	.word	0x400201d0
 8002e08:	500201d0 	.word	0x500201d0
 8002e0c:	40020250 	.word	0x40020250
 8002e10:	50020250 	.word	0x50020250
 8002e14:	400202d0 	.word	0x400202d0
 8002e18:	500202d0 	.word	0x500202d0
 8002e1c:	40020350 	.word	0x40020350
 8002e20:	50020350 	.word	0x50020350
 8002e24:	400203d0 	.word	0x400203d0
 8002e28:	500203d0 	.word	0x500203d0
 8002e2c:	40020450 	.word	0x40020450
 8002e30:	50020450 	.word	0x50020450
 8002e34:	400204d0 	.word	0x400204d0
 8002e38:	500204d0 	.word	0x500204d0
 8002e3c:	40020550 	.word	0x40020550
 8002e40:	50020550 	.word	0x50020550
 8002e44:	400205d0 	.word	0x400205d0
 8002e48:	500205d0 	.word	0x500205d0
 8002e4c:	40020650 	.word	0x40020650
 8002e50:	50020650 	.word	0x50020650
 8002e54:	400206d0 	.word	0x400206d0
 8002e58:	500206d0 	.word	0x500206d0
 8002e5c:	40020750 	.word	0x40020750
 8002e60:	50020750 	.word	0x50020750
 8002e64:	400207d0 	.word	0x400207d0
 8002e68:	500207d0 	.word	0x500207d0
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	051b      	lsls	r3, r3, #20
 8002e7e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002e82:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002e90:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eca:	f040 80b0 	bne.w	800302e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a82      	ldr	r2, [pc, #520]	@ (80030dc <DMA_Init+0x47c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	f000 80a0 	beq.w	800301a <DMA_Init+0x3ba>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a80      	ldr	r2, [pc, #512]	@ (80030e0 <DMA_Init+0x480>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	f000 809a 	beq.w	800301a <DMA_Init+0x3ba>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7e      	ldr	r2, [pc, #504]	@ (80030e4 <DMA_Init+0x484>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	f000 8094 	beq.w	800301a <DMA_Init+0x3ba>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7c      	ldr	r2, [pc, #496]	@ (80030e8 <DMA_Init+0x488>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	f000 808e 	beq.w	800301a <DMA_Init+0x3ba>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7a      	ldr	r2, [pc, #488]	@ (80030ec <DMA_Init+0x48c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	f000 8088 	beq.w	800301a <DMA_Init+0x3ba>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a78      	ldr	r2, [pc, #480]	@ (80030f0 <DMA_Init+0x490>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	f000 8082 	beq.w	800301a <DMA_Init+0x3ba>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a76      	ldr	r2, [pc, #472]	@ (80030f4 <DMA_Init+0x494>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d07c      	beq.n	800301a <DMA_Init+0x3ba>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a74      	ldr	r2, [pc, #464]	@ (80030f8 <DMA_Init+0x498>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d077      	beq.n	800301a <DMA_Init+0x3ba>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a73      	ldr	r2, [pc, #460]	@ (80030fc <DMA_Init+0x49c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d072      	beq.n	800301a <DMA_Init+0x3ba>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a71      	ldr	r2, [pc, #452]	@ (8003100 <DMA_Init+0x4a0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d06d      	beq.n	800301a <DMA_Init+0x3ba>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a70      	ldr	r2, [pc, #448]	@ (8003104 <DMA_Init+0x4a4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d068      	beq.n	800301a <DMA_Init+0x3ba>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003108 <DMA_Init+0x4a8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d063      	beq.n	800301a <DMA_Init+0x3ba>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6d      	ldr	r2, [pc, #436]	@ (800310c <DMA_Init+0x4ac>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d05e      	beq.n	800301a <DMA_Init+0x3ba>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6b      	ldr	r2, [pc, #428]	@ (8003110 <DMA_Init+0x4b0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d059      	beq.n	800301a <DMA_Init+0x3ba>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6a      	ldr	r2, [pc, #424]	@ (8003114 <DMA_Init+0x4b4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d054      	beq.n	800301a <DMA_Init+0x3ba>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a68      	ldr	r2, [pc, #416]	@ (8003118 <DMA_Init+0x4b8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d04f      	beq.n	800301a <DMA_Init+0x3ba>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a67      	ldr	r2, [pc, #412]	@ (800311c <DMA_Init+0x4bc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d04a      	beq.n	800301a <DMA_Init+0x3ba>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a65      	ldr	r2, [pc, #404]	@ (8003120 <DMA_Init+0x4c0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d045      	beq.n	800301a <DMA_Init+0x3ba>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a64      	ldr	r2, [pc, #400]	@ (8003124 <DMA_Init+0x4c4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d040      	beq.n	800301a <DMA_Init+0x3ba>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a62      	ldr	r2, [pc, #392]	@ (8003128 <DMA_Init+0x4c8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d03b      	beq.n	800301a <DMA_Init+0x3ba>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a61      	ldr	r2, [pc, #388]	@ (800312c <DMA_Init+0x4cc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d036      	beq.n	800301a <DMA_Init+0x3ba>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a5f      	ldr	r2, [pc, #380]	@ (8003130 <DMA_Init+0x4d0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d031      	beq.n	800301a <DMA_Init+0x3ba>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5e      	ldr	r2, [pc, #376]	@ (8003134 <DMA_Init+0x4d4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d02c      	beq.n	800301a <DMA_Init+0x3ba>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5c      	ldr	r2, [pc, #368]	@ (8003138 <DMA_Init+0x4d8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d027      	beq.n	800301a <DMA_Init+0x3ba>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5b      	ldr	r2, [pc, #364]	@ (800313c <DMA_Init+0x4dc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <DMA_Init+0x3ba>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a59      	ldr	r2, [pc, #356]	@ (8003140 <DMA_Init+0x4e0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <DMA_Init+0x3ba>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a58      	ldr	r2, [pc, #352]	@ (8003144 <DMA_Init+0x4e4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d018      	beq.n	800301a <DMA_Init+0x3ba>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a56      	ldr	r2, [pc, #344]	@ (8003148 <DMA_Init+0x4e8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <DMA_Init+0x3ba>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a55      	ldr	r2, [pc, #340]	@ (800314c <DMA_Init+0x4ec>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <DMA_Init+0x3ba>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a53      	ldr	r2, [pc, #332]	@ (8003150 <DMA_Init+0x4f0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <DMA_Init+0x3ba>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a52      	ldr	r2, [pc, #328]	@ (8003154 <DMA_Init+0x4f4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <DMA_Init+0x3ba>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a50      	ldr	r2, [pc, #320]	@ (8003158 <DMA_Init+0x4f8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <DMA_Init+0x3be>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <DMA_Init+0x3c0>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00d      	beq.n	8003040 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e008      	b.n	8003040 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003036:	d103      	bne.n	8003040 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800303e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003046:	4b45      	ldr	r3, [pc, #276]	@ (800315c <DMA_Init+0x4fc>)
 8003048:	4013      	ands	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	430b      	orrs	r3, r1
 8003052:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2200      	movs	r2, #0
 800305a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a36      	ldr	r2, [pc, #216]	@ (800313c <DMA_Init+0x4dc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d022      	beq.n	80030ac <DMA_Init+0x44c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a35      	ldr	r2, [pc, #212]	@ (8003140 <DMA_Init+0x4e0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d01d      	beq.n	80030ac <DMA_Init+0x44c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a33      	ldr	r2, [pc, #204]	@ (8003144 <DMA_Init+0x4e4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d018      	beq.n	80030ac <DMA_Init+0x44c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a32      	ldr	r2, [pc, #200]	@ (8003148 <DMA_Init+0x4e8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <DMA_Init+0x44c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a30      	ldr	r2, [pc, #192]	@ (800314c <DMA_Init+0x4ec>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00e      	beq.n	80030ac <DMA_Init+0x44c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2f      	ldr	r2, [pc, #188]	@ (8003150 <DMA_Init+0x4f0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d009      	beq.n	80030ac <DMA_Init+0x44c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a2d      	ldr	r2, [pc, #180]	@ (8003154 <DMA_Init+0x4f4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <DMA_Init+0x44c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003158 <DMA_Init+0x4f8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d101      	bne.n	80030b0 <DMA_Init+0x450>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <DMA_Init+0x452>
 80030b0:	2300      	movs	r3, #0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40020050 	.word	0x40020050
 80030e0:	50020050 	.word	0x50020050
 80030e4:	400200d0 	.word	0x400200d0
 80030e8:	500200d0 	.word	0x500200d0
 80030ec:	40020150 	.word	0x40020150
 80030f0:	50020150 	.word	0x50020150
 80030f4:	400201d0 	.word	0x400201d0
 80030f8:	500201d0 	.word	0x500201d0
 80030fc:	40020250 	.word	0x40020250
 8003100:	50020250 	.word	0x50020250
 8003104:	400202d0 	.word	0x400202d0
 8003108:	500202d0 	.word	0x500202d0
 800310c:	40020350 	.word	0x40020350
 8003110:	50020350 	.word	0x50020350
 8003114:	400203d0 	.word	0x400203d0
 8003118:	500203d0 	.word	0x500203d0
 800311c:	40020450 	.word	0x40020450
 8003120:	50020450 	.word	0x50020450
 8003124:	400204d0 	.word	0x400204d0
 8003128:	500204d0 	.word	0x500204d0
 800312c:	40020550 	.word	0x40020550
 8003130:	50020550 	.word	0x50020550
 8003134:	400205d0 	.word	0x400205d0
 8003138:	500205d0 	.word	0x500205d0
 800313c:	40020650 	.word	0x40020650
 8003140:	50020650 	.word	0x50020650
 8003144:	400206d0 	.word	0x400206d0
 8003148:	500206d0 	.word	0x500206d0
 800314c:	40020750 	.word	0x40020750
 8003150:	50020750 	.word	0x50020750
 8003154:	400207d0 	.word	0x400207d0
 8003158:	500207d0 	.word	0x500207d0
 800315c:	3cc03180 	.word	0x3cc03180

08003160 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <HAL_FLASH_Unlock+0x38>)
 800316c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	da0b      	bge.n	800318a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8003172:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <HAL_FLASH_Unlock+0x38>)
 8003174:	4a09      	ldr	r2, [pc, #36]	@ (800319c <HAL_FLASH_Unlock+0x3c>)
 8003176:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8003178:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <HAL_FLASH_Unlock+0x38>)
 800317a:	4a09      	ldr	r2, [pc, #36]	@ (80031a0 <HAL_FLASH_Unlock+0x40>)
 800317c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_FLASH_Unlock+0x38>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	da01      	bge.n	800318a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800318a:	79fb      	ldrb	r3, [r7, #7]
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40022000 	.word	0x40022000
 800319c:	45670123 	.word	0x45670123
 80031a0:	cdef89ab 	.word	0xcdef89ab

080031a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <HAL_FLASH_Lock+0x30>)
 80031b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b2:	4a08      	ldr	r2, [pc, #32]	@ (80031d4 <HAL_FLASH_Lock+0x30>)
 80031b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031b8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <HAL_FLASH_Lock+0x30>)
 80031bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031be:	2b00      	cmp	r3, #0
 80031c0:	da01      	bge.n	80031c6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 80031c6:	79fb      	ldrb	r3, [r7, #7]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40022000 	.word	0x40022000

080031d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	@ 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031ea:	e1ba      	b.n	8003562 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 81aa 	beq.w	800355c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a55      	ldr	r2, [pc, #340]	@ (8003360 <HAL_GPIO_Init+0x188>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d15d      	bne.n	80032cc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003216:	2201      	movs	r2, #1
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	4013      	ands	r3, r2
 8003224:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0201 	and.w	r2, r3, #1
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	4313      	orrs	r3, r2
 8003238:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003240:	4a48      	ldr	r2, [pc, #288]	@ (8003364 <HAL_GPIO_Init+0x18c>)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003248:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800324a:	4a46      	ldr	r2, [pc, #280]	@ (8003364 <HAL_GPIO_Init+0x18c>)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	08da      	lsrs	r2, r3, #3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	3208      	adds	r2, #8
 800325e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003262:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	4013      	ands	r3, r2
 8003278:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220b      	movs	r2, #11
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	4313      	orrs	r3, r2
 800328c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3208      	adds	r2, #8
 8003296:	69f9      	ldr	r1, [r7, #28]
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	2202      	movs	r2, #2
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e067      	b.n	800339c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x104>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b12      	cmp	r3, #18
 80032da:	d145      	bne.n	8003368 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	4313      	orrs	r3, r2
 8003318:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	08da      	lsrs	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3208      	adds	r2, #8
 8003322:	69f9      	ldr	r1, [r7, #28]
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	4013      	ands	r3, r2
 800333e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	4313      	orrs	r3, r2
 8003354:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e01e      	b.n	800339c <HAL_GPIO_Init+0x1c4>
 800335e:	bf00      	nop
 8003360:	46020000 	.word	0x46020000
 8003364:	0800be20 	.word	0x0800be20
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2203      	movs	r2, #3
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	4013      	ands	r3, r2
 800337e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0203 	and.w	r2, r3, #3
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	4313      	orrs	r3, r2
 8003394:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d00b      	beq.n	80033bc <HAL_GPIO_Init+0x1e4>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d007      	beq.n	80033bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033b0:	2b11      	cmp	r3, #17
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b12      	cmp	r3, #18
 80033ba:	d130      	bne.n	800341e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80033f2:	2201      	movs	r2, #1
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	4013      	ands	r3, r2
 8003400:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 0201 	and.w	r2, r3, #1
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	4313      	orrs	r3, r2
 8003416:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d017      	beq.n	8003456 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2203      	movs	r2, #3
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	4013      	ands	r3, r2
 800343c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	4313      	orrs	r3, r2
 800344e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d07c      	beq.n	800355c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003462:	4a47      	ldr	r2, [pc, #284]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3318      	adds	r3, #24
 800346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	4013      	ands	r3, r2
 8003484:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0a9a      	lsrs	r2, r3, #10
 800348a:	4b3e      	ldr	r3, [pc, #248]	@ (8003584 <HAL_GPIO_Init+0x3ac>)
 800348c:	4013      	ands	r3, r2
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	f002 0203 	and.w	r2, r2, #3
 8003494:	00d2      	lsls	r2, r2, #3
 8003496:	4093      	lsls	r3, r2
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	4313      	orrs	r3, r2
 800349c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800349e:	4938      	ldr	r1, [pc, #224]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	3318      	adds	r3, #24
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80034ac:	4b34      	ldr	r3, [pc, #208]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80034d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80034d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80034fa:	4a21      	ldr	r2, [pc, #132]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003500:	4b1f      	ldr	r3, [pc, #124]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 8003502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003506:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43db      	mvns	r3, r3
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	4013      	ands	r3, r2
 8003510:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003526:	4a16      	ldr	r2, [pc, #88]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800352e:	4b14      	ldr	r3, [pc, #80]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 8003530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003534:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	43db      	mvns	r3, r3
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	4013      	ands	r3, r2
 800353e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003554:	4a0a      	ldr	r2, [pc, #40]	@ (8003580 <HAL_GPIO_Init+0x3a8>)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3301      	adds	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	f47f ae3d 	bne.w	80031ec <HAL_GPIO_Init+0x14>
  }
}
 8003572:	bf00      	nop
 8003574:	bf00      	nop
 8003576:	3724      	adds	r7, #36	@ 0x24
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	46022000 	.word	0x46022000
 8003584:	002f7f7f 	.word	0x002f7f7f

08003588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
 8003594:	4613      	mov	r3, r2
 8003596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003598:	787b      	ldrb	r3, [r7, #1]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80035c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003600 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80035ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003600 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f814 	bl	8003604 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80035dc:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80035e8:	4a05      	ldr	r2, [pc, #20]	@ (8003600 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f812 	bl	800361a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	46022000 	.word	0x46022000

08003604 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	e007      	b.n	800365e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 0204 	bic.w	r2, r3, #4
 8003656:	4905      	ldr	r1, [pc, #20]	@ (800366c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40030400 	.word	0x40030400

08003670 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_ICACHE_Enable+0x1c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a04      	ldr	r2, [pc, #16]	@ (800368c <HAL_ICACHE_Enable+0x1c>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40030400 	.word	0x40030400

08003690 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af02      	add	r7, sp, #8
 8003696:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e108      	b.n	80038b4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fe f81b 	bl	80016f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2203      	movs	r2, #3
 80036c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4a7b      	ldr	r2, [pc, #492]	@ (80038bc <HAL_PCD_Init+0x22c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d102      	bne.n	80036d8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f007 fe3d 	bl	800b35c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7c1a      	ldrb	r2, [r3, #16]
 80036ea:	f88d 2000 	strb.w	r2, [sp]
 80036ee:	3304      	adds	r3, #4
 80036f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f2:	f007 fd64 	bl	800b1be <USB_CoreInit>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0d5      	b.n	80038b4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f007 fe35 	bl	800b37e <USB_SetCurrentMode>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0c6      	b.n	80038b4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	e04a      	b.n	80037c2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3315      	adds	r3, #21
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3314      	adds	r3, #20
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	b298      	uxth	r0, r3
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	332e      	adds	r3, #46	@ 0x2e
 8003768:	4602      	mov	r2, r0
 800376a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	3318      	adds	r3, #24
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	331c      	adds	r3, #28
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	3320      	adds	r3, #32
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3324      	adds	r3, #36	@ 0x24
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	3301      	adds	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	791b      	ldrb	r3, [r3, #4]
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d3af      	bcc.n	800372c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e044      	b.n	800385c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	3301      	adds	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	429a      	cmp	r2, r3
 8003864:	d3b5      	bcc.n	80037d2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7c1a      	ldrb	r2, [r3, #16]
 800386e:	f88d 2000 	strb.w	r2, [sp]
 8003872:	3304      	adds	r3, #4
 8003874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003876:	f007 fdcf 	bl	800b418 <USB_DevInit>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e013      	b.n	80038b4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	7b1b      	ldrb	r3, [r3, #12]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d102      	bne.n	80038a8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 ff3c 	bl	8004720 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f008 f8dd 	bl	800ba6c <USB_DevDisconnect>

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	42040000 	.word	0x42040000

080038c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b08d      	sub	sp, #52	@ 0x34
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f008 f97c 	bl	800bbd4 <USB_GetMode>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 84b9 	bne.w	8004256 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f008 f8e0 	bl	800baae <USB_ReadInterrupts>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 84af 	beq.w	8004254 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f008 f8cd 	bl	800baae <USB_ReadInterrupts>
 8003914:	4603      	mov	r3, r0
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f002 0202 	and.w	r2, r2, #2
 800392c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f008 f8bb 	bl	800baae <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b10      	cmp	r3, #16
 8003940:	d161      	bne.n	8003a06 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0210 	bic.w	r2, r2, #16
 8003950:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f003 020f 	and.w	r2, r3, #15
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	3304      	adds	r3, #4
 8003970:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	0c5b      	lsrs	r3, r3, #17
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	2b02      	cmp	r3, #2
 800397c:	d124      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d035      	beq.n	80039f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	6a38      	ldr	r0, [r7, #32]
 800399e:	f008 f80d 	bl	800b9bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ae:	441a      	add	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039c0:	441a      	add	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	615a      	str	r2, [r3, #20]
 80039c6:	e016      	b.n	80039f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	0c5b      	lsrs	r3, r3, #17
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d110      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039da:	2208      	movs	r2, #8
 80039dc:	4619      	mov	r1, r3
 80039de:	6a38      	ldr	r0, [r7, #32]
 80039e0:	f007 ffec 	bl	800b9bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039f0:	441a      	add	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0210 	orr.w	r2, r2, #16
 8003a04:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f008 f84f 	bl	800baae <USB_ReadInterrupts>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a1a:	f040 80a7 	bne.w	8003b6c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f008 f854 	bl	800bad4 <USB_ReadDevAllOutEpInterrupt>
 8003a2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003a2e:	e099      	b.n	8003b64 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 808e 	beq.w	8003b58 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f008 f878 	bl	800bb3c <USB_ReadDevOutEPInterrupt>
 8003a4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00c      	beq.n	8003a72 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a64:	461a      	mov	r2, r3
 8003a66:	2301      	movs	r3, #1
 8003a68:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fd29 	bl	80044c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00c      	beq.n	8003a96 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fdff 	bl	8004694 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	2310      	movs	r3, #16
 8003ab0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d030      	beq.n	8003b1e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac4:	2b80      	cmp	r3, #128	@ 0x80
 8003ac6:	d109      	bne.n	8003adc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ada:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	3304      	adds	r3, #4
 8003af0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	78db      	ldrb	r3, [r3, #3]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d108      	bne.n	8003b0c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2200      	movs	r2, #0
 8003afe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4619      	mov	r1, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fbf2 	bl	80042f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	2320      	movs	r3, #32
 8003b38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d009      	beq.n	8003b58 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b56:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f47f af62 	bne.w	8003a30 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f007 ff9c 	bl	800baae <USB_ReadInterrupts>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b80:	f040 80db 	bne.w	8003d3a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f007 ffbd 	bl	800bb08 <USB_ReadDevAllInEpInterrupt>
 8003b8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003b94:	e0cd      	b.n	8003d32 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80c2 	beq.w	8003d26 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f007 ffe3 	bl	800bb78 <USB_ReadDevInEPInterrupt>
 8003bb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d057      	beq.n	8003c6e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69f9      	ldr	r1, [r7, #28]
 8003bda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bde:	4013      	ands	r3, r2
 8003be0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	799b      	ldrb	r3, [r3, #6]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d132      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3320      	adds	r3, #32
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4403      	add	r3, r0
 8003c1c:	331c      	adds	r3, #28
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4419      	add	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4403      	add	r3, r0
 8003c30:	3320      	adds	r3, #32
 8003c32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d113      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x3a2>
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3324      	adds	r3, #36	@ 0x24
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d108      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	f007 ffeb 	bl	800bc38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fb03 	bl	8004274 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c84:	461a      	mov	r2, r3
 8003c86:	2308      	movs	r3, #8
 8003c88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2340      	movs	r3, #64	@ 0x40
 8003cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ccc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cce:	6a38      	ldr	r0, [r7, #32]
 8003cd0:	f007 fcee 	bl	800b6b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	3310      	adds	r3, #16
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	78db      	ldrb	r3, [r3, #3]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d108      	bne.n	8003d02 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fb03 	bl	8004308 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2302      	movs	r3, #2
 8003d12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fb42 	bl	80043aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	3301      	adds	r3, #1
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f47f af2e 	bne.w	8003b96 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f007 feb5 	bl	800baae <USB_ReadInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d4e:	d122      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d108      	bne.n	8003d80 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d76:	2100      	movs	r1, #0
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fcf5 	bl	8004768 <HAL_PCDEx_LPM_Callback>
 8003d7e:	e002      	b.n	8003d86 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 faab 	bl	80042dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f007 fe87 	bl	800baae <USB_ReadInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003daa:	d112      	bne.n	8003dd2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d102      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fa83 	bl	80042c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f007 fe69 	bl	800baae <USB_ReadInterrupts>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de6:	d121      	bne.n	8003e2c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003df6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d111      	bne.n	8003e26 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fca2 	bl	8004768 <HAL_PCDEx_LPM_Callback>
 8003e24:	e002      	b.n	8003e2c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa4e 	bl	80042c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f007 fe3c 	bl	800baae <USB_ReadInterrupts>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e40:	f040 80b7 	bne.w	8003fb2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2110      	movs	r1, #16
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f007 fc26 	bl	800b6b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e64:	2300      	movs	r3, #0
 8003e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e68:	e046      	b.n	8003ef8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e76:	461a      	mov	r2, r3
 8003e78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003eb0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ecc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ed0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003eec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ef0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	791b      	ldrb	r3, [r3, #4]
 8003efc:	461a      	mov	r2, r3
 8003efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d3b2      	bcc.n	8003e6a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f12:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7bdb      	ldrb	r3, [r3, #15]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d016      	beq.n	8003f4e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f30:	f043 030b 	orr.w	r3, r3, #11
 8003f34:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f46:	f043 030b 	orr.w	r3, r3, #11
 8003f4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f4c:	e015      	b.n	8003f7a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f60:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003f64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f74:	f043 030b 	orr.w	r3, r3, #11
 8003f78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f88:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f007 fe4b 	bl	800bc38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f007 fd79 	bl	800baae <USB_ReadInterrupts>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc6:	d123      	bne.n	8004010 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f007 fe0f 	bl	800bbf0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f007 fbe3 	bl	800b7a2 <USB_GetDevSpeed>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681c      	ldr	r4, [r3, #0]
 8003fe8:	f001 fede 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8003fec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f007 f90f 	bl	800b218 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f95a 	bl	80042b4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800400e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f007 fd4a 	bl	800baae <USB_ReadInterrupts>
 800401a:	4603      	mov	r3, r0
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b08      	cmp	r3, #8
 8004022:	d10a      	bne.n	800403a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f93b 	bl	80042a0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f002 0208 	and.w	r2, r2, #8
 8004038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f007 fd35 	bl	800baae <USB_ReadInterrupts>
 8004044:	4603      	mov	r3, r0
 8004046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404a:	2b80      	cmp	r3, #128	@ 0x80
 800404c:	d123      	bne.n	8004096 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800405a:	2301      	movs	r3, #1
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
 800405e:	e014      	b.n	800408a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	b2db      	uxtb	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f962 	bl	8004348 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	3301      	adds	r3, #1
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	791b      	ldrb	r3, [r3, #4]
 800408e:	461a      	mov	r2, r3
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	4293      	cmp	r3, r2
 8004094:	d3e4      	bcc.n	8004060 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f007 fd07 	bl	800baae <USB_ReadInterrupts>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040aa:	d13c      	bne.n	8004126 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ac:	2301      	movs	r3, #1
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b0:	e02b      	b.n	800410a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	3318      	adds	r3, #24
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d115      	bne.n	8004104 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040da:	2b00      	cmp	r3, #0
 80040dc:	da12      	bge.n	8004104 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	3317      	adds	r3, #23
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	4619      	mov	r1, r3
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f922 	bl	8004348 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	3301      	adds	r3, #1
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	791b      	ldrb	r3, [r3, #4]
 800410e:	461a      	mov	r2, r3
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	4293      	cmp	r3, r2
 8004114:	d3cd      	bcc.n	80040b2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f007 fcbf 	bl	800baae <USB_ReadInterrupts>
 8004130:	4603      	mov	r3, r0
 8004132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004136:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800413a:	d156      	bne.n	80041ea <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800413c:	2301      	movs	r3, #1
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004140:	e045      	b.n	80041ce <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d12e      	bne.n	80041c8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800416a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800416c:	2b00      	cmp	r3, #0
 800416e:	da2b      	bge.n	80041c8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800417c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004180:	429a      	cmp	r2, r3
 8004182:	d121      	bne.n	80041c8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004196:	2201      	movs	r2, #1
 8004198:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041c4:	6053      	str	r3, [r2, #4]
            break;
 80041c6:	e008      	b.n	80041da <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	3301      	adds	r3, #1
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	791b      	ldrb	r3, [r3, #4]
 80041d2:	461a      	mov	r2, r3
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d3b3      	bcc.n	8004142 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80041e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f007 fc5d 	bl	800baae <USB_ReadInterrupts>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fe:	d10a      	bne.n	8004216 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f88d 	bl	8004320 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f007 fc47 	bl	800baae <USB_ReadInterrupts>
 8004220:	4603      	mov	r3, r0
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b04      	cmp	r3, #4
 8004228:	d115      	bne.n	8004256 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f879 	bl	8004334 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6859      	ldr	r1, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	e000      	b.n	8004256 <HAL_PCD_IRQHandler+0x996>
      return;
 8004254:	bf00      	nop
    }
  }
}
 8004256:	3734      	adds	r7, #52	@ 0x34
 8004258:	46bd      	mov	sp, r7
 800425a:	bd90      	pop	{r4, r7, pc}

0800425c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004358:	2b00      	cmp	r3, #0
 800435a:	da0c      	bge.n	8004376 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 020f 	and.w	r2, r3, #15
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	3310      	adds	r3, #16
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	3304      	adds	r3, #4
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e00c      	b.n	8004390 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	f003 020f 	and.w	r2, r3, #15
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	4618      	mov	r0, r3
 8004398:	f007 fa28 	bl	800b7ec <USB_EPStopXfer>
 800439c:	4603      	mov	r3, r0
 800439e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80043a0:	7afb      	ldrb	r3, [r7, #11]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b08a      	sub	sp, #40	@ 0x28
 80043ae:	af02      	add	r7, sp, #8
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	3310      	adds	r3, #16
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4413      	add	r3, r2
 80043ce:	3304      	adds	r3, #4
 80043d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d901      	bls.n	80043e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e06b      	b.n	80044ba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d902      	bls.n	80043fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3303      	adds	r3, #3
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004406:	e02a      	b.n	800445e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	429a      	cmp	r2, r3
 800441c:	d902      	bls.n	8004424 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	3303      	adds	r3, #3
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68d9      	ldr	r1, [r3, #12]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4603      	mov	r3, r0
 8004440:	6978      	ldr	r0, [r7, #20]
 8004442:	f007 fa7d 	bl	800b940 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	441a      	add	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	441a      	add	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	429a      	cmp	r2, r3
 8004472:	d809      	bhi.n	8004488 <PCD_WriteEmptyTxFifo+0xde>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800447c:	429a      	cmp	r2, r3
 800447e:	d203      	bcs.n	8004488 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1bf      	bne.n	8004408 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	429a      	cmp	r2, r3
 8004492:	d811      	bhi.n	80044b8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	2201      	movs	r2, #1
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	6939      	ldr	r1, [r7, #16]
 80044b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044b4:	4013      	ands	r3, r2
 80044b6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	333c      	adds	r3, #60	@ 0x3c
 80044dc:	3304      	adds	r3, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	799b      	ldrb	r3, [r3, #6]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d17b      	bne.n	80045f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4a61      	ldr	r2, [pc, #388]	@ (800468c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	f240 80b9 	bls.w	8004680 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80b3 	beq.w	8004680 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004526:	461a      	mov	r2, r3
 8004528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800452c:	6093      	str	r3, [r2, #8]
 800452e:	e0a7      	b.n	8004680 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004546:	461a      	mov	r2, r3
 8004548:	2320      	movs	r3, #32
 800454a:	6093      	str	r3, [r2, #8]
 800454c:	e098      	b.n	8004680 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004554:	2b00      	cmp	r3, #0
 8004556:	f040 8093 	bne.w	8004680 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	4a4b      	ldr	r2, [pc, #300]	@ (800468c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d90f      	bls.n	8004582 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004578:	461a      	mov	r2, r3
 800457a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800457e:	6093      	str	r3, [r2, #8]
 8004580:	e07e      	b.n	8004680 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	3304      	adds	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1a      	ldr	r2, [r3, #32]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	0159      	lsls	r1, r3, #5
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	440b      	add	r3, r1
 80045a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d114      	bne.n	80045e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045cc:	461a      	mov	r2, r3
 80045ce:	2101      	movs	r1, #1
 80045d0:	f007 fb32 	bl	800bc38 <USB_EP0_OutStart>
 80045d4:	e006      	b.n	80045e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	441a      	add	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fe36 	bl	800425c <HAL_PCD_DataOutStageCallback>
 80045f0:	e046      	b.n	8004680 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4a26      	ldr	r2, [pc, #152]	@ (8004690 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d124      	bne.n	8004644 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004616:	6093      	str	r3, [r2, #8]
 8004618:	e032      	b.n	8004680 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004630:	461a      	mov	r2, r3
 8004632:	2320      	movs	r3, #32
 8004634:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff fe0d 	bl	800425c <HAL_PCD_DataOutStageCallback>
 8004642:	e01d      	b.n	8004680 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d114      	bne.n	8004674 <PCD_EP_OutXfrComplete_int+0x1b0>
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d108      	bne.n	8004674 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800466c:	461a      	mov	r2, r3
 800466e:	2100      	movs	r1, #0
 8004670:	f007 fae2 	bl	800bc38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fdee 	bl	800425c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	4f54300a 	.word	0x4f54300a
 8004690:	4f54310a 	.word	0x4f54310a

08004694 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	333c      	adds	r3, #60	@ 0x3c
 80046ac:	3304      	adds	r3, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a15      	ldr	r2, [pc, #84]	@ (800471c <PCD_EP_OutSetupPacket_int+0x88>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d90e      	bls.n	80046e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e0:	461a      	mov	r2, r3
 80046e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fdcf 	bl	800428c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	@ (800471c <PCD_EP_OutSetupPacket_int+0x88>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d90c      	bls.n	8004710 <PCD_EP_OutSetupPacket_int+0x7c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	799b      	ldrb	r3, [r3, #6]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d108      	bne.n	8004710 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004708:	461a      	mov	r2, r3
 800470a:	2101      	movs	r1, #1
 800470c:	f007 fa94 	bl	800bc38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	4f54300a 	.word	0x4f54300a

08004720 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004752:	f043 0303 	orr.w	r3, r3, #3
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004788:	4b39      	ldr	r3, [pc, #228]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004790:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d10b      	bne.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a0:	d905      	bls.n	80047ae <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80047a2:	4b33      	ldr	r3, [pc, #204]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4a32      	ldr	r2, [pc, #200]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047ac:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e057      	b.n	8004862 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b8:	d90a      	bls.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80047ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047cc:	60d3      	str	r3, [r2, #12]
 80047ce:	e007      	b.n	80047e0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80047d0:	4b27      	ldr	r3, [pc, #156]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80047d8:	4925      	ldr	r1, [pc, #148]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80047e0:	4b24      	ldr	r3, [pc, #144]	@ (8004874 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a24      	ldr	r2, [pc, #144]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	2232      	movs	r2, #50	@ 0x32
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	4a21      	ldr	r2, [pc, #132]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80047fe:	e002      	b.n	8004806 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3b01      	subs	r3, #1
 8004804:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004806:	4b1a      	ldr	r3, [pc, #104]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f3      	bne.n	8004800 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01b      	beq.n	8004856 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800481e:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a15      	ldr	r2, [pc, #84]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	2232      	movs	r2, #50	@ 0x32
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	4a11      	ldr	r2, [pc, #68]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800483c:	e002      	b.n	8004844 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3b01      	subs	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004844:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f3      	bne.n	800483e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e000      	b.n	8004862 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	46020800 	.word	0x46020800
 8004874:	20000000 	.word	0x20000000
 8004878:	10624dd3 	.word	0x10624dd3

0800487c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004880:	4b04      	ldr	r3, [pc, #16]	@ (8004894 <HAL_PWREx_GetVoltageRange+0x18>)
 8004882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004884:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	46020800 	.word	0x46020800

08004898 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80048a0:	4b22      	ldr	r3, [pc, #136]	@ (800492c <HAL_PWREx_ConfigSupply+0x94>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a22      	ldr	r2, [pc, #136]	@ (8004930 <HAL_PWREx_ConfigSupply+0x98>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	2232      	movs	r2, #50	@ 0x32
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004930 <HAL_PWREx_ConfigSupply+0x98>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	099b      	lsrs	r3, r3, #6
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d113      	bne.n	80048ec <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80048c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004934 <HAL_PWREx_ConfigSupply+0x9c>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004934 <HAL_PWREx_ConfigSupply+0x9c>)
 80048ca:	f023 0302 	bic.w	r3, r3, #2
 80048ce:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048d0:	e002      	b.n	80048d8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048d8:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_PWREx_ConfigSupply+0x9c>)
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d116      	bne.n	8004912 <HAL_PWREx_ConfigSupply+0x7a>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f3      	bne.n	80048d2 <HAL_PWREx_ConfigSupply+0x3a>
 80048ea:	e012      	b.n	8004912 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80048ec:	4b11      	ldr	r3, [pc, #68]	@ (8004934 <HAL_PWREx_ConfigSupply+0x9c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a10      	ldr	r2, [pc, #64]	@ (8004934 <HAL_PWREx_ConfigSupply+0x9c>)
 80048f2:	f043 0302 	orr.w	r3, r3, #2
 80048f6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048f8:	e002      	b.n	8004900 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004900:	4b0c      	ldr	r3, [pc, #48]	@ (8004934 <HAL_PWREx_ConfigSupply+0x9c>)
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <HAL_PWREx_ConfigSupply+0x7a>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f3      	bne.n	80048fa <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e000      	b.n	800491e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000000 	.word	0x20000000
 8004930:	10624dd3 	.word	0x10624dd3
 8004934:	46020800 	.word	0x46020800

08004938 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800493c:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <HAL_PWREx_EnableVddUSB+0x1c>)
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	4a04      	ldr	r2, [pc, #16]	@ (8004954 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004946:	6113      	str	r3, [r2, #16]
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	46020800 	.word	0x46020800

08004958 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_PWREx_EnableVddIO2+0x1c>)
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	4a04      	ldr	r2, [pc, #16]	@ (8004974 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004962:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004966:	6113      	str	r3, [r2, #16]
}
 8004968:	bf00      	nop
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	46020800 	.word	0x46020800

08004978 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <HAL_PWREx_EnableVddA+0x1c>)
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	4a04      	ldr	r2, [pc, #16]	@ (8004994 <HAL_PWREx_EnableVddA+0x1c>)
 8004982:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004986:	6113      	str	r3, [r2, #16]
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	46020800 	.word	0x46020800

08004998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08e      	sub	sp, #56	@ 0x38
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f000 bec8 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b2:	4b99      	ldr	r3, [pc, #612]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049bc:	4b96      	ldr	r3, [pc, #600]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 816c 	beq.w	8004cac <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_RCC_OscConfig+0x52>
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	2b0c      	cmp	r3, #12
 80049de:	f040 80de 	bne.w	8004b9e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	f040 80da 	bne.w	8004b9e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f000 bea5 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049fc:	4b86      	ldr	r3, [pc, #536]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d004      	beq.n	8004a12 <HAL_RCC_OscConfig+0x7a>
 8004a08:	4b83      	ldr	r3, [pc, #524]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004a10:	e005      	b.n	8004a1e <HAL_RCC_OscConfig+0x86>
 8004a12:	4b81      	ldr	r3, [pc, #516]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a18:	041b      	lsls	r3, r3, #16
 8004a1a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d255      	bcs.n	8004ace <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f001 fa11 	bl	8005e54 <RCC_SetFlashLatencyFromMSIRange>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f000 be82 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a3e:	4b76      	ldr	r3, [pc, #472]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	4a75      	ldr	r2, [pc, #468]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a48:	6093      	str	r3, [r2, #8]
 8004a4a:	4b73      	ldr	r3, [pc, #460]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	4970      	ldr	r1, [pc, #448]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a64:	d309      	bcc.n	8004a7a <HAL_RCC_OscConfig+0xe2>
 8004a66:	4b6c      	ldr	r3, [pc, #432]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 021f 	bic.w	r2, r3, #31
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	4969      	ldr	r1, [pc, #420]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60cb      	str	r3, [r1, #12]
 8004a78:	e07e      	b.n	8004b78 <HAL_RCC_OscConfig+0x1e0>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	da0a      	bge.n	8004a98 <HAL_RCC_OscConfig+0x100>
 8004a82:	4b65      	ldr	r3, [pc, #404]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	015b      	lsls	r3, r3, #5
 8004a90:	4961      	ldr	r1, [pc, #388]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60cb      	str	r3, [r1, #12]
 8004a96:	e06f      	b.n	8004b78 <HAL_RCC_OscConfig+0x1e0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa0:	d30a      	bcc.n	8004ab8 <HAL_RCC_OscConfig+0x120>
 8004aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	029b      	lsls	r3, r3, #10
 8004ab0:	4959      	ldr	r1, [pc, #356]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60cb      	str	r3, [r1, #12]
 8004ab6:	e05f      	b.n	8004b78 <HAL_RCC_OscConfig+0x1e0>
 8004ab8:	4b57      	ldr	r3, [pc, #348]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	03db      	lsls	r3, r3, #15
 8004ac6:	4954      	ldr	r1, [pc, #336]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60cb      	str	r3, [r1, #12]
 8004acc:	e054      	b.n	8004b78 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004ace:	4b52      	ldr	r3, [pc, #328]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	4a51      	ldr	r2, [pc, #324]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ad8:	6093      	str	r3, [r2, #8]
 8004ada:	4b4f      	ldr	r3, [pc, #316]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	494c      	ldr	r1, [pc, #304]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004af4:	d309      	bcc.n	8004b0a <HAL_RCC_OscConfig+0x172>
 8004af6:	4b48      	ldr	r3, [pc, #288]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f023 021f 	bic.w	r2, r3, #31
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	4945      	ldr	r1, [pc, #276]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60cb      	str	r3, [r1, #12]
 8004b08:	e028      	b.n	8004b5c <HAL_RCC_OscConfig+0x1c4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	da0a      	bge.n	8004b28 <HAL_RCC_OscConfig+0x190>
 8004b12:	4b41      	ldr	r3, [pc, #260]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	015b      	lsls	r3, r3, #5
 8004b20:	493d      	ldr	r1, [pc, #244]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60cb      	str	r3, [r1, #12]
 8004b26:	e019      	b.n	8004b5c <HAL_RCC_OscConfig+0x1c4>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b30:	d30a      	bcc.n	8004b48 <HAL_RCC_OscConfig+0x1b0>
 8004b32:	4b39      	ldr	r3, [pc, #228]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	029b      	lsls	r3, r3, #10
 8004b40:	4935      	ldr	r1, [pc, #212]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60cb      	str	r3, [r1, #12]
 8004b46:	e009      	b.n	8004b5c <HAL_RCC_OscConfig+0x1c4>
 8004b48:	4b33      	ldr	r3, [pc, #204]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	03db      	lsls	r3, r3, #15
 8004b56:	4930      	ldr	r1, [pc, #192]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 f974 	bl	8005e54 <RCC_SetFlashLatencyFromMSIRange>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f000 bde5 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004b78:	f001 f916 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b7c:	4b27      	ldr	r3, [pc, #156]	@ (8004c1c <HAL_RCC_OscConfig+0x284>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc ff29 	bl	80019d8 <HAL_InitTick>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 808a 	beq.w	8004caa <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004b96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b9a:	f000 bdd2 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d066      	beq.n	8004c74 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1b      	ldr	r2, [pc, #108]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bb2:	f7fc ff9b 	bl	8001aec <HAL_GetTick>
 8004bb6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004bb8:	e009      	b.n	8004bce <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bba:	f7fc ff97 	bl	8001aec <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d902      	bls.n	8004bce <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	f000 bdba 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004bce:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0ef      	beq.n	8004bba <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004bda:	4b0f      	ldr	r3, [pc, #60]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	4a0e      	ldr	r2, [pc, #56]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004be0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004be4:	6093      	str	r3, [r2, #8]
 8004be6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	4909      	ldr	r1, [pc, #36]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004c00:	d30e      	bcc.n	8004c20 <HAL_RCC_OscConfig+0x288>
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f023 021f 	bic.w	r2, r3, #31
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	4902      	ldr	r1, [pc, #8]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60cb      	str	r3, [r1, #12]
 8004c14:	e04a      	b.n	8004cac <HAL_RCC_OscConfig+0x314>
 8004c16:	bf00      	nop
 8004c18:	46020c00 	.word	0x46020c00
 8004c1c:	20000004 	.word	0x20000004
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	da0a      	bge.n	8004c3e <HAL_RCC_OscConfig+0x2a6>
 8004c28:	4b98      	ldr	r3, [pc, #608]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	015b      	lsls	r3, r3, #5
 8004c36:	4995      	ldr	r1, [pc, #596]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60cb      	str	r3, [r1, #12]
 8004c3c:	e036      	b.n	8004cac <HAL_RCC_OscConfig+0x314>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c46:	d30a      	bcc.n	8004c5e <HAL_RCC_OscConfig+0x2c6>
 8004c48:	4b90      	ldr	r3, [pc, #576]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	029b      	lsls	r3, r3, #10
 8004c56:	498d      	ldr	r1, [pc, #564]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60cb      	str	r3, [r1, #12]
 8004c5c:	e026      	b.n	8004cac <HAL_RCC_OscConfig+0x314>
 8004c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	03db      	lsls	r3, r3, #15
 8004c6c:	4987      	ldr	r1, [pc, #540]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60cb      	str	r3, [r1, #12]
 8004c72:	e01b      	b.n	8004cac <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004c74:	4b85      	ldr	r3, [pc, #532]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a84      	ldr	r2, [pc, #528]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c80:	f7fc ff34 	bl	8001aec <HAL_GetTick>
 8004c84:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c86:	e009      	b.n	8004c9c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c88:	f7fc ff30 	bl	8001aec <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d902      	bls.n	8004c9c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	f000 bd53 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ef      	bne.n	8004c88 <HAL_RCC_OscConfig+0x2f0>
 8004ca8:	e000      	b.n	8004cac <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004caa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 808b 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_OscConfig+0x334>
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d109      	bne.n	8004cda <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d17d      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f000 bd34 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce2:	d106      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x35a>
 8004ce4:	4b69      	ldr	r3, [pc, #420]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a68      	ldr	r2, [pc, #416]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	e041      	b.n	8004d76 <HAL_RCC_OscConfig+0x3de>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cfa:	d112      	bne.n	8004d22 <HAL_RCC_OscConfig+0x38a>
 8004cfc:	4b63      	ldr	r3, [pc, #396]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a62      	ldr	r2, [pc, #392]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b60      	ldr	r3, [pc, #384]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d0e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b5d      	ldr	r3, [pc, #372]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5c      	ldr	r2, [pc, #368]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	e029      	b.n	8004d76 <HAL_RCC_OscConfig+0x3de>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004d2a:	d112      	bne.n	8004d52 <HAL_RCC_OscConfig+0x3ba>
 8004d2c:	4b57      	ldr	r3, [pc, #348]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a56      	ldr	r2, [pc, #344]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	4b54      	ldr	r3, [pc, #336]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a53      	ldr	r2, [pc, #332]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4b51      	ldr	r3, [pc, #324]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a50      	ldr	r2, [pc, #320]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	e011      	b.n	8004d76 <HAL_RCC_OscConfig+0x3de>
 8004d52:	4b4e      	ldr	r3, [pc, #312]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4d      	ldr	r2, [pc, #308]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a4a      	ldr	r2, [pc, #296]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b48      	ldr	r3, [pc, #288]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a47      	ldr	r2, [pc, #284]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d70:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d014      	beq.n	8004da8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004d7e:	f7fc feb5 	bl	8001aec <HAL_GetTick>
 8004d82:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d84:	e009      	b.n	8004d9a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d86:	f7fc feb1 	bl	8001aec <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b64      	cmp	r3, #100	@ 0x64
 8004d92:	d902      	bls.n	8004d9a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	f000 bcd4 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ef      	beq.n	8004d86 <HAL_RCC_OscConfig+0x3ee>
 8004da6:	e013      	b.n	8004dd0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004da8:	f7fc fea0 	bl	8001aec <HAL_GetTick>
 8004dac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dae:	e009      	b.n	8004dc4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db0:	f7fc fe9c 	bl	8001aec <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b64      	cmp	r3, #100	@ 0x64
 8004dbc:	d902      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	f000 bcbf 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dc4:	4b31      	ldr	r3, [pc, #196]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1ef      	bne.n	8004db0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d05f      	beq.n	8004e9c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d005      	beq.n	8004dee <HAL_RCC_OscConfig+0x456>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	d114      	bne.n	8004e12 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d111      	bne.n	8004e12 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f000 bca3 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004dfc:	4b23      	ldr	r3, [pc, #140]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	4920      	ldr	r1, [pc, #128]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e10:	e044      	b.n	8004e9c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d024      	beq.n	8004e64 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e24:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e26:	f7fc fe61 	bl	8001aec <HAL_GetTick>
 8004e2a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e2c:	e009      	b.n	8004e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2e:	f7fc fe5d 	bl	8001aec <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d902      	bls.n	8004e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	f000 bc80 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e42:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0ef      	beq.n	8004e2e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	490b      	ldr	r1, [pc, #44]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	610b      	str	r3, [r1, #16]
 8004e62:	e01b      	b.n	8004e9c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004e64:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <HAL_RCC_OscConfig+0x4f4>)
 8004e6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e6e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e70:	f7fc fe3c 	bl	8001aec <HAL_GetTick>
 8004e74:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e78:	f7fc fe38 	bl	8001aec <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d904      	bls.n	8004e90 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	f000 bc5b 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
 8004e8c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e90:	4baf      	ldr	r3, [pc, #700]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ed      	bne.n	8004e78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80c8 	beq.w	800503a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb0:	4ba7      	ldr	r3, [pc, #668]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d111      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	4ba4      	ldr	r3, [pc, #656]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ec4:	4aa2      	ldr	r2, [pc, #648]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004ec6:	f043 0304 	orr.w	r3, r3, #4
 8004eca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ece:	4ba0      	ldr	r3, [pc, #640]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ee2:	4b9c      	ldr	r3, [pc, #624]	@ (8005154 <HAL_RCC_OscConfig+0x7bc>)
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d119      	bne.n	8004f22 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004eee:	4b99      	ldr	r3, [pc, #612]	@ (8005154 <HAL_RCC_OscConfig+0x7bc>)
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef2:	4a98      	ldr	r2, [pc, #608]	@ (8005154 <HAL_RCC_OscConfig+0x7bc>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004efa:	f7fc fdf7 	bl	8001aec <HAL_GetTick>
 8004efe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f00:	e009      	b.n	8004f16 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f02:	f7fc fdf3 	bl	8001aec <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d902      	bls.n	8004f16 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	f000 bc16 	b.w	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f16:	4b8f      	ldr	r3, [pc, #572]	@ (8005154 <HAL_RCC_OscConfig+0x7bc>)
 8004f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ef      	beq.n	8004f02 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d05f      	beq.n	8004fea <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004f2a:	4b89      	ldr	r3, [pc, #548]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f30:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d037      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d006      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e3f4      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01b      	beq.n	8004f9a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f62:	4b7b      	ldr	r3, [pc, #492]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f68:	4a79      	ldr	r2, [pc, #484]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004f6a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004f72:	f7fc fdbb 	bl	8001aec <HAL_GetTick>
 8004f76:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fc fdb7 	bl	8001aec <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e3da      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f8c:	4b70      	ldr	r3, [pc, #448]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1ef      	bne.n	8004f7a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fa0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	4969      	ldr	r1, [pc, #420]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004fb0:	4b67      	ldr	r3, [pc, #412]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fb6:	4a66      	ldr	r2, [pc, #408]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004fb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004fc0:	f7fc fd94 	bl	8001aec <HAL_GetTick>
 8004fc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc8:	f7fc fd90 	bl	8001aec <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e3b3      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004fda:	4b5d      	ldr	r3, [pc, #372]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ef      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x630>
 8004fe8:	e01b      	b.n	8005022 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004fea:	4b59      	ldr	r3, [pc, #356]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ff0:	4a57      	ldr	r2, [pc, #348]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8004ff2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004ff6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004ffa:	f7fc fd77 	bl	8001aec <HAL_GetTick>
 8004ffe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005002:	f7fc fd73 	bl	8001aec <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b05      	cmp	r3, #5
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e396      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005014:	4b4e      	ldr	r3, [pc, #312]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8005016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800501a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1ef      	bne.n	8005002 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005022:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502a:	4b49      	ldr	r3, [pc, #292]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 800502c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005030:	4a47      	ldr	r2, [pc, #284]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8005032:	f023 0304 	bic.w	r3, r3, #4
 8005036:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8111 	beq.w	800526a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005048:	2300      	movs	r3, #0
 800504a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504e:	4b40      	ldr	r3, [pc, #256]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8005050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d111      	bne.n	8005080 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505c:	4b3c      	ldr	r3, [pc, #240]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 800505e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005062:	4a3b      	ldr	r2, [pc, #236]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8005064:	f043 0304 	orr.w	r3, r3, #4
 8005068:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800506c:	4b38      	ldr	r3, [pc, #224]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 800506e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005080:	4b34      	ldr	r3, [pc, #208]	@ (8005154 <HAL_RCC_OscConfig+0x7bc>)
 8005082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d118      	bne.n	80050be <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800508c:	4b31      	ldr	r3, [pc, #196]	@ (8005154 <HAL_RCC_OscConfig+0x7bc>)
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	4a30      	ldr	r2, [pc, #192]	@ (8005154 <HAL_RCC_OscConfig+0x7bc>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005098:	f7fc fd28 	bl	8001aec <HAL_GetTick>
 800509c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a0:	f7fc fd24 	bl	8001aec <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e347      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050b2:	4b28      	ldr	r3, [pc, #160]	@ (8005154 <HAL_RCC_OscConfig+0x7bc>)
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01f      	beq.n	800510a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d010      	beq.n	80050f8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 80050d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 80050e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050ec:	4a18      	ldr	r2, [pc, #96]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80050f6:	e018      	b.n	800512a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 80050fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050fe:	4a14      	ldr	r2, [pc, #80]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005108:	e00f      	b.n	800512a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800510a:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 800510c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005110:	4a0f      	ldr	r2, [pc, #60]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800511a:	4b0d      	ldr	r3, [pc, #52]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 800511c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005120:	4a0b      	ldr	r2, [pc, #44]	@ (8005150 <HAL_RCC_OscConfig+0x7b8>)
 8005122:	f023 0304 	bic.w	r3, r3, #4
 8005126:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d057      	beq.n	80051e2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005132:	f7fc fcdb 	bl	8001aec <HAL_GetTick>
 8005136:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005138:	e00e      	b.n	8005158 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fc fcd7 	bl	8001aec <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d905      	bls.n	8005158 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e2f8      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
 8005150:	46020c00 	.word	0x46020c00
 8005154:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005158:	4b9c      	ldr	r3, [pc, #624]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 800515a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0e9      	beq.n	800513a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01b      	beq.n	80051aa <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005172:	4b96      	ldr	r3, [pc, #600]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005178:	4a94      	ldr	r2, [pc, #592]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 800517a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800517e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005182:	e00a      	b.n	800519a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005184:	f7fc fcb2 	bl	8001aec <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e2d3      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800519a:	4b8c      	ldr	r3, [pc, #560]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 800519c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ed      	beq.n	8005184 <HAL_RCC_OscConfig+0x7ec>
 80051a8:	e053      	b.n	8005252 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80051aa:	4b88      	ldr	r3, [pc, #544]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80051ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051b0:	4a86      	ldr	r2, [pc, #536]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80051b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051bc:	f7fc fc96 	bl	8001aec <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e2b7      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051d2:	4b7e      	ldr	r3, [pc, #504]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80051d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ed      	bne.n	80051bc <HAL_RCC_OscConfig+0x824>
 80051e0:	e037      	b.n	8005252 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80051e2:	f7fc fc83 	bl	8001aec <HAL_GetTick>
 80051e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051e8:	e00a      	b.n	8005200 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ea:	f7fc fc7f 	bl	8001aec <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e2a0      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005200:	4b72      	ldr	r3, [pc, #456]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1ed      	bne.n	80051ea <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800520e:	4b6f      	ldr	r3, [pc, #444]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01a      	beq.n	8005252 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800521c:	4b6b      	ldr	r3, [pc, #428]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 800521e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005222:	4a6a      	ldr	r2, [pc, #424]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005228:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800522c:	e00a      	b.n	8005244 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7fc fc5d 	bl	8001aec <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523c:	4293      	cmp	r3, r2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e27e      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005244:	4b61      	ldr	r3, [pc, #388]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800524a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1ed      	bne.n	800522e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005252:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005256:	2b01      	cmp	r3, #1
 8005258:	d107      	bne.n	800526a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800525a:	4b5c      	ldr	r3, [pc, #368]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 800525c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005260:	4a5a      	ldr	r2, [pc, #360]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005262:	f023 0304 	bic.w	r3, r3, #4
 8005266:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d036      	beq.n	80052e4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d019      	beq.n	80052b2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800527e:	4b53      	ldr	r3, [pc, #332]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a52      	ldr	r2, [pc, #328]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005284:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005288:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800528a:	f7fc fc2f 	bl	8001aec <HAL_GetTick>
 800528e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005292:	f7fc fc2b 	bl	8001aec <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e24e      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052a4:	4b49      	ldr	r3, [pc, #292]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCC_OscConfig+0x8fa>
 80052b0:	e018      	b.n	80052e4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80052b2:	4b46      	ldr	r3, [pc, #280]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a45      	ldr	r2, [pc, #276]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80052b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052bc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052be:	f7fc fc15 	bl	8001aec <HAL_GetTick>
 80052c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052c6:	f7fc fc11 	bl	8001aec <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e234      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052d8:	4b3c      	ldr	r3, [pc, #240]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d036      	beq.n	800535e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d019      	beq.n	800532c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80052f8:	4b34      	ldr	r3, [pc, #208]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a33      	ldr	r2, [pc, #204]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80052fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005302:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005304:	f7fc fbf2 	bl	8001aec <HAL_GetTick>
 8005308:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800530c:	f7fc fbee 	bl	8001aec <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e211      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800531e:	4b2b      	ldr	r3, [pc, #172]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x974>
 800532a:	e018      	b.n	800535e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800532c:	4b27      	ldr	r3, [pc, #156]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a26      	ldr	r2, [pc, #152]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005336:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005338:	f7fc fbd8 	bl	8001aec <HAL_GetTick>
 800533c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005340:	f7fc fbd4 	bl	8001aec <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e1f7      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005352:	4b1e      	ldr	r3, [pc, #120]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d07f      	beq.n	800546a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536e:	2b00      	cmp	r3, #0
 8005370:	d062      	beq.n	8005438 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005372:	4b16      	ldr	r3, [pc, #88]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	4a15      	ldr	r2, [pc, #84]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005378:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800537c:	6093      	str	r3, [r2, #8]
 800537e:	4b13      	ldr	r3, [pc, #76]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	4910      	ldr	r1, [pc, #64]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 800538c:	4313      	orrs	r3, r2
 800538e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005398:	d309      	bcc.n	80053ae <HAL_RCC_OscConfig+0xa16>
 800539a:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f023 021f 	bic.w	r2, r3, #31
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	4909      	ldr	r1, [pc, #36]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60cb      	str	r3, [r1, #12]
 80053ac:	e02a      	b.n	8005404 <HAL_RCC_OscConfig+0xa6c>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da0c      	bge.n	80053d0 <HAL_RCC_OscConfig+0xa38>
 80053b6:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	015b      	lsls	r3, r3, #5
 80053c4:	4901      	ldr	r1, [pc, #4]	@ (80053cc <HAL_RCC_OscConfig+0xa34>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60cb      	str	r3, [r1, #12]
 80053ca:	e01b      	b.n	8005404 <HAL_RCC_OscConfig+0xa6c>
 80053cc:	46020c00 	.word	0x46020c00
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d8:	d30a      	bcc.n	80053f0 <HAL_RCC_OscConfig+0xa58>
 80053da:	4ba1      	ldr	r3, [pc, #644]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	029b      	lsls	r3, r3, #10
 80053e8:	499d      	ldr	r1, [pc, #628]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60cb      	str	r3, [r1, #12]
 80053ee:	e009      	b.n	8005404 <HAL_RCC_OscConfig+0xa6c>
 80053f0:	4b9b      	ldr	r3, [pc, #620]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	03db      	lsls	r3, r3, #15
 80053fe:	4998      	ldr	r1, [pc, #608]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005400:	4313      	orrs	r3, r2
 8005402:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005404:	4b96      	ldr	r3, [pc, #600]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a95      	ldr	r2, [pc, #596]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 800540a:	f043 0310 	orr.w	r3, r3, #16
 800540e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005410:	f7fc fb6c 	bl	8001aec <HAL_GetTick>
 8005414:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005418:	f7fc fb68 	bl	8001aec <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e18b      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800542a:	4b8d      	ldr	r3, [pc, #564]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0xa80>
 8005436:	e018      	b.n	800546a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005438:	4b89      	ldr	r3, [pc, #548]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a88      	ldr	r2, [pc, #544]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 800543e:	f023 0310 	bic.w	r3, r3, #16
 8005442:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005444:	f7fc fb52 	bl	8001aec <HAL_GetTick>
 8005448:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800544c:	f7fc fb4e 	bl	8001aec <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e171      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800545e:	4b80      	ldr	r3, [pc, #512]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8166 	beq.w	8005740 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005474:	2300      	movs	r3, #0
 8005476:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800547a:	4b79      	ldr	r3, [pc, #484]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b0c      	cmp	r3, #12
 8005484:	f000 80f2 	beq.w	800566c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548c:	2b02      	cmp	r3, #2
 800548e:	f040 80c5 	bne.w	800561c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005492:	4b73      	ldr	r3, [pc, #460]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a72      	ldr	r2, [pc, #456]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005498:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800549c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800549e:	f7fc fb25 	bl	8001aec <HAL_GetTick>
 80054a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fc fb21 	bl	8001aec <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e144      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054b8:	4b69      	ldr	r3, [pc, #420]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c4:	4b66      	ldr	r3, [pc, #408]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80054c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d111      	bne.n	80054f6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	4b63      	ldr	r3, [pc, #396]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80054d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054d8:	4a61      	ldr	r2, [pc, #388]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80054e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80054f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005664 <HAL_RCC_OscConfig+0xccc>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005502:	d102      	bne.n	800550a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800550a:	4b56      	ldr	r3, [pc, #344]	@ (8005664 <HAL_RCC_OscConfig+0xccc>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	4a55      	ldr	r2, [pc, #340]	@ (8005664 <HAL_RCC_OscConfig+0xccc>)
 8005510:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005514:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005516:	4b52      	ldr	r3, [pc, #328]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800552a:	3a01      	subs	r2, #1
 800552c:	0212      	lsls	r2, r2, #8
 800552e:	4311      	orrs	r1, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005534:	430a      	orrs	r2, r1
 8005536:	494a      	ldr	r1, [pc, #296]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005538:	4313      	orrs	r3, r2
 800553a:	628b      	str	r3, [r1, #40]	@ 0x28
 800553c:	4b48      	ldr	r3, [pc, #288]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 800553e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005540:	4b49      	ldr	r3, [pc, #292]	@ (8005668 <HAL_RCC_OscConfig+0xcd0>)
 8005542:	4013      	ands	r3, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005548:	3a01      	subs	r2, #1
 800554a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005552:	3a01      	subs	r2, #1
 8005554:	0252      	lsls	r2, r2, #9
 8005556:	b292      	uxth	r2, r2
 8005558:	4311      	orrs	r1, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800555e:	3a01      	subs	r2, #1
 8005560:	0412      	lsls	r2, r2, #16
 8005562:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005566:	4311      	orrs	r1, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800556c:	3a01      	subs	r2, #1
 800556e:	0612      	lsls	r2, r2, #24
 8005570:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005574:	430a      	orrs	r2, r1
 8005576:	493a      	ldr	r1, [pc, #232]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005578:	4313      	orrs	r3, r2
 800557a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800557c:	4b38      	ldr	r3, [pc, #224]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	4a37      	ldr	r2, [pc, #220]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005582:	f023 0310 	bic.w	r3, r3, #16
 8005586:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558c:	4a34      	ldr	r2, [pc, #208]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005592:	4b33      	ldr	r3, [pc, #204]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005596:	4a32      	ldr	r2, [pc, #200]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005598:	f043 0310 	orr.w	r3, r3, #16
 800559c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800559e:	4b30      	ldr	r3, [pc, #192]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	f023 020c 	bic.w	r2, r3, #12
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	492d      	ldr	r1, [pc, #180]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80055b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80055b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005664 <HAL_RCC_OscConfig+0xccc>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4a29      	ldr	r2, [pc, #164]	@ (8005664 <HAL_RCC_OscConfig+0xccc>)
 80055be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055c2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80055c4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d107      	bne.n	80055dc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80055cc:	4b24      	ldr	r3, [pc, #144]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80055ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d2:	4a23      	ldr	r2, [pc, #140]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80055dc:	4b20      	ldr	r3, [pc, #128]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 80055e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055e6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055e8:	f7fc fa80 	bl	8001aec <HAL_GetTick>
 80055ec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fc fa7c 	bl	8001aec <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e09f      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005602:	4b17      	ldr	r3, [pc, #92]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800560e:	4b14      	ldr	r3, [pc, #80]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005612:	4a13      	ldr	r2, [pc, #76]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005618:	6293      	str	r3, [r2, #40]	@ 0x28
 800561a:	e091      	b.n	8005740 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800561c:	4b10      	ldr	r3, [pc, #64]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0f      	ldr	r2, [pc, #60]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005626:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005628:	f7fc fa60 	bl	8001aec <HAL_GetTick>
 800562c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fc fa5c 	bl	8001aec <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e07f      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005642:	4b07      	ldr	r3, [pc, #28]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800564e:	4b04      	ldr	r3, [pc, #16]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005652:	4a03      	ldr	r2, [pc, #12]	@ (8005660 <HAL_RCC_OscConfig+0xcc8>)
 8005654:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005658:	f023 0303 	bic.w	r3, r3, #3
 800565c:	6293      	str	r3, [r2, #40]	@ 0x28
 800565e:	e06f      	b.n	8005740 <HAL_RCC_OscConfig+0xda8>
 8005660:	46020c00 	.word	0x46020c00
 8005664:	46020800 	.word	0x46020800
 8005668:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800566c:	4b37      	ldr	r3, [pc, #220]	@ (800574c <HAL_RCC_OscConfig+0xdb4>)
 800566e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005670:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005672:	4b36      	ldr	r3, [pc, #216]	@ (800574c <HAL_RCC_OscConfig+0xdb4>)
 8005674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005676:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	2b01      	cmp	r3, #1
 800567e:	d039      	beq.n	80056f4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f003 0203 	and.w	r2, r3, #3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d132      	bne.n	80056f4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800569c:	429a      	cmp	r2, r3
 800569e:	d129      	bne.n	80056f4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d122      	bne.n	80056f4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d11a      	bne.n	80056f4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	0a5b      	lsrs	r3, r3, #9
 80056c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d111      	bne.n	80056f4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	0c1b      	lsrs	r3, r3, #16
 80056d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056dc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d108      	bne.n	80056f4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ee:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e024      	b.n	8005742 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80056f8:	4b14      	ldr	r3, [pc, #80]	@ (800574c <HAL_RCC_OscConfig+0xdb4>)
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	08db      	lsrs	r3, r3, #3
 80056fe:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005706:	429a      	cmp	r2, r3
 8005708:	d01a      	beq.n	8005740 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800570a:	4b10      	ldr	r3, [pc, #64]	@ (800574c <HAL_RCC_OscConfig+0xdb4>)
 800570c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570e:	4a0f      	ldr	r2, [pc, #60]	@ (800574c <HAL_RCC_OscConfig+0xdb4>)
 8005710:	f023 0310 	bic.w	r3, r3, #16
 8005714:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005716:	f7fc f9e9 	bl	8001aec <HAL_GetTick>
 800571a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800571c:	bf00      	nop
 800571e:	f7fc f9e5 	bl	8001aec <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005726:	4293      	cmp	r3, r2
 8005728:	d0f9      	beq.n	800571e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572e:	4a07      	ldr	r2, [pc, #28]	@ (800574c <HAL_RCC_OscConfig+0xdb4>)
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005734:	4b05      	ldr	r3, [pc, #20]	@ (800574c <HAL_RCC_OscConfig+0xdb4>)
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	4a04      	ldr	r2, [pc, #16]	@ (800574c <HAL_RCC_OscConfig+0xdb4>)
 800573a:	f043 0310 	orr.w	r3, r3, #16
 800573e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3738      	adds	r7, #56	@ 0x38
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	46020c00 	.word	0x46020c00

08005750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e1d9      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005764:	4b9b      	ldr	r3, [pc, #620]	@ (80059d4 <HAL_RCC_ClockConfig+0x284>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d910      	bls.n	8005794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005772:	4b98      	ldr	r3, [pc, #608]	@ (80059d4 <HAL_RCC_ClockConfig+0x284>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 020f 	bic.w	r2, r3, #15
 800577a:	4996      	ldr	r1, [pc, #600]	@ (80059d4 <HAL_RCC_ClockConfig+0x284>)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	4313      	orrs	r3, r2
 8005780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005782:	4b94      	ldr	r3, [pc, #592]	@ (80059d4 <HAL_RCC_ClockConfig+0x284>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e1c1      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	4b8c      	ldr	r3, [pc, #560]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d908      	bls.n	80057c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80057b0:	4b89      	ldr	r3, [pc, #548]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	4986      	ldr	r1, [pc, #536]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d012      	beq.n	80057f4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	4b81      	ldr	r3, [pc, #516]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	091b      	lsrs	r3, r3, #4
 80057d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057dc:	429a      	cmp	r2, r3
 80057de:	d909      	bls.n	80057f4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80057e0:	4b7d      	ldr	r3, [pc, #500]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	497a      	ldr	r1, [pc, #488]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d010      	beq.n	8005822 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	4b74      	ldr	r3, [pc, #464]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800580c:	429a      	cmp	r2, r3
 800580e:	d908      	bls.n	8005822 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005810:	4b71      	ldr	r3, [pc, #452]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	496e      	ldr	r1, [pc, #440]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 800581e:	4313      	orrs	r3, r2
 8005820:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d010      	beq.n	8005850 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	4b69      	ldr	r3, [pc, #420]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	429a      	cmp	r2, r3
 800583c:	d908      	bls.n	8005850 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800583e:	4b66      	ldr	r3, [pc, #408]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 020f 	bic.w	r2, r3, #15
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4963      	ldr	r1, [pc, #396]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 800584c:	4313      	orrs	r3, r2
 800584e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80d2 	beq.w	8005a02 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800585e:	2300      	movs	r3, #0
 8005860:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d143      	bne.n	80058f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800586a:	4b5b      	ldr	r3, [pc, #364]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 800586c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d110      	bne.n	800589a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005878:	4b57      	ldr	r3, [pc, #348]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 800587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800587e:	4a56      	ldr	r2, [pc, #344]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005880:	f043 0304 	orr.w	r3, r3, #4
 8005884:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005888:	4b53      	ldr	r3, [pc, #332]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 800588a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800589a:	f7fc f927 	bl	8001aec <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80058a0:	4b4e      	ldr	r3, [pc, #312]	@ (80059dc <HAL_RCC_ClockConfig+0x28c>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00f      	beq.n	80058cc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80058ae:	f7fc f91d 	bl	8001aec <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e12b      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80058c0:	4b46      	ldr	r3, [pc, #280]	@ (80059dc <HAL_RCC_ClockConfig+0x28c>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d107      	bne.n	80058e2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80058d2:	4b41      	ldr	r3, [pc, #260]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80058d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058d8:	4a3f      	ldr	r2, [pc, #252]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80058da:	f023 0304 	bic.w	r3, r3, #4
 80058de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058e2:	4b3d      	ldr	r3, [pc, #244]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d121      	bne.n	8005932 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e112      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d107      	bne.n	800590a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058fa:	4b37      	ldr	r3, [pc, #220]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d115      	bne.n	8005932 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e106      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d107      	bne.n	8005922 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005912:	4b31      	ldr	r3, [pc, #196]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e0fa      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005922:	4b2d      	ldr	r3, [pc, #180]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e0f2      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005932:	4b29      	ldr	r3, [pc, #164]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f023 0203 	bic.w	r2, r3, #3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4926      	ldr	r1, [pc, #152]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 8005940:	4313      	orrs	r3, r2
 8005942:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005944:	f7fc f8d2 	bl	8001aec <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b03      	cmp	r3, #3
 8005950:	d112      	bne.n	8005978 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005952:	e00a      	b.n	800596a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005954:	f7fc f8ca 	bl	8001aec <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e0d6      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800596a:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f003 030c 	and.w	r3, r3, #12
 8005972:	2b0c      	cmp	r3, #12
 8005974:	d1ee      	bne.n	8005954 <HAL_RCC_ClockConfig+0x204>
 8005976:	e044      	b.n	8005a02 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d112      	bne.n	80059a6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005980:	e00a      	b.n	8005998 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005982:	f7fc f8b3 	bl	8001aec <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005990:	4293      	cmp	r3, r2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e0bf      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005998:	4b0f      	ldr	r3, [pc, #60]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f003 030c 	and.w	r3, r3, #12
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d1ee      	bne.n	8005982 <HAL_RCC_ClockConfig+0x232>
 80059a4:	e02d      	b.n	8005a02 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d123      	bne.n	80059f6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b0:	f7fc f89c 	bl	8001aec <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e0a8      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80059c6:	4b04      	ldr	r3, [pc, #16]	@ (80059d8 <HAL_RCC_ClockConfig+0x288>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ee      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x260>
 80059d2:	e016      	b.n	8005a02 <HAL_RCC_ClockConfig+0x2b2>
 80059d4:	40022000 	.word	0x40022000
 80059d8:	46020c00 	.word	0x46020c00
 80059dc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e0:	f7fc f884 	bl	8001aec <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e090      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80059f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d1ee      	bne.n	80059e0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d010      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	4b43      	ldr	r3, [pc, #268]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d208      	bcs.n	8005a30 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005a1e:	4b40      	ldr	r3, [pc, #256]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f023 020f 	bic.w	r2, r3, #15
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	493d      	ldr	r1, [pc, #244]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a30:	4b3c      	ldr	r3, [pc, #240]	@ (8005b24 <HAL_RCC_ClockConfig+0x3d4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d210      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b39      	ldr	r3, [pc, #228]	@ (8005b24 <HAL_RCC_ClockConfig+0x3d4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f023 020f 	bic.w	r2, r3, #15
 8005a46:	4937      	ldr	r1, [pc, #220]	@ (8005b24 <HAL_RCC_ClockConfig+0x3d4>)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4e:	4b35      	ldr	r3, [pc, #212]	@ (8005b24 <HAL_RCC_ClockConfig+0x3d4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e05b      	b.n	8005b18 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d010      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	4b2b      	ldr	r3, [pc, #172]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d208      	bcs.n	8005a8e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005a7c:	4b28      	ldr	r3, [pc, #160]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4925      	ldr	r1, [pc, #148]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d012      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	4b20      	ldr	r3, [pc, #128]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d209      	bcs.n	8005ac0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005aac:	4b1c      	ldr	r3, [pc, #112]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	4919      	ldr	r1, [pc, #100]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	4b13      	ldr	r3, [pc, #76]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d208      	bcs.n	8005aee <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005adc:	4b10      	ldr	r3, [pc, #64]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	490d      	ldr	r1, [pc, #52]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005aee:	f000 f859 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8005af2:	4602      	mov	r2, r0
 8005af4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b20 <HAL_RCC_ClockConfig+0x3d0>)
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	490a      	ldr	r1, [pc, #40]	@ (8005b28 <HAL_RCC_ClockConfig+0x3d8>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
 8005b04:	4a09      	ldr	r2, [pc, #36]	@ (8005b2c <HAL_RCC_ClockConfig+0x3dc>)
 8005b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b08:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <HAL_RCC_ClockConfig+0x3e0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fb ff63 	bl	80019d8 <HAL_InitTick>
 8005b12:	4603      	mov	r3, r0
 8005b14:	73fb      	strb	r3, [r7, #15]

  return status;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	46020c00 	.word	0x46020c00
 8005b24:	40022000 	.word	0x40022000
 8005b28:	0800bdc8 	.word	0x0800bdc8
 8005b2c:	20000000 	.word	0x20000000
 8005b30:	20000004 	.word	0x20000004

08005b34 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	@ 0x28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 8005b40:	4b16      	ldr	r3, [pc, #88]	@ (8005b9c <HAL_RCC_MCOConfig+0x68>)
 8005b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b46:	4a15      	ldr	r2, [pc, #84]	@ (8005b9c <HAL_RCC_MCOConfig+0x68>)
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005b50:	4b12      	ldr	r3, [pc, #72]	@ (8005b9c <HAL_RCC_MCOConfig+0x68>)
 8005b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Pin = MCO1_PIN;
 8005b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b62:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Mode = GPIO_MODE_AF_PP;
 8005b64:	2302      	movs	r3, #2
 8005b66:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull = GPIO_NOPULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Alternate = GPIO_AF0_MCO;
 8005b70:	2300      	movs	r3, #0
 8005b72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio_initstruct);
 8005b74:	f107 0314 	add.w	r3, r7, #20
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4809      	ldr	r0, [pc, #36]	@ (8005ba0 <HAL_RCC_MCOConfig+0x6c>)
 8005b7c:	f7fd fb2c 	bl	80031d8 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8005b80:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <HAL_RCC_MCOConfig+0x68>)
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	4903      	ldr	r1, [pc, #12]	@ (8005b9c <HAL_RCC_MCOConfig+0x68>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61cb      	str	r3, [r1, #28]
}
 8005b94:	bf00      	nop
 8005b96:	3728      	adds	r7, #40	@ 0x28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	46020c00 	.word	0x46020c00
 8005ba0:	42020000 	.word	0x42020000

08005ba4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b08b      	sub	sp, #44	@ 0x2c
 8005ba8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bb2:	4b78      	ldr	r3, [pc, #480]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bbc:	4b75      	ldr	r3, [pc, #468]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d121      	bne.n	8005c16 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d11e      	bne.n	8005c16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005bd8:	4b6e      	ldr	r3, [pc, #440]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005be4:	4b6b      	ldr	r3, [pc, #428]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bea:	0b1b      	lsrs	r3, r3, #12
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf2:	e005      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005bf4:	4b67      	ldr	r3, [pc, #412]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	0f1b      	lsrs	r3, r3, #28
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c00:	4a65      	ldr	r2, [pc, #404]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d110      	bne.n	8005c32 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c14:	e00d      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c16:	4b5f      	ldr	r3, [pc, #380]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d102      	bne.n	8005c28 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c22:	4b5e      	ldr	r3, [pc, #376]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005c24:	623b      	str	r3, [r7, #32]
 8005c26:	e004      	b.n	8005c32 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005c30:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b0c      	cmp	r3, #12
 8005c36:	f040 80a5 	bne.w	8005d84 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005c3a:	4b56      	ldr	r3, [pc, #344]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005c44:	4b53      	ldr	r3, [pc, #332]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c48:	0a1b      	lsrs	r3, r3, #8
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005c52:	4b50      	ldr	r3, [pc, #320]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	091b      	lsrs	r3, r3, #4
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c5e:	4b4d      	ldr	r3, [pc, #308]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c62:	08db      	lsrs	r3, r3, #3
 8005c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	fb02 f303 	mul.w	r3, r2, r3
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d003      	beq.n	8005c88 <HAL_RCC_GetSysClockFreq+0xe4>
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d022      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0x128>
 8005c86:	e043      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005da0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005caa:	ed97 6a01 	vldr	s12, [r7, #4]
 8005cae:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005da4 <HAL_RCC_GetSysClockFreq+0x200>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cca:	e046      	b.n	8005d5a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005da0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	4b2d      	ldr	r3, [pc, #180]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cee:	ed97 6a01 	vldr	s12, [r7, #4]
 8005cf2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005da4 <HAL_RCC_GetSysClockFreq+0x200>
 8005cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d0e:	e024      	b.n	8005d5a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d28:	4b1a      	ldr	r3, [pc, #104]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d38:	ed97 6a01 	vldr	s12, [r7, #4]
 8005d3c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005da4 <HAL_RCC_GetSysClockFreq+0x200>
 8005d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d58:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5e:	0e1b      	lsrs	r3, r3, #24
 8005d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d64:	3301      	adds	r3, #1
 8005d66:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d7e:	ee17 3a90 	vmov	r3, s15
 8005d82:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005d84:	6a3b      	ldr	r3, [r7, #32]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	372c      	adds	r7, #44	@ 0x2c
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	46020c00 	.word	0x46020c00
 8005d98:	0800bde0 	.word	0x0800bde0
 8005d9c:	00f42400 	.word	0x00f42400
 8005da0:	4b742400 	.word	0x4b742400
 8005da4:	46000000 	.word	0x46000000

08005da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005dac:	f7ff fefa 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8005db0:	4602      	mov	r2, r0
 8005db2:	4b07      	ldr	r3, [pc, #28]	@ (8005dd0 <HAL_RCC_GetHCLKFreq+0x28>)
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	4906      	ldr	r1, [pc, #24]	@ (8005dd4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005dbc:	5ccb      	ldrb	r3, [r1, r3]
 8005dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc2:	4a05      	ldr	r2, [pc, #20]	@ (8005dd8 <HAL_RCC_GetHCLKFreq+0x30>)
 8005dc4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005dc6:	4b04      	ldr	r3, [pc, #16]	@ (8005dd8 <HAL_RCC_GetHCLKFreq+0x30>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	46020c00 	.word	0x46020c00
 8005dd4:	0800bdc8 	.word	0x0800bdc8
 8005dd8:	20000000 	.word	0x20000000

08005ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005de0:	f7ff ffe2 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005de4:	4602      	mov	r2, r0
 8005de6:	4b05      	ldr	r3, [pc, #20]	@ (8005dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	4903      	ldr	r1, [pc, #12]	@ (8005e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005df2:	5ccb      	ldrb	r3, [r1, r3]
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	46020c00 	.word	0x46020c00
 8005e00:	0800bdd8 	.word	0x0800bdd8

08005e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005e08:	f7ff ffce 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	4903      	ldr	r1, [pc, #12]	@ (8005e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e1a:	5ccb      	ldrb	r3, [r1, r3]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	46020c00 	.word	0x46020c00
 8005e28:	0800bdd8 	.word	0x0800bdd8

08005e2c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005e30:	f7ff ffba 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005e34:	4602      	mov	r2, r0
 8005e36:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3a:	091b      	lsrs	r3, r3, #4
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	4903      	ldr	r1, [pc, #12]	@ (8005e50 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005e42:	5ccb      	ldrb	r3, [r1, r3]
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	46020c00 	.word	0x46020c00
 8005e50:	0800bdd8 	.word	0x0800bdd8

08005e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8005f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e6a:	f7fe fd07 	bl	800487c <HAL_PWREx_GetVoltageRange>
 8005e6e:	6178      	str	r0, [r7, #20]
 8005e70:	e019      	b.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e72:	4b39      	ldr	r3, [pc, #228]	@ (8005f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e78:	4a37      	ldr	r2, [pc, #220]	@ (8005f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e7a:	f043 0304 	orr.w	r3, r3, #4
 8005e7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005e82:	4b35      	ldr	r3, [pc, #212]	@ (8005f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e90:	f7fe fcf4 	bl	800487c <HAL_PWREx_GetVoltageRange>
 8005e94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e96:	4b30      	ldr	r3, [pc, #192]	@ (8005f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e9e:	f023 0304 	bic.w	r3, r3, #4
 8005ea2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005eac:	d003      	beq.n	8005eb6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eb4:	d109      	bne.n	8005eca <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ebc:	d202      	bcs.n	8005ec4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005ec2:	e033      	b.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005ec8:	e030      	b.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ed0:	d208      	bcs.n	8005ee4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed8:	d102      	bne.n	8005ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005eda:	2303      	movs	r3, #3
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	e025      	b.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e035      	b.n	8005f50 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eea:	d90f      	bls.n	8005f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d109      	bne.n	8005f06 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ef8:	d902      	bls.n	8005f00 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005efa:	2300      	movs	r3, #0
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	e015      	b.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005f00:	2301      	movs	r3, #1
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	e012      	b.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	e00f      	b.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f12:	d109      	bne.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1a:	d102      	bne.n	8005f22 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	e004      	b.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005f22:	2302      	movs	r3, #2
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	e001      	b.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005f28:	2301      	movs	r3, #1
 8005f2a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 020f 	bic.w	r2, r3, #15
 8005f34:	4909      	ldr	r1, [pc, #36]	@ (8005f5c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005f3c:	4b07      	ldr	r3, [pc, #28]	@ (8005f5c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d001      	beq.n	8005f4e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	46020c00 	.word	0x46020c00
 8005f5c:	40022000 	.word	0x40022000

08005f60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f64:	b0b8      	sub	sp, #224	@ 0xe0
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f72:	2300      	movs	r3, #0
 8005f74:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f002 0401 	and.w	r4, r2, #1
 8005f84:	2500      	movs	r5, #0
 8005f86:	ea54 0305 	orrs.w	r3, r4, r5
 8005f8a:	d00b      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005f8c:	4bca      	ldr	r3, [pc, #808]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f92:	f023 0103 	bic.w	r1, r3, #3
 8005f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f9c:	4ac6      	ldr	r2, [pc, #792]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f002 0802 	and.w	r8, r2, #2
 8005fb0:	f04f 0900 	mov.w	r9, #0
 8005fb4:	ea58 0309 	orrs.w	r3, r8, r9
 8005fb8:	d00b      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005fba:	4bbf      	ldr	r3, [pc, #764]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fc0:	f023 010c 	bic.w	r1, r3, #12
 8005fc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fca:	4abb      	ldr	r2, [pc, #748]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f002 0a04 	and.w	sl, r2, #4
 8005fde:	f04f 0b00 	mov.w	fp, #0
 8005fe2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fe6:	d00b      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005fe8:	4bb3      	ldr	r3, [pc, #716]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fee:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff8:	4aaf      	ldr	r2, [pc, #700]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f002 0308 	and.w	r3, r2, #8
 800600c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006010:	2300      	movs	r3, #0
 8006012:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006016:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d00b      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006020:	4ba5      	ldr	r3, [pc, #660]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006026:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800602a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800602e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006030:	4aa1      	ldr	r2, [pc, #644]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006032:	430b      	orrs	r3, r1
 8006034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f002 0310 	and.w	r3, r2, #16
 8006044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006048:	2300      	movs	r3, #0
 800604a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800604e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006052:	460b      	mov	r3, r1
 8006054:	4313      	orrs	r3, r2
 8006056:	d00b      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006058:	4b97      	ldr	r3, [pc, #604]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800605a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800605e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006062:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006068:	4a93      	ldr	r2, [pc, #588]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800606a:	430b      	orrs	r3, r1
 800606c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f002 0320 	and.w	r3, r2, #32
 800607c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006080:	2300      	movs	r3, #0
 8006082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006086:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800608a:	460b      	mov	r3, r1
 800608c:	4313      	orrs	r3, r2
 800608e:	d00b      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006090:	4b89      	ldr	r3, [pc, #548]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006096:	f023 0107 	bic.w	r1, r3, #7
 800609a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800609e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060a0:	4a85      	ldr	r2, [pc, #532]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060a2:	430b      	orrs	r3, r1
 80060a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80060b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060c2:	460b      	mov	r3, r1
 80060c4:	4313      	orrs	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80060c8:	4b7b      	ldr	r3, [pc, #492]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060ce:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80060d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060d8:	4a77      	ldr	r2, [pc, #476]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060da:	430b      	orrs	r3, r1
 80060dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80060ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060f6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4313      	orrs	r3, r2
 80060fe:	d00b      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006100:	4b6d      	ldr	r3, [pc, #436]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006106:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800610a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800610e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006110:	4a69      	ldr	r2, [pc, #420]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006112:	430b      	orrs	r3, r1
 8006114:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006128:	2300      	movs	r3, #0
 800612a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800612e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d00b      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006138:	4b5f      	ldr	r3, [pc, #380]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800613a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800613e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006148:	4a5b      	ldr	r2, [pc, #364]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800614a:	430b      	orrs	r3, r1
 800614c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006150:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800615c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006160:	2300      	movs	r3, #0
 8006162:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006166:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800616a:	460b      	mov	r3, r1
 800616c:	4313      	orrs	r3, r2
 800616e:	d00b      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006170:	4b51      	ldr	r3, [pc, #324]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006176:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800617a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800617e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006180:	4a4d      	ldr	r2, [pc, #308]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006182:	430b      	orrs	r3, r1
 8006184:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006198:	2300      	movs	r3, #0
 800619a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800619e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80061a2:	460b      	mov	r3, r1
 80061a4:	4313      	orrs	r3, r2
 80061a6:	d00b      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80061a8:	4b43      	ldr	r3, [pc, #268]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061ae:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80061b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061b8:	4a3f      	ldr	r2, [pc, #252]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061ba:	430b      	orrs	r3, r1
 80061bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80061cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061d0:	2300      	movs	r3, #0
 80061d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061da:	460b      	mov	r3, r1
 80061dc:	4313      	orrs	r3, r2
 80061de:	d00b      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80061e0:	4b35      	ldr	r3, [pc, #212]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061e6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80061ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061f0:	4a31      	ldr	r2, [pc, #196]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80061f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006204:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006206:	2300      	movs	r3, #0
 8006208:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800620a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800620e:	460b      	mov	r3, r1
 8006210:	4313      	orrs	r3, r2
 8006212:	d00c      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006214:	4b28      	ldr	r3, [pc, #160]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800621a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800621e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006226:	4a24      	ldr	r2, [pc, #144]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006228:	430b      	orrs	r3, r1
 800622a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800622e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800623a:	673b      	str	r3, [r7, #112]	@ 0x70
 800623c:	2300      	movs	r3, #0
 800623e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006240:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006244:	460b      	mov	r3, r1
 8006246:	4313      	orrs	r3, r2
 8006248:	d04f      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800624a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006252:	2b80      	cmp	r3, #128	@ 0x80
 8006254:	d02d      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006256:	2b80      	cmp	r3, #128	@ 0x80
 8006258:	d827      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800625a:	2b60      	cmp	r3, #96	@ 0x60
 800625c:	d02e      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800625e:	2b60      	cmp	r3, #96	@ 0x60
 8006260:	d823      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006262:	2b40      	cmp	r3, #64	@ 0x40
 8006264:	d006      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006266:	2b40      	cmp	r3, #64	@ 0x40
 8006268:	d81f      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800626e:	2b20      	cmp	r3, #32
 8006270:	d011      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006272:	e01a      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006274:	4b10      	ldr	r3, [pc, #64]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006278:	4a0f      	ldr	r2, [pc, #60]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800627a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800627e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006280:	e01d      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006286:	3308      	adds	r3, #8
 8006288:	4618      	mov	r0, r3
 800628a:	f002 f9d1 	bl	8008630 <RCCEx_PLL2_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006294:	e013      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800629a:	332c      	adds	r3, #44	@ 0x2c
 800629c:	4618      	mov	r0, r3
 800629e:	f002 fa5f 	bl	8008760 <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062a8:	e009      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062b0:	e005      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80062b2:	bf00      	nop
 80062b4:	e003      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80062b6:	bf00      	nop
 80062b8:	46020c00 	.word	0x46020c00
        break;
 80062bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062be:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10d      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80062c6:	4bb6      	ldr	r3, [pc, #728]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062cc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80062d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d8:	4ab1      	ldr	r2, [pc, #708]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062da:	430b      	orrs	r3, r1
 80062dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062e0:	e003      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062e6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80062ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80062f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062f8:	2300      	movs	r3, #0
 80062fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062fc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006300:	460b      	mov	r3, r1
 8006302:	4313      	orrs	r3, r2
 8006304:	d053      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006306:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800630a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800630e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006312:	d033      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006318:	d82c      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800631a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800631e:	d02f      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006324:	d826      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800632a:	d008      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800632c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006330:	d820      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633a:	d011      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800633c:	e01a      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800633e:	4b98      	ldr	r3, [pc, #608]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	4a97      	ldr	r2, [pc, #604]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006348:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800634a:	e01a      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800634c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006350:	3308      	adds	r3, #8
 8006352:	4618      	mov	r0, r3
 8006354:	f002 f96c 	bl	8008630 <RCCEx_PLL2_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800635e:	e010      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006364:	332c      	adds	r3, #44	@ 0x2c
 8006366:	4618      	mov	r0, r3
 8006368:	f002 f9fa 	bl	8008760 <RCCEx_PLL3_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006372:	e006      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800637a:	e002      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800637c:	bf00      	nop
 800637e:	e000      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006382:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10d      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800638a:	4b85      	ldr	r3, [pc, #532]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800638c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006390:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800639c:	4a80      	ldr	r2, [pc, #512]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800639e:	430b      	orrs	r3, r1
 80063a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80063a4:	e003      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80063aa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80063ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80063ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80063bc:	2300      	movs	r3, #0
 80063be:	667b      	str	r3, [r7, #100]	@ 0x64
 80063c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80063c4:	460b      	mov	r3, r1
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d046      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80063ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80063d6:	d028      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80063dc:	d821      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80063de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e2:	d022      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e8:	d81b      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80063ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063ee:	d01c      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063f4:	d815      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80063f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fa:	d008      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80063fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006400:	d80f      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d011      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800640a:	d00e      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800640c:	e009      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800640e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006412:	3308      	adds	r3, #8
 8006414:	4618      	mov	r0, r3
 8006416:	f002 f90b 	bl	8008630 <RCCEx_PLL2_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006420:	e004      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006428:	e000      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800642a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10d      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006434:	4b5a      	ldr	r3, [pc, #360]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800643a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800643e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006446:	4a56      	ldr	r2, [pc, #344]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006448:	430b      	orrs	r3, r1
 800644a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800644e:	e003      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006454:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006464:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006466:	2300      	movs	r3, #0
 8006468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800646a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800646e:	460b      	mov	r3, r1
 8006470:	4313      	orrs	r3, r2
 8006472:	d03f      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006474:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647c:	2b04      	cmp	r3, #4
 800647e:	d81e      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8006480:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064c7 	.word	0x080064c7
 800648c:	0800649d 	.word	0x0800649d
 8006490:	080064ab 	.word	0x080064ab
 8006494:	080064c7 	.word	0x080064c7
 8006498:	080064c7 	.word	0x080064c7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800649c:	4b40      	ldr	r3, [pc, #256]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	4a3f      	ldr	r2, [pc, #252]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80064a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80064a8:	e00e      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064ae:	332c      	adds	r3, #44	@ 0x2c
 80064b0:	4618      	mov	r0, r3
 80064b2:	f002 f955 	bl	8008760 <RCCEx_PLL3_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80064bc:	e004      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80064c4:	e000      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80064c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80064c8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10d      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80064d0:	4b33      	ldr	r3, [pc, #204]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80064d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064d6:	f023 0107 	bic.w	r1, r3, #7
 80064da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e2:	4a2f      	ldr	r2, [pc, #188]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80064e4:	430b      	orrs	r3, r1
 80064e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80064ea:	e003      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064f0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80064f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006500:	653b      	str	r3, [r7, #80]	@ 0x50
 8006502:	2300      	movs	r3, #0
 8006504:	657b      	str	r3, [r7, #84]	@ 0x54
 8006506:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d04d      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006518:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800651c:	d028      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800651e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006522:	d821      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006524:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006528:	d024      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800652a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800652e:	d81b      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006534:	d00e      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800653a:	d815      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01b      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006544:	d110      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006546:	4b16      	ldr	r3, [pc, #88]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654a:	4a15      	ldr	r2, [pc, #84]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800654c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006550:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006552:	e012      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006558:	332c      	adds	r3, #44	@ 0x2c
 800655a:	4618      	mov	r0, r3
 800655c:	f002 f900 	bl	8008760 <RCCEx_PLL3_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006566:	e008      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800656e:	e004      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006570:	bf00      	nop
 8006572:	e002      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006574:	bf00      	nop
 8006576:	e000      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006578:	bf00      	nop
    }
    if (ret == HAL_OK)
 800657a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800657e:	2b00      	cmp	r3, #0
 8006580:	d110      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006582:	4b07      	ldr	r3, [pc, #28]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006588:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800658c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006594:	4a02      	ldr	r2, [pc, #8]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006596:	430b      	orrs	r3, r1
 8006598:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800659c:	e006      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800659e:	bf00      	nop
 80065a0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80065a8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80065b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ba:	2300      	movs	r3, #0
 80065bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f000 80b5 	beq.w	8006734 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d0:	4b9d      	ldr	r3, [pc, #628]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d113      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065de:	4b9a      	ldr	r3, [pc, #616]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065e4:	4a98      	ldr	r2, [pc, #608]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065e6:	f043 0304 	orr.w	r3, r3, #4
 80065ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80065ee:	4b96      	ldr	r3, [pc, #600]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006606:	4b91      	ldr	r3, [pc, #580]	@ (800684c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660a:	4a90      	ldr	r2, [pc, #576]	@ (800684c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800660c:	f043 0301 	orr.w	r3, r3, #1
 8006610:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006612:	f7fb fa6b 	bl	8001aec <HAL_GetTick>
 8006616:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800661a:	e00b      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661c:	f7fb fa66 	bl	8001aec <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d903      	bls.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006632:	e005      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006634:	4b85      	ldr	r3, [pc, #532]	@ (800684c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0ed      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006640:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006644:	2b00      	cmp	r3, #0
 8006646:	d165      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006648:	4b7f      	ldr	r3, [pc, #508]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800664a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800664e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800665a:	2b00      	cmp	r3, #0
 800665c:	d023      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800665e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006662:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800666a:	4293      	cmp	r3, r2
 800666c:	d01b      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800666e:	4b76      	ldr	r3, [pc, #472]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006678:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800667c:	4b72      	ldr	r3, [pc, #456]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800667e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006682:	4a71      	ldr	r2, [pc, #452]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006688:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800668c:	4b6e      	ldr	r3, [pc, #440]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800668e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006692:	4a6d      	ldr	r2, [pc, #436]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006698:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800669c:	4a6a      	ldr	r2, [pc, #424]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800669e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d019      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fb fa1b 	bl	8001aec <HAL_GetTick>
 80066b6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ba:	e00d      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066bc:	f7fb fa16 	bl	8001aec <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066c6:	1ad2      	subs	r2, r2, r3
 80066c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d903      	bls.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80066d6:	e006      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0ea      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80066e6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10d      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80066ee:	4b56      	ldr	r3, [pc, #344]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006700:	4a51      	ldr	r2, [pc, #324]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006702:	430b      	orrs	r3, r1
 8006704:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006708:	e008      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800670a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800670e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006712:	e003      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006718:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800671c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006720:	2b01      	cmp	r3, #1
 8006722:	d107      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006724:	4b48      	ldr	r3, [pc, #288]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800672a:	4a47      	ldr	r2, [pc, #284]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800672c:	f023 0304 	bic.w	r3, r3, #4
 8006730:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006740:	643b      	str	r3, [r7, #64]	@ 0x40
 8006742:	2300      	movs	r3, #0
 8006744:	647b      	str	r3, [r7, #68]	@ 0x44
 8006746:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800674a:	460b      	mov	r3, r1
 800674c:	4313      	orrs	r3, r2
 800674e:	d042      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006754:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006758:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800675c:	d022      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800675e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006762:	d81b      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006768:	d011      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800676a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800676e:	d815      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006770:	2b00      	cmp	r3, #0
 8006772:	d019      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006774:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006778:	d110      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800677a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800677e:	3308      	adds	r3, #8
 8006780:	4618      	mov	r0, r3
 8006782:	f001 ff55 	bl	8008630 <RCCEx_PLL2_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800678c:	e00d      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800678e:	4b2e      	ldr	r3, [pc, #184]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006792:	4a2d      	ldr	r2, [pc, #180]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006798:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800679a:	e006      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80067a2:	e002      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80067a4:	bf00      	nop
 80067a6:	e000      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80067a8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10d      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80067b2:	4b25      	ldr	r3, [pc, #148]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067b8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80067bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067c4:	4a20      	ldr	r2, [pc, #128]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067c6:	430b      	orrs	r3, r1
 80067c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80067cc:	e003      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067d2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80067e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067e4:	2300      	movs	r3, #0
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80067ec:	460b      	mov	r3, r1
 80067ee:	4313      	orrs	r3, r2
 80067f0:	d032      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80067f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067fe:	d00b      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006804:	d804      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d008      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800680e:	d007      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006816:	e004      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006818:	bf00      	nop
 800681a:	e002      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800681c:	bf00      	nop
 800681e:	e000      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006820:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006822:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006826:	2b00      	cmp	r3, #0
 8006828:	d112      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800682a:	4b07      	ldr	r3, [pc, #28]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800682c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006830:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006838:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800683c:	4a02      	ldr	r2, [pc, #8]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800683e:	430b      	orrs	r3, r1
 8006840:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006844:	e008      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006846:	bf00      	nop
 8006848:	46020c00 	.word	0x46020c00
 800684c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006850:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006854:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006864:	633b      	str	r3, [r7, #48]	@ 0x30
 8006866:	2300      	movs	r3, #0
 8006868:	637b      	str	r3, [r7, #52]	@ 0x34
 800686a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800686e:	460b      	mov	r3, r1
 8006870:	4313      	orrs	r3, r2
 8006872:	d019      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006878:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800687c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006880:	d105      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006882:	4b88      	ldr	r3, [pc, #544]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	4a87      	ldr	r2, [pc, #540]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800688c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800688e:	4b85      	ldr	r3, [pc, #532]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006890:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006894:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800689c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068a0:	4a80      	ldr	r2, [pc, #512]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80068a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80068b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b6:	2300      	movs	r3, #0
 80068b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068be:	460b      	mov	r3, r1
 80068c0:	4313      	orrs	r3, r2
 80068c2:	d00c      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80068c4:	4b77      	ldr	r3, [pc, #476]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068d6:	4973      	ldr	r1, [pc, #460]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80068de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80068ea:	623b      	str	r3, [r7, #32]
 80068ec:	2300      	movs	r3, #0
 80068ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80068f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068f4:	460b      	mov	r3, r1
 80068f6:	4313      	orrs	r3, r2
 80068f8:	d00c      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80068fa:	4b6a      	ldr	r3, [pc, #424]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006900:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006908:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800690c:	4965      	ldr	r1, [pc, #404]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800692a:	460b      	mov	r3, r1
 800692c:	4313      	orrs	r3, r2
 800692e:	d00c      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006930:	4b5c      	ldr	r3, [pc, #368]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006936:	f023 0218 	bic.w	r2, r3, #24
 800693a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800693e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006942:	4958      	ldr	r1, [pc, #352]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006944:	4313      	orrs	r3, r2
 8006946:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800694a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006960:	460b      	mov	r3, r1
 8006962:	4313      	orrs	r3, r2
 8006964:	d032      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006966:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800696a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800696e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006972:	d105      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006974:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006978:	4a4a      	ldr	r2, [pc, #296]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800697a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800697e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006984:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006988:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800698c:	d108      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800698e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006992:	3308      	adds	r3, #8
 8006994:	4618      	mov	r0, r3
 8006996:	f001 fe4b 	bl	8008630 <RCCEx_PLL2_Config>
 800699a:	4603      	mov	r3, r0
 800699c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80069a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10d      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80069a8:	4b3e      	ldr	r3, [pc, #248]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069ba:	493a      	ldr	r1, [pc, #232]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80069c2:	e003      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80069c8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80069cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80069d8:	60bb      	str	r3, [r7, #8]
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069e2:	460b      	mov	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d03a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80069e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069f4:	d00e      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80069f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069fa:	d815      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d017      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a04:	d110      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a06:	4b27      	ldr	r3, [pc, #156]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0a:	4a26      	ldr	r2, [pc, #152]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a10:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006a12:	e00e      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a18:	3308      	adds	r3, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 fe08 	bl	8008630 <RCCEx_PLL2_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006a26:	e004      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006a2e:	e000      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006a30:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a32:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10d      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a40:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a4c:	4915      	ldr	r1, [pc, #84]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006a54:	e003      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a5a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006a5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a74:	460b      	mov	r3, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	d00c      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a80:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a8c:	4905      	ldr	r1, [pc, #20]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006a94:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	37e0      	adds	r7, #224	@ 0xe0
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aa2:	bf00      	nop
 8006aa4:	46020c00 	.word	0x46020c00

08006aa8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b089      	sub	sp, #36	@ 0x24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006ab0:	4ba6      	ldr	r3, [pc, #664]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006aba:	4ba4      	ldr	r3, [pc, #656]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006ac4:	4ba1      	ldr	r3, [pc, #644]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	3301      	adds	r3, #1
 8006ad0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ad2:	4b9e      	ldr	r3, [pc, #632]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad6:	091b      	lsrs	r3, r3, #4
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ade:	4b9b      	ldr	r3, [pc, #620]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae2:	08db      	lsrs	r3, r3, #3
 8006ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d062      	beq.n	8006bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	f200 8081 	bhi.w	8006c0a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d024      	beq.n	8006b58 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d17a      	bne.n	8006c0a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006d50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b26:	4b89      	ldr	r3, [pc, #548]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b3a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b56:	e08f      	b.n	8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b58:	4b7c      	ldr	r3, [pc, #496]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006b64:	4b79      	ldr	r3, [pc, #484]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	0f1b      	lsrs	r3, r3, #28
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	e006      	b.n	8006b7e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006b70:	4b76      	ldr	r3, [pc, #472]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	0f1b      	lsrs	r3, r3, #28
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	4a76      	ldr	r2, [pc, #472]	@ (8006d58 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b84:	ee07 3a90 	vmov	s15, r3
 8006b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	ee07 3a90 	vmov	s15, r3
 8006ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ba8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bc4:	e058      	b.n	8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c08:	e036      	b.n	8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c0a:	4b50      	ldr	r3, [pc, #320]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006c16:	4b4d      	ldr	r3, [pc, #308]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	0f1b      	lsrs	r3, r3, #28
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	e006      	b.n	8006c30 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006c22:	4b4a      	ldr	r3, [pc, #296]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	0f1b      	lsrs	r3, r3, #28
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	4a49      	ldr	r2, [pc, #292]	@ (8006d58 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	ee07 3a90 	vmov	s15, r3
 8006c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c5a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c76:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006c78:	4b34      	ldr	r3, [pc, #208]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d017      	beq.n	8006cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c84:	4b31      	ldr	r3, [pc, #196]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c88:	0a5b      	lsrs	r3, r3, #9
 8006c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006caa:	ee17 2a90 	vmov	r2, s15
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	e002      	b.n	8006cba <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006cba:	4b24      	ldr	r3, [pc, #144]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d017      	beq.n	8006cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cc6:	4b21      	ldr	r3, [pc, #132]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cd0:	ee07 3a90 	vmov	s15, r3
 8006cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006cd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cec:	ee17 2a90 	vmov	r2, s15
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]
 8006cf4:	e002      	b.n	8006cfc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006cfc:	4b13      	ldr	r3, [pc, #76]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d017      	beq.n	8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d08:	4b10      	ldr	r3, [pc, #64]	@ (8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0c:	0e1b      	lsrs	r3, r3, #24
 8006d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2e:	ee17 2a90 	vmov	r2, s15
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d36:	e002      	b.n	8006d3e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	609a      	str	r2, [r3, #8]
}
 8006d3e:	bf00      	nop
 8006d40:	3724      	adds	r7, #36	@ 0x24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	46020c00 	.word	0x46020c00
 8006d50:	4b742400 	.word	0x4b742400
 8006d54:	46000000 	.word	0x46000000
 8006d58:	0800bde0 	.word	0x0800bde0

08006d5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b089      	sub	sp, #36	@ 0x24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006d64:	4ba6      	ldr	r3, [pc, #664]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006d6e:	4ba4      	ldr	r3, [pc, #656]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006d78:	4ba1      	ldr	r3, [pc, #644]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	3301      	adds	r3, #1
 8006d84:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006d86:	4b9e      	ldr	r3, [pc, #632]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8a:	091b      	lsrs	r3, r3, #4
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006d92:	4b9b      	ldr	r3, [pc, #620]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d96:	08db      	lsrs	r3, r3, #3
 8006d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	fb02 f303 	mul.w	r3, r2, r3
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d062      	beq.n	8006e7a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	f200 8081 	bhi.w	8006ebe <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d024      	beq.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d17a      	bne.n	8006ebe <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dda:	4b89      	ldr	r3, [pc, #548]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e0a:	e08f      	b.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006e0c:	4b7c      	ldr	r3, [pc, #496]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006e18:	4b79      	ldr	r3, [pc, #484]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	0f1b      	lsrs	r3, r3, #28
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	e006      	b.n	8006e32 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006e24:	4b76      	ldr	r3, [pc, #472]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	0f1b      	lsrs	r3, r3, #28
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	4a76      	ldr	r2, [pc, #472]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e58:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e5c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e78:	e058      	b.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e84:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e94:	ee07 3a90 	vmov	s15, r3
 8006e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ea0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ebc:	e036      	b.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006ebe:	4b50      	ldr	r3, [pc, #320]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006eca:	4b4d      	ldr	r3, [pc, #308]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	0f1b      	lsrs	r3, r3, #28
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	e006      	b.n	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	0f1b      	lsrs	r3, r3, #28
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	4a49      	ldr	r2, [pc, #292]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f0e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f2a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006f2c:	4b34      	ldr	r3, [pc, #208]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d017      	beq.n	8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f38:	4b31      	ldr	r3, [pc, #196]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3c:	0a5b      	lsrs	r3, r3, #9
 8006f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f5e:	ee17 2a90 	vmov	r2, s15
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	e002      	b.n	8006f6e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006f6e:	4b24      	ldr	r3, [pc, #144]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d017      	beq.n	8006faa <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f7a:	4b21      	ldr	r3, [pc, #132]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f7e:	0c1b      	lsrs	r3, r3, #16
 8006f80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006f8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f90:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa0:	ee17 2a90 	vmov	r2, s15
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	605a      	str	r2, [r3, #4]
 8006fa8:	e002      	b.n	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006fb0:	4b13      	ldr	r3, [pc, #76]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d017      	beq.n	8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fbc:	4b10      	ldr	r3, [pc, #64]	@ (8007000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc0:	0e1b      	lsrs	r3, r3, #24
 8006fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe2:	ee17 2a90 	vmov	r2, s15
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fea:	e002      	b.n	8006ff2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	609a      	str	r2, [r3, #8]
}
 8006ff2:	bf00      	nop
 8006ff4:	3724      	adds	r7, #36	@ 0x24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	46020c00 	.word	0x46020c00
 8007004:	4b742400 	.word	0x4b742400
 8007008:	46000000 	.word	0x46000000
 800700c:	0800bde0 	.word	0x0800bde0

08007010 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007010:	b480      	push	{r7}
 8007012:	b089      	sub	sp, #36	@ 0x24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007018:	4ba6      	ldr	r3, [pc, #664]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800701a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007020:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007022:	4ba4      	ldr	r3, [pc, #656]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800702c:	4ba1      	ldr	r3, [pc, #644]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800702e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007030:	0a1b      	lsrs	r3, r3, #8
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	3301      	adds	r3, #1
 8007038:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800703a:	4b9e      	ldr	r3, [pc, #632]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703e:	091b      	lsrs	r3, r3, #4
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007046:	4b9b      	ldr	r3, [pc, #620]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800704a:	08db      	lsrs	r3, r3, #3
 800704c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d062      	beq.n	800712e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b03      	cmp	r3, #3
 800706c:	f200 8081 	bhi.w	8007172 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d024      	beq.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d17a      	bne.n	8007172 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b89      	ldr	r3, [pc, #548]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800709e:	ed97 6a02 	vldr	s12, [r7, #8]
 80070a2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80070be:	e08f      	b.n	80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80070c0:	4b7c      	ldr	r3, [pc, #496]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80070cc:	4b79      	ldr	r3, [pc, #484]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	0f1b      	lsrs	r3, r3, #28
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	e006      	b.n	80070e6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80070d8:	4b76      	ldr	r3, [pc, #472]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	0f1b      	lsrs	r3, r3, #28
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	4a76      	ldr	r2, [pc, #472]	@ (80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80070e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	ee07 3a90 	vmov	s15, r3
 8007108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007110:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007120:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007128:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800712c:	e058      	b.n	80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	ee07 3a90 	vmov	s15, r3
 8007134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007138:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800713c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007140:	4b5c      	ldr	r3, [pc, #368]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007150:	ed97 6a02 	vldr	s12, [r7, #8]
 8007154:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007158:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800715c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007164:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007170:	e036      	b.n	80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007172:	4b50      	ldr	r3, [pc, #320]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d005      	beq.n	800718a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800717e:	4b4d      	ldr	r3, [pc, #308]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	0f1b      	lsrs	r3, r3, #28
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	e006      	b.n	8007198 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800718a:	4b4a      	ldr	r3, [pc, #296]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800718c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	0f1b      	lsrs	r3, r3, #28
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	4a49      	ldr	r2, [pc, #292]	@ (80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800719a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071be:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80071c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071de:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80071e0:	4b34      	ldr	r3, [pc, #208]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d017      	beq.n	800721c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071ec:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f0:	0a5b      	lsrs	r3, r3, #9
 80071f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80071fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007202:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007206:	edd7 6a07 	vldr	s13, [r7, #28]
 800720a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800720e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007212:	ee17 2a90 	vmov	r2, s15
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e002      	b.n	8007222 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007222:	4b24      	ldr	r3, [pc, #144]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d017      	beq.n	800725e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800722e:	4b21      	ldr	r3, [pc, #132]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007232:	0c1b      	lsrs	r3, r3, #16
 8007234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007240:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007244:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007248:	edd7 6a07 	vldr	s13, [r7, #28]
 800724c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007254:	ee17 2a90 	vmov	r2, s15
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	605a      	str	r2, [r3, #4]
 800725c:	e002      	b.n	8007264 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007264:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d017      	beq.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007270:	4b10      	ldr	r3, [pc, #64]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007274:	0e1b      	lsrs	r3, r3, #24
 8007276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007286:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800728a:	edd7 6a07 	vldr	s13, [r7, #28]
 800728e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007296:	ee17 2a90 	vmov	r2, s15
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800729e:	e002      	b.n	80072a6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
}
 80072a6:	bf00      	nop
 80072a8:	3724      	adds	r7, #36	@ 0x24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	46020c00 	.word	0x46020c00
 80072b8:	4b742400 	.word	0x4b742400
 80072bc:	46000000 	.word	0x46000000
 80072c0:	0800bde0 	.word	0x0800bde0

080072c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08e      	sub	sp, #56	@ 0x38
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80072ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80072d6:	430b      	orrs	r3, r1
 80072d8:	d145      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072da:	4baa      	ldr	r3, [pc, #680]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072e4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80072e6:	4ba7      	ldr	r3, [pc, #668]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d108      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072fa:	d104      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80072fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
 8007302:	f001 b987 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007306:	4b9f      	ldr	r3, [pc, #636]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800730c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007314:	d114      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800731c:	d110      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800731e:	4b99      	ldr	r3, [pc, #612]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800732c:	d103      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800732e:	23fa      	movs	r3, #250	@ 0xfa
 8007330:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007332:	f001 b96f 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007336:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800733a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800733c:	f001 b96a 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007340:	4b90      	ldr	r3, [pc, #576]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800734c:	d107      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007354:	d103      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007356:	4b8c      	ldr	r3, [pc, #560]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007358:	637b      	str	r3, [r7, #52]	@ 0x34
 800735a:	f001 b95b 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	637b      	str	r3, [r7, #52]	@ 0x34
 8007362:	f001 b957 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800736a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800736e:	430b      	orrs	r3, r1
 8007370:	d151      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007372:	4b84      	ldr	r3, [pc, #528]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007374:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007378:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800737c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	2b80      	cmp	r3, #128	@ 0x80
 8007382:	d035      	beq.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	2b80      	cmp	r3, #128	@ 0x80
 8007388:	d841      	bhi.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	2b60      	cmp	r3, #96	@ 0x60
 800738e:	d02a      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007392:	2b60      	cmp	r3, #96	@ 0x60
 8007394:	d83b      	bhi.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	2b40      	cmp	r3, #64	@ 0x40
 800739a:	d009      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	2b40      	cmp	r3, #64	@ 0x40
 80073a0:	d835      	bhi.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00c      	beq.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80073a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d012      	beq.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80073ae:	e02e      	b.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fb77 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073be:	f001 b929 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073c2:	f107 0318 	add.w	r3, r7, #24
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff fcc8 	bl	8006d5c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073d0:	f001 b920 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fe19 	bl	8007010 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073e2:	f001 b917 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073e6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ec:	f001 b912 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073f0:	4b64      	ldr	r3, [pc, #400]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fc:	d103      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80073fe:	4b63      	ldr	r3, [pc, #396]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007402:	f001 b907 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800740a:	f001 b903 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007412:	f001 b8ff 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800741a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800741e:	430b      	orrs	r3, r1
 8007420:	d158      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007422:	4b58      	ldr	r3, [pc, #352]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007424:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007428:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800742c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007434:	d03b      	beq.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800743c:	d846      	bhi.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007444:	d02e      	beq.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800744c:	d83e      	bhi.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007454:	d00b      	beq.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800745c:	d836      	bhi.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00d      	beq.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800746a:	d012      	beq.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800746c:	e02e      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800746e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fb18 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800747c:	f001 b8ca 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007480:	f107 0318 	add.w	r3, r7, #24
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fc69 	bl	8006d5c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800748e:	f001 b8c1 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007492:	f107 030c 	add.w	r3, r7, #12
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fdba 	bl	8007010 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074a0:	f001 b8b8 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80074a4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074aa:	f001 b8b3 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074ae:	4b35      	ldr	r3, [pc, #212]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ba:	d103      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80074bc:	4b33      	ldr	r3, [pc, #204]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80074be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074c0:	f001 b8a8 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c8:	f001 b8a4 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074d0:	f001 b8a0 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80074d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d8:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80074dc:	430b      	orrs	r3, r1
 80074de:	d16e      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80074e0:	4b28      	ldr	r3, [pc, #160]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074e6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80074ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80074f2:	d034      	beq.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80074f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80074fa:	d85c      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007502:	d00b      	beq.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800750a:	d854      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	2b00      	cmp	r3, #0
 8007510:	d016      	beq.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007518:	d009      	beq.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800751a:	e04c      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800751c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff fac1 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800752a:	f001 b873 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800752e:	f107 0318 	add.w	r3, r7, #24
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fc12 	bl	8006d5c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800753c:	f001 b86a 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007540:	4b10      	ldr	r3, [pc, #64]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800754c:	d103      	bne.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800754e:	4b10      	ldr	r3, [pc, #64]	@ (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007550:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007552:	f001 b85f 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800755a:	f001 b85b 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800755e:	4b09      	ldr	r3, [pc, #36]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b20      	cmp	r3, #32
 8007568:	d121      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800756a:	4b06      	ldr	r3, [pc, #24]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00e      	beq.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007576:	4b03      	ldr	r3, [pc, #12]	@ (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	0e1b      	lsrs	r3, r3, #24
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	e00f      	b.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007582:	bf00      	nop
 8007584:	46020c00 	.word	0x46020c00
 8007588:	0007a120 	.word	0x0007a120
 800758c:	00f42400 	.word	0x00f42400
 8007590:	02dc6c00 	.word	0x02dc6c00
 8007594:	4ba7      	ldr	r3, [pc, #668]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007596:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	0e1b      	lsrs	r3, r3, #24
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	4aa5      	ldr	r2, [pc, #660]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80075a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075aa:	f001 b833 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075b2:	f001 b82f 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ba:	f001 b82b 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80075be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c2:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80075c6:	430b      	orrs	r3, r1
 80075c8:	d17f      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80075ca:	4b9a      	ldr	r3, [pc, #616]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80075cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075d4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d165      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80075dc:	4b95      	ldr	r3, [pc, #596]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80075de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075e2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80075e6:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80075ee:	d034      	beq.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80075f6:	d853      	bhi.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80075f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075fe:	d00b      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007606:	d84b      	bhi.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	2b00      	cmp	r3, #0
 800760c:	d016      	beq.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007614:	d009      	beq.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007616:	e043      	b.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fa43 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007624:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007626:	f000 bff5 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800762a:	f107 0318 	add.w	r3, r7, #24
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff fb94 	bl	8006d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007638:	f000 bfec 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800763c:	4b7d      	ldr	r3, [pc, #500]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007648:	d103      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800764a:	4b7c      	ldr	r3, [pc, #496]	@ (800783c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800764c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800764e:	f000 bfe1 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007656:	f000 bfdd 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800765a:	4b76      	ldr	r3, [pc, #472]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b20      	cmp	r3, #32
 8007664:	d118      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007666:	4b73      	ldr	r3, [pc, #460]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007672:	4b70      	ldr	r3, [pc, #448]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	0e1b      	lsrs	r3, r3, #24
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	e006      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800767e:	4b6d      	ldr	r3, [pc, #436]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	0e1b      	lsrs	r3, r3, #24
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	4a6a      	ldr	r2, [pc, #424]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800768e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007692:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007694:	f000 bfbe 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800769c:	f000 bfba 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80076a4:	f000 bfb6 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076ae:	d108      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff f9f7 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076be:	f000 bfa9 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c6:	f000 bfa5 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80076ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ce:	1e51      	subs	r1, r2, #1
 80076d0:	430b      	orrs	r3, r1
 80076d2:	d136      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80076d4:	4b57      	ldr	r3, [pc, #348]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80076d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d104      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80076e6:	f7fe fb8d 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
 80076ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80076ec:	f000 bf92 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d104      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80076f6:	f7fe fa55 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 80076fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80076fc:	f000 bf8a 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007700:	4b4c      	ldr	r3, [pc, #304]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800770c:	d106      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	2b02      	cmp	r3, #2
 8007712:	d103      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8007714:	4b4a      	ldr	r3, [pc, #296]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
 8007718:	f000 bf7c 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800771c:	4b45      	ldr	r3, [pc, #276]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800771e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b02      	cmp	r3, #2
 8007728:	d107      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	2b03      	cmp	r3, #3
 800772e:	d104      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8007730:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
 8007736:	f000 bf6d 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
 800773e:	f000 bf69 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007746:	1e91      	subs	r1, r2, #2
 8007748:	430b      	orrs	r3, r1
 800774a:	d136      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800774c:	4b39      	ldr	r3, [pc, #228]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800774e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775a:	2b00      	cmp	r3, #0
 800775c:	d104      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800775e:	f7fe fb3d 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8007762:	6378      	str	r0, [r7, #52]	@ 0x34
 8007764:	f000 bf56 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	2b04      	cmp	r3, #4
 800776c:	d104      	bne.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800776e:	f7fe fa19 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8007772:	6378      	str	r0, [r7, #52]	@ 0x34
 8007774:	f000 bf4e 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007778:	4b2e      	ldr	r3, [pc, #184]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007784:	d106      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	2b08      	cmp	r3, #8
 800778a:	d103      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 800778c:	4b2c      	ldr	r3, [pc, #176]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800778e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007790:	f000 bf40 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007794:	4b27      	ldr	r3, [pc, #156]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d107      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	2b0c      	cmp	r3, #12
 80077a6:	d104      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80077a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ae:	f000 bf31 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b6:	f000 bf2d 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80077ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077be:	1f11      	subs	r1, r2, #4
 80077c0:	430b      	orrs	r3, r1
 80077c2:	d13f      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80077c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80077c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077d6:	f7fe fb01 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 80077da:	6378      	str	r0, [r7, #52]	@ 0x34
 80077dc:	f000 bf1a 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d104      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077e6:	f7fe f9dd 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 80077ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80077ec:	f000 bf12 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80077f0:	4b10      	ldr	r3, [pc, #64]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077fc:	d106      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	2b20      	cmp	r3, #32
 8007802:	d103      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007804:	4b0e      	ldr	r3, [pc, #56]	@ (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007806:	637b      	str	r3, [r7, #52]	@ 0x34
 8007808:	f000 bf04 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800780c:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800780e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b02      	cmp	r3, #2
 8007818:	d107      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	2b30      	cmp	r3, #48	@ 0x30
 800781e:	d104      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
 8007826:	f000 bef5 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
 800782e:	f000 bef1 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007832:	bf00      	nop
 8007834:	46020c00 	.word	0x46020c00
 8007838:	0800bde0 	.word	0x0800bde0
 800783c:	02dc6c00 	.word	0x02dc6c00
 8007840:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007848:	f1a2 0108 	sub.w	r1, r2, #8
 800784c:	430b      	orrs	r3, r1
 800784e:	d136      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007850:	4ba4      	ldr	r3, [pc, #656]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007856:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800785a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007862:	f7fe fabb 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8007866:	6378      	str	r0, [r7, #52]	@ 0x34
 8007868:	f000 bed4 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	2b40      	cmp	r3, #64	@ 0x40
 8007870:	d104      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007872:	f7fe f997 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8007876:	6378      	str	r0, [r7, #52]	@ 0x34
 8007878:	f000 becc 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800787c:	4b99      	ldr	r3, [pc, #612]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007888:	d106      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	2b80      	cmp	r3, #128	@ 0x80
 800788e:	d103      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007890:	4b95      	ldr	r3, [pc, #596]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
 8007894:	f000 bebe 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007898:	4b92      	ldr	r3, [pc, #584]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800789a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d107      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80078aa:	d104      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 80078ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b2:	f000 beaf 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ba:	f000 beab 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80078be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c2:	f1a2 0110 	sub.w	r1, r2, #16
 80078c6:	430b      	orrs	r3, r1
 80078c8:	d139      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80078ca:	4b86      	ldr	r3, [pc, #536]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80078cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078d4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d104      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078dc:	f7fe fa7e 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 80078e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80078e2:	f000 be97 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ec:	d104      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078ee:	f7fe f959 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 80078f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80078f4:	f000 be8e 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80078f8:	4b7a      	ldr	r3, [pc, #488]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007904:	d107      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800790c:	d103      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800790e:	4b76      	ldr	r3, [pc, #472]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007910:	637b      	str	r3, [r7, #52]	@ 0x34
 8007912:	f000 be7f 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007916:	4b73      	ldr	r3, [pc, #460]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b02      	cmp	r3, #2
 8007922:	d108      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800792a:	d104      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 800792c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
 8007932:	f000 be6f 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	637b      	str	r3, [r7, #52]	@ 0x34
 800793a:	f000 be6b 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800793e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007942:	f1a2 0120 	sub.w	r1, r2, #32
 8007946:	430b      	orrs	r3, r1
 8007948:	d158      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800794a:	4b66      	ldr	r3, [pc, #408]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800794c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800795c:	f7fe fa66 	bl	8005e2c <HAL_RCC_GetPCLK3Freq>
 8007960:	6378      	str	r0, [r7, #52]	@ 0x34
 8007962:	f000 be57 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	2b01      	cmp	r3, #1
 800796a:	d104      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800796c:	f7fe f91a 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8007970:	6378      	str	r0, [r7, #52]	@ 0x34
 8007972:	f000 be4f 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007976:	4b5b      	ldr	r3, [pc, #364]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007982:	d106      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	2b02      	cmp	r3, #2
 8007988:	d103      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800798a:	4b57      	ldr	r3, [pc, #348]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800798c:	637b      	str	r3, [r7, #52]	@ 0x34
 800798e:	f000 be41 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007992:	4b54      	ldr	r3, [pc, #336]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b02      	cmp	r3, #2
 800799e:	d107      	bne.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d104      	bne.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80079a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ac:	f000 be32 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80079b0:	4b4c      	ldr	r3, [pc, #304]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d11b      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d118      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079c2:	4b48      	ldr	r3, [pc, #288]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80079ce:	4b45      	ldr	r3, [pc, #276]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	0e1b      	lsrs	r3, r3, #24
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	e006      	b.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80079da:	4b42      	ldr	r3, [pc, #264]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80079dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079e0:	041b      	lsls	r3, r3, #16
 80079e2:	0e1b      	lsrs	r3, r3, #24
 80079e4:	f003 030f 	and.w	r3, r3, #15
 80079e8:	4a40      	ldr	r2, [pc, #256]	@ (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80079ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f0:	f000 be10 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f8:	f000 be0c 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80079fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a00:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007a04:	430b      	orrs	r3, r1
 8007a06:	d173      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007a08:	4b36      	ldr	r3, [pc, #216]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a0e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007a12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a1a:	d104      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a1c:	f7fe f8c2 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8007a20:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a22:	f000 bdf7 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a2c:	d108      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a2e:	f107 0318 	add.w	r3, r7, #24
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff f992 	bl	8006d5c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a3c:	f000 bdea 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d104      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007a46:	f7fe f9af 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8007a4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a4c:	f000 bde2 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a56:	d122      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a58:	4b22      	ldr	r3, [pc, #136]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0320 	and.w	r3, r3, #32
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	d118      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a64:	4b1f      	ldr	r3, [pc, #124]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007a70:	4b1c      	ldr	r3, [pc, #112]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	0e1b      	lsrs	r3, r3, #24
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	e006      	b.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007a7c:	4b19      	ldr	r3, [pc, #100]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a82:	041b      	lsls	r3, r3, #16
 8007a84:	0e1b      	lsrs	r3, r3, #24
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	4a18      	ldr	r2, [pc, #96]	@ (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a92:	f000 bdbf 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9a:	f000 bdbb 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007a9e:	4b11      	ldr	r3, [pc, #68]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aaa:	d107      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ab2:	d103      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab8:	f000 bdac 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007abc:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac8:	d107      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ad0:	d103      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8007ad2:	4b05      	ldr	r3, [pc, #20]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad6:	f000 bd9d 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ade:	f000 bd99 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007ae2:	bf00      	nop
 8007ae4:	46020c00 	.word	0x46020c00
 8007ae8:	00f42400 	.word	0x00f42400
 8007aec:	0800bde0 	.word	0x0800bde0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007af8:	430b      	orrs	r3, r1
 8007afa:	d158      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007afc:	4bad      	ldr	r3, [pc, #692]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007afe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d84b      	bhi.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b4d 	.word	0x08007b4d
 8007b18:	08007b29 	.word	0x08007b29
 8007b1c:	08007b3b 	.word	0x08007b3b
 8007b20:	08007b57 	.word	0x08007b57
 8007b24:	08007b61 	.word	0x08007b61
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fe ffbb 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b36:	f000 bd6d 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b3a:	f107 030c 	add.w	r3, r7, #12
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff fa66 	bl	8007010 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b48:	f000 bd64 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007b4c:	f7fe f92c 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8007b50:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b52:	f000 bd5f 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b56:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b5c:	f000 bd5a 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b60:	4b94      	ldr	r3, [pc, #592]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d118      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b6c:	4b91      	ldr	r3, [pc, #580]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8007b78:	4b8e      	ldr	r3, [pc, #568]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	0e1b      	lsrs	r3, r3, #24
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	e006      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8007b84:	4b8b      	ldr	r3, [pc, #556]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	0e1b      	lsrs	r3, r3, #24
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	4a89      	ldr	r2, [pc, #548]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b9a:	f000 bd3b 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ba2:	f000 bd37 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007baa:	f000 bd33 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	d167      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007bba:	4b7e      	ldr	r3, [pc, #504]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bc0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007bc4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bcc:	d036      	beq.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bd4:	d855      	bhi.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bdc:	d029      	beq.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007be4:	d84d      	bhi.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bec:	d013      	beq.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8007bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bf4:	d845      	bhi.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d015      	beq.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c02:	d13e      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe ff4d 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c12:	f000 bcff 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c16:	f107 030c 	add.w	r3, r7, #12
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff f9f8 	bl	8007010 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c24:	f000 bcf6 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007c28:	f7fe f8be 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8007c2c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c2e:	f000 bcf1 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007c32:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007c36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c38:	f000 bcec 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d118      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c48:	4b5a      	ldr	r3, [pc, #360]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8007c54:	4b57      	ldr	r3, [pc, #348]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	0e1b      	lsrs	r3, r3, #24
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	e006      	b.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007c60:	4b54      	ldr	r3, [pc, #336]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c66:	041b      	lsls	r3, r3, #16
 8007c68:	0e1b      	lsrs	r3, r3, #24
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	4a52      	ldr	r2, [pc, #328]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c74:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c76:	f000 bccd 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c7e:	f000 bcc9 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c86:	f000 bcc5 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007c92:	430b      	orrs	r3, r1
 8007c94:	d14c      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c96:	4b47      	ldr	r3, [pc, #284]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ca0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d104      	bne.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ca8:	f7fe f898 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8007cac:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cae:	f000 bcb1 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cb8:	d104      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cba:	f7fd ff73 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8007cbe:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cc0:	f000 bca8 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cd0:	d107      	bne.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cd8:	d103      	bne.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8007cda:	4b38      	ldr	r3, [pc, #224]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cde:	f000 bc99 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007ce2:	4b34      	ldr	r3, [pc, #208]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d11c      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cf4:	d118      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d005      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007d02:	4b2c      	ldr	r3, [pc, #176]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	0e1b      	lsrs	r3, r3, #24
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	e006      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8007d0e:	4b29      	ldr	r3, [pc, #164]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d14:	041b      	lsls	r3, r3, #16
 8007d16:	0e1b      	lsrs	r3, r3, #24
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	4a26      	ldr	r2, [pc, #152]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d24:	f000 bc76 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d2c:	f000 bc72 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d34:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	d152      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d42:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007d46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d104      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d4e:	f7fe f845 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8007d52:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d54:	f000 bc5e 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d5e:	d104      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d60:	f7fd ff20 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8007d64:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d66:	f000 bc55 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007d6a:	4b12      	ldr	r3, [pc, #72]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d76:	d107      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d7e:	d103      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8007d80:	4b0e      	ldr	r3, [pc, #56]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d84:	f000 bc46 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007d88:	4b0a      	ldr	r3, [pc, #40]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	d122      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8007d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d9a:	d11e      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d9c:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8007da8:	4b02      	ldr	r3, [pc, #8]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	0e1b      	lsrs	r3, r3, #24
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	e00c      	b.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8007db4:	46020c00 	.word	0x46020c00
 8007db8:	0800bde0 	.word	0x0800bde0
 8007dbc:	00f42400 	.word	0x00f42400
 8007dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	0e1b      	lsrs	r3, r3, #24
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	4a9f      	ldr	r2, [pc, #636]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd6:	f000 bc1d 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dde:	f000 bc19 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007dea:	430b      	orrs	r3, r1
 8007dec:	d151      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007dee:	4b96      	ldr	r3, [pc, #600]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007df4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007df8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dfe:	d024      	beq.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e04:	d842      	bhi.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	2b80      	cmp	r3, #128	@ 0x80
 8007e0a:	d00d      	beq.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	2b80      	cmp	r3, #128	@ 0x80
 8007e10:	d83c      	bhi.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1a:	2b40      	cmp	r3, #64	@ 0x40
 8007e1c:	d011      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8007e1e:	e035      	b.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007e20:	f7fe f804 	bl	8005e2c <HAL_RCC_GetPCLK3Freq>
 8007e24:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e26:	e3f5      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e28:	4b87      	ldr	r3, [pc, #540]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e34:	d102      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8007e36:	4b86      	ldr	r3, [pc, #536]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007e38:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e3a:	e3eb      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e40:	e3e8      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007e42:	f7fd feaf 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8007e46:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e48:	e3e4      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0320 	and.w	r3, r3, #32
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d117      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e56:	4b7c      	ldr	r3, [pc, #496]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8007e62:	4b79      	ldr	r3, [pc, #484]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	0e1b      	lsrs	r3, r3, #24
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	e006      	b.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8007e6e:	4b76      	ldr	r3, [pc, #472]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	0e1b      	lsrs	r3, r3, #24
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	4a73      	ldr	r2, [pc, #460]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e84:	e3c6      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e8a:	e3c3      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e90:	e3c0      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e96:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	d147      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ea4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007ea8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d103      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007eb0:	f7fd ff94 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8007eb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007eb6:	e3ad      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ebe:	d103      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ec0:	f7fd fe70 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8007ec4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ec6:	e3a5      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed4:	d106      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007edc:	d102      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8007ede:	4b5c      	ldr	r3, [pc, #368]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ee2:	e397      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007ee4:	4b58      	ldr	r3, [pc, #352]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d11b      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007ef6:	d117      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ef8:	4b53      	ldr	r3, [pc, #332]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8007f04:	4b50      	ldr	r3, [pc, #320]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	0e1b      	lsrs	r3, r3, #24
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	e006      	b.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8007f10:	4b4d      	ldr	r3, [pc, #308]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f16:	041b      	lsls	r3, r3, #16
 8007f18:	0e1b      	lsrs	r3, r3, #24
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	4a4b      	ldr	r2, [pc, #300]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f26:	e375      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2c:	e372      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f32:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007f36:	430b      	orrs	r3, r1
 8007f38:	d164      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007f3a:	4b43      	ldr	r3, [pc, #268]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d120      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0320 	and.w	r3, r3, #32
 8007f54:	2b20      	cmp	r3, #32
 8007f56:	d117      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f58:	4b3b      	ldr	r3, [pc, #236]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007f64:	4b38      	ldr	r3, [pc, #224]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	0e1b      	lsrs	r3, r3, #24
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	e006      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8007f70:	4b35      	ldr	r3, [pc, #212]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	0e1b      	lsrs	r3, r3, #24
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	4a33      	ldr	r2, [pc, #204]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f86:	e345      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f8c:	e342      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f9c:	d112      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fa4:	d10e      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007fa6:	4b28      	ldr	r3, [pc, #160]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fb4:	d102      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8007fb6:	23fa      	movs	r3, #250	@ 0xfa
 8007fb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007fba:	e32b      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007fbc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007fc2:	e327      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007fc4:	4b20      	ldr	r3, [pc, #128]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fd0:	d106      	bne.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fd8:	d102      	bne.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8007fda:	4b1d      	ldr	r3, [pc, #116]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fde:	e319      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007fe0:	4b19      	ldr	r3, [pc, #100]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d107      	bne.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ff4:	d103      	bne.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8007ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ffc:	e30a      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	637b      	str	r3, [r7, #52]	@ 0x34
 8008002:	e307      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008008:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800800c:	430b      	orrs	r3, r1
 800800e:	d16b      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008010:	4b0d      	ldr	r3, [pc, #52]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008016:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800801a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	2b00      	cmp	r3, #0
 8008020:	d127      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008022:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d11e      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800802e:	4b06      	ldr	r3, [pc, #24]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00c      	beq.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800803a:	4b03      	ldr	r3, [pc, #12]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	0e1b      	lsrs	r3, r3, #24
 8008040:	f003 030f 	and.w	r3, r3, #15
 8008044:	e00d      	b.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008046:	bf00      	nop
 8008048:	46020c00 	.word	0x46020c00
 800804c:	0800bde0 	.word	0x0800bde0
 8008050:	00f42400 	.word	0x00f42400
 8008054:	4b94      	ldr	r3, [pc, #592]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008056:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	0e1b      	lsrs	r3, r3, #24
 800805e:	f003 030f 	and.w	r3, r3, #15
 8008062:	4a92      	ldr	r2, [pc, #584]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
 800806a:	e2d3      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008070:	e2d0      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008072:	4b8d      	ldr	r3, [pc, #564]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800807c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008080:	d112      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008088:	d10e      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800808a:	4b87      	ldr	r3, [pc, #540]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800808c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008098:	d102      	bne.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800809a:	23fa      	movs	r3, #250	@ 0xfa
 800809c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800809e:	e2b9      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80080a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80080a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80080a6:	e2b5      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80080a8:	4b7f      	ldr	r3, [pc, #508]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b4:	d106      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080bc:	d102      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80080be:	4b7c      	ldr	r3, [pc, #496]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c2:	e2a7      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80080c4:	4b78      	ldr	r3, [pc, #480]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80080c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d107      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080d8:	d103      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80080da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080de:	637b      	str	r3, [r7, #52]	@ 0x34
 80080e0:	e298      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080e6:	e295      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80080e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80080f0:	430b      	orrs	r3, r1
 80080f2:	d147      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80080f4:	4b6c      	ldr	r3, [pc, #432]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80080f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080fa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80080fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	2b00      	cmp	r3, #0
 8008104:	d103      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008106:	f7fd fe69 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 800810a:	6378      	str	r0, [r7, #52]	@ 0x34
 800810c:	e282      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800810e:	4b66      	ldr	r3, [pc, #408]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800811c:	d112      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008124:	d10e      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008126:	4b60      	ldr	r3, [pc, #384]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800812c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008134:	d102      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8008136:	23fa      	movs	r3, #250	@ 0xfa
 8008138:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800813a:	e26b      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800813c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008140:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008142:	e267      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008144:	4b58      	ldr	r3, [pc, #352]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800814c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008150:	d106      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008158:	d102      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800815a:	4b55      	ldr	r3, [pc, #340]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800815c:	637b      	str	r3, [r7, #52]	@ 0x34
 800815e:	e259      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008160:	4b51      	ldr	r3, [pc, #324]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b02      	cmp	r3, #2
 800816c:	d107      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008174:	d103      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8008176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800817a:	637b      	str	r3, [r7, #52]	@ 0x34
 800817c:	e24a      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	637b      	str	r3, [r7, #52]	@ 0x34
 8008182:	e247      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008188:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800818c:	430b      	orrs	r3, r1
 800818e:	d12d      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008190:	4b45      	ldr	r3, [pc, #276]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008196:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800819a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800819c:	4b42      	ldr	r3, [pc, #264]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081a8:	d105      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80081aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80081b0:	4b3f      	ldr	r3, [pc, #252]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b4:	e22e      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80081b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081bc:	d107      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fc70 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80081c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80081cc:	e222      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80081ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081d4:	d107      	bne.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d6:	f107 0318 	add.w	r3, r7, #24
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fdbe 	bl	8006d5c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e4:	e216      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ea:	e213      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80081ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80081f4:	430b      	orrs	r3, r1
 80081f6:	d15d      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80081f8:	4b2b      	ldr	r3, [pc, #172]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80081fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081fe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008202:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008206:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800820a:	d028      	beq.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008212:	d845      	bhi.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800821a:	d013      	beq.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008222:	d83d      	bhi.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008230:	d004      	beq.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8008232:	e035      	b.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008234:	f7fd fde6 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
 8008238:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800823a:	e1eb      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800823c:	f7fd fcb2 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8008240:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008242:	e1e7      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008244:	4b18      	ldr	r3, [pc, #96]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800824c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008250:	d102      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8008252:	4b17      	ldr	r3, [pc, #92]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008254:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008256:	e1dd      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800825c:	e1da      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800825e:	4b12      	ldr	r3, [pc, #72]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b20      	cmp	r3, #32
 8008268:	d117      	bne.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800826a:	4b0f      	ldr	r3, [pc, #60]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8008276:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	0e1b      	lsrs	r3, r3, #24
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	e006      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8008282:	4b09      	ldr	r3, [pc, #36]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008288:	041b      	lsls	r3, r3, #16
 800828a:	0e1b      	lsrs	r3, r3, #24
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	4a06      	ldr	r2, [pc, #24]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008296:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008298:	e1bc      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800829e:	e1b9      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082a4:	e1b6      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80082a6:	bf00      	nop
 80082a8:	46020c00 	.word	0x46020c00
 80082ac:	0800bde0 	.word	0x0800bde0
 80082b0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80082b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082b8:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80082bc:	430b      	orrs	r3, r1
 80082be:	d156      	bne.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80082c0:	4ba5      	ldr	r3, [pc, #660]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80082c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082ca:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80082cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082d2:	d028      	beq.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80082d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082da:	d845      	bhi.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082e2:	d013      	beq.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ea:	d83d      	bhi.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d004      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082f8:	d004      	beq.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80082fa:	e035      	b.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80082fc:	f7fd fd6e 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8008300:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008302:	e187      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008304:	f7fd fc4e 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8008308:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800830a:	e183      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800830c:	4b92      	ldr	r3, [pc, #584]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008318:	d102      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800831a:	4b90      	ldr	r3, [pc, #576]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800831c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800831e:	e179      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008324:	e176      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008326:	4b8c      	ldr	r3, [pc, #560]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b20      	cmp	r3, #32
 8008330:	d117      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008332:	4b89      	ldr	r3, [pc, #548]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d005      	beq.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800833e:	4b86      	ldr	r3, [pc, #536]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	0e1b      	lsrs	r3, r3, #24
 8008344:	f003 030f 	and.w	r3, r3, #15
 8008348:	e006      	b.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800834a:	4b83      	ldr	r3, [pc, #524]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800834c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008350:	041b      	lsls	r3, r3, #16
 8008352:	0e1b      	lsrs	r3, r3, #24
 8008354:	f003 030f 	and.w	r3, r3, #15
 8008358:	4a81      	ldr	r2, [pc, #516]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800835a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800835e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008360:	e158      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008366:	e155      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800836c:	e152      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800836e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008372:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008376:	430b      	orrs	r3, r1
 8008378:	d177      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800837a:	4b77      	ldr	r3, [pc, #476]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800837c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008380:	f003 0318 	and.w	r3, r3, #24
 8008384:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	2b18      	cmp	r3, #24
 800838a:	d86b      	bhi.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800838c:	a201      	add	r2, pc, #4	@ (adr r2, 8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800838e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008392:	bf00      	nop
 8008394:	080083f9 	.word	0x080083f9
 8008398:	08008465 	.word	0x08008465
 800839c:	08008465 	.word	0x08008465
 80083a0:	08008465 	.word	0x08008465
 80083a4:	08008465 	.word	0x08008465
 80083a8:	08008465 	.word	0x08008465
 80083ac:	08008465 	.word	0x08008465
 80083b0:	08008465 	.word	0x08008465
 80083b4:	08008401 	.word	0x08008401
 80083b8:	08008465 	.word	0x08008465
 80083bc:	08008465 	.word	0x08008465
 80083c0:	08008465 	.word	0x08008465
 80083c4:	08008465 	.word	0x08008465
 80083c8:	08008465 	.word	0x08008465
 80083cc:	08008465 	.word	0x08008465
 80083d0:	08008465 	.word	0x08008465
 80083d4:	08008409 	.word	0x08008409
 80083d8:	08008465 	.word	0x08008465
 80083dc:	08008465 	.word	0x08008465
 80083e0:	08008465 	.word	0x08008465
 80083e4:	08008465 	.word	0x08008465
 80083e8:	08008465 	.word	0x08008465
 80083ec:	08008465 	.word	0x08008465
 80083f0:	08008465 	.word	0x08008465
 80083f4:	08008423 	.word	0x08008423
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80083f8:	f7fd fd18 	bl	8005e2c <HAL_RCC_GetPCLK3Freq>
 80083fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80083fe:	e109      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008400:	f7fd fbd0 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8008404:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008406:	e105      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008408:	4b53      	ldr	r3, [pc, #332]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008414:	d102      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8008416:	4b51      	ldr	r3, [pc, #324]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8008418:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800841a:	e0fb      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008420:	e0f8      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008422:	4b4d      	ldr	r3, [pc, #308]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b20      	cmp	r3, #32
 800842c:	d117      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800842e:	4b4a      	ldr	r3, [pc, #296]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d005      	beq.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800843a:	4b47      	ldr	r3, [pc, #284]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	0e1b      	lsrs	r3, r3, #24
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	e006      	b.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008446:	4b44      	ldr	r3, [pc, #272]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800844c:	041b      	lsls	r3, r3, #16
 800844e:	0e1b      	lsrs	r3, r3, #24
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	4a42      	ldr	r2, [pc, #264]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800845a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800845c:	e0da      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008462:	e0d7      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008468:	e0d4      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800846a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800846e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008472:	430b      	orrs	r3, r1
 8008474:	d155      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008476:	4b38      	ldr	r3, [pc, #224]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008478:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800847c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008480:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008488:	d013      	beq.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800848a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008490:	d844      	bhi.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008498:	d013      	beq.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084a0:	d83c      	bhi.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d014      	beq.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ae:	d014      	beq.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80084b0:	e034      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084b2:	f107 0318 	add.w	r3, r7, #24
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fc50 	bl	8006d5c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084c0:	e0a8      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe faee 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80084cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084d0:	e0a0      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80084d2:	f7fd fb67 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 80084d6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084d8:	e09c      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084da:	4b1f      	ldr	r3, [pc, #124]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d117      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d005      	beq.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80084f2:	4b19      	ldr	r3, [pc, #100]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	0e1b      	lsrs	r3, r3, #24
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	e006      	b.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 80084fe:	4b16      	ldr	r3, [pc, #88]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008504:	041b      	lsls	r3, r3, #16
 8008506:	0e1b      	lsrs	r3, r3, #24
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	4a14      	ldr	r2, [pc, #80]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800850e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008514:	e07e      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800851a:	e07b      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008520:	e078      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008526:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800852a:	430b      	orrs	r3, r1
 800852c:	d138      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800852e:	4b0a      	ldr	r3, [pc, #40]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008538:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800853a:	4b07      	ldr	r3, [pc, #28]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800853c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b02      	cmp	r3, #2
 8008546:	d10d      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800854e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008552:	637b      	str	r3, [r7, #52]	@ 0x34
 8008554:	e05e      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008556:	bf00      	nop
 8008558:	46020c00 	.word	0x46020c00
 800855c:	00f42400 	.word	0x00f42400
 8008560:	0800bde0 	.word	0x0800bde0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008564:	4b2e      	ldr	r3, [pc, #184]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800856a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800856e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008572:	d112      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800857a:	d10e      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800857c:	4b28      	ldr	r3, [pc, #160]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800857e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800858a:	d102      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800858c:	23fa      	movs	r3, #250	@ 0xfa
 800858e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008590:	e040      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008592:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008596:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008598:	e03c      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	637b      	str	r3, [r7, #52]	@ 0x34
 800859e:	e039      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80085a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80085a8:	430b      	orrs	r3, r1
 80085aa:	d131      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80085ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80085ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80085b6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80085b8:	4b19      	ldr	r3, [pc, #100]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085c4:	d105      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80085cc:	4b15      	ldr	r3, [pc, #84]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80085ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d0:	e020      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80085d2:	4b13      	ldr	r3, [pc, #76]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085de:	d106      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085e6:	d102      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80085e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80085ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ec:	e012      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80085ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085fa:	d106      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008602:	d102      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8008604:	4b09      	ldr	r3, [pc, #36]	@ (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008606:	637b      	str	r3, [r7, #52]	@ 0x34
 8008608:	e004      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	637b      	str	r3, [r7, #52]	@ 0x34
 800860e:	e001      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008616:	4618      	mov	r0, r3
 8008618:	3738      	adds	r7, #56	@ 0x38
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	46020c00 	.word	0x46020c00
 8008624:	02dc6c00 	.word	0x02dc6c00
 8008628:	016e3600 	.word	0x016e3600
 800862c:	00f42400 	.word	0x00f42400

08008630 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008638:	4b47      	ldr	r3, [pc, #284]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a46      	ldr	r2, [pc, #280]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 800863e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008642:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008644:	f7f9 fa52 	bl	8001aec <HAL_GetTick>
 8008648:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800864a:	e008      	b.n	800865e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800864c:	f7f9 fa4e 	bl	8001aec <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e077      	b.n	800874e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800865e:	4b3e      	ldr	r3, [pc, #248]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f0      	bne.n	800864c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800866a:	4b3b      	ldr	r3, [pc, #236]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008672:	f023 0303 	bic.w	r3, r3, #3
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	6811      	ldr	r1, [r2, #0]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	6852      	ldr	r2, [r2, #4]
 800867e:	3a01      	subs	r2, #1
 8008680:	0212      	lsls	r2, r2, #8
 8008682:	430a      	orrs	r2, r1
 8008684:	4934      	ldr	r1, [pc, #208]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 8008686:	4313      	orrs	r3, r2
 8008688:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800868a:	4b33      	ldr	r3, [pc, #204]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 800868c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800868e:	4b33      	ldr	r3, [pc, #204]	@ (800875c <RCCEx_PLL2_Config+0x12c>)
 8008690:	4013      	ands	r3, r2
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6892      	ldr	r2, [r2, #8]
 8008696:	3a01      	subs	r2, #1
 8008698:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	68d2      	ldr	r2, [r2, #12]
 80086a0:	3a01      	subs	r2, #1
 80086a2:	0252      	lsls	r2, r2, #9
 80086a4:	b292      	uxth	r2, r2
 80086a6:	4311      	orrs	r1, r2
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6912      	ldr	r2, [r2, #16]
 80086ac:	3a01      	subs	r2, #1
 80086ae:	0412      	lsls	r2, r2, #16
 80086b0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80086b4:	4311      	orrs	r1, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6952      	ldr	r2, [r2, #20]
 80086ba:	3a01      	subs	r2, #1
 80086bc:	0612      	lsls	r2, r2, #24
 80086be:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80086c2:	430a      	orrs	r2, r1
 80086c4:	4924      	ldr	r1, [pc, #144]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80086ca:	4b23      	ldr	r3, [pc, #140]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	f023 020c 	bic.w	r2, r3, #12
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	4920      	ldr	r1, [pc, #128]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80086dc:	4b1e      	ldr	r3, [pc, #120]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 80086de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	491c      	ldr	r1, [pc, #112]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80086ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 80086ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 80086f0:	f023 0310 	bic.w	r3, r3, #16
 80086f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80086f6:	4b18      	ldr	r3, [pc, #96]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 80086f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	69d2      	ldr	r2, [r2, #28]
 8008706:	00d2      	lsls	r2, r2, #3
 8008708:	4913      	ldr	r1, [pc, #76]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 800870a:	4313      	orrs	r3, r2
 800870c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800870e:	4b12      	ldr	r3, [pc, #72]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 8008710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008712:	4a11      	ldr	r2, [pc, #68]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 8008714:	f043 0310 	orr.w	r3, r3, #16
 8008718:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800871a:	4b0f      	ldr	r3, [pc, #60]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a0e      	ldr	r2, [pc, #56]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 8008720:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008724:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008726:	f7f9 f9e1 	bl	8001aec <HAL_GetTick>
 800872a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800872c:	e008      	b.n	8008740 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800872e:	f7f9 f9dd 	bl	8001aec <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	2b02      	cmp	r3, #2
 800873a:	d901      	bls.n	8008740 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e006      	b.n	800874e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008740:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <RCCEx_PLL2_Config+0x128>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0f0      	beq.n	800872e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800874c:	2300      	movs	r3, #0

}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	46020c00 	.word	0x46020c00
 800875c:	80800000 	.word	0x80800000

08008760 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008768:	4b47      	ldr	r3, [pc, #284]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a46      	ldr	r2, [pc, #280]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 800876e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008772:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008774:	f7f9 f9ba 	bl	8001aec <HAL_GetTick>
 8008778:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800877a:	e008      	b.n	800878e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800877c:	f7f9 f9b6 	bl	8001aec <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e077      	b.n	800887e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800878e:	4b3e      	ldr	r3, [pc, #248]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1f0      	bne.n	800877c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800879a:	4b3b      	ldr	r3, [pc, #236]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 800879c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80087a2:	f023 0303 	bic.w	r3, r3, #3
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6811      	ldr	r1, [r2, #0]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	6852      	ldr	r2, [r2, #4]
 80087ae:	3a01      	subs	r2, #1
 80087b0:	0212      	lsls	r2, r2, #8
 80087b2:	430a      	orrs	r2, r1
 80087b4:	4934      	ldr	r1, [pc, #208]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	630b      	str	r3, [r1, #48]	@ 0x30
 80087ba:	4b33      	ldr	r3, [pc, #204]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 80087bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087be:	4b33      	ldr	r3, [pc, #204]	@ (800888c <RCCEx_PLL3_Config+0x12c>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6892      	ldr	r2, [r2, #8]
 80087c6:	3a01      	subs	r2, #1
 80087c8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	68d2      	ldr	r2, [r2, #12]
 80087d0:	3a01      	subs	r2, #1
 80087d2:	0252      	lsls	r2, r2, #9
 80087d4:	b292      	uxth	r2, r2
 80087d6:	4311      	orrs	r1, r2
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6912      	ldr	r2, [r2, #16]
 80087dc:	3a01      	subs	r2, #1
 80087de:	0412      	lsls	r2, r2, #16
 80087e0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80087e4:	4311      	orrs	r1, r2
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6952      	ldr	r2, [r2, #20]
 80087ea:	3a01      	subs	r2, #1
 80087ec:	0612      	lsls	r2, r2, #24
 80087ee:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80087f2:	430a      	orrs	r2, r1
 80087f4:	4924      	ldr	r1, [pc, #144]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80087fa:	4b23      	ldr	r3, [pc, #140]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 80087fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087fe:	f023 020c 	bic.w	r2, r3, #12
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	4920      	ldr	r1, [pc, #128]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 8008808:	4313      	orrs	r3, r2
 800880a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800880c:	4b1e      	ldr	r3, [pc, #120]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 800880e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	491c      	ldr	r1, [pc, #112]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 8008816:	4313      	orrs	r3, r2
 8008818:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800881a:	4b1b      	ldr	r3, [pc, #108]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 800881c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881e:	4a1a      	ldr	r2, [pc, #104]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 8008820:	f023 0310 	bic.w	r3, r3, #16
 8008824:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008826:	4b18      	ldr	r3, [pc, #96]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 8008828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800882a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800882e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	69d2      	ldr	r2, [r2, #28]
 8008836:	00d2      	lsls	r2, r2, #3
 8008838:	4913      	ldr	r1, [pc, #76]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 800883a:	4313      	orrs	r3, r2
 800883c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800883e:	4b12      	ldr	r3, [pc, #72]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 8008840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008842:	4a11      	ldr	r2, [pc, #68]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 8008844:	f043 0310 	orr.w	r3, r3, #16
 8008848:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800884a:	4b0f      	ldr	r3, [pc, #60]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a0e      	ldr	r2, [pc, #56]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 8008850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008854:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008856:	f7f9 f949 	bl	8001aec <HAL_GetTick>
 800885a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800885c:	e008      	b.n	8008870 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800885e:	f7f9 f945 	bl	8001aec <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d901      	bls.n	8008870 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e006      	b.n	800887e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008870:	4b05      	ldr	r3, [pc, #20]	@ (8008888 <RCCEx_PLL3_Config+0x128>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0f0      	beq.n	800885e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	46020c00 	.word	0x46020c00
 800888c:	80800000 	.word	0x80800000

08008890 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e0fb      	b.n	8008a9a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a7f      	ldr	r2, [pc, #508]	@ (8008aa4 <HAL_SPI_Init+0x214>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d004      	beq.n	80088b6 <HAL_SPI_Init+0x26>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a7d      	ldr	r2, [pc, #500]	@ (8008aa8 <HAL_SPI_Init+0x218>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	e000      	b.n	80088b8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80088b6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a78      	ldr	r2, [pc, #480]	@ (8008aa4 <HAL_SPI_Init+0x214>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d004      	beq.n	80088d2 <HAL_SPI_Init+0x42>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a76      	ldr	r2, [pc, #472]	@ (8008aa8 <HAL_SPI_Init+0x218>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d105      	bne.n	80088de <HAL_SPI_Init+0x4e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	2b0f      	cmp	r3, #15
 80088d8:	d901      	bls.n	80088de <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e0dd      	b.n	8008a9a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f8ec 	bl	8008abc <SPI_GetPacketSize>
 80088e4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a6e      	ldr	r2, [pc, #440]	@ (8008aa4 <HAL_SPI_Init+0x214>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d004      	beq.n	80088fa <HAL_SPI_Init+0x6a>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a6c      	ldr	r2, [pc, #432]	@ (8008aa8 <HAL_SPI_Init+0x218>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d102      	bne.n	8008900 <HAL_SPI_Init+0x70>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d816      	bhi.n	800892e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008904:	4a69      	ldr	r2, [pc, #420]	@ (8008aac <HAL_SPI_Init+0x21c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00e      	beq.n	8008928 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a68      	ldr	r2, [pc, #416]	@ (8008ab0 <HAL_SPI_Init+0x220>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d009      	beq.n	8008928 <HAL_SPI_Init+0x98>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a66      	ldr	r2, [pc, #408]	@ (8008ab4 <HAL_SPI_Init+0x224>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d004      	beq.n	8008928 <HAL_SPI_Init+0x98>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a65      	ldr	r2, [pc, #404]	@ (8008ab8 <HAL_SPI_Init+0x228>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d104      	bne.n	8008932 <HAL_SPI_Init+0xa2>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b10      	cmp	r3, #16
 800892c:	d901      	bls.n	8008932 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e0b3      	b.n	8008a9a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7f8 fca4 	bl	8001294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 0201 	bic.w	r2, r2, #1
 8008962:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800896e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008978:	d119      	bne.n	80089ae <HAL_SPI_Init+0x11e>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008982:	d103      	bne.n	800898c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008988:	2b00      	cmp	r3, #0
 800898a:	d008      	beq.n	800899e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10c      	bne.n	80089ae <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800899c:	d107      	bne.n	80089ae <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80089ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00f      	beq.n	80089da <HAL_SPI_Init+0x14a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	2b06      	cmp	r3, #6
 80089c0:	d90b      	bls.n	80089da <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	e007      	b.n	80089ea <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80089e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69da      	ldr	r2, [r3, #28]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f2:	431a      	orrs	r2, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	431a      	orrs	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fc:	ea42 0103 	orr.w	r1, r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68da      	ldr	r2, [r3, #12]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	431a      	orrs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a56:	ea42 0103 	orr.w	r1, r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	46002000 	.word	0x46002000
 8008aa8:	56002000 	.word	0x56002000
 8008aac:	40013000 	.word	0x40013000
 8008ab0:	50013000 	.word	0x50013000
 8008ab4:	40003800 	.word	0x40003800
 8008ab8:	50003800 	.word	0x50003800

08008abc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	3307      	adds	r3, #7
 8008ada:	08db      	lsrs	r3, r3, #3
 8008adc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	fb02 f303 	mul.w	r3, r2, r3
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d12e      	bne.n	8008b66 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008b12:	2302      	movs	r3, #2
 8008b14:	e028      	b.n	8008b68 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2202      	movs	r2, #2
 8008b22:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 0201 	bic.w	r2, r2, #1
 8008b34:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008b42:	ea42 0103 	orr.w	r1, r2, r3
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	e000      	b.n	8008b68 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
  }
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e049      	b.n	8008c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7f8 fc0a 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f000 fcda 	bl	800956c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e049      	b.n	8008cc8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d106      	bne.n	8008c4e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f841 	bl	8008cd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2202      	movs	r2, #2
 8008c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4610      	mov	r0, r2
 8008c62:	f000 fc83 	bl	800956c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <HAL_TIM_OC_Start+0x24>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	bf14      	ite	ne
 8008d00:	2301      	movne	r3, #1
 8008d02:	2300      	moveq	r3, #0
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	e03c      	b.n	8008d82 <HAL_TIM_OC_Start+0x9e>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d109      	bne.n	8008d22 <HAL_TIM_OC_Start+0x3e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	bf14      	ite	ne
 8008d1a:	2301      	movne	r3, #1
 8008d1c:	2300      	moveq	r3, #0
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	e02f      	b.n	8008d82 <HAL_TIM_OC_Start+0x9e>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b08      	cmp	r3, #8
 8008d26:	d109      	bne.n	8008d3c <HAL_TIM_OC_Start+0x58>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	bf14      	ite	ne
 8008d34:	2301      	movne	r3, #1
 8008d36:	2300      	moveq	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	e022      	b.n	8008d82 <HAL_TIM_OC_Start+0x9e>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b0c      	cmp	r3, #12
 8008d40:	d109      	bne.n	8008d56 <HAL_TIM_OC_Start+0x72>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	bf14      	ite	ne
 8008d4e:	2301      	movne	r3, #1
 8008d50:	2300      	moveq	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	e015      	b.n	8008d82 <HAL_TIM_OC_Start+0x9e>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b10      	cmp	r3, #16
 8008d5a:	d109      	bne.n	8008d70 <HAL_TIM_OC_Start+0x8c>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	bf14      	ite	ne
 8008d68:	2301      	movne	r3, #1
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	e008      	b.n	8008d82 <HAL_TIM_OC_Start+0x9e>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	bf14      	ite	ne
 8008d7c:	2301      	movne	r3, #1
 8008d7e:	2300      	moveq	r3, #0
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e0d8      	b.n	8008f3c <HAL_TIM_OC_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d104      	bne.n	8008d9a <HAL_TIM_OC_Start+0xb6>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d98:	e023      	b.n	8008de2 <HAL_TIM_OC_Start+0xfe>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d104      	bne.n	8008daa <HAL_TIM_OC_Start+0xc6>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008da8:	e01b      	b.n	8008de2 <HAL_TIM_OC_Start+0xfe>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d104      	bne.n	8008dba <HAL_TIM_OC_Start+0xd6>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2202      	movs	r2, #2
 8008db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008db8:	e013      	b.n	8008de2 <HAL_TIM_OC_Start+0xfe>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b0c      	cmp	r3, #12
 8008dbe:	d104      	bne.n	8008dca <HAL_TIM_OC_Start+0xe6>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008dc8:	e00b      	b.n	8008de2 <HAL_TIM_OC_Start+0xfe>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b10      	cmp	r3, #16
 8008dce:	d104      	bne.n	8008dda <HAL_TIM_OC_Start+0xf6>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dd8:	e003      	b.n	8008de2 <HAL_TIM_OC_Start+0xfe>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2202      	movs	r2, #2
 8008dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2201      	movs	r2, #1
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 f936 	bl	800a05c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a53      	ldr	r2, [pc, #332]	@ (8008f44 <HAL_TIM_OC_Start+0x260>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d02c      	beq.n	8008e54 <HAL_TIM_OC_Start+0x170>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a52      	ldr	r2, [pc, #328]	@ (8008f48 <HAL_TIM_OC_Start+0x264>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d027      	beq.n	8008e54 <HAL_TIM_OC_Start+0x170>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a50      	ldr	r2, [pc, #320]	@ (8008f4c <HAL_TIM_OC_Start+0x268>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d022      	beq.n	8008e54 <HAL_TIM_OC_Start+0x170>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a4f      	ldr	r2, [pc, #316]	@ (8008f50 <HAL_TIM_OC_Start+0x26c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d01d      	beq.n	8008e54 <HAL_TIM_OC_Start+0x170>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a4d      	ldr	r2, [pc, #308]	@ (8008f54 <HAL_TIM_OC_Start+0x270>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d018      	beq.n	8008e54 <HAL_TIM_OC_Start+0x170>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a4c      	ldr	r2, [pc, #304]	@ (8008f58 <HAL_TIM_OC_Start+0x274>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d013      	beq.n	8008e54 <HAL_TIM_OC_Start+0x170>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a4a      	ldr	r2, [pc, #296]	@ (8008f5c <HAL_TIM_OC_Start+0x278>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d00e      	beq.n	8008e54 <HAL_TIM_OC_Start+0x170>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a49      	ldr	r2, [pc, #292]	@ (8008f60 <HAL_TIM_OC_Start+0x27c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d009      	beq.n	8008e54 <HAL_TIM_OC_Start+0x170>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a47      	ldr	r2, [pc, #284]	@ (8008f64 <HAL_TIM_OC_Start+0x280>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d004      	beq.n	8008e54 <HAL_TIM_OC_Start+0x170>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a46      	ldr	r2, [pc, #280]	@ (8008f68 <HAL_TIM_OC_Start+0x284>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d101      	bne.n	8008e58 <HAL_TIM_OC_Start+0x174>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e000      	b.n	8008e5a <HAL_TIM_OC_Start+0x176>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d007      	beq.n	8008e6e <HAL_TIM_OC_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a34      	ldr	r2, [pc, #208]	@ (8008f44 <HAL_TIM_OC_Start+0x260>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d040      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a32      	ldr	r2, [pc, #200]	@ (8008f48 <HAL_TIM_OC_Start+0x264>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d03b      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e8a:	d036      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e94:	d031      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a34      	ldr	r2, [pc, #208]	@ (8008f6c <HAL_TIM_OC_Start+0x288>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d02c      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a32      	ldr	r2, [pc, #200]	@ (8008f70 <HAL_TIM_OC_Start+0x28c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d027      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a31      	ldr	r2, [pc, #196]	@ (8008f74 <HAL_TIM_OC_Start+0x290>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d022      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a2f      	ldr	r2, [pc, #188]	@ (8008f78 <HAL_TIM_OC_Start+0x294>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d01d      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8008f7c <HAL_TIM_OC_Start+0x298>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d018      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8008f80 <HAL_TIM_OC_Start+0x29c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d013      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8008f4c <HAL_TIM_OC_Start+0x268>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00e      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8008f50 <HAL_TIM_OC_Start+0x26c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d009      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a1a      	ldr	r2, [pc, #104]	@ (8008f54 <HAL_TIM_OC_Start+0x270>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d004      	beq.n	8008efa <HAL_TIM_OC_Start+0x216>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a18      	ldr	r2, [pc, #96]	@ (8008f58 <HAL_TIM_OC_Start+0x274>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d115      	bne.n	8008f26 <HAL_TIM_OC_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	4b20      	ldr	r3, [pc, #128]	@ (8008f84 <HAL_TIM_OC_Start+0x2a0>)
 8008f02:	4013      	ands	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b06      	cmp	r3, #6
 8008f0a:	d015      	beq.n	8008f38 <HAL_TIM_OC_Start+0x254>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f12:	d011      	beq.n	8008f38 <HAL_TIM_OC_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f042 0201 	orr.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f24:	e008      	b.n	8008f38 <HAL_TIM_OC_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f042 0201 	orr.w	r2, r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	e000      	b.n	8008f3a <HAL_TIM_OC_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	40012c00 	.word	0x40012c00
 8008f48:	50012c00 	.word	0x50012c00
 8008f4c:	40013400 	.word	0x40013400
 8008f50:	50013400 	.word	0x50013400
 8008f54:	40014000 	.word	0x40014000
 8008f58:	50014000 	.word	0x50014000
 8008f5c:	40014400 	.word	0x40014400
 8008f60:	50014400 	.word	0x50014400
 8008f64:	40014800 	.word	0x40014800
 8008f68:	50014800 	.word	0x50014800
 8008f6c:	40000400 	.word	0x40000400
 8008f70:	50000400 	.word	0x50000400
 8008f74:	40000800 	.word	0x40000800
 8008f78:	50000800 	.word	0x50000800
 8008f7c:	40000c00 	.word	0x40000c00
 8008f80:	50000c00 	.word	0x50000c00
 8008f84:	00010007 	.word	0x00010007

08008f88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e049      	b.n	800902e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d106      	bne.n	8008fb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f841 	bl	8009036 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	f000 fad0 	bl	800956c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
	...

0800904c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009062:	2b01      	cmp	r3, #1
 8009064:	d101      	bne.n	800906a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009066:	2302      	movs	r3, #2
 8009068:	e066      	b.n	8009138 <HAL_TIM_OC_ConfigChannel+0xec>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b14      	cmp	r3, #20
 8009076:	d857      	bhi.n	8009128 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009078:	a201      	add	r2, pc, #4	@ (adr r2, 8009080 <HAL_TIM_OC_ConfigChannel+0x34>)
 800907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907e:	bf00      	nop
 8009080:	080090d5 	.word	0x080090d5
 8009084:	08009129 	.word	0x08009129
 8009088:	08009129 	.word	0x08009129
 800908c:	08009129 	.word	0x08009129
 8009090:	080090e3 	.word	0x080090e3
 8009094:	08009129 	.word	0x08009129
 8009098:	08009129 	.word	0x08009129
 800909c:	08009129 	.word	0x08009129
 80090a0:	080090f1 	.word	0x080090f1
 80090a4:	08009129 	.word	0x08009129
 80090a8:	08009129 	.word	0x08009129
 80090ac:	08009129 	.word	0x08009129
 80090b0:	080090ff 	.word	0x080090ff
 80090b4:	08009129 	.word	0x08009129
 80090b8:	08009129 	.word	0x08009129
 80090bc:	08009129 	.word	0x08009129
 80090c0:	0800910d 	.word	0x0800910d
 80090c4:	08009129 	.word	0x08009129
 80090c8:	08009129 	.word	0x08009129
 80090cc:	08009129 	.word	0x08009129
 80090d0:	0800911b 	.word	0x0800911b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fb4c 	bl	8009778 <TIM_OC1_SetConfig>
      break;
 80090e0:	e025      	b.n	800912e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fc07 	bl	80098fc <TIM_OC2_SetConfig>
      break;
 80090ee:	e01e      	b.n	800912e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fcb0 	bl	8009a5c <TIM_OC3_SetConfig>
      break;
 80090fc:	e017      	b.n	800912e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68b9      	ldr	r1, [r7, #8]
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fd57 	bl	8009bb8 <TIM_OC4_SetConfig>
      break;
 800910a:	e010      	b.n	800912e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68b9      	ldr	r1, [r7, #8]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fe00 	bl	8009d18 <TIM_OC5_SetConfig>
      break;
 8009118:	e009      	b.n	800912e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fe7b 	bl	8009e1c <TIM_OC6_SetConfig>
      break;
 8009126:	e002      	b.n	800912e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	75fb      	strb	r3, [r7, #23]
      break;
 800912c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009136:	7dfb      	ldrb	r3, [r7, #23]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800915a:	2302      	movs	r3, #2
 800915c:	e0ff      	b.n	800935e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b14      	cmp	r3, #20
 800916a:	f200 80f0 	bhi.w	800934e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800916e:	a201      	add	r2, pc, #4	@ (adr r2, 8009174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	080091c9 	.word	0x080091c9
 8009178:	0800934f 	.word	0x0800934f
 800917c:	0800934f 	.word	0x0800934f
 8009180:	0800934f 	.word	0x0800934f
 8009184:	08009209 	.word	0x08009209
 8009188:	0800934f 	.word	0x0800934f
 800918c:	0800934f 	.word	0x0800934f
 8009190:	0800934f 	.word	0x0800934f
 8009194:	0800924b 	.word	0x0800924b
 8009198:	0800934f 	.word	0x0800934f
 800919c:	0800934f 	.word	0x0800934f
 80091a0:	0800934f 	.word	0x0800934f
 80091a4:	0800928b 	.word	0x0800928b
 80091a8:	0800934f 	.word	0x0800934f
 80091ac:	0800934f 	.word	0x0800934f
 80091b0:	0800934f 	.word	0x0800934f
 80091b4:	080092cd 	.word	0x080092cd
 80091b8:	0800934f 	.word	0x0800934f
 80091bc:	0800934f 	.word	0x0800934f
 80091c0:	0800934f 	.word	0x0800934f
 80091c4:	0800930d 	.word	0x0800930d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fad2 	bl	8009778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0208 	orr.w	r2, r2, #8
 80091e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0204 	bic.w	r2, r2, #4
 80091f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6999      	ldr	r1, [r3, #24]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	619a      	str	r2, [r3, #24]
      break;
 8009206:	e0a5      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fb74 	bl	80098fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	699a      	ldr	r2, [r3, #24]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6999      	ldr	r1, [r3, #24]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	021a      	lsls	r2, r3, #8
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	619a      	str	r2, [r3, #24]
      break;
 8009248:	e084      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68b9      	ldr	r1, [r7, #8]
 8009250:	4618      	mov	r0, r3
 8009252:	f000 fc03 	bl	8009a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69da      	ldr	r2, [r3, #28]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f042 0208 	orr.w	r2, r2, #8
 8009264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69da      	ldr	r2, [r3, #28]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 0204 	bic.w	r2, r2, #4
 8009274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	69d9      	ldr	r1, [r3, #28]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	61da      	str	r2, [r3, #28]
      break;
 8009288:	e064      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fc91 	bl	8009bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69da      	ldr	r2, [r3, #28]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69d9      	ldr	r1, [r3, #28]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	021a      	lsls	r2, r3, #8
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	61da      	str	r2, [r3, #28]
      break;
 80092ca:	e043      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fd20 	bl	8009d18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f042 0208 	orr.w	r2, r2, #8
 80092e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0204 	bic.w	r2, r2, #4
 80092f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	691a      	ldr	r2, [r3, #16]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800930a:	e023      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fd82 	bl	8009e1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009326:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009336:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	021a      	lsls	r2, r3, #8
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800934c:	e002      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	75fb      	strb	r3, [r7, #23]
      break;
 8009352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop

08009368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800937c:	2b01      	cmp	r3, #1
 800937e:	d101      	bne.n	8009384 <HAL_TIM_ConfigClockSource+0x1c>
 8009380:	2302      	movs	r3, #2
 8009382:	e0e6      	b.n	8009552 <HAL_TIM_ConfigClockSource+0x1ea>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80093a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80093a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a67      	ldr	r2, [pc, #412]	@ (800955c <HAL_TIM_ConfigClockSource+0x1f4>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	f000 80b1 	beq.w	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 80093c4:	4a65      	ldr	r2, [pc, #404]	@ (800955c <HAL_TIM_ConfigClockSource+0x1f4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	f200 80b6 	bhi.w	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 80093cc:	4a64      	ldr	r2, [pc, #400]	@ (8009560 <HAL_TIM_ConfigClockSource+0x1f8>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	f000 80a9 	beq.w	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 80093d4:	4a62      	ldr	r2, [pc, #392]	@ (8009560 <HAL_TIM_ConfigClockSource+0x1f8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	f200 80ae 	bhi.w	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 80093dc:	4a61      	ldr	r2, [pc, #388]	@ (8009564 <HAL_TIM_ConfigClockSource+0x1fc>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	f000 80a1 	beq.w	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 80093e4:	4a5f      	ldr	r2, [pc, #380]	@ (8009564 <HAL_TIM_ConfigClockSource+0x1fc>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	f200 80a6 	bhi.w	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 80093ec:	4a5e      	ldr	r2, [pc, #376]	@ (8009568 <HAL_TIM_ConfigClockSource+0x200>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	f000 8099 	beq.w	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 80093f4:	4a5c      	ldr	r2, [pc, #368]	@ (8009568 <HAL_TIM_ConfigClockSource+0x200>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	f200 809e 	bhi.w	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 80093fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009400:	f000 8091 	beq.w	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 8009404:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009408:	f200 8096 	bhi.w	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 800940c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009410:	f000 8089 	beq.w	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 8009414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009418:	f200 808e 	bhi.w	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 800941c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009420:	d03e      	beq.n	80094a0 <HAL_TIM_ConfigClockSource+0x138>
 8009422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009426:	f200 8087 	bhi.w	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 800942a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800942e:	f000 8086 	beq.w	800953e <HAL_TIM_ConfigClockSource+0x1d6>
 8009432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009436:	d87f      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 8009438:	2b70      	cmp	r3, #112	@ 0x70
 800943a:	d01a      	beq.n	8009472 <HAL_TIM_ConfigClockSource+0x10a>
 800943c:	2b70      	cmp	r3, #112	@ 0x70
 800943e:	d87b      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 8009440:	2b60      	cmp	r3, #96	@ 0x60
 8009442:	d050      	beq.n	80094e6 <HAL_TIM_ConfigClockSource+0x17e>
 8009444:	2b60      	cmp	r3, #96	@ 0x60
 8009446:	d877      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 8009448:	2b50      	cmp	r3, #80	@ 0x50
 800944a:	d03c      	beq.n	80094c6 <HAL_TIM_ConfigClockSource+0x15e>
 800944c:	2b50      	cmp	r3, #80	@ 0x50
 800944e:	d873      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 8009450:	2b40      	cmp	r3, #64	@ 0x40
 8009452:	d058      	beq.n	8009506 <HAL_TIM_ConfigClockSource+0x19e>
 8009454:	2b40      	cmp	r3, #64	@ 0x40
 8009456:	d86f      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 8009458:	2b30      	cmp	r3, #48	@ 0x30
 800945a:	d064      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 800945c:	2b30      	cmp	r3, #48	@ 0x30
 800945e:	d86b      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 8009460:	2b20      	cmp	r3, #32
 8009462:	d060      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 8009464:	2b20      	cmp	r3, #32
 8009466:	d867      	bhi.n	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
 8009468:	2b00      	cmp	r3, #0
 800946a:	d05c      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 800946c:	2b10      	cmp	r3, #16
 800946e:	d05a      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0x1be>
 8009470:	e062      	b.n	8009538 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009482:	f000 fdcb 	bl	800a01c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	609a      	str	r2, [r3, #8]
      break;
 800949e:	e04f      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094b0:	f000 fdb4 	bl	800a01c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094c2:	609a      	str	r2, [r3, #8]
      break;
 80094c4:	e03c      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094d2:	461a      	mov	r2, r3
 80094d4:	f000 fd26 	bl	8009f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2150      	movs	r1, #80	@ 0x50
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fd7f 	bl	8009fe2 <TIM_ITRx_SetConfig>
      break;
 80094e4:	e02c      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094f2:	461a      	mov	r2, r3
 80094f4:	f000 fd45 	bl	8009f82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2160      	movs	r1, #96	@ 0x60
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fd6f 	bl	8009fe2 <TIM_ITRx_SetConfig>
      break;
 8009504:	e01c      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009512:	461a      	mov	r2, r3
 8009514:	f000 fd06 	bl	8009f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2140      	movs	r1, #64	@ 0x40
 800951e:	4618      	mov	r0, r3
 8009520:	f000 fd5f 	bl	8009fe2 <TIM_ITRx_SetConfig>
      break;
 8009524:	e00c      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4619      	mov	r1, r3
 8009530:	4610      	mov	r0, r2
 8009532:	f000 fd56 	bl	8009fe2 <TIM_ITRx_SetConfig>
      break;
 8009536:	e003      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	73fb      	strb	r3, [r7, #15]
      break;
 800953c:	e000      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800953e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	00100070 	.word	0x00100070
 8009560:	00100040 	.word	0x00100040
 8009564:	00100030 	.word	0x00100030
 8009568:	00100020 	.word	0x00100020

0800956c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a6e      	ldr	r2, [pc, #440]	@ (8009738 <TIM_Base_SetConfig+0x1cc>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d02b      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a6d      	ldr	r2, [pc, #436]	@ (800973c <TIM_Base_SetConfig+0x1d0>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d027      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009592:	d023      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800959a:	d01f      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a68      	ldr	r2, [pc, #416]	@ (8009740 <TIM_Base_SetConfig+0x1d4>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d01b      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a67      	ldr	r2, [pc, #412]	@ (8009744 <TIM_Base_SetConfig+0x1d8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d017      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a66      	ldr	r2, [pc, #408]	@ (8009748 <TIM_Base_SetConfig+0x1dc>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d013      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a65      	ldr	r2, [pc, #404]	@ (800974c <TIM_Base_SetConfig+0x1e0>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00f      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a64      	ldr	r2, [pc, #400]	@ (8009750 <TIM_Base_SetConfig+0x1e4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d00b      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a63      	ldr	r2, [pc, #396]	@ (8009754 <TIM_Base_SetConfig+0x1e8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d007      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a62      	ldr	r2, [pc, #392]	@ (8009758 <TIM_Base_SetConfig+0x1ec>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d003      	beq.n	80095dc <TIM_Base_SetConfig+0x70>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a61      	ldr	r2, [pc, #388]	@ (800975c <TIM_Base_SetConfig+0x1f0>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d108      	bne.n	80095ee <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a51      	ldr	r2, [pc, #324]	@ (8009738 <TIM_Base_SetConfig+0x1cc>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d043      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a50      	ldr	r2, [pc, #320]	@ (800973c <TIM_Base_SetConfig+0x1d0>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d03f      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009604:	d03b      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800960c:	d037      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a4b      	ldr	r2, [pc, #300]	@ (8009740 <TIM_Base_SetConfig+0x1d4>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d033      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a4a      	ldr	r2, [pc, #296]	@ (8009744 <TIM_Base_SetConfig+0x1d8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d02f      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a49      	ldr	r2, [pc, #292]	@ (8009748 <TIM_Base_SetConfig+0x1dc>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d02b      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a48      	ldr	r2, [pc, #288]	@ (800974c <TIM_Base_SetConfig+0x1e0>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d027      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a47      	ldr	r2, [pc, #284]	@ (8009750 <TIM_Base_SetConfig+0x1e4>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d023      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a46      	ldr	r2, [pc, #280]	@ (8009754 <TIM_Base_SetConfig+0x1e8>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d01f      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a45      	ldr	r2, [pc, #276]	@ (8009758 <TIM_Base_SetConfig+0x1ec>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d01b      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a44      	ldr	r2, [pc, #272]	@ (800975c <TIM_Base_SetConfig+0x1f0>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d017      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a43      	ldr	r2, [pc, #268]	@ (8009760 <TIM_Base_SetConfig+0x1f4>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d013      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a42      	ldr	r2, [pc, #264]	@ (8009764 <TIM_Base_SetConfig+0x1f8>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d00f      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a41      	ldr	r2, [pc, #260]	@ (8009768 <TIM_Base_SetConfig+0x1fc>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d00b      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a40      	ldr	r2, [pc, #256]	@ (800976c <TIM_Base_SetConfig+0x200>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d007      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a3f      	ldr	r2, [pc, #252]	@ (8009770 <TIM_Base_SetConfig+0x204>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d003      	beq.n	800967e <TIM_Base_SetConfig+0x112>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a3e      	ldr	r2, [pc, #248]	@ (8009774 <TIM_Base_SetConfig+0x208>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d108      	bne.n	8009690 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4313      	orrs	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a20      	ldr	r2, [pc, #128]	@ (8009738 <TIM_Base_SetConfig+0x1cc>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d023      	beq.n	8009704 <TIM_Base_SetConfig+0x198>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a1f      	ldr	r2, [pc, #124]	@ (800973c <TIM_Base_SetConfig+0x1d0>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d01f      	beq.n	8009704 <TIM_Base_SetConfig+0x198>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a24      	ldr	r2, [pc, #144]	@ (8009758 <TIM_Base_SetConfig+0x1ec>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d01b      	beq.n	8009704 <TIM_Base_SetConfig+0x198>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a23      	ldr	r2, [pc, #140]	@ (800975c <TIM_Base_SetConfig+0x1f0>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d017      	beq.n	8009704 <TIM_Base_SetConfig+0x198>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a22      	ldr	r2, [pc, #136]	@ (8009760 <TIM_Base_SetConfig+0x1f4>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d013      	beq.n	8009704 <TIM_Base_SetConfig+0x198>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a21      	ldr	r2, [pc, #132]	@ (8009764 <TIM_Base_SetConfig+0x1f8>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d00f      	beq.n	8009704 <TIM_Base_SetConfig+0x198>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a20      	ldr	r2, [pc, #128]	@ (8009768 <TIM_Base_SetConfig+0x1fc>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d00b      	beq.n	8009704 <TIM_Base_SetConfig+0x198>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a1f      	ldr	r2, [pc, #124]	@ (800976c <TIM_Base_SetConfig+0x200>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d007      	beq.n	8009704 <TIM_Base_SetConfig+0x198>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009770 <TIM_Base_SetConfig+0x204>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d003      	beq.n	8009704 <TIM_Base_SetConfig+0x198>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009774 <TIM_Base_SetConfig+0x208>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d103      	bne.n	800970c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b01      	cmp	r3, #1
 800971c:	d105      	bne.n	800972a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f023 0201 	bic.w	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	611a      	str	r2, [r3, #16]
  }
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	40012c00 	.word	0x40012c00
 800973c:	50012c00 	.word	0x50012c00
 8009740:	40000400 	.word	0x40000400
 8009744:	50000400 	.word	0x50000400
 8009748:	40000800 	.word	0x40000800
 800974c:	50000800 	.word	0x50000800
 8009750:	40000c00 	.word	0x40000c00
 8009754:	50000c00 	.word	0x50000c00
 8009758:	40013400 	.word	0x40013400
 800975c:	50013400 	.word	0x50013400
 8009760:	40014000 	.word	0x40014000
 8009764:	50014000 	.word	0x50014000
 8009768:	40014400 	.word	0x40014400
 800976c:	50014400 	.word	0x50014400
 8009770:	40014800 	.word	0x40014800
 8009774:	50014800 	.word	0x50014800

08009778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a1b      	ldr	r3, [r3, #32]
 800978c:	f023 0201 	bic.w	r2, r3, #1
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 0303 	bic.w	r3, r3, #3
 80097b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f023 0302 	bic.w	r3, r3, #2
 80097c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a40      	ldr	r2, [pc, #256]	@ (80098d4 <TIM_OC1_SetConfig+0x15c>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d023      	beq.n	8009820 <TIM_OC1_SetConfig+0xa8>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a3f      	ldr	r2, [pc, #252]	@ (80098d8 <TIM_OC1_SetConfig+0x160>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d01f      	beq.n	8009820 <TIM_OC1_SetConfig+0xa8>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a3e      	ldr	r2, [pc, #248]	@ (80098dc <TIM_OC1_SetConfig+0x164>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d01b      	beq.n	8009820 <TIM_OC1_SetConfig+0xa8>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a3d      	ldr	r2, [pc, #244]	@ (80098e0 <TIM_OC1_SetConfig+0x168>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d017      	beq.n	8009820 <TIM_OC1_SetConfig+0xa8>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a3c      	ldr	r2, [pc, #240]	@ (80098e4 <TIM_OC1_SetConfig+0x16c>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d013      	beq.n	8009820 <TIM_OC1_SetConfig+0xa8>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a3b      	ldr	r2, [pc, #236]	@ (80098e8 <TIM_OC1_SetConfig+0x170>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00f      	beq.n	8009820 <TIM_OC1_SetConfig+0xa8>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a3a      	ldr	r2, [pc, #232]	@ (80098ec <TIM_OC1_SetConfig+0x174>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00b      	beq.n	8009820 <TIM_OC1_SetConfig+0xa8>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a39      	ldr	r2, [pc, #228]	@ (80098f0 <TIM_OC1_SetConfig+0x178>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d007      	beq.n	8009820 <TIM_OC1_SetConfig+0xa8>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a38      	ldr	r2, [pc, #224]	@ (80098f4 <TIM_OC1_SetConfig+0x17c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <TIM_OC1_SetConfig+0xa8>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a37      	ldr	r2, [pc, #220]	@ (80098f8 <TIM_OC1_SetConfig+0x180>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d10c      	bne.n	800983a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f023 0308 	bic.w	r3, r3, #8
 8009826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 0304 	bic.w	r3, r3, #4
 8009838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a25      	ldr	r2, [pc, #148]	@ (80098d4 <TIM_OC1_SetConfig+0x15c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d023      	beq.n	800988a <TIM_OC1_SetConfig+0x112>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a24      	ldr	r2, [pc, #144]	@ (80098d8 <TIM_OC1_SetConfig+0x160>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d01f      	beq.n	800988a <TIM_OC1_SetConfig+0x112>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a23      	ldr	r2, [pc, #140]	@ (80098dc <TIM_OC1_SetConfig+0x164>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d01b      	beq.n	800988a <TIM_OC1_SetConfig+0x112>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a22      	ldr	r2, [pc, #136]	@ (80098e0 <TIM_OC1_SetConfig+0x168>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d017      	beq.n	800988a <TIM_OC1_SetConfig+0x112>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a21      	ldr	r2, [pc, #132]	@ (80098e4 <TIM_OC1_SetConfig+0x16c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d013      	beq.n	800988a <TIM_OC1_SetConfig+0x112>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a20      	ldr	r2, [pc, #128]	@ (80098e8 <TIM_OC1_SetConfig+0x170>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00f      	beq.n	800988a <TIM_OC1_SetConfig+0x112>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a1f      	ldr	r2, [pc, #124]	@ (80098ec <TIM_OC1_SetConfig+0x174>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00b      	beq.n	800988a <TIM_OC1_SetConfig+0x112>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a1e      	ldr	r2, [pc, #120]	@ (80098f0 <TIM_OC1_SetConfig+0x178>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d007      	beq.n	800988a <TIM_OC1_SetConfig+0x112>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a1d      	ldr	r2, [pc, #116]	@ (80098f4 <TIM_OC1_SetConfig+0x17c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d003      	beq.n	800988a <TIM_OC1_SetConfig+0x112>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a1c      	ldr	r2, [pc, #112]	@ (80098f8 <TIM_OC1_SetConfig+0x180>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d111      	bne.n	80098ae <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	621a      	str	r2, [r3, #32]
}
 80098c8:	bf00      	nop
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	40012c00 	.word	0x40012c00
 80098d8:	50012c00 	.word	0x50012c00
 80098dc:	40013400 	.word	0x40013400
 80098e0:	50013400 	.word	0x50013400
 80098e4:	40014000 	.word	0x40014000
 80098e8:	50014000 	.word	0x50014000
 80098ec:	40014400 	.word	0x40014400
 80098f0:	50014400 	.word	0x50014400
 80098f4:	40014800 	.word	0x40014800
 80098f8:	50014800 	.word	0x50014800

080098fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	f023 0210 	bic.w	r2, r3, #16
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800992a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800992e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4313      	orrs	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f023 0320 	bic.w	r3, r3, #32
 800994a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	011b      	lsls	r3, r3, #4
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	4313      	orrs	r3, r2
 8009956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a36      	ldr	r2, [pc, #216]	@ (8009a34 <TIM_OC2_SetConfig+0x138>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d00b      	beq.n	8009978 <TIM_OC2_SetConfig+0x7c>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a35      	ldr	r2, [pc, #212]	@ (8009a38 <TIM_OC2_SetConfig+0x13c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d007      	beq.n	8009978 <TIM_OC2_SetConfig+0x7c>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a34      	ldr	r2, [pc, #208]	@ (8009a3c <TIM_OC2_SetConfig+0x140>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d003      	beq.n	8009978 <TIM_OC2_SetConfig+0x7c>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a33      	ldr	r2, [pc, #204]	@ (8009a40 <TIM_OC2_SetConfig+0x144>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d10d      	bne.n	8009994 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800997e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	011b      	lsls	r3, r3, #4
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	4313      	orrs	r3, r2
 800998a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009992:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a27      	ldr	r2, [pc, #156]	@ (8009a34 <TIM_OC2_SetConfig+0x138>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d023      	beq.n	80099e4 <TIM_OC2_SetConfig+0xe8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a26      	ldr	r2, [pc, #152]	@ (8009a38 <TIM_OC2_SetConfig+0x13c>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d01f      	beq.n	80099e4 <TIM_OC2_SetConfig+0xe8>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a25      	ldr	r2, [pc, #148]	@ (8009a3c <TIM_OC2_SetConfig+0x140>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d01b      	beq.n	80099e4 <TIM_OC2_SetConfig+0xe8>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a24      	ldr	r2, [pc, #144]	@ (8009a40 <TIM_OC2_SetConfig+0x144>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d017      	beq.n	80099e4 <TIM_OC2_SetConfig+0xe8>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a23      	ldr	r2, [pc, #140]	@ (8009a44 <TIM_OC2_SetConfig+0x148>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d013      	beq.n	80099e4 <TIM_OC2_SetConfig+0xe8>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a22      	ldr	r2, [pc, #136]	@ (8009a48 <TIM_OC2_SetConfig+0x14c>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d00f      	beq.n	80099e4 <TIM_OC2_SetConfig+0xe8>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a21      	ldr	r2, [pc, #132]	@ (8009a4c <TIM_OC2_SetConfig+0x150>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d00b      	beq.n	80099e4 <TIM_OC2_SetConfig+0xe8>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a20      	ldr	r2, [pc, #128]	@ (8009a50 <TIM_OC2_SetConfig+0x154>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d007      	beq.n	80099e4 <TIM_OC2_SetConfig+0xe8>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009a54 <TIM_OC2_SetConfig+0x158>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d003      	beq.n	80099e4 <TIM_OC2_SetConfig+0xe8>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a1e      	ldr	r2, [pc, #120]	@ (8009a58 <TIM_OC2_SetConfig+0x15c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d113      	bne.n	8009a0c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	621a      	str	r2, [r3, #32]
}
 8009a26:	bf00      	nop
 8009a28:	371c      	adds	r7, #28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	40012c00 	.word	0x40012c00
 8009a38:	50012c00 	.word	0x50012c00
 8009a3c:	40013400 	.word	0x40013400
 8009a40:	50013400 	.word	0x50013400
 8009a44:	40014000 	.word	0x40014000
 8009a48:	50014000 	.word	0x50014000
 8009a4c:	40014400 	.word	0x40014400
 8009a50:	50014400 	.word	0x50014400
 8009a54:	40014800 	.word	0x40014800
 8009a58:	50014800 	.word	0x50014800

08009a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 0303 	bic.w	r3, r3, #3
 8009a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	021b      	lsls	r3, r3, #8
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a35      	ldr	r2, [pc, #212]	@ (8009b90 <TIM_OC3_SetConfig+0x134>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d00b      	beq.n	8009ad6 <TIM_OC3_SetConfig+0x7a>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a34      	ldr	r2, [pc, #208]	@ (8009b94 <TIM_OC3_SetConfig+0x138>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d007      	beq.n	8009ad6 <TIM_OC3_SetConfig+0x7a>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a33      	ldr	r2, [pc, #204]	@ (8009b98 <TIM_OC3_SetConfig+0x13c>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d003      	beq.n	8009ad6 <TIM_OC3_SetConfig+0x7a>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a32      	ldr	r2, [pc, #200]	@ (8009b9c <TIM_OC3_SetConfig+0x140>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d10d      	bne.n	8009af2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	021b      	lsls	r3, r3, #8
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a26      	ldr	r2, [pc, #152]	@ (8009b90 <TIM_OC3_SetConfig+0x134>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d023      	beq.n	8009b42 <TIM_OC3_SetConfig+0xe6>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a25      	ldr	r2, [pc, #148]	@ (8009b94 <TIM_OC3_SetConfig+0x138>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d01f      	beq.n	8009b42 <TIM_OC3_SetConfig+0xe6>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a24      	ldr	r2, [pc, #144]	@ (8009b98 <TIM_OC3_SetConfig+0x13c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d01b      	beq.n	8009b42 <TIM_OC3_SetConfig+0xe6>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a23      	ldr	r2, [pc, #140]	@ (8009b9c <TIM_OC3_SetConfig+0x140>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d017      	beq.n	8009b42 <TIM_OC3_SetConfig+0xe6>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a22      	ldr	r2, [pc, #136]	@ (8009ba0 <TIM_OC3_SetConfig+0x144>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d013      	beq.n	8009b42 <TIM_OC3_SetConfig+0xe6>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a21      	ldr	r2, [pc, #132]	@ (8009ba4 <TIM_OC3_SetConfig+0x148>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d00f      	beq.n	8009b42 <TIM_OC3_SetConfig+0xe6>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a20      	ldr	r2, [pc, #128]	@ (8009ba8 <TIM_OC3_SetConfig+0x14c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d00b      	beq.n	8009b42 <TIM_OC3_SetConfig+0xe6>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8009bac <TIM_OC3_SetConfig+0x150>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d007      	beq.n	8009b42 <TIM_OC3_SetConfig+0xe6>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a1e      	ldr	r2, [pc, #120]	@ (8009bb0 <TIM_OC3_SetConfig+0x154>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d003      	beq.n	8009b42 <TIM_OC3_SetConfig+0xe6>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009bb4 <TIM_OC3_SetConfig+0x158>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d113      	bne.n	8009b6a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	011b      	lsls	r3, r3, #4
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	621a      	str	r2, [r3, #32]
}
 8009b84:	bf00      	nop
 8009b86:	371c      	adds	r7, #28
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	40012c00 	.word	0x40012c00
 8009b94:	50012c00 	.word	0x50012c00
 8009b98:	40013400 	.word	0x40013400
 8009b9c:	50013400 	.word	0x50013400
 8009ba0:	40014000 	.word	0x40014000
 8009ba4:	50014000 	.word	0x50014000
 8009ba8:	40014400 	.word	0x40014400
 8009bac:	50014400 	.word	0x50014400
 8009bb0:	40014800 	.word	0x40014800
 8009bb4:	50014800 	.word	0x50014800

08009bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	031b      	lsls	r3, r3, #12
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a36      	ldr	r2, [pc, #216]	@ (8009cf0 <TIM_OC4_SetConfig+0x138>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d00b      	beq.n	8009c34 <TIM_OC4_SetConfig+0x7c>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a35      	ldr	r2, [pc, #212]	@ (8009cf4 <TIM_OC4_SetConfig+0x13c>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d007      	beq.n	8009c34 <TIM_OC4_SetConfig+0x7c>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a34      	ldr	r2, [pc, #208]	@ (8009cf8 <TIM_OC4_SetConfig+0x140>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d003      	beq.n	8009c34 <TIM_OC4_SetConfig+0x7c>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a33      	ldr	r2, [pc, #204]	@ (8009cfc <TIM_OC4_SetConfig+0x144>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d10d      	bne.n	8009c50 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	031b      	lsls	r3, r3, #12
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a27      	ldr	r2, [pc, #156]	@ (8009cf0 <TIM_OC4_SetConfig+0x138>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d023      	beq.n	8009ca0 <TIM_OC4_SetConfig+0xe8>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a26      	ldr	r2, [pc, #152]	@ (8009cf4 <TIM_OC4_SetConfig+0x13c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d01f      	beq.n	8009ca0 <TIM_OC4_SetConfig+0xe8>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a25      	ldr	r2, [pc, #148]	@ (8009cf8 <TIM_OC4_SetConfig+0x140>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d01b      	beq.n	8009ca0 <TIM_OC4_SetConfig+0xe8>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a24      	ldr	r2, [pc, #144]	@ (8009cfc <TIM_OC4_SetConfig+0x144>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d017      	beq.n	8009ca0 <TIM_OC4_SetConfig+0xe8>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a23      	ldr	r2, [pc, #140]	@ (8009d00 <TIM_OC4_SetConfig+0x148>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d013      	beq.n	8009ca0 <TIM_OC4_SetConfig+0xe8>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a22      	ldr	r2, [pc, #136]	@ (8009d04 <TIM_OC4_SetConfig+0x14c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00f      	beq.n	8009ca0 <TIM_OC4_SetConfig+0xe8>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a21      	ldr	r2, [pc, #132]	@ (8009d08 <TIM_OC4_SetConfig+0x150>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d00b      	beq.n	8009ca0 <TIM_OC4_SetConfig+0xe8>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a20      	ldr	r2, [pc, #128]	@ (8009d0c <TIM_OC4_SetConfig+0x154>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d007      	beq.n	8009ca0 <TIM_OC4_SetConfig+0xe8>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a1f      	ldr	r2, [pc, #124]	@ (8009d10 <TIM_OC4_SetConfig+0x158>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d003      	beq.n	8009ca0 <TIM_OC4_SetConfig+0xe8>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8009d14 <TIM_OC4_SetConfig+0x15c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d113      	bne.n	8009cc8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ca6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009cae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	019b      	lsls	r3, r3, #6
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	019b      	lsls	r3, r3, #6
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40012c00 	.word	0x40012c00
 8009cf4:	50012c00 	.word	0x50012c00
 8009cf8:	40013400 	.word	0x40013400
 8009cfc:	50013400 	.word	0x50013400
 8009d00:	40014000 	.word	0x40014000
 8009d04:	50014000 	.word	0x50014000
 8009d08:	40014400 	.word	0x40014400
 8009d0c:	50014400 	.word	0x50014400
 8009d10:	40014800 	.word	0x40014800
 8009d14:	50014800 	.word	0x50014800

08009d18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a1b      	ldr	r3, [r3, #32]
 8009d2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009d5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	041b      	lsls	r3, r3, #16
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a21      	ldr	r2, [pc, #132]	@ (8009df4 <TIM_OC5_SetConfig+0xdc>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d023      	beq.n	8009dba <TIM_OC5_SetConfig+0xa2>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a20      	ldr	r2, [pc, #128]	@ (8009df8 <TIM_OC5_SetConfig+0xe0>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d01f      	beq.n	8009dba <TIM_OC5_SetConfig+0xa2>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8009dfc <TIM_OC5_SetConfig+0xe4>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d01b      	beq.n	8009dba <TIM_OC5_SetConfig+0xa2>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a1e      	ldr	r2, [pc, #120]	@ (8009e00 <TIM_OC5_SetConfig+0xe8>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d017      	beq.n	8009dba <TIM_OC5_SetConfig+0xa2>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009e04 <TIM_OC5_SetConfig+0xec>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d013      	beq.n	8009dba <TIM_OC5_SetConfig+0xa2>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a1c      	ldr	r2, [pc, #112]	@ (8009e08 <TIM_OC5_SetConfig+0xf0>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d00f      	beq.n	8009dba <TIM_OC5_SetConfig+0xa2>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8009e0c <TIM_OC5_SetConfig+0xf4>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d00b      	beq.n	8009dba <TIM_OC5_SetConfig+0xa2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a1a      	ldr	r2, [pc, #104]	@ (8009e10 <TIM_OC5_SetConfig+0xf8>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d007      	beq.n	8009dba <TIM_OC5_SetConfig+0xa2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a19      	ldr	r2, [pc, #100]	@ (8009e14 <TIM_OC5_SetConfig+0xfc>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d003      	beq.n	8009dba <TIM_OC5_SetConfig+0xa2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a18      	ldr	r2, [pc, #96]	@ (8009e18 <TIM_OC5_SetConfig+0x100>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d109      	bne.n	8009dce <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	021b      	lsls	r3, r3, #8
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	621a      	str	r2, [r3, #32]
}
 8009de8:	bf00      	nop
 8009dea:	371c      	adds	r7, #28
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	40012c00 	.word	0x40012c00
 8009df8:	50012c00 	.word	0x50012c00
 8009dfc:	40013400 	.word	0x40013400
 8009e00:	50013400 	.word	0x50013400
 8009e04:	40014000 	.word	0x40014000
 8009e08:	50014000 	.word	0x50014000
 8009e0c:	40014400 	.word	0x40014400
 8009e10:	50014400 	.word	0x50014400
 8009e14:	40014800 	.word	0x40014800
 8009e18:	50014800 	.word	0x50014800

08009e1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b087      	sub	sp, #28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	021b      	lsls	r3, r3, #8
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	051b      	lsls	r3, r3, #20
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a22      	ldr	r2, [pc, #136]	@ (8009efc <TIM_OC6_SetConfig+0xe0>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d023      	beq.n	8009ec0 <TIM_OC6_SetConfig+0xa4>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a21      	ldr	r2, [pc, #132]	@ (8009f00 <TIM_OC6_SetConfig+0xe4>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d01f      	beq.n	8009ec0 <TIM_OC6_SetConfig+0xa4>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a20      	ldr	r2, [pc, #128]	@ (8009f04 <TIM_OC6_SetConfig+0xe8>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d01b      	beq.n	8009ec0 <TIM_OC6_SetConfig+0xa4>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8009f08 <TIM_OC6_SetConfig+0xec>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d017      	beq.n	8009ec0 <TIM_OC6_SetConfig+0xa4>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a1e      	ldr	r2, [pc, #120]	@ (8009f0c <TIM_OC6_SetConfig+0xf0>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d013      	beq.n	8009ec0 <TIM_OC6_SetConfig+0xa4>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8009f10 <TIM_OC6_SetConfig+0xf4>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d00f      	beq.n	8009ec0 <TIM_OC6_SetConfig+0xa4>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8009f14 <TIM_OC6_SetConfig+0xf8>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d00b      	beq.n	8009ec0 <TIM_OC6_SetConfig+0xa4>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8009f18 <TIM_OC6_SetConfig+0xfc>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d007      	beq.n	8009ec0 <TIM_OC6_SetConfig+0xa4>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8009f1c <TIM_OC6_SetConfig+0x100>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d003      	beq.n	8009ec0 <TIM_OC6_SetConfig+0xa4>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a19      	ldr	r2, [pc, #100]	@ (8009f20 <TIM_OC6_SetConfig+0x104>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d109      	bne.n	8009ed4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	029b      	lsls	r3, r3, #10
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	621a      	str	r2, [r3, #32]
}
 8009eee:	bf00      	nop
 8009ef0:	371c      	adds	r7, #28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	40012c00 	.word	0x40012c00
 8009f00:	50012c00 	.word	0x50012c00
 8009f04:	40013400 	.word	0x40013400
 8009f08:	50013400 	.word	0x50013400
 8009f0c:	40014000 	.word	0x40014000
 8009f10:	50014000 	.word	0x50014000
 8009f14:	40014400 	.word	0x40014400
 8009f18:	50014400 	.word	0x50014400
 8009f1c:	40014800 	.word	0x40014800
 8009f20:	50014800 	.word	0x50014800

08009f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	f023 0201 	bic.w	r2, r3, #1
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	011b      	lsls	r3, r3, #4
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f023 030a 	bic.w	r3, r3, #10
 8009f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	621a      	str	r2, [r3, #32]
}
 8009f76:	bf00      	nop
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b087      	sub	sp, #28
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	60f8      	str	r0, [r7, #12]
 8009f8a:	60b9      	str	r1, [r7, #8]
 8009f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6a1b      	ldr	r3, [r3, #32]
 8009f98:	f023 0210 	bic.w	r2, r3, #16
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	031b      	lsls	r3, r3, #12
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009fbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	011b      	lsls	r3, r3, #4
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	621a      	str	r2, [r3, #32]
}
 8009fd6:	bf00      	nop
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b085      	sub	sp, #20
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ffe:	683a      	ldr	r2, [r7, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4313      	orrs	r3, r2
 800a004:	f043 0307 	orr.w	r3, r3, #7
 800a008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	609a      	str	r2, [r3, #8]
}
 800a010:	bf00      	nop
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	021a      	lsls	r2, r3, #8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	431a      	orrs	r2, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	4313      	orrs	r3, r2
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	4313      	orrs	r3, r2
 800a048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	609a      	str	r2, [r3, #8]
}
 800a050:	bf00      	nop
 800a052:	371c      	adds	r7, #28
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f003 031f 	and.w	r3, r3, #31
 800a06e:	2201      	movs	r2, #1
 800a070:	fa02 f303 	lsl.w	r3, r2, r3
 800a074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6a1a      	ldr	r2, [r3, #32]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	43db      	mvns	r3, r3
 800a07e:	401a      	ands	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a1a      	ldr	r2, [r3, #32]
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f003 031f 	and.w	r3, r3, #31
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	fa01 f303 	lsl.w	r3, r1, r3
 800a094:	431a      	orrs	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	621a      	str	r2, [r3, #32]
}
 800a09a:	bf00      	nop
 800a09c:	371c      	adds	r7, #28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
	...

0800a0a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d101      	bne.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e097      	b.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a45      	ldr	r2, [pc, #276]	@ (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00e      	beq.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a44      	ldr	r2, [pc, #272]	@ (800a200 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d009      	beq.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a42      	ldr	r2, [pc, #264]	@ (800a204 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d004      	beq.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a41      	ldr	r2, [pc, #260]	@ (800a208 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d108      	bne.n	800a11a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a10e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a124:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a2f      	ldr	r2, [pc, #188]	@ (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d040      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a2e      	ldr	r2, [pc, #184]	@ (800a200 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d03b      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a154:	d036      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a15e:	d031      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a29      	ldr	r2, [pc, #164]	@ (800a20c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d02c      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a28      	ldr	r2, [pc, #160]	@ (800a210 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d027      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a26      	ldr	r2, [pc, #152]	@ (800a214 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d022      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a25      	ldr	r2, [pc, #148]	@ (800a218 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d01d      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a23      	ldr	r2, [pc, #140]	@ (800a21c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d018      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a22      	ldr	r2, [pc, #136]	@ (800a220 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d013      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a18      	ldr	r2, [pc, #96]	@ (800a204 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00e      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a17      	ldr	r2, [pc, #92]	@ (800a208 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d009      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a224 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d004      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a1a      	ldr	r2, [pc, #104]	@ (800a228 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d10c      	bne.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	40012c00 	.word	0x40012c00
 800a200:	50012c00 	.word	0x50012c00
 800a204:	40013400 	.word	0x40013400
 800a208:	50013400 	.word	0x50013400
 800a20c:	40000400 	.word	0x40000400
 800a210:	50000400 	.word	0x50000400
 800a214:	40000800 	.word	0x40000800
 800a218:	50000800 	.word	0x50000800
 800a21c:	40000c00 	.word	0x40000c00
 800a220:	50000c00 	.word	0x50000c00
 800a224:	40014000 	.word	0x40014000
 800a228:	50014000 	.word	0x50014000

0800a22c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a240:	2b01      	cmp	r3, #1
 800a242:	d101      	bne.n	800a248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a244:	2302      	movs	r3, #2
 800a246:	e0c3      	b.n	800a3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1a4>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	4313      	orrs	r3, r2
 800a26a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	4313      	orrs	r3, r2
 800a278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4313      	orrs	r3, r2
 800a286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	041b      	lsls	r3, r3, #16
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(htim->Instance))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a45      	ldr	r2, [pc, #276]	@ (800a3dc <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d02c      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a43      	ldr	r2, [pc, #268]	@ (800a3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d027      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a42      	ldr	r2, [pc, #264]	@ (800a3e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d022      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a40      	ldr	r2, [pc, #256]	@ (800a3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d01d      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a3f      	ldr	r2, [pc, #252]	@ (800a3ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c0>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d018      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a3d      	ldr	r2, [pc, #244]	@ (800a3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d013      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a3c      	ldr	r2, [pc, #240]	@ (800a3f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d00e      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a3a      	ldr	r2, [pc, #232]	@ (800a3f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1cc>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d009      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a39      	ldr	r2, [pc, #228]	@ (800a3fc <HAL_TIMEx_ConfigBreakDeadTime+0x1d0>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d004      	beq.n	800a326 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a37      	ldr	r2, [pc, #220]	@ (800a400 <HAL_TIMEx_ConfigBreakDeadTime+0x1d4>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d106      	bne.n	800a334 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a28      	ldr	r2, [pc, #160]	@ (800a3dc <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d00e      	beq.n	800a35c <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a27      	ldr	r2, [pc, #156]	@ (800a3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d009      	beq.n	800a35c <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a25      	ldr	r2, [pc, #148]	@ (800a3e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d004      	beq.n	800a35c <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a24      	ldr	r2, [pc, #144]	@ (800a3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d130      	bne.n	800a3be <HAL_TIMEx_ConfigBreakDeadTime+0x192>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a366:	051b      	lsls	r3, r3, #20
 800a368:	4313      	orrs	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	4313      	orrs	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a384:	4313      	orrs	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a13      	ldr	r2, [pc, #76]	@ (800a3dc <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d00e      	beq.n	800a3b0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a12      	ldr	r2, [pc, #72]	@ (800a3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d009      	beq.n	800a3b0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a10      	ldr	r2, [pc, #64]	@ (800a3e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d004      	beq.n	800a3b0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a0f      	ldr	r2, [pc, #60]	@ (800a3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d106      	bne.n	800a3be <HAL_TIMEx_ConfigBreakDeadTime+0x192>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	40012c00 	.word	0x40012c00
 800a3e0:	50012c00 	.word	0x50012c00
 800a3e4:	40013400 	.word	0x40013400
 800a3e8:	50013400 	.word	0x50013400
 800a3ec:	40014000 	.word	0x40014000
 800a3f0:	50014000 	.word	0x50014000
 800a3f4:	40014400 	.word	0x40014400
 800a3f8:	50014400 	.word	0x50014400
 800a3fc:	40014800 	.word	0x40014800
 800a400:	50014800 	.word	0x50014800

0800a404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e042      	b.n	800a49c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d106      	bne.n	800a42e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7f7 f8fd 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2224      	movs	r2, #36	@ 0x24
 800a432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0201 	bic.w	r2, r2, #1
 800a444:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f9ca 	bl	800a7e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f825 	bl	800a4a4 <UART_SetConfig>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d101      	bne.n	800a464 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e01b      	b.n	800a49c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a472:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a482:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0201 	orr.w	r2, r2, #1
 800a492:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fa49 	bl	800a92c <UART_CheckIdleState>
 800a49a:	4603      	mov	r3, r0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4a8:	b094      	sub	sp, #80	@ 0x50
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	4b7e      	ldr	r3, [pc, #504]	@ (800a6b4 <UART_SetConfig+0x210>)
 800a4ba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4977      	ldr	r1, [pc, #476]	@ (800a6b8 <UART_SetConfig+0x214>)
 800a4dc:	4019      	ands	r1, r3
 800a4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4e4:	430b      	orrs	r3, r1
 800a4e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f4:	68d9      	ldr	r1, [r3, #12]
 800a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	ea40 0301 	orr.w	r3, r0, r1
 800a4fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b6a      	ldr	r3, [pc, #424]	@ (800a6b4 <UART_SetConfig+0x210>)
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d009      	beq.n	800a524 <UART_SetConfig+0x80>
 800a510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	4b69      	ldr	r3, [pc, #420]	@ (800a6bc <UART_SetConfig+0x218>)
 800a516:	429a      	cmp	r2, r3
 800a518:	d004      	beq.n	800a524 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a51c:	6a1a      	ldr	r2, [r3, #32]
 800a51e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a520:	4313      	orrs	r3, r2
 800a522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a52e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a538:	430b      	orrs	r3, r1
 800a53a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a542:	f023 000f 	bic.w	r0, r3, #15
 800a546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a548:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	ea40 0301 	orr.w	r3, r0, r1
 800a552:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	4b59      	ldr	r3, [pc, #356]	@ (800a6c0 <UART_SetConfig+0x21c>)
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d102      	bne.n	800a564 <UART_SetConfig+0xc0>
 800a55e:	2301      	movs	r3, #1
 800a560:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a562:	e029      	b.n	800a5b8 <UART_SetConfig+0x114>
 800a564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	4b56      	ldr	r3, [pc, #344]	@ (800a6c4 <UART_SetConfig+0x220>)
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d102      	bne.n	800a574 <UART_SetConfig+0xd0>
 800a56e:	2302      	movs	r3, #2
 800a570:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a572:	e021      	b.n	800a5b8 <UART_SetConfig+0x114>
 800a574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	4b53      	ldr	r3, [pc, #332]	@ (800a6c8 <UART_SetConfig+0x224>)
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d102      	bne.n	800a584 <UART_SetConfig+0xe0>
 800a57e:	2304      	movs	r3, #4
 800a580:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a582:	e019      	b.n	800a5b8 <UART_SetConfig+0x114>
 800a584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	4b50      	ldr	r3, [pc, #320]	@ (800a6cc <UART_SetConfig+0x228>)
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d102      	bne.n	800a594 <UART_SetConfig+0xf0>
 800a58e:	2308      	movs	r3, #8
 800a590:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a592:	e011      	b.n	800a5b8 <UART_SetConfig+0x114>
 800a594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	4b4d      	ldr	r3, [pc, #308]	@ (800a6d0 <UART_SetConfig+0x22c>)
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d102      	bne.n	800a5a4 <UART_SetConfig+0x100>
 800a59e:	2310      	movs	r3, #16
 800a5a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5a2:	e009      	b.n	800a5b8 <UART_SetConfig+0x114>
 800a5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	4b42      	ldr	r3, [pc, #264]	@ (800a6b4 <UART_SetConfig+0x210>)
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d102      	bne.n	800a5b4 <UART_SetConfig+0x110>
 800a5ae:	2320      	movs	r3, #32
 800a5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5b2:	e001      	b.n	800a5b8 <UART_SetConfig+0x114>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	4b3d      	ldr	r3, [pc, #244]	@ (800a6b4 <UART_SetConfig+0x210>)
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d005      	beq.n	800a5ce <UART_SetConfig+0x12a>
 800a5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	4b3d      	ldr	r3, [pc, #244]	@ (800a6bc <UART_SetConfig+0x218>)
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	f040 8085 	bne.w	800a6d8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a5ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	623b      	str	r3, [r7, #32]
 800a5d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a5da:	f7fc fe73 	bl	80072c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5de:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 80e8 	beq.w	800a7b8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ec:	4a39      	ldr	r2, [pc, #228]	@ (800a6d4 <UART_SetConfig+0x230>)
 800a5ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5fa:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	4613      	mov	r3, r2
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	4413      	add	r3, r2
 800a606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a608:	429a      	cmp	r2, r3
 800a60a:	d305      	bcc.n	800a618 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a612:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a614:	429a      	cmp	r2, r3
 800a616:	d903      	bls.n	800a620 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a61e:	e048      	b.n	800a6b2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a622:	2200      	movs	r2, #0
 800a624:	61bb      	str	r3, [r7, #24]
 800a626:	61fa      	str	r2, [r7, #28]
 800a628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a62c:	4a29      	ldr	r2, [pc, #164]	@ (800a6d4 <UART_SetConfig+0x230>)
 800a62e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a632:	b29b      	uxth	r3, r3
 800a634:	2200      	movs	r2, #0
 800a636:	613b      	str	r3, [r7, #16]
 800a638:	617a      	str	r2, [r7, #20]
 800a63a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a63e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a642:	f7f5 fe19 	bl	8000278 <__aeabi_uldivmod>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	4610      	mov	r0, r2
 800a64c:	4619      	mov	r1, r3
 800a64e:	f04f 0200 	mov.w	r2, #0
 800a652:	f04f 0300 	mov.w	r3, #0
 800a656:	020b      	lsls	r3, r1, #8
 800a658:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a65c:	0202      	lsls	r2, r0, #8
 800a65e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a660:	6849      	ldr	r1, [r1, #4]
 800a662:	0849      	lsrs	r1, r1, #1
 800a664:	2000      	movs	r0, #0
 800a666:	460c      	mov	r4, r1
 800a668:	4605      	mov	r5, r0
 800a66a:	eb12 0804 	adds.w	r8, r2, r4
 800a66e:	eb43 0905 	adc.w	r9, r3, r5
 800a672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	60bb      	str	r3, [r7, #8]
 800a67a:	60fa      	str	r2, [r7, #12]
 800a67c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a680:	4640      	mov	r0, r8
 800a682:	4649      	mov	r1, r9
 800a684:	f7f5 fdf8 	bl	8000278 <__aeabi_uldivmod>
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4613      	mov	r3, r2
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a696:	d308      	bcc.n	800a6aa <UART_SetConfig+0x206>
 800a698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a69a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a69e:	d204      	bcs.n	800a6aa <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6a6:	60da      	str	r2, [r3, #12]
 800a6a8:	e003      	b.n	800a6b2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a6b0:	e082      	b.n	800a7b8 <UART_SetConfig+0x314>
 800a6b2:	e081      	b.n	800a7b8 <UART_SetConfig+0x314>
 800a6b4:	46002400 	.word	0x46002400
 800a6b8:	cfff69f3 	.word	0xcfff69f3
 800a6bc:	56002400 	.word	0x56002400
 800a6c0:	40013800 	.word	0x40013800
 800a6c4:	40004400 	.word	0x40004400
 800a6c8:	40004800 	.word	0x40004800
 800a6cc:	40004c00 	.word	0x40004c00
 800a6d0:	40005000 	.word	0x40005000
 800a6d4:	0800bea0 	.word	0x0800bea0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6e0:	d13c      	bne.n	800a75c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a6e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	607a      	str	r2, [r7, #4]
 800a6ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6ee:	f7fc fde9 	bl	80072c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6f2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d05e      	beq.n	800a7b8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fe:	4a39      	ldr	r2, [pc, #228]	@ (800a7e4 <UART_SetConfig+0x340>)
 800a700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a704:	461a      	mov	r2, r3
 800a706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a708:	fbb3 f3f2 	udiv	r3, r3, r2
 800a70c:	005a      	lsls	r2, r3, #1
 800a70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	085b      	lsrs	r3, r3, #1
 800a714:	441a      	add	r2, r3
 800a716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a722:	2b0f      	cmp	r3, #15
 800a724:	d916      	bls.n	800a754 <UART_SetConfig+0x2b0>
 800a726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a72c:	d212      	bcs.n	800a754 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a72e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a730:	b29b      	uxth	r3, r3
 800a732:	f023 030f 	bic.w	r3, r3, #15
 800a736:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a73a:	085b      	lsrs	r3, r3, #1
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	f003 0307 	and.w	r3, r3, #7
 800a742:	b29a      	uxth	r2, r3
 800a744:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a746:	4313      	orrs	r3, r2
 800a748:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a750:	60da      	str	r2, [r3, #12]
 800a752:	e031      	b.n	800a7b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a75a:	e02d      	b.n	800a7b8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a75c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a75e:	2200      	movs	r2, #0
 800a760:	469a      	mov	sl, r3
 800a762:	4693      	mov	fp, r2
 800a764:	4650      	mov	r0, sl
 800a766:	4659      	mov	r1, fp
 800a768:	f7fc fdac 	bl	80072c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a76c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a76e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a770:	2b00      	cmp	r3, #0
 800a772:	d021      	beq.n	800a7b8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a778:	4a1a      	ldr	r2, [pc, #104]	@ (800a7e4 <UART_SetConfig+0x340>)
 800a77a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a77e:	461a      	mov	r2, r3
 800a780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a782:	fbb3 f2f2 	udiv	r2, r3, r2
 800a786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	085b      	lsrs	r3, r3, #1
 800a78c:	441a      	add	r2, r3
 800a78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	fbb2 f3f3 	udiv	r3, r2, r3
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a79a:	2b0f      	cmp	r3, #15
 800a79c:	d909      	bls.n	800a7b2 <UART_SetConfig+0x30e>
 800a79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7a4:	d205      	bcs.n	800a7b2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	60da      	str	r2, [r3, #12]
 800a7b0:	e002      	b.n	800a7b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a7d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3750      	adds	r7, #80	@ 0x50
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7e2:	bf00      	nop
 800a7e4:	0800bea0 	.word	0x0800bea0

0800a7e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f4:	f003 0308 	and.w	r3, r3, #8
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00a      	beq.n	800a812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	430a      	orrs	r2, r1
 800a810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00a      	beq.n	800a834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	430a      	orrs	r2, r1
 800a832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a838:	f003 0302 	and.w	r3, r3, #2
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00a      	beq.n	800a856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85a:	f003 0304 	and.w	r3, r3, #4
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00a      	beq.n	800a878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a87c:	f003 0310 	and.w	r3, r3, #16
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00a      	beq.n	800a89a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a89e:	f003 0320 	and.w	r3, r3, #32
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d01a      	beq.n	800a8fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8e6:	d10a      	bne.n	800a8fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	605a      	str	r2, [r3, #4]
  }
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b098      	sub	sp, #96	@ 0x60
 800a930:	af02      	add	r7, sp, #8
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a93c:	f7f7 f8d6 	bl	8001aec <HAL_GetTick>
 800a940:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0308 	and.w	r3, r3, #8
 800a94c:	2b08      	cmp	r3, #8
 800a94e:	d12f      	bne.n	800a9b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a950:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a958:	2200      	movs	r2, #0
 800a95a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f88e 	bl	800aa80 <UART_WaitOnFlagUntilTimeout>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d022      	beq.n	800a9b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a972:	e853 3f00 	ldrex	r3, [r3]
 800a976:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a97e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	461a      	mov	r2, r3
 800a986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a988:	647b      	str	r3, [r7, #68]	@ 0x44
 800a98a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a98e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a990:	e841 2300 	strex	r3, r2, [r1]
 800a994:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1e6      	bne.n	800a96a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2220      	movs	r2, #32
 800a9a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e063      	b.n	800aa78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	2b04      	cmp	r3, #4
 800a9bc:	d149      	bne.n	800aa52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 f857 	bl	800aa80 <UART_WaitOnFlagUntilTimeout>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d03c      	beq.n	800aa52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e0:	e853 3f00 	ldrex	r3, [r3]
 800a9e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9fe:	e841 2300 	strex	r3, r2, [r1]
 800aa02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1e6      	bne.n	800a9d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f023 0301 	bic.w	r3, r3, #1
 800aa20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3308      	adds	r3, #8
 800aa28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa2a:	61fa      	str	r2, [r7, #28]
 800aa2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2e:	69b9      	ldr	r1, [r7, #24]
 800aa30:	69fa      	ldr	r2, [r7, #28]
 800aa32:	e841 2300 	strex	r3, r2, [r1]
 800aa36:	617b      	str	r3, [r7, #20]
   return(result);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1e5      	bne.n	800aa0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2220      	movs	r2, #32
 800aa42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	e012      	b.n	800aa78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2220      	movs	r2, #32
 800aa56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3758      	adds	r7, #88	@ 0x58
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa90:	e04f      	b.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa98:	d04b      	beq.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa9a:	f7f7 f827 	bl	8001aec <HAL_GetTick>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d302      	bcc.n	800aab0 <UART_WaitOnFlagUntilTimeout+0x30>
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d101      	bne.n	800aab4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aab0:	2303      	movs	r3, #3
 800aab2:	e04e      	b.n	800ab52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0304 	and.w	r3, r3, #4
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d037      	beq.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2b80      	cmp	r3, #128	@ 0x80
 800aac6:	d034      	beq.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2b40      	cmp	r3, #64	@ 0x40
 800aacc:	d031      	beq.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	f003 0308 	and.w	r3, r3, #8
 800aad8:	2b08      	cmp	r3, #8
 800aada:	d110      	bne.n	800aafe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2208      	movs	r2, #8
 800aae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 f838 	bl	800ab5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2208      	movs	r2, #8
 800aaee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e029      	b.n	800ab52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab0c:	d111      	bne.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 f81e 	bl	800ab5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2220      	movs	r2, #32
 800ab22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e00f      	b.n	800ab52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	69da      	ldr	r2, [r3, #28]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	bf0c      	ite	eq
 800ab42:	2301      	moveq	r3, #1
 800ab44:	2300      	movne	r3, #0
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	79fb      	ldrb	r3, [r7, #7]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d0a0      	beq.n	800aa92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b095      	sub	sp, #84	@ 0x54
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6a:	e853 3f00 	ldrex	r3, [r3]
 800ab6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab80:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab88:	e841 2300 	strex	r3, r2, [r1]
 800ab8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1e6      	bne.n	800ab62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3308      	adds	r3, #8
 800ab9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9c:	6a3b      	ldr	r3, [r7, #32]
 800ab9e:	e853 3f00 	ldrex	r3, [r3]
 800aba2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abaa:	f023 0301 	bic.w	r3, r3, #1
 800abae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3308      	adds	r3, #8
 800abb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abc0:	e841 2300 	strex	r3, r2, [r1]
 800abc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e3      	bne.n	800ab94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d118      	bne.n	800ac06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	60bb      	str	r3, [r7, #8]
   return(result);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f023 0310 	bic.w	r3, r3, #16
 800abe8:	647b      	str	r3, [r7, #68]	@ 0x44
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abf2:	61bb      	str	r3, [r7, #24]
 800abf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf6:	6979      	ldr	r1, [r7, #20]
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	e841 2300 	strex	r3, r2, [r1]
 800abfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e6      	bne.n	800abd4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac1a:	bf00      	nop
 800ac1c:	3754      	adds	r7, #84	@ 0x54
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d101      	bne.n	800ac3c <HAL_UARTEx_DisableFifoMode+0x16>
 800ac38:	2302      	movs	r3, #2
 800ac3a:	e027      	b.n	800ac8c <HAL_UARTEx_DisableFifoMode+0x66>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2224      	movs	r2, #36	@ 0x24
 800ac48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 0201 	bic.w	r2, r2, #1
 800ac62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d101      	bne.n	800acb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acac:	2302      	movs	r3, #2
 800acae:	e02d      	b.n	800ad0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2224      	movs	r2, #36	@ 0x24
 800acbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0201 	bic.w	r2, r2, #1
 800acd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	430a      	orrs	r2, r1
 800acea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f84f 	bl	800ad90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2220      	movs	r2, #32
 800acfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d101      	bne.n	800ad2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad28:	2302      	movs	r3, #2
 800ad2a:	e02d      	b.n	800ad88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2224      	movs	r2, #36	@ 0x24
 800ad38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f022 0201 	bic.w	r2, r2, #1
 800ad52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	430a      	orrs	r2, r1
 800ad66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f811 	bl	800ad90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2220      	movs	r2, #32
 800ad7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d108      	bne.n	800adb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adb0:	e031      	b.n	800ae16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adb2:	2308      	movs	r3, #8
 800adb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adb6:	2308      	movs	r3, #8
 800adb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	0e5b      	lsrs	r3, r3, #25
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f003 0307 	and.w	r3, r3, #7
 800adc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	0f5b      	lsrs	r3, r3, #29
 800add2:	b2db      	uxtb	r3, r3
 800add4:	f003 0307 	and.w	r3, r3, #7
 800add8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	7b3a      	ldrb	r2, [r7, #12]
 800adde:	4911      	ldr	r1, [pc, #68]	@ (800ae24 <UARTEx_SetNbDataToProcess+0x94>)
 800ade0:	5c8a      	ldrb	r2, [r1, r2]
 800ade2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ade6:	7b3a      	ldrb	r2, [r7, #12]
 800ade8:	490f      	ldr	r1, [pc, #60]	@ (800ae28 <UARTEx_SetNbDataToProcess+0x98>)
 800adea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adec:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
 800adfa:	7b7a      	ldrb	r2, [r7, #13]
 800adfc:	4909      	ldr	r1, [pc, #36]	@ (800ae24 <UARTEx_SetNbDataToProcess+0x94>)
 800adfe:	5c8a      	ldrb	r2, [r1, r2]
 800ae00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae04:	7b7a      	ldrb	r2, [r7, #13]
 800ae06:	4908      	ldr	r1, [pc, #32]	@ (800ae28 <UARTEx_SetNbDataToProcess+0x98>)
 800ae08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae16:	bf00      	nop
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	0800beb8 	.word	0x0800beb8
 800ae28:	0800bec0 	.word	0x0800bec0

0800ae2c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b08b      	sub	sp, #44	@ 0x2c
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	fa93 f3a3 	rbit	r3, r3
 800ae46:	613b      	str	r3, [r7, #16]
  return result;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800ae52:	2320      	movs	r3, #32
 800ae54:	e003      	b.n	800ae5e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	fab3 f383 	clz	r3, r3
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	2103      	movs	r1, #3
 800ae62:	fa01 f303 	lsl.w	r3, r1, r3
 800ae66:	43db      	mvns	r3, r3
 800ae68:	401a      	ands	r2, r3
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
 800ae70:	fa93 f3a3 	rbit	r3, r3
 800ae74:	61fb      	str	r3, [r7, #28]
  return result;
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800ae80:	2320      	movs	r3, #32
 800ae82:	e003      	b.n	800ae8c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800ae84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae86:	fab3 f383 	clz	r3, r3
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	005b      	lsls	r3, r3, #1
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	fa01 f303 	lsl.w	r3, r1, r3
 800ae94:	431a      	orrs	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 800ae9a:	bf00      	nop
 800ae9c:	372c      	adds	r7, #44	@ 0x2c
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b085      	sub	sp, #20
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	43db      	mvns	r3, r3
 800aeba:	401a      	ands	r2, r3
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	6879      	ldr	r1, [r7, #4]
 800aec0:	fb01 f303 	mul.w	r3, r1, r3
 800aec4:	431a      	orrs	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	605a      	str	r2, [r3, #4]
}
 800aeca:	bf00      	nop
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b08b      	sub	sp, #44	@ 0x2c
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	689a      	ldr	r2, [r3, #8]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	fa93 f3a3 	rbit	r3, r3
 800aef0:	613b      	str	r3, [r7, #16]
  return result;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d101      	bne.n	800af00 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800aefc:	2320      	movs	r3, #32
 800aefe:	e003      	b.n	800af08 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	fab3 f383 	clz	r3, r3
 800af06:	b2db      	uxtb	r3, r3
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	2103      	movs	r1, #3
 800af0c:	fa01 f303 	lsl.w	r3, r1, r3
 800af10:	43db      	mvns	r3, r3
 800af12:	401a      	ands	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	fa93 f3a3 	rbit	r3, r3
 800af1e:	61fb      	str	r3, [r7, #28]
  return result;
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800af2a:	2320      	movs	r3, #32
 800af2c:	e003      	b.n	800af36 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800af2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af30:	fab3 f383 	clz	r3, r3
 800af34:	b2db      	uxtb	r3, r3
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	6879      	ldr	r1, [r7, #4]
 800af3a:	fa01 f303 	lsl.w	r3, r1, r3
 800af3e:	431a      	orrs	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800af44:	bf00      	nop
 800af46:	372c      	adds	r7, #44	@ 0x2c
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800af50:	b480      	push	{r7}
 800af52:	b08b      	sub	sp, #44	@ 0x2c
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	68da      	ldr	r2, [r3, #12]
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	fa93 f3a3 	rbit	r3, r3
 800af6a:	613b      	str	r3, [r7, #16]
  return result;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800af76:	2320      	movs	r3, #32
 800af78:	e003      	b.n	800af82 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	fab3 f383 	clz	r3, r3
 800af80:	b2db      	uxtb	r3, r3
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	2103      	movs	r1, #3
 800af86:	fa01 f303 	lsl.w	r3, r1, r3
 800af8a:	43db      	mvns	r3, r3
 800af8c:	401a      	ands	r2, r3
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	fa93 f3a3 	rbit	r3, r3
 800af98:	61fb      	str	r3, [r7, #28]
  return result;
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800afa4:	2320      	movs	r3, #32
 800afa6:	e003      	b.n	800afb0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800afa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afaa:	fab3 f383 	clz	r3, r3
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	005b      	lsls	r3, r3, #1
 800afb2:	6879      	ldr	r1, [r7, #4]
 800afb4:	fa01 f303 	lsl.w	r3, r1, r3
 800afb8:	431a      	orrs	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 800afbe:	bf00      	nop
 800afc0:	372c      	adds	r7, #44	@ 0x2c
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800afca:	b480      	push	{r7}
 800afcc:	b08b      	sub	sp, #44	@ 0x2c
 800afce:	af00      	add	r7, sp, #0
 800afd0:	60f8      	str	r0, [r7, #12]
 800afd2:	60b9      	str	r1, [r7, #8]
 800afd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6a1a      	ldr	r2, [r3, #32]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	fa93 f3a3 	rbit	r3, r3
 800afe4:	613b      	str	r3, [r7, #16]
  return result;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800aff0:	2320      	movs	r3, #32
 800aff2:	e003      	b.n	800affc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	fab3 f383 	clz	r3, r3
 800affa:	b2db      	uxtb	r3, r3
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	210f      	movs	r1, #15
 800b000:	fa01 f303 	lsl.w	r3, r1, r3
 800b004:	43db      	mvns	r3, r3
 800b006:	401a      	ands	r2, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	fa93 f3a3 	rbit	r3, r3
 800b012:	61fb      	str	r3, [r7, #28]
  return result;
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b01e:	2320      	movs	r3, #32
 800b020:	e003      	b.n	800b02a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b024:	fab3 f383 	clz	r3, r3
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	fa01 f303 	lsl.w	r3, r1, r3
 800b032:	431a      	orrs	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 800b038:	bf00      	nop
 800b03a:	372c      	adds	r7, #44	@ 0x2c
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b044:	b480      	push	{r7}
 800b046:	b08b      	sub	sp, #44	@ 0x2c
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	0a1b      	lsrs	r3, r3, #8
 800b058:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	fa93 f3a3 	rbit	r3, r3
 800b060:	613b      	str	r3, [r7, #16]
  return result;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d101      	bne.n	800b070 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b06c:	2320      	movs	r3, #32
 800b06e:	e003      	b.n	800b078 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	fab3 f383 	clz	r3, r3
 800b076:	b2db      	uxtb	r3, r3
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	210f      	movs	r1, #15
 800b07c:	fa01 f303 	lsl.w	r3, r1, r3
 800b080:	43db      	mvns	r3, r3
 800b082:	401a      	ands	r2, r3
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	0a1b      	lsrs	r3, r3, #8
 800b088:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	fa93 f3a3 	rbit	r3, r3
 800b090:	61fb      	str	r3, [r7, #28]
  return result;
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b09c:	2320      	movs	r3, #32
 800b09e:	e003      	b.n	800b0a8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a2:	fab3 f383 	clz	r3, r3
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b0b0:	431a      	orrs	r2, r3
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 800b0b6:	bf00      	nop
 800b0b8:	372c      	adds	r7, #44	@ 0x2c
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr

0800b0c2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b08a      	sub	sp, #40	@ 0x28
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	fa93 f3a3 	rbit	r3, r3
 800b0d8:	617b      	str	r3, [r7, #20]
  return result;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <LL_GPIO_Init+0x26>
    return 32U;
 800b0e4:	2320      	movs	r3, #32
 800b0e6:	e003      	b.n	800b0f0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	fab3 f383 	clz	r3, r3
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b0f2:	e058      	b.n	800b1a6 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b100:	4013      	ands	r3, r2
 800b102:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d04a      	beq.n	800b1a0 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d003      	beq.n	800b11a <LL_GPIO_Init+0x58>
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	2b02      	cmp	r3, #2
 800b118:	d10e      	bne.n	800b138 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	461a      	mov	r2, r3
 800b120:	6a39      	ldr	r1, [r7, #32]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7ff fed7 	bl	800aed6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	6819      	ldr	r1, [r3, #0]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	461a      	mov	r2, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7ff feb7 	bl	800aea6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	461a      	mov	r2, r3
 800b13e:	6a39      	ldr	r1, [r7, #32]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff ff05 	bl	800af50 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d121      	bne.n	800b192 <LL_GPIO_Init+0xd0>
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	fa93 f3a3 	rbit	r3, r3
 800b158:	60bb      	str	r3, [r7, #8]
  return result;
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <LL_GPIO_Init+0xa6>
    return 32U;
 800b164:	2320      	movs	r3, #32
 800b166:	e003      	b.n	800b170 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	fab3 f383 	clz	r3, r3
 800b16e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800b170:	2b07      	cmp	r3, #7
 800b172:	d807      	bhi.n	800b184 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	695b      	ldr	r3, [r3, #20]
 800b178:	461a      	mov	r2, r3
 800b17a:	6a39      	ldr	r1, [r7, #32]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff ff24 	bl	800afca <LL_GPIO_SetAFPin_0_7>
 800b182:	e006      	b.n	800b192 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	461a      	mov	r2, r3
 800b18a:	6a39      	ldr	r1, [r7, #32]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff ff59 	bl	800b044 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	461a      	mov	r2, r3
 800b198:	6a39      	ldr	r1, [r7, #32]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7ff fe46 	bl	800ae2c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d19f      	bne.n	800b0f4 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3728      	adds	r7, #40	@ 0x28
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1be:	b084      	sub	sp, #16
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	f107 001c 	add.w	r0, r7, #28
 800b1cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fd89 	bl	800bcf4 <USB_CoreReset>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b1e6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	639a      	str	r2, [r3, #56]	@ 0x38
 800b1fa:	e005      	b.n	800b208 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b200:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b214:	b004      	add	sp, #16
 800b216:	4770      	bx	lr

0800b218 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b218:	b480      	push	{r7}
 800b21a:	b087      	sub	sp, #28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	4613      	mov	r3, r2
 800b224:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b226:	79fb      	ldrb	r3, [r7, #7]
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d165      	bne.n	800b2f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	4a41      	ldr	r2, [pc, #260]	@ (800b334 <USB_SetTurnaroundTime+0x11c>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d906      	bls.n	800b242 <USB_SetTurnaroundTime+0x2a>
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	4a40      	ldr	r2, [pc, #256]	@ (800b338 <USB_SetTurnaroundTime+0x120>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d202      	bcs.n	800b242 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b23c:	230f      	movs	r3, #15
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	e062      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	4a3c      	ldr	r2, [pc, #240]	@ (800b338 <USB_SetTurnaroundTime+0x120>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d306      	bcc.n	800b258 <USB_SetTurnaroundTime+0x40>
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	4a3b      	ldr	r2, [pc, #236]	@ (800b33c <USB_SetTurnaroundTime+0x124>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d202      	bcs.n	800b258 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b252:	230e      	movs	r3, #14
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	e057      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	4a38      	ldr	r2, [pc, #224]	@ (800b33c <USB_SetTurnaroundTime+0x124>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d306      	bcc.n	800b26e <USB_SetTurnaroundTime+0x56>
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	4a37      	ldr	r2, [pc, #220]	@ (800b340 <USB_SetTurnaroundTime+0x128>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d202      	bcs.n	800b26e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b268:	230d      	movs	r3, #13
 800b26a:	617b      	str	r3, [r7, #20]
 800b26c:	e04c      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	4a33      	ldr	r2, [pc, #204]	@ (800b340 <USB_SetTurnaroundTime+0x128>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d306      	bcc.n	800b284 <USB_SetTurnaroundTime+0x6c>
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	4a32      	ldr	r2, [pc, #200]	@ (800b344 <USB_SetTurnaroundTime+0x12c>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d802      	bhi.n	800b284 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b27e:	230c      	movs	r3, #12
 800b280:	617b      	str	r3, [r7, #20]
 800b282:	e041      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	4a2f      	ldr	r2, [pc, #188]	@ (800b344 <USB_SetTurnaroundTime+0x12c>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d906      	bls.n	800b29a <USB_SetTurnaroundTime+0x82>
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	4a2e      	ldr	r2, [pc, #184]	@ (800b348 <USB_SetTurnaroundTime+0x130>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d802      	bhi.n	800b29a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b294:	230b      	movs	r3, #11
 800b296:	617b      	str	r3, [r7, #20]
 800b298:	e036      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	4a2a      	ldr	r2, [pc, #168]	@ (800b348 <USB_SetTurnaroundTime+0x130>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d906      	bls.n	800b2b0 <USB_SetTurnaroundTime+0x98>
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	4a29      	ldr	r2, [pc, #164]	@ (800b34c <USB_SetTurnaroundTime+0x134>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d802      	bhi.n	800b2b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b2aa:	230a      	movs	r3, #10
 800b2ac:	617b      	str	r3, [r7, #20]
 800b2ae:	e02b      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	4a26      	ldr	r2, [pc, #152]	@ (800b34c <USB_SetTurnaroundTime+0x134>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d906      	bls.n	800b2c6 <USB_SetTurnaroundTime+0xae>
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	4a25      	ldr	r2, [pc, #148]	@ (800b350 <USB_SetTurnaroundTime+0x138>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d202      	bcs.n	800b2c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b2c0:	2309      	movs	r3, #9
 800b2c2:	617b      	str	r3, [r7, #20]
 800b2c4:	e020      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	4a21      	ldr	r2, [pc, #132]	@ (800b350 <USB_SetTurnaroundTime+0x138>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d306      	bcc.n	800b2dc <USB_SetTurnaroundTime+0xc4>
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	4a20      	ldr	r2, [pc, #128]	@ (800b354 <USB_SetTurnaroundTime+0x13c>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d802      	bhi.n	800b2dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	e015      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	4a1d      	ldr	r2, [pc, #116]	@ (800b354 <USB_SetTurnaroundTime+0x13c>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d906      	bls.n	800b2f2 <USB_SetTurnaroundTime+0xda>
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4a1c      	ldr	r2, [pc, #112]	@ (800b358 <USB_SetTurnaroundTime+0x140>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d202      	bcs.n	800b2f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b2ec:	2307      	movs	r3, #7
 800b2ee:	617b      	str	r3, [r7, #20]
 800b2f0:	e00a      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b2f2:	2306      	movs	r3, #6
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	e007      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d102      	bne.n	800b304 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b2fe:	2309      	movs	r3, #9
 800b300:	617b      	str	r3, [r7, #20]
 800b302:	e001      	b.n	800b308 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b304:	2309      	movs	r3, #9
 800b306:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	68da      	ldr	r2, [r3, #12]
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	029b      	lsls	r3, r3, #10
 800b31c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b320:	431a      	orrs	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	00d8acbf 	.word	0x00d8acbf
 800b338:	00e4e1c0 	.word	0x00e4e1c0
 800b33c:	00f42400 	.word	0x00f42400
 800b340:	01067380 	.word	0x01067380
 800b344:	011a499f 	.word	0x011a499f
 800b348:	01312cff 	.word	0x01312cff
 800b34c:	014ca43f 	.word	0x014ca43f
 800b350:	016e3600 	.word	0x016e3600
 800b354:	01a6ab1f 	.word	0x01a6ab1f
 800b358:	01e84800 	.word	0x01e84800

0800b35c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	f023 0201 	bic.w	r2, r3, #1
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	370c      	adds	r7, #12
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	460b      	mov	r3, r1
 800b388:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b39a:	78fb      	ldrb	r3, [r7, #3]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d115      	bne.n	800b3cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b3ac:	200a      	movs	r0, #10
 800b3ae:	f7f6 fba9 	bl	8001b04 <HAL_Delay>
      ms += 10U;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	330a      	adds	r3, #10
 800b3b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fc0b 	bl	800bbd4 <USB_GetMode>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d01e      	beq.n	800b402 <USB_SetCurrentMode+0x84>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2bc7      	cmp	r3, #199	@ 0xc7
 800b3c8:	d9f0      	bls.n	800b3ac <USB_SetCurrentMode+0x2e>
 800b3ca:	e01a      	b.n	800b402 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b3cc:	78fb      	ldrb	r3, [r7, #3]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d115      	bne.n	800b3fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b3de:	200a      	movs	r0, #10
 800b3e0:	f7f6 fb90 	bl	8001b04 <HAL_Delay>
      ms += 10U;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	330a      	adds	r3, #10
 800b3e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fbf2 	bl	800bbd4 <USB_GetMode>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d005      	beq.n	800b402 <USB_SetCurrentMode+0x84>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2bc7      	cmp	r3, #199	@ 0xc7
 800b3fa:	d9f0      	bls.n	800b3de <USB_SetCurrentMode+0x60>
 800b3fc:	e001      	b.n	800b402 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e005      	b.n	800b40e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2bc8      	cmp	r3, #200	@ 0xc8
 800b406:	d101      	bne.n	800b40c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e000      	b.n	800b40e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b418:	b084      	sub	sp, #16
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b086      	sub	sp, #24
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b42a:	2300      	movs	r3, #0
 800b42c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b432:	2300      	movs	r3, #0
 800b434:	613b      	str	r3, [r7, #16]
 800b436:	e009      	b.n	800b44c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	3340      	adds	r3, #64	@ 0x40
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	2200      	movs	r2, #0
 800b444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	3301      	adds	r3, #1
 800b44a:	613b      	str	r3, [r7, #16]
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	2b0e      	cmp	r3, #14
 800b450:	d9f2      	bls.n	800b438 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b452:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b456:	2b00      	cmp	r3, #0
 800b458:	d11c      	bne.n	800b494 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b468:	f043 0302 	orr.w	r3, r3, #2
 800b46c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b472:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	e005      	b.n	800b4a0 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b498:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b4ac:	2103      	movs	r1, #3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f95e 	bl	800b770 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b4b4:	2110      	movs	r1, #16
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f8fa 	bl	800b6b0 <USB_FlushTxFifo>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f924 	bl	800b714 <USB_FlushRxFifo>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4dc:	461a      	mov	r2, r3
 800b4de:	2300      	movs	r3, #0
 800b4e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	613b      	str	r3, [r7, #16]
 800b4fe:	e043      	b.n	800b588 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	015a      	lsls	r2, r3, #5
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	4413      	add	r3, r2
 800b508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b516:	d118      	bne.n	800b54a <USB_DevInit+0x132>
    {
      if (i == 0U)
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10a      	bne.n	800b534 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	015a      	lsls	r2, r3, #5
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	4413      	add	r3, r2
 800b526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b52a:	461a      	mov	r2, r3
 800b52c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	e013      	b.n	800b55c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	015a      	lsls	r2, r3, #5
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	4413      	add	r3, r2
 800b53c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b540:	461a      	mov	r2, r3
 800b542:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	e008      	b.n	800b55c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	015a      	lsls	r2, r3, #5
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	4413      	add	r3, r2
 800b552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b556:	461a      	mov	r2, r3
 800b558:	2300      	movs	r3, #0
 800b55a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	015a      	lsls	r2, r3, #5
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4413      	add	r3, r2
 800b564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b568:	461a      	mov	r2, r3
 800b56a:	2300      	movs	r3, #0
 800b56c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	015a      	lsls	r2, r3, #5
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	4413      	add	r3, r2
 800b576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b57a:	461a      	mov	r2, r3
 800b57c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b580:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	3301      	adds	r3, #1
 800b586:	613b      	str	r3, [r7, #16]
 800b588:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b58c:	461a      	mov	r2, r3
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	4293      	cmp	r3, r2
 800b592:	d3b5      	bcc.n	800b500 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b594:	2300      	movs	r3, #0
 800b596:	613b      	str	r3, [r7, #16]
 800b598:	e043      	b.n	800b622 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5b0:	d118      	bne.n	800b5e4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10a      	bne.n	800b5ce <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	e013      	b.n	800b5f6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	015a      	lsls	r2, r3, #5
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	e008      	b.n	800b5f6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	015a      	lsls	r2, r3, #5
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b602:	461a      	mov	r2, r3
 800b604:	2300      	movs	r3, #0
 800b606:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	015a      	lsls	r2, r3, #5
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b614:	461a      	mov	r2, r3
 800b616:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b61a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	3301      	adds	r3, #1
 800b620:	613b      	str	r3, [r7, #16]
 800b622:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b626:	461a      	mov	r2, r3
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d3b5      	bcc.n	800b59a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b63c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b640:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b64e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b650:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b654:	2b00      	cmp	r3, #0
 800b656:	d105      	bne.n	800b664 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	f043 0210 	orr.w	r2, r3, #16
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	699a      	ldr	r2, [r3, #24]
 800b668:	4b10      	ldr	r3, [pc, #64]	@ (800b6ac <USB_DevInit+0x294>)
 800b66a:	4313      	orrs	r3, r2
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b670:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	699b      	ldr	r3, [r3, #24]
 800b67c:	f043 0208 	orr.w	r2, r3, #8
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b684:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d107      	bne.n	800b69c <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b694:	f043 0304 	orr.w	r3, r3, #4
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6a8:	b004      	add	sp, #16
 800b6aa:	4770      	bx	lr
 800b6ac:	803c3800 	.word	0x803c3800

0800b6b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b6ca:	d901      	bls.n	800b6d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	e01b      	b.n	800b708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	daf2      	bge.n	800b6be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	019b      	lsls	r3, r3, #6
 800b6e0:	f043 0220 	orr.w	r2, r3, #32
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b6f4:	d901      	bls.n	800b6fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	e006      	b.n	800b708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	f003 0320 	and.w	r3, r3, #32
 800b702:	2b20      	cmp	r3, #32
 800b704:	d0f0      	beq.n	800b6e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	3301      	adds	r3, #1
 800b724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b72c:	d901      	bls.n	800b732 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b72e:	2303      	movs	r3, #3
 800b730:	e018      	b.n	800b764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	2b00      	cmp	r3, #0
 800b738:	daf2      	bge.n	800b720 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b73a:	2300      	movs	r3, #0
 800b73c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2210      	movs	r2, #16
 800b742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b750:	d901      	bls.n	800b756 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e006      	b.n	800b764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	f003 0310 	and.w	r3, r3, #16
 800b75e:	2b10      	cmp	r3, #16
 800b760:	d0f0      	beq.n	800b744 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	460b      	mov	r3, r1
 800b77a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	78fb      	ldrb	r3, [r7, #3]
 800b78a:	68f9      	ldr	r1, [r7, #12]
 800b78c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b790:	4313      	orrs	r3, r2
 800b792:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b087      	sub	sp, #28
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	f003 0306 	and.w	r3, r3, #6
 800b7ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d102      	bne.n	800b7c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75fb      	strb	r3, [r7, #23]
 800b7c6:	e00a      	b.n	800b7de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d002      	beq.n	800b7d4 <USB_GetDevSpeed+0x32>
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b06      	cmp	r3, #6
 800b7d2:	d102      	bne.n	800b7da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	75fb      	strb	r3, [r7, #23]
 800b7d8:	e001      	b.n	800b7de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b7da:	230f      	movs	r3, #15
 800b7dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	371c      	adds	r7, #28
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	785b      	ldrb	r3, [r3, #1]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d14a      	bne.n	800b8a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	015a      	lsls	r2, r3, #5
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	4413      	add	r3, r2
 800b814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b81e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b822:	f040 8086 	bne.w	800b932 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	7812      	ldrb	r2, [r2, #0]
 800b83a:	0151      	lsls	r1, r2, #5
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	440a      	add	r2, r1
 800b840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b844:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b848:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	4413      	add	r3, r2
 800b854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	7812      	ldrb	r2, [r2, #0]
 800b85e:	0151      	lsls	r1, r2, #5
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	440a      	add	r2, r1
 800b864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b868:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b86c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d902      	bls.n	800b884 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	75fb      	strb	r3, [r7, #23]
          break;
 800b882:	e056      	b.n	800b932 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	015a      	lsls	r2, r3, #5
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	4413      	add	r3, r2
 800b88e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b89c:	d0e7      	beq.n	800b86e <USB_EPStopXfer+0x82>
 800b89e:	e048      	b.n	800b932 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	015a      	lsls	r2, r3, #5
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8b8:	d13b      	bne.n	800b932 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	015a      	lsls	r2, r3, #5
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	7812      	ldrb	r2, [r2, #0]
 800b8ce:	0151      	lsls	r1, r2, #5
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	440a      	add	r2, r1
 800b8d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b8dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	7812      	ldrb	r2, [r2, #0]
 800b8f2:	0151      	lsls	r1, r2, #5
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	440a      	add	r2, r1
 800b8f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b900:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	3301      	adds	r3, #1
 800b906:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b90e:	4293      	cmp	r3, r2
 800b910:	d902      	bls.n	800b918 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	75fb      	strb	r3, [r7, #23]
          break;
 800b916:	e00c      	b.n	800b932 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	015a      	lsls	r2, r3, #5
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	4413      	add	r3, r2
 800b922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b92c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b930:	d0e7      	beq.n	800b902 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
}
 800b934:	4618      	mov	r0, r3
 800b936:	371c      	adds	r7, #28
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b940:	b480      	push	{r7}
 800b942:	b089      	sub	sp, #36	@ 0x24
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4611      	mov	r1, r2
 800b94c:	461a      	mov	r2, r3
 800b94e:	460b      	mov	r3, r1
 800b950:	71fb      	strb	r3, [r7, #7]
 800b952:	4613      	mov	r3, r2
 800b954:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b95e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b962:	2b00      	cmp	r3, #0
 800b964:	d123      	bne.n	800b9ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b966:	88bb      	ldrh	r3, [r7, #4]
 800b968:	3303      	adds	r3, #3
 800b96a:	089b      	lsrs	r3, r3, #2
 800b96c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b96e:	2300      	movs	r3, #0
 800b970:	61bb      	str	r3, [r7, #24]
 800b972:	e018      	b.n	800b9a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b974:	79fb      	ldrb	r3, [r7, #7]
 800b976:	031a      	lsls	r2, r3, #12
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	4413      	add	r3, r2
 800b97c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b980:	461a      	mov	r2, r3
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	3301      	adds	r3, #1
 800b98c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	3301      	adds	r3, #1
 800b992:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	3301      	adds	r3, #1
 800b998:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	3301      	adds	r3, #1
 800b99e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	61bb      	str	r3, [r7, #24]
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d3e2      	bcc.n	800b974 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3724      	adds	r7, #36	@ 0x24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b08b      	sub	sp, #44	@ 0x2c
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b9d2:	88fb      	ldrh	r3, [r7, #6]
 800b9d4:	089b      	lsrs	r3, r3, #2
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b9da:	88fb      	ldrh	r3, [r7, #6]
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	623b      	str	r3, [r7, #32]
 800b9e6:	e014      	b.n	800ba12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba02:	3301      	adds	r3, #1
 800ba04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ba06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba08:	3301      	adds	r3, #1
 800ba0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	623b      	str	r3, [r7, #32]
 800ba12:	6a3a      	ldr	r2, [r7, #32]
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d3e6      	bcc.n	800b9e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ba1a:	8bfb      	ldrh	r3, [r7, #30]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d01e      	beq.n	800ba5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f107 0310 	add.w	r3, r7, #16
 800ba30:	6812      	ldr	r2, [r2, #0]
 800ba32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba44:	701a      	strb	r2, [r3, #0]
      i++;
 800ba46:	6a3b      	ldr	r3, [r7, #32]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4e:	3301      	adds	r3, #1
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ba52:	8bfb      	ldrh	r3, [r7, #30]
 800ba54:	3b01      	subs	r3, #1
 800ba56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ba58:	8bfb      	ldrh	r3, [r7, #30]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1ea      	bne.n	800ba34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	372c      	adds	r7, #44	@ 0x2c
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba86:	f023 0303 	bic.w	r3, r3, #3
 800ba8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba9a:	f043 0302 	orr.w	r3, r3, #2
 800ba9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3714      	adds	r7, #20
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800baae:	b480      	push	{r7}
 800bab0:	b085      	sub	sp, #20
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	4013      	ands	r3, r2
 800bac4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bac6:	68fb      	ldr	r3, [r7, #12]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baf0:	69db      	ldr	r3, [r3, #28]
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	4013      	ands	r3, r2
 800baf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	0c1b      	lsrs	r3, r3, #16
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	4013      	ands	r3, r2
 800bb2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	b29b      	uxth	r3, r3
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bb4c:	78fb      	ldrb	r3, [r7, #3]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	4013      	ands	r3, r2
 800bb68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb6a:	68bb      	ldr	r3, [r7, #8]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bb9c:	78fb      	ldrb	r3, [r7, #3]
 800bb9e:	f003 030f 	and.w	r3, r3, #15
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	fa22 f303 	lsr.w	r3, r2, r3
 800bba8:	01db      	lsls	r3, r3, #7
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bbb2:	78fb      	ldrb	r3, [r7, #3]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bbc6:	68bb      	ldr	r3, [r7, #8]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	371c      	adds	r7, #28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	695b      	ldr	r3, [r3, #20]
 800bbe0:	f003 0301 	and.w	r3, r3, #1
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc0a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bc0e:	f023 0307 	bic.w	r3, r3, #7
 800bc12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
	...

0800bc38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	460b      	mov	r3, r1
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	333c      	adds	r3, #60	@ 0x3c
 800bc4e:	3304      	adds	r3, #4
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	4a26      	ldr	r2, [pc, #152]	@ (800bcf0 <USB_EP0_OutStart+0xb8>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d90a      	bls.n	800bc72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc6c:	d101      	bne.n	800bc72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e037      	b.n	800bce2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc78:	461a      	mov	r2, r3
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	697a      	ldr	r2, [r7, #20]
 800bc9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bca0:	f043 0318 	orr.w	r3, r3, #24
 800bca4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcb4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bcb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bcba:	7afb      	ldrb	r3, [r7, #11]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d10f      	bne.n	800bce0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcda:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bcde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	371c      	adds	r7, #28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	4f54300a 	.word	0x4f54300a

0800bcf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3301      	adds	r3, #1
 800bd04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd0c:	d901      	bls.n	800bd12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e01b      	b.n	800bd4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	daf2      	bge.n	800bd00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	f043 0201 	orr.w	r2, r3, #1
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd36:	d901      	bls.n	800bd3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e006      	b.n	800bd4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d0f0      	beq.n	800bd2a <USB_CoreReset+0x36>

  return HAL_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <memset>:
 800bd56:	4402      	add	r2, r0
 800bd58:	4603      	mov	r3, r0
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d100      	bne.n	800bd60 <memset+0xa>
 800bd5e:	4770      	bx	lr
 800bd60:	f803 1b01 	strb.w	r1, [r3], #1
 800bd64:	e7f9      	b.n	800bd5a <memset+0x4>
	...

0800bd68 <__libc_init_array>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	4d0d      	ldr	r5, [pc, #52]	@ (800bda0 <__libc_init_array+0x38>)
 800bd6c:	2600      	movs	r6, #0
 800bd6e:	4c0d      	ldr	r4, [pc, #52]	@ (800bda4 <__libc_init_array+0x3c>)
 800bd70:	1b64      	subs	r4, r4, r5
 800bd72:	10a4      	asrs	r4, r4, #2
 800bd74:	42a6      	cmp	r6, r4
 800bd76:	d109      	bne.n	800bd8c <__libc_init_array+0x24>
 800bd78:	4d0b      	ldr	r5, [pc, #44]	@ (800bda8 <__libc_init_array+0x40>)
 800bd7a:	2600      	movs	r6, #0
 800bd7c:	4c0b      	ldr	r4, [pc, #44]	@ (800bdac <__libc_init_array+0x44>)
 800bd7e:	f000 f817 	bl	800bdb0 <_init>
 800bd82:	1b64      	subs	r4, r4, r5
 800bd84:	10a4      	asrs	r4, r4, #2
 800bd86:	42a6      	cmp	r6, r4
 800bd88:	d105      	bne.n	800bd96 <__libc_init_array+0x2e>
 800bd8a:	bd70      	pop	{r4, r5, r6, pc}
 800bd8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd90:	3601      	adds	r6, #1
 800bd92:	4798      	blx	r3
 800bd94:	e7ee      	b.n	800bd74 <__libc_init_array+0xc>
 800bd96:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd9a:	3601      	adds	r6, #1
 800bd9c:	4798      	blx	r3
 800bd9e:	e7f2      	b.n	800bd86 <__libc_init_array+0x1e>
 800bda0:	0800bed0 	.word	0x0800bed0
 800bda4:	0800bed0 	.word	0x0800bed0
 800bda8:	0800bed0 	.word	0x0800bed0
 800bdac:	0800bed4 	.word	0x0800bed4

0800bdb0 <_init>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	bf00      	nop
 800bdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb6:	bc08      	pop	{r3}
 800bdb8:	469e      	mov	lr, r3
 800bdba:	4770      	bx	lr

0800bdbc <_fini>:
 800bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbe:	bf00      	nop
 800bdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc2:	bc08      	pop	{r3}
 800bdc4:	469e      	mov	lr, r3
 800bdc6:	4770      	bx	lr
