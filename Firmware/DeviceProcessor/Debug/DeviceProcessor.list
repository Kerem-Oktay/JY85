
DeviceProcessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c264  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800c49c  0800c49c  0000d49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c59c  0800c59c  0000d59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c5a4  0800c5a4  0000d5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c5a8  0800c5a8  0000d5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000019  20000000  0800c5ac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cec  2000001c  0800c5c5  0000e01c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000d08  0800c5c5  0000ed08  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e019  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022cff  00000000  00000000  0000e04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004000  00000000  00000000  00030d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c68  00000000  00000000  00034d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001611  00000000  00000000  000369b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039b84  00000000  00000000  00037fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025291  00000000  00000000  00071b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171b05  00000000  00000000  00096dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002088e3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b5c  00000000  00000000  00208928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00210484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000001c 	.word	0x2000001c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c484 	.word	0x0800c484

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000020 	.word	0x20000020
 8000274:	0800c484 	.word	0x0800c484

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800059e:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b4:	68fb      	ldr	r3, [r7, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	46020c00 	.word	0x46020c00

080005c8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005d6:	4909      	ldr	r1, [pc, #36]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	46020c00 	.word	0x46020c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f001 fafc 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000608:	f000 f88d 	bl	8000726 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f820 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 fcb4 	bl	8000f7c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000614:	f000 f8ee 	bl	80007f4 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8000618:	f000 f894 	bl	8000744 <MX_ADC1_Init>
  MX_ICACHE_Init();
 800061c:	f000 f90a 	bl	8000834 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8000620:	f000 fbf8 	bl	8000e14 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000624:	f000 fc2c 	bl	8000e80 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000628:	f000 f918 	bl	800085c <MX_SPI1_Init>
  MX_FLASH_Init();
 800062c:	f000 f8d0 	bl	80007d0 <MX_FLASH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 fc72 	bl	8000f18 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM15_Init();
 8000634:	f000 faa8 	bl	8000b88 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000638:	f000 faf8 	bl	8000c2c <MX_TIM16_Init>
  MX_TIM17_Init();
 800063c:	f000 fb70 	bl	8000d20 <MX_TIM17_Init>
  MX_TIM8_Init();
 8000640:	f000 f9ea 	bl	8000a18 <MX_TIM8_Init>
  MX_SPI3_Init();
 8000644:	f000 f97a 	bl	800093c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SPI_Transmit(&hspi1, spiTxBuffer1, 10, 1000);
  //HAL_DELAY(3000);
  run_device();
 8000648:	f001 fa74 	bl	8001b34 <run_device>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <main+0x4c>

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b09e      	sub	sp, #120	@ 0x78
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	2260      	movs	r2, #96	@ 0x60
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00b fee3 	bl	800c42a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
 8000672:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000674:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000678:	f004 f962 	bl	8004940 <HAL_PWREx_ControlVoltageScaling>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000682:	f000 fda9 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000686:	2362      	movs	r3, #98	@ 0x62
 8000688:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000696:	2310      	movs	r3, #16
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800069a:	2310      	movs	r3, #16
 800069c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 800069e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 80006a4:	2310      	movs	r3, #16
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006b8:	2314      	movs	r3, #20
 80006ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80006c8:	230c      	movs	r3, #12
 80006ca:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fa3f 	bl	8004b58 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 fd7a 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	231f      	movs	r3, #31
 80006e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2303      	movs	r3, #3
 80006ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	2104      	movs	r1, #4
 8000700:	4618      	mov	r0, r3
 8000702:	f005 f905 	bl	8005910 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800070c:	f000 fd64 	bl	80011d8 <Error_Handler>
  }

  /** MCO configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_8);
 8000710:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000714:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000718:	2000      	movs	r0, #0
 800071a:	f005 faeb 	bl	8005cf4 <HAL_RCC_MCOConfig>
}
 800071e:	bf00      	nop
 8000720:	3778      	adds	r7, #120	@ 0x78
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800072a:	f004 f9f5 	bl	8004b18 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800072e:	2002      	movs	r0, #2
 8000730:	f004 f992 	bl	8004a58 <HAL_PWREx_ConfigSupply>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800073a:	f000 fd4d 	bl	80011d8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_ADC1_Init+0x84>)
 800074a:	4a20      	ldr	r2, [pc, #128]	@ (80007cc <MX_ADC1_Init+0x88>)
 800074c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_ADC1_Init+0x84>)
 8000750:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000754:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000756:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_ADC1_Init+0x84>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800075c:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_ADC1_Init+0x84>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_ADC1_Init+0x84>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_ADC1_Init+0x84>)
 800076a:	2204      	movs	r2, #4
 800076c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_ADC1_Init+0x84>)
 8000770:	2200      	movs	r2, #0
 8000772:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_ADC1_Init+0x84>)
 8000776:	2201      	movs	r2, #1
 8000778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_ADC1_Init+0x84>)
 800077e:	2201      	movs	r2, #1
 8000780:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_ADC1_Init+0x84>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_ADC1_Init+0x84>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <MX_ADC1_Init+0x84>)
 8000794:	2200      	movs	r2, #0
 8000796:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_ADC1_Init+0x84>)
 800079a:	2200      	movs	r2, #0
 800079c:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <MX_ADC1_Init+0x84>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_ADC1_Init+0x84>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007aa:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <MX_ADC1_Init+0x84>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_ADC1_Init+0x84>)
 80007b4:	f001 fc0c 	bl	8001fd0 <HAL_ADC_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80007be:	f000 fd0b 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000038 	.word	0x20000038
 80007cc:	42028000 	.word	0x42028000

080007d0 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 80007d4:	f002 fda4 	bl	8003320 <HAL_FLASH_Unlock>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 80007de:	f000 fcfb 	bl	80011d8 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80007e2:	f002 fdbf 	bl	8003364 <HAL_FLASH_Lock>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 80007ec:	f000 fcf4 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <MX_GPDMA1_Init+0x3c>)
 80007fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000800:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <MX_GPDMA1_Init+0x3c>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_GPDMA1_Init+0x3c>)
 800080c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2054      	movs	r0, #84	@ 0x54
 800081e:	f001 ff59 	bl	80026d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8000822:	2054      	movs	r0, #84	@ 0x54
 8000824:	f001 ff70 	bl	8002708 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	46020c00 	.word	0x46020c00

08000834 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000838:	2000      	movs	r0, #0
 800083a:	f002 ffd9 	bl	80037f0 <HAL_ICACHE_ConfigAssociativityMode>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000844:	f000 fcc8 	bl	80011d8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000848:	f002 fff2 	bl	8003830 <HAL_ICACHE_Enable>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000852:	f000 fcc1 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800086c:	4b31      	ldr	r3, [pc, #196]	@ (8000934 <MX_SPI1_Init+0xd8>)
 800086e:	4a32      	ldr	r2, [pc, #200]	@ (8000938 <MX_SPI1_Init+0xdc>)
 8000870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000872:	4b30      	ldr	r3, [pc, #192]	@ (8000934 <MX_SPI1_Init+0xd8>)
 8000874:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000878:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <MX_SPI1_Init+0xd8>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <MX_SPI1_Init+0xd8>)
 8000882:	2207      	movs	r2, #7
 8000884:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000886:	4b2b      	ldr	r3, [pc, #172]	@ (8000934 <MX_SPI1_Init+0xd8>)
 8000888:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800088c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088e:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <MX_SPI1_Init+0xd8>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <MX_SPI1_Init+0xd8>)
 8000896:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800089a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800089c:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <MX_SPI1_Init+0xd8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a2:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a8:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ae:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008b6:	2207      	movs	r2, #7
 80008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008d4:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008e0:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008e6:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <MX_SPI1_Init+0xd8>)
 80008fa:	f008 f8a9 	bl	8008a50 <HAL_SPI_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000904:	f000 fc68 	bl	80011d8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800090c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000910:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <MX_SPI1_Init+0xd8>)
 800091c:	f008 fcab 	bl	8009276 <HAL_SPIEx_SetConfigAutonomousMode>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000926:	f000 fc57 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000c4 	.word	0x200000c4
 8000938:	40013000 	.word	0x40013000

0800093c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800094c:	4b30      	ldr	r3, [pc, #192]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 800094e:	4a31      	ldr	r2, [pc, #196]	@ (8000a14 <MX_SPI3_Init+0xd8>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b2f      	ldr	r3, [pc, #188]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 8000954:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000958:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 8000962:	2207      	movs	r2, #7
 8000964:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000972:	4b27      	ldr	r3, [pc, #156]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 8000974:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000978:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097a:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8000992:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 8000994:	2207      	movs	r2, #7
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000998:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 800099a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800099e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009d6:	480e      	ldr	r0, [pc, #56]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009d8:	f008 f83a 	bl	8008a50 <HAL_SPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_SPI3_Init+0xaa>
  {
    Error_Handler();
 80009e2:	f000 fbf9 	bl	80011d8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 80009ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009ee:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_SPI3_Init+0xd4>)
 80009fa:	f008 fc3c 	bl	8009276 <HAL_SPIEx_SetConfigAutonomousMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_SPI3_Init+0xcc>
  {
    Error_Handler();
 8000a04:	f000 fbe8 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000154 	.word	0x20000154
 8000a14:	46002000 	.word	0x46002000

08000a18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b09c      	sub	sp, #112	@ 0x70
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2234      	movs	r2, #52	@ 0x34
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00b fce9 	bl	800c42a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a58:	4b49      	ldr	r3, [pc, #292]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8000b84 <MX_TIM8_Init+0x16c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a5e:	4b48      	ldr	r3, [pc, #288]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b46      	ldr	r3, [pc, #280]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a6a:	4b45      	ldr	r3, [pc, #276]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000a6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a72:	4b43      	ldr	r3, [pc, #268]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a78:	4b41      	ldr	r3, [pc, #260]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a7e:	4b40      	ldr	r3, [pc, #256]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a84:	483e      	ldr	r0, [pc, #248]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000a86:	f008 fc37 	bl	80092f8 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000a90:	f000 fba2 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a98:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a9a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4837      	ldr	r0, [pc, #220]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000aa2:	f009 f823 	bl	8009aec <HAL_TIM_ConfigClockSource>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000aac:	f000 fb94 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000ab0:	4833      	ldr	r0, [pc, #204]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000ab2:	f008 fc78 	bl	80093a6 <HAL_TIM_OC_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000abc:	f000 fb8c 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000acc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482b      	ldr	r0, [pc, #172]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000ad4:	f009 fea4 	bl	800a820 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000ade:	f000 fb7b 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000ae2:	2330      	movs	r3, #48	@ 0x30
 8000ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aea:	2300      	movs	r3, #0
 8000aec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aee:	2300      	movs	r3, #0
 8000af0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000afa:	2300      	movs	r3, #0
 8000afc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b02:	2200      	movs	r2, #0
 8000b04:	4619      	mov	r1, r3
 8000b06:	481e      	ldr	r0, [pc, #120]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000b08:	f008 fe62 	bl	80097d0 <HAL_TIM_OC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000b12:	f000 fb61 	bl	80011d8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	699a      	ldr	r2, [r3, #24]
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f042 0208 	orr.w	r2, r2, #8
 8000b24:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000b64:	f009 ff1e 	bl	800a9a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8000b6e:	f000 fb33 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <MX_TIM8_Init+0x168>)
 8000b74:	f000 fd8e 	bl	8001694 <HAL_TIM_MspPostInit>

}
 8000b78:	bf00      	nop
 8000b7a:	3770      	adds	r7, #112	@ 0x70
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200001e4 	.word	0x200001e4
 8000b84:	40013400 	.word	0x40013400

08000b88 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c28 <MX_TIM15_Init+0xa0>)
 8000baa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000bba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bbe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000bd2:	4814      	ldr	r0, [pc, #80]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000bd4:	f008 fb90 	bl	80092f8 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000bde:	f000 fafb 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000bf0:	f008 ff7c 	bl	8009aec <HAL_TIM_ConfigClockSource>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000bfa:	f000 faed 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <MX_TIM15_Init+0x9c>)
 8000c0c:	f009 fe08 	bl	800a820 <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000c16:	f000 fadf 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000230 	.word	0x20000230
 8000c28:	40014000 	.word	0x40014000

08000c2c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b094      	sub	sp, #80	@ 0x50
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]
 8000c42:	615a      	str	r2, [r3, #20]
 8000c44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2234      	movs	r2, #52	@ 0x34
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00b fbec 	bl	800c42a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c52:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000c54:	4a31      	ldr	r2, [pc, #196]	@ (8000d1c <MX_TIM16_Init+0xf0>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000c58:	4b2f      	ldr	r3, [pc, #188]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000c64:	4b2c      	ldr	r3, [pc, #176]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c6a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c72:	4b29      	ldr	r3, [pc, #164]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c78:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c7e:	4826      	ldr	r0, [pc, #152]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000c80:	f008 fb3a 	bl	80092f8 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000c8a:	f000 faa5 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000c8e:	4822      	ldr	r0, [pc, #136]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000c90:	f008 fb89 	bl	80093a6 <HAL_TIM_OC_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000c9a:	f000 fa9d 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000caa:	2300      	movs	r3, #0
 8000cac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4815      	ldr	r0, [pc, #84]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000cc4:	f008 fd84 	bl	80097d0 <HAL_TIM_OC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cce:	f000 fa83 	bl	80011d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000cfa:	f009 fe53 	bl	800a9a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000d04:	f000 fa68 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d08:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <MX_TIM16_Init+0xec>)
 8000d0a:	f000 fcc3 	bl	8001694 <HAL_TIM_MspPostInit>

}
 8000d0e:	bf00      	nop
 8000d10:	3750      	adds	r7, #80	@ 0x50
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000027c 	.word	0x2000027c
 8000d1c:	40014400 	.word	0x40014400

08000d20 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	@ 0x50
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]
 8000d38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2234      	movs	r2, #52	@ 0x34
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00b fb72 	bl	800c42a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d46:	4b31      	ldr	r3, [pc, #196]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000d48:	4a31      	ldr	r2, [pc, #196]	@ (8000e10 <MX_TIM17_Init+0xf0>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b2e      	ldr	r3, [pc, #184]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d58:	4b2c      	ldr	r3, [pc, #176]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000d5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d5e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d66:	4b29      	ldr	r3, [pc, #164]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d6c:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000d6e:	2280      	movs	r2, #128	@ 0x80
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d72:	4826      	ldr	r0, [pc, #152]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000d74:	f008 fac0 	bl	80092f8 <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d7e:	f000 fa2b 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d82:	4822      	ldr	r0, [pc, #136]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000d84:	f008 fcc2 	bl	800970c <HAL_TIM_PWM_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000d8e:	f000 fa23 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2360      	movs	r3, #96	@ 0x60
 8000d94:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000db2:	2200      	movs	r2, #0
 8000db4:	4619      	mov	r1, r3
 8000db6:	4815      	ldr	r0, [pc, #84]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000db8:	f008 fd84 	bl	80098c4 <HAL_TIM_PWM_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000dc2:	f000 fa09 	bl	80011d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000dee:	f009 fdd9 	bl	800a9a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000df8:	f000 f9ee 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <MX_TIM17_Init+0xec>)
 8000dfe:	f000 fc49 	bl	8001694 <HAL_TIM_MspPostInit>

}
 8000e02:	bf00      	nop
 8000e04:	3750      	adds	r7, #80	@ 0x50
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200002c8 	.word	0x200002c8
 8000e10:	40014800 	.word	0x40014800

08000e14 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000e2a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000e2e:	f7ff fbcb 	bl	80005c8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e32:	2002      	movs	r0, #2
 8000e34:	f7ff fbac 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff fba9 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e44:	2303      	movs	r3, #3
 8000e46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <MX_UCPD1_Init+0x64>)
 8000e52:	f00a fca0 	bl	800b796 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <MX_UCPD1_Init+0x68>)
 8000e6a:	f00a fc94 	bl	800b796 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	42020400 	.word	0x42020400
 8000e7c:	42020000 	.word	0x42020000

08000e80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e84:	4b22      	ldr	r3, [pc, #136]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000e86:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <MX_USART1_UART_Init+0x94>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec8:	4811      	ldr	r0, [pc, #68]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eca:	f009 fe05 	bl	800aad8 <HAL_UART_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ed4:	f000 f980 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000edc:	f00a fa46 	bl	800b36c <HAL_UARTEx_SetTxFifoThreshold>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ee6:	f000 f977 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4808      	ldr	r0, [pc, #32]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eee:	f00a fa7b 	bl	800b3e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef8:	f000 f96e 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000efe:	f00a f9fc 	bl	800b2fa <HAL_UARTEx_DisableFifoMode>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f08:	f000 f966 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000038c 	.word	0x2000038c
 8000f14:	40013800 	.word	0x40013800

08000f18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f1e:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000f20:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f24:	2206      	movs	r2, #6
 8000f26:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f60:	f002 fc76 	bl	8003850 <HAL_PCD_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f6a:	f000 f935 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000420 	.word	0x20000420
 8000f78:	42040000 	.word	0x42040000

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	@ 0x30
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4b87      	ldr	r3, [pc, #540]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f98:	4a85      	ldr	r2, [pc, #532]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fa2:	4b83      	ldr	r3, [pc, #524]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b7f      	ldr	r3, [pc, #508]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fce:	4b78      	ldr	r3, [pc, #480]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd4:	4a76      	ldr	r2, [pc, #472]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000fd6:	f043 0320 	orr.w	r3, r3, #32
 8000fda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fde:	4b74      	ldr	r3, [pc, #464]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b70      	ldr	r3, [pc, #448]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff2:	4a6f      	ldr	r2, [pc, #444]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8000ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b69      	ldr	r3, [pc, #420]	@ (80011b0 <MX_GPIO_Init+0x234>)
 800100c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001010:	4a67      	ldr	r2, [pc, #412]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800101a:	4b65      	ldr	r3, [pc, #404]	@ (80011b0 <MX_GPIO_Init+0x234>)
 800101c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001028:	4b61      	ldr	r3, [pc, #388]	@ (80011b0 <MX_GPIO_Init+0x234>)
 800102a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800102e:	4a60      	ldr	r2, [pc, #384]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001038:	4b5d      	ldr	r3, [pc, #372]	@ (80011b0 <MX_GPIO_Init+0x234>)
 800103a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001046:	4b5a      	ldr	r3, [pc, #360]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8001048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800104c:	4a58      	ldr	r2, [pc, #352]	@ (80011b0 <MX_GPIO_Init+0x234>)
 800104e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001052:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001056:	4b56      	ldr	r3, [pc, #344]	@ (80011b0 <MX_GPIO_Init+0x234>)
 8001058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800105c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 614a 	mov.w	r1, #3232	@ 0xca0
 800106a:	4852      	ldr	r0, [pc, #328]	@ (80011b4 <MX_GPIO_Init+0x238>)
 800106c:	f002 fb6c 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2104      	movs	r1, #4
 8001074:	4850      	ldr	r0, [pc, #320]	@ (80011b8 <MX_GPIO_Init+0x23c>)
 8001076:	f002 fb67 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2180      	movs	r1, #128	@ 0x80
 800107e:	484f      	ldr	r0, [pc, #316]	@ (80011bc <MX_GPIO_Init+0x240>)
 8001080:	f002 fb62 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001084:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001088:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4849      	ldr	r0, [pc, #292]	@ (80011c0 <MX_GPIO_Init+0x244>)
 800109a:	f002 f97d 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800109e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a4:	4b47      	ldr	r3, [pc, #284]	@ (80011c4 <MX_GPIO_Init+0x248>)
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4842      	ldr	r0, [pc, #264]	@ (80011bc <MX_GPIO_Init+0x240>)
 80010b4:	f002 f970 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010bc:	4b42      	ldr	r3, [pc, #264]	@ (80011c8 <MX_GPIO_Init+0x24c>)
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4840      	ldr	r0, [pc, #256]	@ (80011cc <MX_GPIO_Init+0x250>)
 80010cc:	f002 f964 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|UCPD_DBn_Pin;
 80010d0:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	4832      	ldr	r0, [pc, #200]	@ (80011b4 <MX_GPIO_Init+0x238>)
 80010ea:	f002 f955 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80010ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	482c      	ldr	r0, [pc, #176]	@ (80011b4 <MX_GPIO_Init+0x238>)
 8001104:	f002 f948 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001108:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <MX_GPIO_Init+0x254>)
 800111e:	f002 f93b 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001122:	2304      	movs	r3, #4
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	481f      	ldr	r0, [pc, #124]	@ (80011b8 <MX_GPIO_Init+0x23c>)
 800113a:	f002 f92d 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001146:	2301      	movs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4819      	ldr	r0, [pc, #100]	@ (80011bc <MX_GPIO_Init+0x240>)
 8001156:	f002 f91f 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800115a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2302      	movs	r3, #2
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4817      	ldr	r0, [pc, #92]	@ (80011d4 <MX_GPIO_Init+0x258>)
 8001178:	f002 f90e 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800117c:	2380      	movs	r3, #128	@ 0x80
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001184:	2301      	movs	r3, #1
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001188:	2302      	movs	r3, #2
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <MX_GPIO_Init+0x238>)
 8001194:	f002 f900 	bl	8003398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	200c      	movs	r0, #12
 800119e:	f001 fa99 	bl	80026d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011a2:	200c      	movs	r0, #12
 80011a4:	f001 fab0 	bl	8002708 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a8:	bf00      	nop
 80011aa:	3730      	adds	r7, #48	@ 0x30
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	46020c00 	.word	0x46020c00
 80011b4:	42020400 	.word	0x42020400
 80011b8:	42021800 	.word	0x42021800
 80011bc:	42020800 	.word	0x42020800
 80011c0:	42021000 	.word	0x42021000
 80011c4:	10210000 	.word	0x10210000
 80011c8:	10110000 	.word	0x10110000
 80011cc:	42021400 	.word	0x42021400
 80011d0:	42020c00 	.word	0x42020c00
 80011d4:	42020000 	.word	0x42020000

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_MspInit+0x40>)
 80011ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001224 <HAL_MspInit+0x40>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_MspInit+0x40>)
 80011fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001208:	f003 fc76 	bl	8004af8 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 800120c:	f003 fc84 	bl	8004b18 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 8001210:	f003 fc92 	bl	8004b38 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001214:	2004      	movs	r0, #4
 8001216:	f001 fa52 	bl	80026be <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	46020c00 	.word	0x46020c00

08001228 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0bc      	sub	sp, #240	@ 0xf0
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	22c0      	movs	r2, #192	@ 0xc0
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f00b f8ee 	bl	800c42a <memset>
  if(hadc->Instance==ADC1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a33      	ldr	r2, [pc, #204]	@ (8001320 <HAL_ADC_MspInit+0xf8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d15e      	bne.n	8001316 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001258:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001264:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001268:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126c:	f107 0318 	add.w	r3, r7, #24
 8001270:	4618      	mov	r0, r3
 8001272:	f004 ff55 	bl	8006120 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 800127c:	f7ff ffac 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001280:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <HAL_ADC_MspInit+0xfc>)
 8001282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001286:	4a27      	ldr	r2, [pc, #156]	@ (8001324 <HAL_ADC_MspInit+0xfc>)
 8001288:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800128c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001290:	4b24      	ldr	r3, [pc, #144]	@ (8001324 <HAL_ADC_MspInit+0xfc>)
 8001292:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <HAL_ADC_MspInit+0xfc>)
 80012a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001324 <HAL_ADC_MspInit+0xfc>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <HAL_ADC_MspInit+0xfc>)
 80012b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <HAL_ADC_MspInit+0xfc>)
 80012be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c2:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <HAL_ADC_MspInit+0xfc>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <HAL_ADC_MspInit+0xfc>)
 80012ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80012da:	2304      	movs	r3, #4
 80012dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	@ (8001328 <HAL_ADC_MspInit+0x100>)
 80012f4:	f002 f850 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800130e:	4619      	mov	r1, r3
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <HAL_ADC_MspInit+0x104>)
 8001312:	f002 f841 	bl	8003398 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001316:	bf00      	nop
 8001318:	37f0      	adds	r7, #240	@ 0xf0
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	42028000 	.word	0x42028000
 8001324:	46020c00 	.word	0x46020c00
 8001328:	42020800 	.word	0x42020800
 800132c:	42020400 	.word	0x42020400

08001330 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0be      	sub	sp, #248	@ 0xf8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	22c0      	movs	r2, #192	@ 0xc0
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00b f86a 	bl	800c42a <memset>
  if(hspi->Instance==SPI1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a71      	ldr	r2, [pc, #452]	@ (8001520 <HAL_SPI_MspInit+0x1f0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d16b      	bne.n	8001438 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001360:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 800136c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fed1 	bl	8006120 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001384:	f7ff ff28 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001388:	4b66      	ldr	r3, [pc, #408]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 800138a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800138e:	4a65      	ldr	r2, [pc, #404]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 8001390:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001394:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001398:	4b62      	ldr	r3, [pc, #392]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 800139a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800139e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 80013a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 80013b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b57      	ldr	r3, [pc, #348]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 80013c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ca:	4a56      	ldr	r2, [pc, #344]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013d4:	4b53      	ldr	r3, [pc, #332]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 80013d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013e2:	23e0      	movs	r3, #224	@ 0xe0
 80013e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fa:	2305      	movs	r3, #5
 80013fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001404:	4619      	mov	r1, r3
 8001406:	4848      	ldr	r0, [pc, #288]	@ (8001528 <HAL_SPI_MspInit+0x1f8>)
 8001408:	f001 ffc6 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800140c:	2301      	movs	r3, #1
 800140e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001424:	2305      	movs	r3, #5
 8001426:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800142e:	4619      	mov	r1, r3
 8001430:	483e      	ldr	r0, [pc, #248]	@ (800152c <HAL_SPI_MspInit+0x1fc>)
 8001432:	f001 ffb1 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001436:	e06f      	b.n	8001518 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a3c      	ldr	r2, [pc, #240]	@ (8001530 <HAL_SPI_MspInit+0x200>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d16a      	bne.n	8001518 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001442:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 800144e:	2308      	movs	r3, #8
 8001450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f004 fe61 	bl	8006120 <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8001464:	f7ff feb8 	bl	80011d8 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001468:	4b2e      	ldr	r3, [pc, #184]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 800146a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800146e:	4a2d      	ldr	r2, [pc, #180]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 800147a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 8001488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148c:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 8001498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 80014a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <HAL_SPI_MspInit+0x1f4>)
 80014b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c2:	2310      	movs	r3, #16
 80014c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014da:	2306      	movs	r3, #6
 80014dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4810      	ldr	r0, [pc, #64]	@ (8001528 <HAL_SPI_MspInit+0x1f8>)
 80014e8:	f001 ff56 	bl	8003398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014ec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80014f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001506:	2306      	movs	r3, #6
 8001508:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001510:	4619      	mov	r1, r3
 8001512:	4808      	ldr	r0, [pc, #32]	@ (8001534 <HAL_SPI_MspInit+0x204>)
 8001514:	f001 ff40 	bl	8003398 <HAL_GPIO_Init>
}
 8001518:	bf00      	nop
 800151a:	37f8      	adds	r7, #248	@ 0xf8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40013000 	.word	0x40013000
 8001524:	46020c00 	.word	0x46020c00
 8001528:	42020000 	.word	0x42020000
 800152c:	42020400 	.word	0x42020400
 8001530:	46002000 	.word	0x46002000
 8001534:	42020800 	.word	0x42020800

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a4c      	ldr	r2, [pc, #304]	@ (8001678 <HAL_TIM_Base_MspInit+0x140>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d153      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800154a:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 800154c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001550:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 8001552:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001556:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800155a:	4b48      	ldr	r3, [pc, #288]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 800155c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]

    /* TIM8 DMA Init */
    /* GPDMA1_REQUEST_TIM8_UP Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8001568:	4b45      	ldr	r3, [pc, #276]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 800156a:	4a46      	ldr	r2, [pc, #280]	@ (8001684 <HAL_TIM_Base_MspInit+0x14c>)
 800156c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM8_UP;
 800156e:	4b44      	ldr	r3, [pc, #272]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 8001570:	2235      	movs	r2, #53	@ 0x35
 8001572:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001574:	4b42      	ldr	r3, [pc, #264]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157a:	4b41      	ldr	r3, [pc, #260]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 8001580:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 8001586:	4b3e      	ldr	r3, [pc, #248]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 8001588:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800158c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800158e:	4b3c      	ldr	r3, [pc, #240]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 8001590:	2201      	movs	r2, #1
 8001592:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001594:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 8001596:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800159a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800159c:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 800159e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015a2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 80015a4:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 80015aa:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80015b0:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80015b6:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 80015bc:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 80015be:	2200      	movs	r2, #0
 80015c0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 80015c2:	482f      	ldr	r0, [pc, #188]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 80015c4:	f001 f962 	bl	800288c <HAL_DMA_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_TIM_Base_MspInit+0x9a>
    {
      Error_Handler();
 80015ce:	f7ff fe03 	bl	80011d8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel12);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 80015d6:	621a      	str	r2, [r3, #32]
 80015d8:	4a29      	ldr	r2, [pc, #164]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 80015de:	2110      	movs	r1, #16
 80015e0:	4827      	ldr	r0, [pc, #156]	@ (8001680 <HAL_TIM_Base_MspInit+0x148>)
 80015e2:	f001 fbe0 	bl	8002da6 <HAL_DMA_ConfigChannelAttributes>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d040      	beq.n	800166e <HAL_TIM_Base_MspInit+0x136>
    {
      Error_Handler();
 80015ec:	f7ff fdf4 	bl	80011d8 <Error_Handler>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80015f0:	e03d      	b.n	800166e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM15)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a24      	ldr	r2, [pc, #144]	@ (8001688 <HAL_TIM_Base_MspInit+0x150>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d10f      	bne.n	800161c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80015fc:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 80015fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001602:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001608:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 800160e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
}
 800161a:	e028      	b.n	800166e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM16)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <HAL_TIM_Base_MspInit+0x154>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10f      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 8001628:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800162c:	4a13      	ldr	r2, [pc, #76]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 800162e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001632:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 8001638:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	e013      	b.n	800166e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM17)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a11      	ldr	r2, [pc, #68]	@ (8001690 <HAL_TIM_Base_MspInit+0x158>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d10e      	bne.n	800166e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 8001652:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800165c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_TIM_Base_MspInit+0x144>)
 8001662:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40013400 	.word	0x40013400
 800167c:	46020c00 	.word	0x46020c00
 8001680:	20000314 	.word	0x20000314
 8001684:	40020650 	.word	0x40020650
 8001688:	40014000 	.word	0x40014000
 800168c:	40014400 	.word	0x40014400
 8001690:	40014800 	.word	0x40014800

08001694 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a38      	ldr	r2, [pc, #224]	@ (8001794 <HAL_TIM_MspPostInit+0x100>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d11f      	bne.n	80016f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <HAL_TIM_MspPostInit+0x104>)
 80016b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016bc:	4a36      	ldr	r2, [pc, #216]	@ (8001798 <HAL_TIM_MspPostInit+0x104>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <HAL_TIM_MspPostInit+0x104>)
 80016c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016d4:	2340      	movs	r3, #64	@ 0x40
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016e4:	2303      	movs	r3, #3
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	482b      	ldr	r0, [pc, #172]	@ (800179c <HAL_TIM_MspPostInit+0x108>)
 80016f0:	f001 fe52 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80016f4:	e04a      	b.n	800178c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM16)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a29      	ldr	r2, [pc, #164]	@ (80017a0 <HAL_TIM_MspPostInit+0x10c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d120      	bne.n	8001742 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <HAL_TIM_MspPostInit+0x104>)
 8001702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001706:	4a24      	ldr	r2, [pc, #144]	@ (8001798 <HAL_TIM_MspPostInit+0x104>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001710:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <HAL_TIM_MspPostInit+0x104>)
 8001712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800171e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001730:	230e      	movs	r3, #14
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	481a      	ldr	r0, [pc, #104]	@ (80017a4 <HAL_TIM_MspPostInit+0x110>)
 800173c:	f001 fe2c 	bl	8003398 <HAL_GPIO_Init>
}
 8001740:	e024      	b.n	800178c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM17)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a18      	ldr	r2, [pc, #96]	@ (80017a8 <HAL_TIM_MspPostInit+0x114>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d11f      	bne.n	800178c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_TIM_MspPostInit+0x104>)
 800174e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001752:	4a11      	ldr	r2, [pc, #68]	@ (8001798 <HAL_TIM_MspPostInit+0x104>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_TIM_MspPostInit+0x104>)
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800176a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 800177c:	230e      	movs	r3, #14
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <HAL_TIM_MspPostInit+0x110>)
 8001788:	f001 fe06 	bl	8003398 <HAL_GPIO_Init>
}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	@ 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40013400 	.word	0x40013400
 8001798:	46020c00 	.word	0x46020c00
 800179c:	42020800 	.word	0x42020800
 80017a0:	40014400 	.word	0x40014400
 80017a4:	42020400 	.word	0x42020400
 80017a8:	40014800 	.word	0x40014800

080017ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0ba      	sub	sp, #232	@ 0xe8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	22c0      	movs	r2, #192	@ 0xc0
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00a fe2c 	bl	800c42a <memset>
  if(huart->Instance==USART1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a26      	ldr	r2, [pc, #152]	@ (8001870 <HAL_UART_MspInit+0xc4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d145      	bne.n	8001868 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017dc:	f04f 0201 	mov.w	r2, #1
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017e8:	2300      	movs	r3, #0
 80017ea:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fc95 	bl	8006120 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80017fc:	f7ff fcec 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_UART_MspInit+0xc8>)
 8001802:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001806:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <HAL_UART_MspInit+0xc8>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_UART_MspInit+0xc8>)
 8001812:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_UART_MspInit+0xc8>)
 8001820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001824:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <HAL_UART_MspInit+0xc8>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_UART_MspInit+0xc8>)
 8001830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800183c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001840:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800184a:	2302      	movs	r3, #2
 800184c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001856:	2307      	movs	r3, #7
 8001858:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001860:	4619      	mov	r1, r3
 8001862:	4805      	ldr	r0, [pc, #20]	@ (8001878 <HAL_UART_MspInit+0xcc>)
 8001864:	f001 fd98 	bl	8003398 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001868:	bf00      	nop
 800186a:	37e8      	adds	r7, #232	@ 0xe8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40013800 	.word	0x40013800
 8001874:	46020c00 	.word	0x46020c00
 8001878:	42020000 	.word	0x42020000

0800187c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0bc      	sub	sp, #240	@ 0xf0
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001894:	f107 0318 	add.w	r3, r7, #24
 8001898:	22c0      	movs	r2, #192	@ 0xc0
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f00a fdc4 	bl	800c42a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a3c      	ldr	r2, [pc, #240]	@ (8001998 <HAL_PCD_MspInit+0x11c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d171      	bne.n	8001990 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80018ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018be:	f107 0318 	add.w	r3, r7, #24
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 fc2c 	bl	8006120 <HAL_RCCEx_PeriphCLKConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80018ce:	f7ff fc83 	bl	80011d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b32      	ldr	r3, [pc, #200]	@ (800199c <HAL_PCD_MspInit+0x120>)
 80018d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d8:	4a30      	ldr	r2, [pc, #192]	@ (800199c <HAL_PCD_MspInit+0x120>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018e2:	4b2e      	ldr	r3, [pc, #184]	@ (800199c <HAL_PCD_MspInit+0x120>)
 80018e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80018f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80018f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800190a:	230a      	movs	r3, #10
 800190c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001914:	4619      	mov	r1, r3
 8001916:	4822      	ldr	r0, [pc, #136]	@ (80019a0 <HAL_PCD_MspInit+0x124>)
 8001918:	f001 fd3e 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800191c:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <HAL_PCD_MspInit+0x120>)
 800191e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001922:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <HAL_PCD_MspInit+0x120>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001928:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800192c:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <HAL_PCD_MspInit+0x120>)
 800192e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193a:	4b18      	ldr	r3, [pc, #96]	@ (800199c <HAL_PCD_MspInit+0x120>)
 800193c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d119      	bne.n	800197c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_PCD_MspInit+0x120>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800194e:	4a13      	ldr	r2, [pc, #76]	@ (800199c <HAL_PCD_MspInit+0x120>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001958:	4b10      	ldr	r3, [pc, #64]	@ (800199c <HAL_PCD_MspInit+0x120>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001966:	f003 f8c7 	bl	8004af8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <HAL_PCD_MspInit+0x120>)
 800196c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001970:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <HAL_PCD_MspInit+0x120>)
 8001972:	f023 0304 	bic.w	r3, r3, #4
 8001976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800197a:	e001      	b.n	8001980 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800197c:	f003 f8bc 	bl	8004af8 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2049      	movs	r0, #73	@ 0x49
 8001986:	f000 fea5 	bl	80026d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800198a:	2049      	movs	r0, #73	@ 0x49
 800198c:	f000 febc 	bl	8002708 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001990:	bf00      	nop
 8001992:	37f0      	adds	r7, #240	@ 0xf0
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	42040000 	.word	0x42040000
 800199c:	46020c00 	.word	0x46020c00
 80019a0:	42020000 	.word	0x42020000

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <NMI_Handler+0x4>

080019ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <MemManage_Handler+0x4>

080019bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <UsageFault_Handler+0x4>

080019cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fa:	f000 f9a7 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a06:	2002      	movs	r0, #2
 8001a08:	f001 feb6 	bl	8003778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <OTG_FS_IRQHandler+0x10>)
 8001a16:	f002 f833 	bl	8003a80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000420 	.word	0x20000420

08001a24 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <GPDMA1_Channel12_IRQHandler+0x10>)
 8001a2a:	f001 f85b 	bl	8002ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000314 	.word	0x20000314

08001a38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <SystemInit+0x68>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a42:	4a17      	ldr	r2, [pc, #92]	@ (8001aa0 <SystemInit+0x68>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <SystemInit+0x6c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <SystemInit+0x6c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <SystemInit+0x6c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <SystemInit+0x6c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <SystemInit+0x6c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <SystemInit+0x6c>)
 8001a6a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001a6e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001a72:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <SystemInit+0x6c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <SystemInit+0x6c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a09      	ldr	r2, [pc, #36]	@ (8001aa4 <SystemInit+0x6c>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <SystemInit+0x6c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <SystemInit+0x68>)
 8001a8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a92:	609a      	str	r2, [r3, #8]
  #endif
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	46020c00 	.word	0x46020c00

08001aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aac:	f7ff ffc4 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ab0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ab2:	e003      	b.n	8001abc <LoopCopyDataInit>

08001ab4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ab6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ab8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001aba:	3104      	adds	r1, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001abc:	480a      	ldr	r0, [pc, #40]	@ (8001ae8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001abe:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ac0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ac2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ac4:	d3f6      	bcc.n	8001ab4 <CopyDataInit>
	ldr	r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ac8:	e002      	b.n	8001ad0 <LoopFillZerobss>

08001aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001aca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001acc:	f842 3b04 	str.w	r3, [r2], #4

08001ad0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <LoopForever+0x16>)
	cmp	r2, r3
 8001ad2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ad4:	d3f9      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f00a fcb1 	bl	800c43c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ada:	f7fe fd91 	bl	8000600 <main>

08001ade <LoopForever>:

LoopForever:
    b LoopForever
 8001ade:	e7fe      	b.n	8001ade <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001ae0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001ae4:	0800c5ac 	.word	0x0800c5ac
	ldr	r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001aec:	20000019 	.word	0x20000019
	ldr	r2, =_sbss
 8001af0:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8001af4:	20000d08 	.word	0x20000d08

08001af8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC1_IRQHandler>
	...

08001afc <init_register_map>:
 *      Author: User
 */

#include "../Inc/device_registers.h"

void init_register_map(RegisterMap_TypeDef* RegMap){
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e007      	b.n	8001b1a <init_register_map+0x1e>
		RegMap->RegisterArray[i].RegData = 0xdeadbeef;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4908      	ldr	r1, [pc, #32]	@ (8001b30 <init_register_map+0x34>)
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3301      	adds	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2bff      	cmp	r3, #255	@ 0xff
 8001b1e:	ddf4      	ble.n	8001b0a <init_register_map+0xe>
	}
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	deadbeef 	.word	0xdeadbeef

08001b34 <run_device>:
uint8_t spiTxBuffer14[] = {0,64}; //0.040

uint8_t uartRxBuffer[4];  // 12Hz
uint16_t uartTxBuffer[16];  // 12Hz

void run_device(){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	f5ad 6dfb 	sub.w	sp, sp, #2008	@ 0x7d8
 8001b3a:	af00      	add	r7, sp, #0
	uint16_t dmaValCheck[500];
	uint16_t dmaValCheck2[500];
	for(int i = 0; i < 500; i++){
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 8001b42:	e00f      	b.n	8001b64 <run_device+0x30>
	  dmaValCheck[i] = i;
 8001b44:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	@ 0x7d4
 8001b48:	b299      	uxth	r1, r3
 8001b4a:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8001b4e:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 8001b52:	f8d7 27d4 	ldr.w	r2, [r7, #2004]	@ 0x7d4
 8001b56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 500; i++){
 8001b5a:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	@ 0x7d4
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 8001b64:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	@ 0x7d4
 8001b68:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b6c:	dbea      	blt.n	8001b44 <run_device+0x10>
	}
	for(int i = 0; i < 500; i++){
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 37d0 	str.w	r3, [r7, #2000]	@ 0x7d0
 8001b74:	e00f      	b.n	8001b96 <run_device+0x62>
		dmaValCheck2[i] = i;
 8001b76:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	@ 0x7d0
 8001b7a:	b299      	uxth	r1, r3
 8001b7c:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8001b80:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 8001b84:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	@ 0x7d0
 8001b88:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 500; i++){
 8001b8c:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	@ 0x7d0
 8001b90:	3301      	adds	r3, #1
 8001b92:	f8c7 37d0 	str.w	r3, [r7, #2000]	@ 0x7d0
 8001b96:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	@ 0x7d0
 8001b9a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b9e:	dbea      	blt.n	8001b76 <run_device+0x42>
	}
	init_register_map(&device_registers);
 8001ba0:	4810      	ldr	r0, [pc, #64]	@ (8001be4 <run_device+0xb0>)
 8001ba2:	f7ff ffab 	bl	8001afc <init_register_map>
	HAL_Delay(100);
 8001ba6:	2064      	movs	r0, #100	@ 0x64
 8001ba8:	f000 f8f0 	bl	8001d8c <HAL_Delay>
	TIM8->ARR = 32-1;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <run_device+0xb4>)
 8001bae:	221f      	movs	r2, #31
 8001bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_1);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	480d      	ldr	r0, [pc, #52]	@ (8001bec <run_device+0xb8>)
 8001bb6:	f007 fc57 	bl	8009468 <HAL_TIM_OC_Start>
	TIM8->DIER = TIM_DIER_UDE;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <run_device+0xb4>)
 8001bbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bc0:	60da      	str	r2, [r3, #12]
	HAL_SPI_Transmit(&hspi1, spiTxBuffer4, 10, 1000);
 8001bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc6:	220a      	movs	r2, #10
 8001bc8:	4909      	ldr	r1, [pc, #36]	@ (8001bf0 <run_device+0xbc>)
 8001bca:	480a      	ldr	r0, [pc, #40]	@ (8001bf4 <run_device+0xc0>)
 8001bcc:	f007 f856 	bl	8008c7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, spiTxBuffer14, 2, 1000);
 8001bd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4908      	ldr	r1, [pc, #32]	@ (8001bf8 <run_device+0xc4>)
 8001bd8:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <run_device+0xc8>)
 8001bda:	f007 f84f 	bl	8008c7c <HAL_SPI_Transmit>
	while(1){
 8001bde:	bf00      	nop
 8001be0:	e7fd      	b.n	8001bde <run_device+0xaa>
 8001be2:	bf00      	nop
 8001be4:	20000904 	.word	0x20000904
 8001be8:	40013400 	.word	0x40013400
 8001bec:	200001e4 	.word	0x200001e4
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	200000c4 	.word	0x200000c4
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	20000154 	.word	0x20000154

08001c00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_Init+0x50>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a11      	ldr	r2, [pc, #68]	@ (8001c50 <HAL_Init+0x50>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 fd54 	bl	80026be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c16:	f004 f8a5 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <HAL_Init+0x54>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	490c      	ldr	r1, [pc, #48]	@ (8001c58 <HAL_Init+0x58>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <HAL_Init+0x5c>)
 8001c2e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c30:	2004      	movs	r0, #4
 8001c32:	f000 fd99 	bl	8002768 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c36:	2000      	movs	r0, #0
 8001c38:	f000 f812 	bl	8001c60 <HAL_InitTick>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e002      	b.n	8001c4c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c46:	f7ff facd 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40022000 	.word	0x40022000
 8001c54:	46020c00 	.word	0x46020c00
 8001c58:	0800c49c 	.word	0x0800c49c
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c6c:	4b33      	ldr	r3, [pc, #204]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e05c      	b.n	8001d32 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001c78:	4b31      	ldr	r3, [pc, #196]	@ (8001d40 <HAL_InitTick+0xe0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d10c      	bne.n	8001c9e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001c84:	4b2f      	ldr	r3, [pc, #188]	@ (8001d44 <HAL_InitTick+0xe4>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e037      	b.n	8001d0e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001c9e:	f000 fdbb 	bl	8002818 <HAL_SYSTICK_GetCLKSourceConfig>
 8001ca2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d023      	beq.n	8001cf2 <HAL_InitTick+0x92>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d82d      	bhi.n	8001d0c <HAL_InitTick+0xac>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_InitTick+0x5e>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d00d      	beq.n	8001cd8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001cbc:	e026      	b.n	8001d0c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001cbe:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <HAL_InitTick+0xe4>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ccc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	60fb      	str	r3, [r7, #12]
        break;
 8001cd6:	e01a      	b.n	8001d0e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ce6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	60fb      	str	r3, [r7, #12]
        break;
 8001cf0:	e00d      	b.n	8001d0e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_InitTick+0xdc>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	60fb      	str	r3, [r7, #12]
        break;
 8001d0a:	e000      	b.n	8001d0e <HAL_InitTick+0xae>
        break;
 8001d0c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fd08 	bl	8002724 <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e009      	b.n	8001d32 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	f04f 30ff 	mov.w	r0, #4294967295
 8001d26:	f000 fcd5 	bl	80026d4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001d2a:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HAL_InitTick+0xe8>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000018 	.word	0x20000018
 8001d40:	e000e010 	.word	0xe000e010
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000014 	.word	0x20000014

08001d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000018 	.word	0x20000018
 8001d70:	20000d04 	.word	0x20000d04

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000d04 	.word	0x20000d04

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000018 	.word	0x20000018

08001dd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <LL_ADC_SetResolution+0x3c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d104      	bne.n	8001e1c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f023 020c 	bic.w	r2, r3, #12
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	46021000 	.word	0x46021000

08001e3c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d002      	beq.n	8001e6e <LL_ADC_SetGainCompensation+0x32>
 8001e68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_SetGainCompensation+0x34>
 8001e6e:	2200      	movs	r2, #0
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b085      	sub	sp, #20
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2107      	movs	r1, #7
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ed0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6093      	str	r3, [r2, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_IsEnabled+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_IsEnabled+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d101      	bne.n	8001fc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	@ 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e2b3      	b.n	8002558 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a8b      	ldr	r2, [pc, #556]	@ (800222c <HAL_ADC_Init+0x25c>)
 8001ffe:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff f90d 	bl	8001228 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5f 	bl	8001ee4 <LL_ADC_IsDeepPowerDownEnabled>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff45 	bl	8001ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff7a 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d115      	bne.n	8002072 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff5e 	bl	8001f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002050:	4b77      	ldr	r3, [pc, #476]	@ (8002230 <HAL_ADC_Init+0x260>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	099b      	lsrs	r3, r3, #6
 8002056:	4a77      	ldr	r2, [pc, #476]	@ (8002234 <HAL_ADC_Init+0x264>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	3301      	adds	r3, #1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002064:	e002      	b.n	800206c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b01      	subs	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f9      	bne.n	8002066 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff5c 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10e      	bne.n	80020a0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002086:	f043 0210 	orr.w	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff6c 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 80020aa:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 8244 	bne.w	8002542 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f040 8240 	bne.w	8002542 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020ca:	f043 0202 	orr.w	r2, r3, #2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff40 	bl	8001f5c <LL_ADC_IsEnabled>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d140      	bne.n	8002164 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a51      	ldr	r2, [pc, #324]	@ (800222c <HAL_ADC_Init+0x25c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d028      	beq.n	800213e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a51      	ldr	r2, [pc, #324]	@ (8002238 <HAL_ADC_Init+0x268>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d109      	bne.n	800210a <HAL_ADC_Init+0x13a>
 80020f6:	4850      	ldr	r0, [pc, #320]	@ (8002238 <HAL_ADC_Init+0x268>)
 80020f8:	f7ff ff30 	bl	8001f5c <LL_ADC_IsEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	e008      	b.n	800211c <HAL_ADC_Init+0x14c>
 800210a:	4848      	ldr	r0, [pc, #288]	@ (800222c <HAL_ADC_Init+0x25c>)
 800210c:	f7ff ff26 	bl	8001f5c <LL_ADC_IsEnabled>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d021      	beq.n	8002164 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a44      	ldr	r2, [pc, #272]	@ (8002238 <HAL_ADC_Init+0x268>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_ADC_Init+0x15e>
 800212a:	4a44      	ldr	r2, [pc, #272]	@ (800223c <HAL_ADC_Init+0x26c>)
 800212c:	e000      	b.n	8002130 <HAL_ADC_Init+0x160>
 800212e:	4a44      	ldr	r2, [pc, #272]	@ (8002240 <HAL_ADC_Init+0x270>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f7ff fe4c 	bl	8001dd4 <LL_ADC_SetCommonClock>
 800213c:	e012      	b.n	8002164 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f7ff fe57 	bl	8001dfc <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800214e:	4b3c      	ldr	r3, [pc, #240]	@ (8002240 <HAL_ADC_Init+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800215e:	4938      	ldr	r1, [pc, #224]	@ (8002240 <HAL_ADC_Init+0x270>)
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a30      	ldr	r2, [pc, #192]	@ (800222c <HAL_ADC_Init+0x25c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d010      	beq.n	8002190 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002174:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800217a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002180:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002188:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800218a:	4313      	orrs	r3, r2
 800218c:	623b      	str	r3, [r7, #32]
 800218e:	e030      	b.n	80021f2 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7f1b      	ldrb	r3, [r3, #28]
 8002194:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800219c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800219e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	d002      	beq.n	80021ae <HAL_ADC_Init+0x1de>
 80021a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021ac:	e000      	b.n	80021b0 <HAL_ADC_Init+0x1e0>
 80021ae:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021b0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80021b6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	da04      	bge.n	80021ca <HAL_ADC_Init+0x1fa>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021c8:	e001      	b.n	80021ce <HAL_ADC_Init+0x1fe>
 80021ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80021ce:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4918      	ldr	r1, [pc, #96]	@ (8002238 <HAL_ADC_Init+0x268>)
 80021d6:	428b      	cmp	r3, r1
 80021d8:	d103      	bne.n	80021e2 <HAL_ADC_Init+0x212>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021e0:	e003      	b.n	80021ea <HAL_ADC_Init+0x21a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021e8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80021ea:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d12f      	bne.n	800225c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <HAL_ADC_Init+0x25c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	3b01      	subs	r3, #1
 800220c:	045b      	lsls	r3, r3, #17
 800220e:	6a3a      	ldr	r2, [r7, #32]
 8002210:	4313      	orrs	r3, r2
 8002212:	623b      	str	r3, [r7, #32]
 8002214:	e022      	b.n	800225c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800221c:	2b00      	cmp	r3, #0
 800221e:	d111      	bne.n	8002244 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	e018      	b.n	800225c <HAL_ADC_Init+0x28c>
 800222a:	bf00      	nop
 800222c:	46021000 	.word	0x46021000
 8002230:	20000000 	.word	0x20000000
 8002234:	053e2d63 	.word	0x053e2d63
 8002238:	42028000 	.word	0x42028000
 800223c:	42028308 	.word	0x42028308
 8002240:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a92      	ldr	r2, [pc, #584]	@ (80024ac <HAL_ADC_Init+0x4dc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d018      	beq.n	8002298 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002272:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227a:	4313      	orrs	r3, r2
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	4313      	orrs	r3, r2
 8002280:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4b89      	ldr	r3, [pc, #548]	@ (80024b0 <HAL_ADC_Init+0x4e0>)
 800228a:	4013      	ands	r3, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6a39      	ldr	r1, [r7, #32]
 8002292:	430b      	orrs	r3, r1
 8002294:	60d3      	str	r3, [r2, #12]
 8002296:	e031      	b.n	80022fc <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	4313      	orrs	r3, r2
 80022ae:	6a3a      	ldr	r2, [r7, #32]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	4b7e      	ldr	r3, [pc, #504]	@ (80024b4 <HAL_ADC_Init+0x4e4>)
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	6a39      	ldr	r1, [r7, #32]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1a      	ldr	r2, [r3, #32]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6a      	ldr	r2, [pc, #424]	@ (80024ac <HAL_ADC_Init+0x4dc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	f000 8093 	beq.w	800242e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fe38 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002312:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fe45 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 800231e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d161      	bne.n	80023ea <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d15e      	bne.n	80023ea <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7f1b      	ldrb	r3, [r3, #28]
 8002330:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4960      	ldr	r1, [pc, #384]	@ (80024b8 <HAL_ADC_Init+0x4e8>)
 8002338:	428b      	cmp	r3, r1
 800233a:	d102      	bne.n	8002342 <HAL_ADC_Init+0x372>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002340:	e002      	b.n	8002348 <HAL_ADC_Init+0x378>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002346:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002348:	4313      	orrs	r3, r2
 800234a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	6a39      	ldr	r1, [r7, #32]
 8002360:	430b      	orrs	r3, r1
 8002362:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f7ff fd60 	bl	8001e3c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002382:	2b01      	cmp	r3, #1
 8002384:	d11e      	bne.n	80023c4 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	4b4a      	ldr	r3, [pc, #296]	@ (80024bc <HAL_ADC_Init+0x4ec>)
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800239a:	0411      	lsls	r1, r2, #16
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80023a6:	4311      	orrs	r1, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80023ac:	4311      	orrs	r1, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023b2:	0892      	lsrs	r2, r2, #2
 80023b4:	430a      	orrs	r2, r1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	611a      	str	r2, [r3, #16]
 80023c2:	e007      	b.n	80023d4 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d10c      	bne.n	800240c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f8:	f023 010f 	bic.w	r1, r3, #15
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	1e5a      	subs	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30
 800240a:	e007      	b.n	800241c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 020f 	bic.w	r2, r2, #15
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002420:	f023 0303 	bic.w	r3, r3, #3
 8002424:	f043 0201 	orr.w	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800242c:	e092      	b.n	8002554 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002434:	2b01      	cmp	r3, #1
 8002436:	d111      	bne.n	800245c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002440:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002446:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800244c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	4313      	orrs	r3, r2
 8002452:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	4b17      	ldr	r3, [pc, #92]	@ (80024c0 <HAL_ADC_Init+0x4f0>)
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	69f9      	ldr	r1, [r7, #28]
 800246c:	430b      	orrs	r3, r1
 800246e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002478:	461a      	mov	r2, r3
 800247a:	2100      	movs	r1, #0
 800247c:	f7ff fd01 	bl	8001e82 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002488:	461a      	mov	r2, r3
 800248a:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800248e:	f7ff fcf8 	bl	8001e82 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d114      	bne.n	80024c4 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f062 020f 	orn	r2, r2, #15
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80024aa:	e024      	b.n	80024f6 <HAL_ADC_Init+0x526>
 80024ac:	46021000 	.word	0x46021000
 80024b0:	fff0c013 	.word	0xfff0c013
 80024b4:	ffde800d 	.word	0xffde800d
 80024b8:	42028000 	.word	0x42028000
 80024bc:	fc00f81e 	.word	0xfc00f81e
 80024c0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024cc:	d113      	bne.n	80024f6 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	f003 031c 	and.w	r3, r3, #28
 80024e0:	f06f 020f 	mvn.w	r2, #15
 80024e4:	fa02 f103 	lsl.w	r1, r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_ADC_Init+0x590>)
 80024fe:	4013      	ands	r3, r2
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	429a      	cmp	r2, r3
 8002504:	d10b      	bne.n	800251e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002510:	f023 0303 	bic.w	r3, r3, #3
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800251c:	e01a      	b.n	8002554 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002522:	f023 0312 	bic.w	r3, r3, #18
 8002526:	f043 0210 	orr.w	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002540:	e008      	b.n	8002554 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002546:	f043 0210 	orr.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002558:	4618      	mov	r0, r3
 800255a:	3728      	adds	r7, #40	@ 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	833ffff3 	.word	0x833ffff3

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	db0b      	blt.n	80025f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4907      	ldr	r1, [pc, #28]	@ (8002600 <__NVIC_EnableIRQ+0x38>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2001      	movs	r0, #1
 80025ea:	fa00 f202 	lsl.w	r2, r0, r2
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000e100 	.word	0xe000e100

08002604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	2b00      	cmp	r3, #0
 8002616:	db0a      	blt.n	800262e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	490c      	ldr	r1, [pc, #48]	@ (8002650 <__NVIC_SetPriority+0x4c>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	440b      	add	r3, r1
 8002628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800262c:	e00a      	b.n	8002644 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4908      	ldr	r1, [pc, #32]	@ (8002654 <__NVIC_SetPriority+0x50>)
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	3b04      	subs	r3, #4
 800263c:	0112      	lsls	r2, r2, #4
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	440b      	add	r3, r1
 8002642:	761a      	strb	r2, [r3, #24]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	@ 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f1c3 0307 	rsb	r3, r3, #7
 8002672:	2b04      	cmp	r3, #4
 8002674:	bf28      	it	cs
 8002676:	2304      	movcs	r3, #4
 8002678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3304      	adds	r3, #4
 800267e:	2b06      	cmp	r3, #6
 8002680:	d902      	bls.n	8002688 <NVIC_EncodePriority+0x30>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3b03      	subs	r3, #3
 8002686:	e000      	b.n	800268a <NVIC_EncodePriority+0x32>
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	f04f 32ff 	mov.w	r2, #4294967295
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	43d9      	mvns	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	4313      	orrs	r3, r2
         );
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	@ 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ff4c 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026e2:	f7ff ff63 	bl	80025ac <__NVIC_GetPriorityGrouping>
 80026e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	6978      	ldr	r0, [r7, #20]
 80026ee:	f7ff ffb3 	bl	8002658 <NVIC_EncodePriority>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ff82 	bl	8002604 <__NVIC_SetPriority>
}
 8002700:	bf00      	nop
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff56 	bl	80025c8 <__NVIC_EnableIRQ>
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002734:	d301      	bcc.n	800273a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002736:	2301      	movs	r3, #1
 8002738:	e00d      	b.n	8002756 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <HAL_SYSTICK_Config+0x40>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002742:	4b08      	ldr	r3, [pc, #32]	@ (8002764 <HAL_SYSTICK_Config+0x40>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002748:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_SYSTICK_Config+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a05      	ldr	r2, [pc, #20]	@ (8002764 <HAL_SYSTICK_Config+0x40>)
 800274e:	f043 0303 	orr.w	r3, r3, #3
 8002752:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000e010 	.word	0xe000e010

08002768 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d844      	bhi.n	8002800 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002776:	a201      	add	r2, pc, #4	@ (adr r2, 800277c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	0800279f 	.word	0x0800279f
 8002780:	080027bd 	.word	0x080027bd
 8002784:	080027df 	.word	0x080027df
 8002788:	08002801 	.word	0x08002801
 800278c:	08002791 	.word	0x08002791
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002790:	4b1f      	ldr	r3, [pc, #124]	@ (8002810 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1e      	ldr	r2, [pc, #120]	@ (8002810 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6013      	str	r3, [r2, #0]
      break;
 800279c:	e031      	b.n	8002802 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800279e:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80027aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b0:	4a18      	ldr	r2, [pc, #96]	@ (8002814 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027b2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80027b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80027ba:	e022      	b.n	8002802 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80027bc:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a13      	ldr	r2, [pc, #76]	@ (8002810 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80027c8:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80027d2:	4a10      	ldr	r2, [pc, #64]	@ (8002814 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80027dc:	e011      	b.n	8002802 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80027de:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80027f4:	4a07      	ldr	r2, [pc, #28]	@ (8002814 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80027fe:	e000      	b.n	8002802 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002800:	bf00      	nop
  }
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e010 	.word	0xe000e010
 8002814:	46020c00 	.word	0x46020c00

08002818 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800282a:	2304      	movs	r3, #4
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	e021      	b.n	8002874 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002836:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800283a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002842:	d011      	beq.n	8002868 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800284a:	d810      	bhi.n	800286e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002858:	d003      	beq.n	8002862 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800285a:	e008      	b.n	800286e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800285c:	2300      	movs	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
        break;
 8002860:	e008      	b.n	8002874 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002862:	2301      	movs	r3, #1
 8002864:	607b      	str	r3, [r7, #4]
        break;
 8002866:	e005      	b.n	8002874 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002868:	2302      	movs	r3, #2
 800286a:	607b      	str	r3, [r7, #4]
        break;
 800286c:	e002      	b.n	8002874 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
        break;
 8002872:	bf00      	nop
    }
  }
  return systick_source;
 8002874:	687b      	ldr	r3, [r7, #4]
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010
 8002888:	46020c00 	.word	0x46020c00

0800288c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff fa6e 	bl	8001d74 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0db      	b.n	8002a5c <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002a64 <HAL_DMA_Init+0x1d8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	f000 809f 	beq.w	80029ee <HAL_DMA_Init+0x162>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a6c      	ldr	r2, [pc, #432]	@ (8002a68 <HAL_DMA_Init+0x1dc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	f000 8099 	beq.w	80029ee <HAL_DMA_Init+0x162>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a6c <HAL_DMA_Init+0x1e0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	f000 8093 	beq.w	80029ee <HAL_DMA_Init+0x162>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a68      	ldr	r2, [pc, #416]	@ (8002a70 <HAL_DMA_Init+0x1e4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f000 808d 	beq.w	80029ee <HAL_DMA_Init+0x162>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a66      	ldr	r2, [pc, #408]	@ (8002a74 <HAL_DMA_Init+0x1e8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	f000 8087 	beq.w	80029ee <HAL_DMA_Init+0x162>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a64      	ldr	r2, [pc, #400]	@ (8002a78 <HAL_DMA_Init+0x1ec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	f000 8081 	beq.w	80029ee <HAL_DMA_Init+0x162>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a62      	ldr	r2, [pc, #392]	@ (8002a7c <HAL_DMA_Init+0x1f0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d07b      	beq.n	80029ee <HAL_DMA_Init+0x162>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a61      	ldr	r2, [pc, #388]	@ (8002a80 <HAL_DMA_Init+0x1f4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d076      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5f      	ldr	r2, [pc, #380]	@ (8002a84 <HAL_DMA_Init+0x1f8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d071      	beq.n	80029ee <HAL_DMA_Init+0x162>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5e      	ldr	r2, [pc, #376]	@ (8002a88 <HAL_DMA_Init+0x1fc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d06c      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a5c      	ldr	r2, [pc, #368]	@ (8002a8c <HAL_DMA_Init+0x200>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d067      	beq.n	80029ee <HAL_DMA_Init+0x162>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5b      	ldr	r2, [pc, #364]	@ (8002a90 <HAL_DMA_Init+0x204>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d062      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a59      	ldr	r2, [pc, #356]	@ (8002a94 <HAL_DMA_Init+0x208>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d05d      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a58      	ldr	r2, [pc, #352]	@ (8002a98 <HAL_DMA_Init+0x20c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d058      	beq.n	80029ee <HAL_DMA_Init+0x162>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a56      	ldr	r2, [pc, #344]	@ (8002a9c <HAL_DMA_Init+0x210>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d053      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a55      	ldr	r2, [pc, #340]	@ (8002aa0 <HAL_DMA_Init+0x214>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04e      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a53      	ldr	r2, [pc, #332]	@ (8002aa4 <HAL_DMA_Init+0x218>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d049      	beq.n	80029ee <HAL_DMA_Init+0x162>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a52      	ldr	r2, [pc, #328]	@ (8002aa8 <HAL_DMA_Init+0x21c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d044      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a50      	ldr	r2, [pc, #320]	@ (8002aac <HAL_DMA_Init+0x220>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d03f      	beq.n	80029ee <HAL_DMA_Init+0x162>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a4f      	ldr	r2, [pc, #316]	@ (8002ab0 <HAL_DMA_Init+0x224>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d03a      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ab4 <HAL_DMA_Init+0x228>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d035      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a4c      	ldr	r2, [pc, #304]	@ (8002ab8 <HAL_DMA_Init+0x22c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d030      	beq.n	80029ee <HAL_DMA_Init+0x162>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a4a      	ldr	r2, [pc, #296]	@ (8002abc <HAL_DMA_Init+0x230>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02b      	beq.n	80029ee <HAL_DMA_Init+0x162>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a49      	ldr	r2, [pc, #292]	@ (8002ac0 <HAL_DMA_Init+0x234>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d026      	beq.n	80029ee <HAL_DMA_Init+0x162>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a47      	ldr	r2, [pc, #284]	@ (8002ac4 <HAL_DMA_Init+0x238>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d021      	beq.n	80029ee <HAL_DMA_Init+0x162>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a46      	ldr	r2, [pc, #280]	@ (8002ac8 <HAL_DMA_Init+0x23c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d01c      	beq.n	80029ee <HAL_DMA_Init+0x162>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a44      	ldr	r2, [pc, #272]	@ (8002acc <HAL_DMA_Init+0x240>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d017      	beq.n	80029ee <HAL_DMA_Init+0x162>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a43      	ldr	r2, [pc, #268]	@ (8002ad0 <HAL_DMA_Init+0x244>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d012      	beq.n	80029ee <HAL_DMA_Init+0x162>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a41      	ldr	r2, [pc, #260]	@ (8002ad4 <HAL_DMA_Init+0x248>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_DMA_Init+0x162>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a40      	ldr	r2, [pc, #256]	@ (8002ad8 <HAL_DMA_Init+0x24c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d008      	beq.n	80029ee <HAL_DMA_Init+0x162>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a3e      	ldr	r2, [pc, #248]	@ (8002adc <HAL_DMA_Init+0x250>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d003      	beq.n	80029ee <HAL_DMA_Init+0x162>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ae0 <HAL_DMA_Init+0x254>)
 80029ec:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0206 	orr.w	r2, r2, #6
 8002a0c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002a0e:	e00f      	b.n	8002a30 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002a10:	f7ff f9b0 	bl	8001d74 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d908      	bls.n	8002a30 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2210      	movs	r2, #16
 8002a22:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e015      	b.n	8002a5c <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e8      	bne.n	8002a10 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f9ee 	bl	8002e20 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40020050 	.word	0x40020050
 8002a68:	50020050 	.word	0x50020050
 8002a6c:	400200d0 	.word	0x400200d0
 8002a70:	500200d0 	.word	0x500200d0
 8002a74:	40020150 	.word	0x40020150
 8002a78:	50020150 	.word	0x50020150
 8002a7c:	400201d0 	.word	0x400201d0
 8002a80:	500201d0 	.word	0x500201d0
 8002a84:	40020250 	.word	0x40020250
 8002a88:	50020250 	.word	0x50020250
 8002a8c:	400202d0 	.word	0x400202d0
 8002a90:	500202d0 	.word	0x500202d0
 8002a94:	40020350 	.word	0x40020350
 8002a98:	50020350 	.word	0x50020350
 8002a9c:	400203d0 	.word	0x400203d0
 8002aa0:	500203d0 	.word	0x500203d0
 8002aa4:	40020450 	.word	0x40020450
 8002aa8:	50020450 	.word	0x50020450
 8002aac:	400204d0 	.word	0x400204d0
 8002ab0:	500204d0 	.word	0x500204d0
 8002ab4:	40020550 	.word	0x40020550
 8002ab8:	50020550 	.word	0x50020550
 8002abc:	400205d0 	.word	0x400205d0
 8002ac0:	500205d0 	.word	0x500205d0
 8002ac4:	40020650 	.word	0x40020650
 8002ac8:	50020650 	.word	0x50020650
 8002acc:	400206d0 	.word	0x400206d0
 8002ad0:	500206d0 	.word	0x500206d0
 8002ad4:	40020750 	.word	0x40020750
 8002ad8:	50020750 	.word	0x50020750
 8002adc:	400207d0 	.word	0x400207d0
 8002ae0:	500207d0 	.word	0x500207d0

08002ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002af4:	f023 030f 	bic.w	r3, r3, #15
 8002af8:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b02:	3b50      	subs	r3, #80	@ 0x50
 8002b04:	09db      	lsrs	r3, r3, #7
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 813b 	beq.w	8002d9a <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d011      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b48:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d011      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b7a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f043 0202 	orr.w	r2, r3, #2
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d011      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bac:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	f043 0204 	orr.w	r2, r3, #4
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d011      	beq.n	8002bec <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bde:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be4:	f043 0208 	orr.w	r2, r3, #8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d013      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00c      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c10:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d04c      	beq.n	8002cca <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d045      	beq.n	8002cca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c46:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d12e      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c62:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0202 	orr.w	r2, r2, #2
 8002c72:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2200      	movs	r2, #0
 8002c96:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d07a      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
        }

        return;
 8002cb0:	e075      	b.n	8002d9e <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2205      	movs	r2, #5
 8002cb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d039      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d032      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d111      	bne.n	8002d2a <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d12:	2201      	movs	r2, #1
 8002d14:	731a      	strb	r2, [r3, #12]
 8002d16:	e008      	b.n	8002d2a <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002d32:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d025      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0202 	orr.w	r2, r2, #2
 8002d62:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
 8002d98:	e002      	b.n	8002da0 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002d9a:	bf00      	nop
 8002d9c:	e000      	b.n	8002da0 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002d9e:	bf00      	nop
    }
  }
}
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e02b      	b.n	8002e12 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002dc2:	f023 030f 	bic.w	r3, r3, #15
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	3b50      	subs	r3, #80	@ 0x50
 8002dd2:	09db      	lsrs	r3, r3, #7
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2201      	movs	r2, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d012      	beq.n	8002e10 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f003 0311 	and.w	r3, r3, #17
 8002df0:	2b11      	cmp	r3, #17
 8002df2:	d106      	bne.n	8002e02 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	e006      	b.n	8002e10 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a53      	ldr	r2, [pc, #332]	@ (8002fac <DMA_Init+0x18c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	f000 80a0 	beq.w	8002fa6 <DMA_Init+0x186>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a51      	ldr	r2, [pc, #324]	@ (8002fb0 <DMA_Init+0x190>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	f000 809a 	beq.w	8002fa6 <DMA_Init+0x186>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb4 <DMA_Init+0x194>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	f000 8094 	beq.w	8002fa6 <DMA_Init+0x186>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb8 <DMA_Init+0x198>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	f000 808e 	beq.w	8002fa6 <DMA_Init+0x186>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a4b      	ldr	r2, [pc, #300]	@ (8002fbc <DMA_Init+0x19c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	f000 8088 	beq.w	8002fa6 <DMA_Init+0x186>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a49      	ldr	r2, [pc, #292]	@ (8002fc0 <DMA_Init+0x1a0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	f000 8082 	beq.w	8002fa6 <DMA_Init+0x186>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a47      	ldr	r2, [pc, #284]	@ (8002fc4 <DMA_Init+0x1a4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d07c      	beq.n	8002fa6 <DMA_Init+0x186>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a45      	ldr	r2, [pc, #276]	@ (8002fc8 <DMA_Init+0x1a8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d077      	beq.n	8002fa6 <DMA_Init+0x186>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a44      	ldr	r2, [pc, #272]	@ (8002fcc <DMA_Init+0x1ac>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d072      	beq.n	8002fa6 <DMA_Init+0x186>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a42      	ldr	r2, [pc, #264]	@ (8002fd0 <DMA_Init+0x1b0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d06d      	beq.n	8002fa6 <DMA_Init+0x186>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a41      	ldr	r2, [pc, #260]	@ (8002fd4 <DMA_Init+0x1b4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d068      	beq.n	8002fa6 <DMA_Init+0x186>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd8 <DMA_Init+0x1b8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d063      	beq.n	8002fa6 <DMA_Init+0x186>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fdc <DMA_Init+0x1bc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d05e      	beq.n	8002fa6 <DMA_Init+0x186>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3c      	ldr	r2, [pc, #240]	@ (8002fe0 <DMA_Init+0x1c0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d059      	beq.n	8002fa6 <DMA_Init+0x186>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8002fe4 <DMA_Init+0x1c4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d054      	beq.n	8002fa6 <DMA_Init+0x186>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a39      	ldr	r2, [pc, #228]	@ (8002fe8 <DMA_Init+0x1c8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04f      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a38      	ldr	r2, [pc, #224]	@ (8002fec <DMA_Init+0x1cc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04a      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a36      	ldr	r2, [pc, #216]	@ (8002ff0 <DMA_Init+0x1d0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d045      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a35      	ldr	r2, [pc, #212]	@ (8002ff4 <DMA_Init+0x1d4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d040      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a33      	ldr	r2, [pc, #204]	@ (8002ff8 <DMA_Init+0x1d8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d03b      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a32      	ldr	r2, [pc, #200]	@ (8002ffc <DMA_Init+0x1dc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d036      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a30      	ldr	r2, [pc, #192]	@ (8003000 <DMA_Init+0x1e0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d031      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2f      	ldr	r2, [pc, #188]	@ (8003004 <DMA_Init+0x1e4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d02c      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2d      	ldr	r2, [pc, #180]	@ (8003008 <DMA_Init+0x1e8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d027      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800300c <DMA_Init+0x1ec>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2a      	ldr	r2, [pc, #168]	@ (8003010 <DMA_Init+0x1f0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a29      	ldr	r2, [pc, #164]	@ (8003014 <DMA_Init+0x1f4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a27      	ldr	r2, [pc, #156]	@ (8003018 <DMA_Init+0x1f8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a26      	ldr	r2, [pc, #152]	@ (800301c <DMA_Init+0x1fc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a24      	ldr	r2, [pc, #144]	@ (8003020 <DMA_Init+0x200>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a23      	ldr	r2, [pc, #140]	@ (8003024 <DMA_Init+0x204>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <DMA_Init+0x186>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a21      	ldr	r2, [pc, #132]	@ (8003028 <DMA_Init+0x208>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d142      	bne.n	800302c <DMA_Init+0x20c>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e041      	b.n	800302e <DMA_Init+0x20e>
 8002faa:	bf00      	nop
 8002fac:	40020050 	.word	0x40020050
 8002fb0:	50020050 	.word	0x50020050
 8002fb4:	400200d0 	.word	0x400200d0
 8002fb8:	500200d0 	.word	0x500200d0
 8002fbc:	40020150 	.word	0x40020150
 8002fc0:	50020150 	.word	0x50020150
 8002fc4:	400201d0 	.word	0x400201d0
 8002fc8:	500201d0 	.word	0x500201d0
 8002fcc:	40020250 	.word	0x40020250
 8002fd0:	50020250 	.word	0x50020250
 8002fd4:	400202d0 	.word	0x400202d0
 8002fd8:	500202d0 	.word	0x500202d0
 8002fdc:	40020350 	.word	0x40020350
 8002fe0:	50020350 	.word	0x50020350
 8002fe4:	400203d0 	.word	0x400203d0
 8002fe8:	500203d0 	.word	0x500203d0
 8002fec:	40020450 	.word	0x40020450
 8002ff0:	50020450 	.word	0x50020450
 8002ff4:	400204d0 	.word	0x400204d0
 8002ff8:	500204d0 	.word	0x500204d0
 8002ffc:	40020550 	.word	0x40020550
 8003000:	50020550 	.word	0x50020550
 8003004:	400205d0 	.word	0x400205d0
 8003008:	500205d0 	.word	0x500205d0
 800300c:	40020650 	.word	0x40020650
 8003010:	50020650 	.word	0x50020650
 8003014:	400206d0 	.word	0x400206d0
 8003018:	500206d0 	.word	0x500206d0
 800301c:	40020750 	.word	0x40020750
 8003020:	50020750 	.word	0x50020750
 8003024:	400207d0 	.word	0x400207d0
 8003028:	500207d0 	.word	0x500207d0
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d012      	beq.n	8003058 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	051b      	lsls	r3, r3, #20
 800303e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003042:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	3b01      	subs	r3, #1
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003050:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	430a      	orrs	r2, r1
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308a:	f040 80b0 	bne.w	80031ee <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a82      	ldr	r2, [pc, #520]	@ (800329c <DMA_Init+0x47c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	f000 80a0 	beq.w	80031da <DMA_Init+0x3ba>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a80      	ldr	r2, [pc, #512]	@ (80032a0 <DMA_Init+0x480>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f000 809a 	beq.w	80031da <DMA_Init+0x3ba>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a7e      	ldr	r2, [pc, #504]	@ (80032a4 <DMA_Init+0x484>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	f000 8094 	beq.w	80031da <DMA_Init+0x3ba>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7c      	ldr	r2, [pc, #496]	@ (80032a8 <DMA_Init+0x488>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 808e 	beq.w	80031da <DMA_Init+0x3ba>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7a      	ldr	r2, [pc, #488]	@ (80032ac <DMA_Init+0x48c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	f000 8088 	beq.w	80031da <DMA_Init+0x3ba>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a78      	ldr	r2, [pc, #480]	@ (80032b0 <DMA_Init+0x490>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	f000 8082 	beq.w	80031da <DMA_Init+0x3ba>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a76      	ldr	r2, [pc, #472]	@ (80032b4 <DMA_Init+0x494>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d07c      	beq.n	80031da <DMA_Init+0x3ba>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a74      	ldr	r2, [pc, #464]	@ (80032b8 <DMA_Init+0x498>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d077      	beq.n	80031da <DMA_Init+0x3ba>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a73      	ldr	r2, [pc, #460]	@ (80032bc <DMA_Init+0x49c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d072      	beq.n	80031da <DMA_Init+0x3ba>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a71      	ldr	r2, [pc, #452]	@ (80032c0 <DMA_Init+0x4a0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d06d      	beq.n	80031da <DMA_Init+0x3ba>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a70      	ldr	r2, [pc, #448]	@ (80032c4 <DMA_Init+0x4a4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d068      	beq.n	80031da <DMA_Init+0x3ba>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6e      	ldr	r2, [pc, #440]	@ (80032c8 <DMA_Init+0x4a8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d063      	beq.n	80031da <DMA_Init+0x3ba>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6d      	ldr	r2, [pc, #436]	@ (80032cc <DMA_Init+0x4ac>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d05e      	beq.n	80031da <DMA_Init+0x3ba>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6b      	ldr	r2, [pc, #428]	@ (80032d0 <DMA_Init+0x4b0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d059      	beq.n	80031da <DMA_Init+0x3ba>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6a      	ldr	r2, [pc, #424]	@ (80032d4 <DMA_Init+0x4b4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d054      	beq.n	80031da <DMA_Init+0x3ba>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a68      	ldr	r2, [pc, #416]	@ (80032d8 <DMA_Init+0x4b8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d04f      	beq.n	80031da <DMA_Init+0x3ba>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a67      	ldr	r2, [pc, #412]	@ (80032dc <DMA_Init+0x4bc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d04a      	beq.n	80031da <DMA_Init+0x3ba>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a65      	ldr	r2, [pc, #404]	@ (80032e0 <DMA_Init+0x4c0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d045      	beq.n	80031da <DMA_Init+0x3ba>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a64      	ldr	r2, [pc, #400]	@ (80032e4 <DMA_Init+0x4c4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d040      	beq.n	80031da <DMA_Init+0x3ba>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a62      	ldr	r2, [pc, #392]	@ (80032e8 <DMA_Init+0x4c8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d03b      	beq.n	80031da <DMA_Init+0x3ba>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a61      	ldr	r2, [pc, #388]	@ (80032ec <DMA_Init+0x4cc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d036      	beq.n	80031da <DMA_Init+0x3ba>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5f      	ldr	r2, [pc, #380]	@ (80032f0 <DMA_Init+0x4d0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d031      	beq.n	80031da <DMA_Init+0x3ba>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5e      	ldr	r2, [pc, #376]	@ (80032f4 <DMA_Init+0x4d4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d02c      	beq.n	80031da <DMA_Init+0x3ba>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5c      	ldr	r2, [pc, #368]	@ (80032f8 <DMA_Init+0x4d8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d027      	beq.n	80031da <DMA_Init+0x3ba>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5b      	ldr	r2, [pc, #364]	@ (80032fc <DMA_Init+0x4dc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d022      	beq.n	80031da <DMA_Init+0x3ba>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a59      	ldr	r2, [pc, #356]	@ (8003300 <DMA_Init+0x4e0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01d      	beq.n	80031da <DMA_Init+0x3ba>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a58      	ldr	r2, [pc, #352]	@ (8003304 <DMA_Init+0x4e4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d018      	beq.n	80031da <DMA_Init+0x3ba>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a56      	ldr	r2, [pc, #344]	@ (8003308 <DMA_Init+0x4e8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <DMA_Init+0x3ba>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a55      	ldr	r2, [pc, #340]	@ (800330c <DMA_Init+0x4ec>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00e      	beq.n	80031da <DMA_Init+0x3ba>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a53      	ldr	r2, [pc, #332]	@ (8003310 <DMA_Init+0x4f0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d009      	beq.n	80031da <DMA_Init+0x3ba>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a52      	ldr	r2, [pc, #328]	@ (8003314 <DMA_Init+0x4f4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <DMA_Init+0x3ba>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a50      	ldr	r2, [pc, #320]	@ (8003318 <DMA_Init+0x4f8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <DMA_Init+0x3be>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <DMA_Init+0x3c0>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00d      	beq.n	8003200 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e008      	b.n	8003200 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f6:	d103      	bne.n	8003200 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031fe:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003206:	4b45      	ldr	r3, [pc, #276]	@ (800331c <DMA_Init+0x4fc>)
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	430b      	orrs	r3, r1
 8003212:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2200      	movs	r2, #0
 800321a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a36      	ldr	r2, [pc, #216]	@ (80032fc <DMA_Init+0x4dc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d022      	beq.n	800326c <DMA_Init+0x44c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a35      	ldr	r2, [pc, #212]	@ (8003300 <DMA_Init+0x4e0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d01d      	beq.n	800326c <DMA_Init+0x44c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a33      	ldr	r2, [pc, #204]	@ (8003304 <DMA_Init+0x4e4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d018      	beq.n	800326c <DMA_Init+0x44c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a32      	ldr	r2, [pc, #200]	@ (8003308 <DMA_Init+0x4e8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d013      	beq.n	800326c <DMA_Init+0x44c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a30      	ldr	r2, [pc, #192]	@ (800330c <DMA_Init+0x4ec>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00e      	beq.n	800326c <DMA_Init+0x44c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2f      	ldr	r2, [pc, #188]	@ (8003310 <DMA_Init+0x4f0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d009      	beq.n	800326c <DMA_Init+0x44c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2d      	ldr	r2, [pc, #180]	@ (8003314 <DMA_Init+0x4f4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d004      	beq.n	800326c <DMA_Init+0x44c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2c      	ldr	r2, [pc, #176]	@ (8003318 <DMA_Init+0x4f8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <DMA_Init+0x450>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <DMA_Init+0x452>
 8003270:	2300      	movs	r3, #0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2200      	movs	r2, #0
 800328c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40020050 	.word	0x40020050
 80032a0:	50020050 	.word	0x50020050
 80032a4:	400200d0 	.word	0x400200d0
 80032a8:	500200d0 	.word	0x500200d0
 80032ac:	40020150 	.word	0x40020150
 80032b0:	50020150 	.word	0x50020150
 80032b4:	400201d0 	.word	0x400201d0
 80032b8:	500201d0 	.word	0x500201d0
 80032bc:	40020250 	.word	0x40020250
 80032c0:	50020250 	.word	0x50020250
 80032c4:	400202d0 	.word	0x400202d0
 80032c8:	500202d0 	.word	0x500202d0
 80032cc:	40020350 	.word	0x40020350
 80032d0:	50020350 	.word	0x50020350
 80032d4:	400203d0 	.word	0x400203d0
 80032d8:	500203d0 	.word	0x500203d0
 80032dc:	40020450 	.word	0x40020450
 80032e0:	50020450 	.word	0x50020450
 80032e4:	400204d0 	.word	0x400204d0
 80032e8:	500204d0 	.word	0x500204d0
 80032ec:	40020550 	.word	0x40020550
 80032f0:	50020550 	.word	0x50020550
 80032f4:	400205d0 	.word	0x400205d0
 80032f8:	500205d0 	.word	0x500205d0
 80032fc:	40020650 	.word	0x40020650
 8003300:	50020650 	.word	0x50020650
 8003304:	400206d0 	.word	0x400206d0
 8003308:	500206d0 	.word	0x500206d0
 800330c:	40020750 	.word	0x40020750
 8003310:	50020750 	.word	0x50020750
 8003314:	400207d0 	.word	0x400207d0
 8003318:	500207d0 	.word	0x500207d0
 800331c:	3cc03180 	.word	0x3cc03180

08003320 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800332a:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <HAL_FLASH_Unlock+0x38>)
 800332c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	da0b      	bge.n	800334a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8003332:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <HAL_FLASH_Unlock+0x38>)
 8003334:	4a09      	ldr	r2, [pc, #36]	@ (800335c <HAL_FLASH_Unlock+0x3c>)
 8003336:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8003338:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <HAL_FLASH_Unlock+0x38>)
 800333a:	4a09      	ldr	r2, [pc, #36]	@ (8003360 <HAL_FLASH_Unlock+0x40>)
 800333c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <HAL_FLASH_Unlock+0x38>)
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	da01      	bge.n	800334a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800334a:	79fb      	ldrb	r3, [r7, #7]
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40022000 	.word	0x40022000
 800335c:	45670123 	.word	0x45670123
 8003360:	cdef89ab 	.word	0xcdef89ab

08003364 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 800336e:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <HAL_FLASH_Lock+0x30>)
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	4a08      	ldr	r2, [pc, #32]	@ (8003394 <HAL_FLASH_Lock+0x30>)
 8003374:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003378:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_FLASH_Lock+0x30>)
 800337c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	da01      	bge.n	8003386 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8003386:	79fb      	ldrb	r3, [r7, #7]
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40022000 	.word	0x40022000

08003398 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	@ 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80033aa:	e1ba      	b.n	8003722 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 81aa 	beq.w	800371c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a55      	ldr	r2, [pc, #340]	@ (8003520 <HAL_GPIO_Init+0x188>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d15d      	bne.n	800348c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80033d6:	2201      	movs	r2, #1
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0201 	and.w	r2, r3, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003400:	4a48      	ldr	r2, [pc, #288]	@ (8003524 <HAL_GPIO_Init+0x18c>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003408:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800340a:	4a46      	ldr	r2, [pc, #280]	@ (8003524 <HAL_GPIO_Init+0x18c>)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	08da      	lsrs	r2, r3, #3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	3208      	adds	r2, #8
 800341e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003422:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	220f      	movs	r2, #15
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	4013      	ands	r3, r2
 8003438:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	220b      	movs	r2, #11
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	4313      	orrs	r3, r2
 800344c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3208      	adds	r2, #8
 8003456:	69f9      	ldr	r1, [r7, #28]
 8003458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	4013      	ands	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2202      	movs	r2, #2
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	4313      	orrs	r3, r2
 8003482:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e067      	b.n	800355c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x104>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b12      	cmp	r3, #18
 800349a:	d145      	bne.n	8003528 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	08da      	lsrs	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3208      	adds	r2, #8
 80034a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	220f      	movs	r2, #15
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	4013      	ands	r3, r2
 80034be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 020f 	and.w	r2, r3, #15
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	08da      	lsrs	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3208      	adds	r2, #8
 80034e2:	69f9      	ldr	r1, [r7, #28]
 80034e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	4313      	orrs	r3, r2
 8003514:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e01e      	b.n	800355c <HAL_GPIO_Init+0x1c4>
 800351e:	bf00      	nop
 8003520:	46020000 	.word	0x46020000
 8003524:	0800c4f4 	.word	0x0800c4f4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2203      	movs	r2, #3
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	4013      	ands	r3, r2
 800353e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0203 	and.w	r2, r3, #3
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	4313      	orrs	r3, r2
 8003554:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d00b      	beq.n	800357c <HAL_GPIO_Init+0x1e4>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d007      	beq.n	800357c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003570:	2b11      	cmp	r3, #17
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b12      	cmp	r3, #18
 800357a:	d130      	bne.n	80035de <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	2203      	movs	r2, #3
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	4013      	ands	r3, r2
 8003592:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80035b2:	2201      	movs	r2, #1
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	4013      	ands	r3, r2
 80035c0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	f003 0201 	and.w	r2, r3, #1
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d017      	beq.n	8003616 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	4313      	orrs	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d07c      	beq.n	800371c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003622:	4a47      	ldr	r2, [pc, #284]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3318      	adds	r3, #24
 800362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	220f      	movs	r2, #15
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	4013      	ands	r3, r2
 8003644:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	0a9a      	lsrs	r2, r3, #10
 800364a:	4b3e      	ldr	r3, [pc, #248]	@ (8003744 <HAL_GPIO_Init+0x3ac>)
 800364c:	4013      	ands	r3, r2
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	f002 0203 	and.w	r2, r2, #3
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	4093      	lsls	r3, r2
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	4313      	orrs	r3, r2
 800365c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800365e:	4938      	ldr	r1, [pc, #224]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3318      	adds	r3, #24
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800366c:	4b34      	ldr	r3, [pc, #208]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	43db      	mvns	r3, r3
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	4013      	ands	r3, r2
 800367a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003690:	4a2b      	ldr	r2, [pc, #172]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003696:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80036ba:	4a21      	ldr	r2, [pc, #132]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80036c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 80036c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80036e6:	4a16      	ldr	r2, [pc, #88]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80036ee:	4b14      	ldr	r3, [pc, #80]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 80036f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003714:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <HAL_GPIO_Init+0x3a8>)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3301      	adds	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f ae3d 	bne.w	80033ac <HAL_GPIO_Init+0x14>
  }
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	3724      	adds	r7, #36	@ 0x24
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	46022000 	.word	0x46022000
 8003744:	002f7f7f 	.word	0x002f7f7f

08003748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
 8003754:	4613      	mov	r3, r2
 8003756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003764:	e002      	b.n	800376c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d006      	beq.n	800379c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800378e:	4a0c      	ldr	r2, [pc, #48]	@ (80037c0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f814 	bl	80037c4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800379c:	4b08      	ldr	r3, [pc, #32]	@ (80037c0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80037a8:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f812 	bl	80037da <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	46022000 	.word	0x46022000

080037c4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	4603      	mov	r3, r0
 80037e2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	e007      	b.n	800381e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800380e:	4b07      	ldr	r3, [pc, #28]	@ (800382c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 0204 	bic.w	r2, r3, #4
 8003816:	4905      	ldr	r1, [pc, #20]	@ (800382c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	40030400 	.word	0x40030400

08003830 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_ICACHE_Enable+0x1c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a04      	ldr	r2, [pc, #16]	@ (800384c <HAL_ICACHE_Enable+0x1c>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40030400 	.word	0x40030400

08003850 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af02      	add	r7, sp, #8
 8003856:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e108      	b.n	8003a74 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fd fffd 	bl	800187c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2203      	movs	r2, #3
 8003886:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4a7b      	ldr	r2, [pc, #492]	@ (8003a7c <HAL_PCD_Init+0x22c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d102      	bne.n	8003898 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f008 f8c7 	bl	800ba30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7c1a      	ldrb	r2, [r3, #16]
 80038aa:	f88d 2000 	strb.w	r2, [sp]
 80038ae:	3304      	adds	r3, #4
 80038b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038b2:	f007 ffee 	bl	800b892 <USB_CoreInit>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0d5      	b.n	8003a74 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f008 f8bf 	bl	800ba52 <USB_SetCurrentMode>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0c6      	b.n	8003a74 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	e04a      	b.n	8003982 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3315      	adds	r3, #21
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3314      	adds	r3, #20
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	b298      	uxth	r0, r3
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	332e      	adds	r3, #46	@ 0x2e
 8003928:	4602      	mov	r2, r0
 800392a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	3318      	adds	r3, #24
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	331c      	adds	r3, #28
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003954:	7bfa      	ldrb	r2, [r7, #15]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	3320      	adds	r3, #32
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	3324      	adds	r3, #36	@ 0x24
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	3301      	adds	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	791b      	ldrb	r3, [r3, #4]
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	429a      	cmp	r2, r3
 800398a:	d3af      	bcc.n	80038ec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]
 8003990:	e044      	b.n	8003a1c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80039ba:	7bfa      	ldrb	r2, [r7, #15]
 80039bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	791b      	ldrb	r3, [r3, #4]
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d3b5      	bcc.n	8003992 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7c1a      	ldrb	r2, [r3, #16]
 8003a2e:	f88d 2000 	strb.w	r2, [sp]
 8003a32:	3304      	adds	r3, #4
 8003a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a36:	f008 f859 	bl	800baec <USB_DevInit>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e013      	b.n	8003a74 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7b1b      	ldrb	r3, [r3, #12]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 ff3c 	bl	80048e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f008 fb67 	bl	800c140 <USB_DevDisconnect>

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	42040000 	.word	0x42040000

08003a80 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b08d      	sub	sp, #52	@ 0x34
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f008 fc06 	bl	800c2a8 <USB_GetMode>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 84b9 	bne.w	8004416 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f008 fb6a 	bl	800c182 <USB_ReadInterrupts>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 84af 	beq.w	8004414 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f008 fb57 	bl	800c182 <USB_ReadInterrupts>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d107      	bne.n	8003aee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f002 0202 	and.w	r2, r2, #2
 8003aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f008 fb45 	bl	800c182 <USB_ReadInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d161      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0210 	bic.w	r2, r2, #16
 8003b10:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3304      	adds	r3, #4
 8003b30:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	0c5b      	lsrs	r3, r3, #17
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d124      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d035      	beq.n	8003bb6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6a38      	ldr	r0, [r7, #32]
 8003b5e:	f008 fa97 	bl	800c090 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b6e:	441a      	add	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b80:	441a      	add	r2, r3
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	615a      	str	r2, [r3, #20]
 8003b86:	e016      	b.n	8003bb6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	0c5b      	lsrs	r3, r3, #17
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	2b06      	cmp	r3, #6
 8003b92:	d110      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6a38      	ldr	r0, [r7, #32]
 8003ba0:	f008 fa76 	bl	800c090 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bb0:	441a      	add	r2, r3
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0210 	orr.w	r2, r2, #16
 8003bc4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f008 fad9 	bl	800c182 <USB_ReadInterrupts>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bd6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bda:	f040 80a7 	bne.w	8003d2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f008 fade 	bl	800c1a8 <USB_ReadDevAllOutEpInterrupt>
 8003bec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bee:	e099      	b.n	8003d24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 808e 	beq.w	8003d18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f008 fb02 	bl	800c210 <USB_ReadDevOutEPInterrupt>
 8003c0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00c      	beq.n	8003c32 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c24:	461a      	mov	r2, r3
 8003c26:	2301      	movs	r3, #1
 8003c28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fd29 	bl	8004684 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fdff 	bl	8004854 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2310      	movs	r3, #16
 8003c70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d030      	beq.n	8003cde <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	2b80      	cmp	r3, #128	@ 0x80
 8003c86:	d109      	bne.n	8003c9c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c9a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	3304      	adds	r3, #4
 8003cb0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	78db      	ldrb	r3, [r3, #3]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d108      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fbf2 	bl	80044b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2302      	movs	r3, #2
 8003cdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2320      	movs	r3, #32
 8003cf8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d10:	461a      	mov	r2, r3
 8003d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f47f af62 	bne.w	8003bf0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f008 fa26 	bl	800c182 <USB_ReadInterrupts>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d40:	f040 80db 	bne.w	8003efa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f008 fa47 	bl	800c1dc <USB_ReadDevAllInEpInterrupt>
 8003d4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d54:	e0cd      	b.n	8003ef2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80c2 	beq.w	8003ee6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f008 fa6d 	bl	800c24c <USB_ReadDevInEPInterrupt>
 8003d72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d057      	beq.n	8003e2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	2201      	movs	r2, #1
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69f9      	ldr	r1, [r7, #28]
 8003d9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d9e:	4013      	ands	r3, r2
 8003da0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dae:	461a      	mov	r2, r3
 8003db0:	2301      	movs	r3, #1
 8003db2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	799b      	ldrb	r3, [r3, #6]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d132      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3320      	adds	r3, #32
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4403      	add	r3, r0
 8003ddc:	331c      	adds	r3, #28
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4419      	add	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4403      	add	r3, r0
 8003df0:	3320      	adds	r3, #32
 8003df2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d113      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x3a2>
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	3324      	adds	r3, #36	@ 0x24
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d108      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	f008 fa75 	bl	800c30c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fb03 	bl	8004434 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e44:	461a      	mov	r2, r3
 8003e46:	2308      	movs	r3, #8
 8003e48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e60:	461a      	mov	r2, r3
 8003e62:	2310      	movs	r3, #16
 8003e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2340      	movs	r3, #64	@ 0x40
 8003e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d023      	beq.n	8003ed4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e8e:	6a38      	ldr	r0, [r7, #32]
 8003e90:	f007 ff78 	bl	800bd84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	78db      	ldrb	r3, [r3, #3]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d108      	bne.n	8003ec2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fb03 	bl	80044c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ede:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb42 	bl	800456a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	3301      	adds	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f af2e 	bne.w	8003d56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f008 f93f 	bl	800c182 <USB_ReadInterrupts>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f0e:	d122      	bne.n	8003f56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d108      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f36:	2100      	movs	r1, #0
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fcf5 	bl	8004928 <HAL_PCDEx_LPM_Callback>
 8003f3e:	e002      	b.n	8003f46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 faab 	bl	800449c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f008 f911 	bl	800c182 <USB_ReadInterrupts>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f6a:	d112      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d102      	bne.n	8003f82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fa83 	bl	8004488 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f008 f8f3 	bl	800c182 <USB_ReadInterrupts>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa6:	d121      	bne.n	8003fec <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003fb6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d111      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fdc:	2101      	movs	r1, #1
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fca2 	bl	8004928 <HAL_PCDEx_LPM_Callback>
 8003fe4:	e002      	b.n	8003fec <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fa4e 	bl	8004488 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f008 f8c6 	bl	800c182 <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004000:	f040 80b7 	bne.w	8004172 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2110      	movs	r1, #16
 800401e:	4618      	mov	r0, r3
 8004020:	f007 feb0 	bl	800bd84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004024:	2300      	movs	r3, #0
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004028:	e046      	b.n	80040b8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004036:	461a      	mov	r2, r3
 8004038:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800403c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800403e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004058:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800405c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800405e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406a:	461a      	mov	r2, r3
 800406c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004070:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004082:	0151      	lsls	r1, r2, #5
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	440a      	add	r2, r1
 8004088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800408c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004090:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040a2:	0151      	lsls	r1, r2, #5
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	440a      	add	r2, r1
 80040a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80040b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b4:	3301      	adds	r3, #1
 80040b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	791b      	ldrb	r3, [r3, #4]
 80040bc:	461a      	mov	r2, r3
 80040be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d3b2      	bcc.n	800402a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80040d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7bdb      	ldrb	r3, [r3, #15]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d016      	beq.n	800410e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040f0:	f043 030b 	orr.w	r3, r3, #11
 80040f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004106:	f043 030b 	orr.w	r3, r3, #11
 800410a:	6453      	str	r3, [r2, #68]	@ 0x44
 800410c:	e015      	b.n	800413a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800411c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004120:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004124:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004134:	f043 030b 	orr.w	r3, r3, #11
 8004138:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004148:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800414c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800415c:	461a      	mov	r2, r3
 800415e:	f008 f8d5 	bl	800c30c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f008 f803 	bl	800c182 <USB_ReadInterrupts>
 800417c:	4603      	mov	r3, r0
 800417e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004186:	d123      	bne.n	80041d0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f008 f899 	bl	800c2c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f007 fe6d 	bl	800be76 <USB_GetDevSpeed>
 800419c:	4603      	mov	r3, r0
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681c      	ldr	r4, [r3, #0]
 80041a8:	f001 fede 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 80041ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041b2:	461a      	mov	r2, r3
 80041b4:	4620      	mov	r0, r4
 80041b6:	f007 fb99 	bl	800b8ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f95a 	bl	8004474 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80041ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f007 ffd4 	bl	800c182 <USB_ReadInterrupts>
 80041da:	4603      	mov	r3, r0
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d10a      	bne.n	80041fa <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f93b 	bl	8004460 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f002 0208 	and.w	r2, r2, #8
 80041f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f007 ffbf 	bl	800c182 <USB_ReadInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420a:	2b80      	cmp	r3, #128	@ 0x80
 800420c:	d123      	bne.n	8004256 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800421a:	2301      	movs	r3, #1
 800421c:	627b      	str	r3, [r7, #36]	@ 0x24
 800421e:	e014      	b.n	800424a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	b2db      	uxtb	r3, r3
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f962 	bl	8004508 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	3301      	adds	r3, #1
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	791b      	ldrb	r3, [r3, #4]
 800424e:	461a      	mov	r2, r3
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	4293      	cmp	r3, r2
 8004254:	d3e4      	bcc.n	8004220 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f007 ff91 	bl	800c182 <USB_ReadInterrupts>
 8004260:	4603      	mov	r3, r0
 8004262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800426a:	d13c      	bne.n	80042e6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800426c:	2301      	movs	r3, #1
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004270:	e02b      	b.n	80042ca <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3318      	adds	r3, #24
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d115      	bne.n	80042c4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004298:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800429a:	2b00      	cmp	r3, #0
 800429c:	da12      	bge.n	80042c4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	3317      	adds	r3, #23
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f922 	bl	8004508 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	3301      	adds	r3, #1
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	791b      	ldrb	r3, [r3, #4]
 80042ce:	461a      	mov	r2, r3
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d3cd      	bcc.n	8004272 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80042e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f007 ff49 	bl	800c182 <USB_ReadInterrupts>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042fa:	d156      	bne.n	80043aa <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042fc:	2301      	movs	r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004300:	e045      	b.n	800438e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d12e      	bne.n	8004388 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800432a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800432c:	2b00      	cmp	r3, #0
 800432e:	da2b      	bge.n	8004388 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	0c1a      	lsrs	r2, r3, #16
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800433a:	4053      	eors	r3, r2
 800433c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004340:	2b00      	cmp	r3, #0
 8004342:	d121      	bne.n	8004388 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004380:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004384:	6053      	str	r3, [r2, #4]
            break;
 8004386:	e008      	b.n	800439a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	3301      	adds	r3, #1
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	791b      	ldrb	r3, [r3, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	4293      	cmp	r3, r2
 8004398:	d3b3      	bcc.n	8004302 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80043a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f007 fee7 	bl	800c182 <USB_ReadInterrupts>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043be:	d10a      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f88d 	bl	80044e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80043d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f007 fed1 	bl	800c182 <USB_ReadInterrupts>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d115      	bne.n	8004416 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f879 	bl	80044f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e000      	b.n	8004416 <HAL_PCD_IRQHandler+0x996>
      return;
 8004414:	bf00      	nop
    }
  }
}
 8004416:	3734      	adds	r7, #52	@ 0x34
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}

0800441c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004518:	2b00      	cmp	r3, #0
 800451a:	da0c      	bge.n	8004536 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3310      	adds	r3, #16
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	3304      	adds	r3, #4
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e00c      	b.n	8004550 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 020f 	and.w	r2, r3, #15
 800453c:	4613      	mov	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	4413      	add	r3, r2
 800454c:	3304      	adds	r3, #4
 800454e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68f9      	ldr	r1, [r7, #12]
 8004556:	4618      	mov	r0, r3
 8004558:	f007 fcb2 	bl	800bec0 <USB_EPStopXfer>
 800455c:	4603      	mov	r3, r0
 800455e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004560:	7afb      	ldrb	r3, [r7, #11]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b08a      	sub	sp, #40	@ 0x28
 800456e:	af02      	add	r7, sp, #8
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	3310      	adds	r3, #16
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d901      	bls.n	80045a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e06b      	b.n	800467a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d902      	bls.n	80045be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3303      	adds	r3, #3
 80045c2:	089b      	lsrs	r3, r3, #2
 80045c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045c6:	e02a      	b.n	800461e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d902      	bls.n	80045e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3303      	adds	r3, #3
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68d9      	ldr	r1, [r3, #12]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4603      	mov	r3, r0
 8004600:	6978      	ldr	r0, [r7, #20]
 8004602:	f007 fd07 	bl	800c014 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	441a      	add	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	441a      	add	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	d809      	bhi.n	8004648 <PCD_WriteEmptyTxFifo+0xde>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800463c:	429a      	cmp	r2, r3
 800463e:	d203      	bcs.n	8004648 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1bf      	bne.n	80045c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	429a      	cmp	r2, r3
 8004652:	d811      	bhi.n	8004678 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	2201      	movs	r2, #1
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	43db      	mvns	r3, r3
 800466e:	6939      	ldr	r1, [r7, #16]
 8004670:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004674:	4013      	ands	r3, r2
 8004676:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	333c      	adds	r3, #60	@ 0x3c
 800469c:	3304      	adds	r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	799b      	ldrb	r3, [r3, #6]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d17b      	bne.n	80047b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4a61      	ldr	r2, [pc, #388]	@ (800484c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f240 80b9 	bls.w	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80b3 	beq.w	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e6:	461a      	mov	r2, r3
 80046e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ec:	6093      	str	r3, [r2, #8]
 80046ee:	e0a7      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004706:	461a      	mov	r2, r3
 8004708:	2320      	movs	r3, #32
 800470a:	6093      	str	r3, [r2, #8]
 800470c:	e098      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 8093 	bne.w	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4a4b      	ldr	r2, [pc, #300]	@ (800484c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d90f      	bls.n	8004742 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004738:	461a      	mov	r2, r3
 800473a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800473e:	6093      	str	r3, [r2, #8]
 8004740:	e07e      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	3304      	adds	r3, #4
 8004756:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	0159      	lsls	r1, r3, #5
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	440b      	add	r3, r1
 8004764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d114      	bne.n	80047a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800478c:	461a      	mov	r2, r3
 800478e:	2101      	movs	r1, #1
 8004790:	f007 fdbc 	bl	800c30c <USB_EP0_OutStart>
 8004794:	e006      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	441a      	add	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff fe36 	bl	800441c <HAL_PCD_DataOutStageCallback>
 80047b0:	e046      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4a26      	ldr	r2, [pc, #152]	@ (8004850 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d124      	bne.n	8004804 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d0:	461a      	mov	r2, r3
 80047d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047d6:	6093      	str	r3, [r2, #8]
 80047d8:	e032      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f0:	461a      	mov	r2, r3
 80047f2:	2320      	movs	r3, #32
 80047f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fe0d 	bl	800441c <HAL_PCD_DataOutStageCallback>
 8004802:	e01d      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d114      	bne.n	8004834 <PCD_EP_OutXfrComplete_int+0x1b0>
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800482c:	461a      	mov	r2, r3
 800482e:	2100      	movs	r1, #0
 8004830:	f007 fd6c 	bl	800c30c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fdee 	bl	800441c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	4f54300a 	.word	0x4f54300a
 8004850:	4f54310a 	.word	0x4f54310a

08004854 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	333c      	adds	r3, #60	@ 0x3c
 800486c:	3304      	adds	r3, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a15      	ldr	r2, [pc, #84]	@ (80048dc <PCD_EP_OutSetupPacket_int+0x88>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d90e      	bls.n	80048a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a0:	461a      	mov	r2, r3
 80048a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fdcf 	bl	800444c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a0a      	ldr	r2, [pc, #40]	@ (80048dc <PCD_EP_OutSetupPacket_int+0x88>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d90c      	bls.n	80048d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	799b      	ldrb	r3, [r3, #6]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d108      	bne.n	80048d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048c8:	461a      	mov	r2, r3
 80048ca:	2101      	movs	r1, #1
 80048cc:	f007 fd1e 	bl	800c30c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	4f54300a 	.word	0x4f54300a

080048e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004912:	f043 0303 	orr.w	r3, r3, #3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004948:	4b39      	ldr	r3, [pc, #228]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004950:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d10b      	bne.n	8004972 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004960:	d905      	bls.n	800496e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004962:	4b33      	ldr	r3, [pc, #204]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4a32      	ldr	r2, [pc, #200]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800496c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e057      	b.n	8004a22 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004978:	d90a      	bls.n	8004990 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800497a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4313      	orrs	r3, r2
 8004986:	4a2a      	ldr	r2, [pc, #168]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800498c:	60d3      	str	r3, [r2, #12]
 800498e:	e007      	b.n	80049a0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004990:	4b27      	ldr	r3, [pc, #156]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004998:	4925      	ldr	r1, [pc, #148]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4313      	orrs	r3, r2
 800499e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80049a0:	4b24      	ldr	r3, [pc, #144]	@ (8004a34 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a24      	ldr	r2, [pc, #144]	@ (8004a38 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	099b      	lsrs	r3, r3, #6
 80049ac:	2232      	movs	r2, #50	@ 0x32
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	4a21      	ldr	r2, [pc, #132]	@ (8004a38 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	099b      	lsrs	r3, r3, #6
 80049ba:	3301      	adds	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80049be:	e002      	b.n	80049c6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80049c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <HAL_PWREx_ControlVoltageScaling+0x98>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f3      	bne.n	80049c0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01b      	beq.n	8004a16 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80049de:	4b15      	ldr	r3, [pc, #84]	@ (8004a34 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a15      	ldr	r2, [pc, #84]	@ (8004a38 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	2232      	movs	r2, #50	@ 0x32
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	4a11      	ldr	r2, [pc, #68]	@ (8004a38 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	3301      	adds	r3, #1
 80049fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80049fc:	e002      	b.n	8004a04 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004a04:	4b0a      	ldr	r3, [pc, #40]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f3      	bne.n	80049fe <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e000      	b.n	8004a22 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	46020800 	.word	0x46020800
 8004a34:	20000000 	.word	0x20000000
 8004a38:	10624dd3 	.word	0x10624dd3

08004a3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004a40:	4b04      	ldr	r3, [pc, #16]	@ (8004a54 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	46020800 	.word	0x46020800

08004a58 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004a60:	4b22      	ldr	r3, [pc, #136]	@ (8004aec <HAL_PWREx_ConfigSupply+0x94>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a22      	ldr	r2, [pc, #136]	@ (8004af0 <HAL_PWREx_ConfigSupply+0x98>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	099b      	lsrs	r3, r3, #6
 8004a6c:	2232      	movs	r2, #50	@ 0x32
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <HAL_PWREx_ConfigSupply+0x98>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	099b      	lsrs	r3, r3, #6
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d113      	bne.n	8004aac <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004a84:	4b1b      	ldr	r3, [pc, #108]	@ (8004af4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a1a      	ldr	r2, [pc, #104]	@ (8004af4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004a8a:	f023 0302 	bic.w	r3, r3, #2
 8004a8e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004a90:	e002      	b.n	8004a98 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004a98:	4b16      	ldr	r3, [pc, #88]	@ (8004af4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d116      	bne.n	8004ad2 <HAL_PWREx_ConfigSupply+0x7a>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f3      	bne.n	8004a92 <HAL_PWREx_ConfigSupply+0x3a>
 8004aaa:	e012      	b.n	8004ad2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004aac:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4a10      	ldr	r2, [pc, #64]	@ (8004af4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004ab2:	f043 0302 	orr.w	r3, r3, #2
 8004ab6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004ab8:	e002      	b.n	8004ac0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <HAL_PWREx_ConfigSupply+0x7a>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f3      	bne.n	8004aba <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e000      	b.n	8004ade <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000000 	.word	0x20000000
 8004af0:	10624dd3 	.word	0x10624dd3
 8004af4:	46020800 	.word	0x46020800

08004af8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	4a04      	ldr	r2, [pc, #16]	@ (8004b14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	6113      	str	r3, [r2, #16]
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	46020800 	.word	0x46020800

08004b18 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004b1c:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	4a04      	ldr	r2, [pc, #16]	@ (8004b34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004b22:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b26:	6113      	str	r3, [r2, #16]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	46020800 	.word	0x46020800

08004b38 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004b3c:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_PWREx_EnableVddA+0x1c>)
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	4a04      	ldr	r2, [pc, #16]	@ (8004b54 <HAL_PWREx_EnableVddA+0x1c>)
 8004b42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b46:	6113      	str	r3, [r2, #16]
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	46020800 	.word	0x46020800

08004b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08e      	sub	sp, #56	@ 0x38
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f000 bec8 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b72:	4b99      	ldr	r3, [pc, #612]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b7c:	4b96      	ldr	r3, [pc, #600]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 816c 	beq.w	8004e6c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_RCC_OscConfig+0x52>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	f040 80de 	bne.w	8004d5e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	f040 80da 	bne.w	8004d5e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f000 bea5 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bbc:	4b86      	ldr	r3, [pc, #536]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x7a>
 8004bc8:	4b83      	ldr	r3, [pc, #524]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004bd0:	e005      	b.n	8004bde <HAL_RCC_OscConfig+0x86>
 8004bd2:	4b81      	ldr	r3, [pc, #516]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d255      	bcs.n	8004c8e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fa11 	bl	8006014 <RCC_SetFlashLatencyFromMSIRange>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f000 be82 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004bfe:	4b76      	ldr	r3, [pc, #472]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	4a75      	ldr	r2, [pc, #468]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c08:	6093      	str	r3, [r2, #8]
 8004c0a:	4b73      	ldr	r3, [pc, #460]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	4970      	ldr	r1, [pc, #448]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004c24:	d309      	bcc.n	8004c3a <HAL_RCC_OscConfig+0xe2>
 8004c26:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 021f 	bic.w	r2, r3, #31
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	4969      	ldr	r1, [pc, #420]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60cb      	str	r3, [r1, #12]
 8004c38:	e07e      	b.n	8004d38 <HAL_RCC_OscConfig+0x1e0>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da0a      	bge.n	8004c58 <HAL_RCC_OscConfig+0x100>
 8004c42:	4b65      	ldr	r3, [pc, #404]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	015b      	lsls	r3, r3, #5
 8004c50:	4961      	ldr	r1, [pc, #388]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60cb      	str	r3, [r1, #12]
 8004c56:	e06f      	b.n	8004d38 <HAL_RCC_OscConfig+0x1e0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c60:	d30a      	bcc.n	8004c78 <HAL_RCC_OscConfig+0x120>
 8004c62:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	4959      	ldr	r1, [pc, #356]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60cb      	str	r3, [r1, #12]
 8004c76:	e05f      	b.n	8004d38 <HAL_RCC_OscConfig+0x1e0>
 8004c78:	4b57      	ldr	r3, [pc, #348]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	03db      	lsls	r3, r3, #15
 8004c86:	4954      	ldr	r1, [pc, #336]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60cb      	str	r3, [r1, #12]
 8004c8c:	e054      	b.n	8004d38 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004c8e:	4b52      	ldr	r3, [pc, #328]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4a51      	ldr	r2, [pc, #324]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c98:	6093      	str	r3, [r2, #8]
 8004c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	494c      	ldr	r1, [pc, #304]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004cb4:	d309      	bcc.n	8004cca <HAL_RCC_OscConfig+0x172>
 8004cb6:	4b48      	ldr	r3, [pc, #288]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f023 021f 	bic.w	r2, r3, #31
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	4945      	ldr	r1, [pc, #276]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60cb      	str	r3, [r1, #12]
 8004cc8:	e028      	b.n	8004d1c <HAL_RCC_OscConfig+0x1c4>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da0a      	bge.n	8004ce8 <HAL_RCC_OscConfig+0x190>
 8004cd2:	4b41      	ldr	r3, [pc, #260]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	015b      	lsls	r3, r3, #5
 8004ce0:	493d      	ldr	r1, [pc, #244]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60cb      	str	r3, [r1, #12]
 8004ce6:	e019      	b.n	8004d1c <HAL_RCC_OscConfig+0x1c4>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf0:	d30a      	bcc.n	8004d08 <HAL_RCC_OscConfig+0x1b0>
 8004cf2:	4b39      	ldr	r3, [pc, #228]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	029b      	lsls	r3, r3, #10
 8004d00:	4935      	ldr	r1, [pc, #212]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60cb      	str	r3, [r1, #12]
 8004d06:	e009      	b.n	8004d1c <HAL_RCC_OscConfig+0x1c4>
 8004d08:	4b33      	ldr	r3, [pc, #204]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	03db      	lsls	r3, r3, #15
 8004d16:	4930      	ldr	r1, [pc, #192]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 f974 	bl	8006014 <RCC_SetFlashLatencyFromMSIRange>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f000 bde5 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004d38:	f001 f916 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d3c:	4b27      	ldr	r3, [pc, #156]	@ (8004ddc <HAL_RCC_OscConfig+0x284>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fc ff8d 	bl	8001c60 <HAL_InitTick>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 808a 	beq.w	8004e6a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004d56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d5a:	f000 bdd2 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d066      	beq.n	8004e34 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004d66:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d72:	f7fc ffff 	bl	8001d74 <HAL_GetTick>
 8004d76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004d78:	e009      	b.n	8004d8e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d7a:	f7fc fffb 	bl	8001d74 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d902      	bls.n	8004d8e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	f000 bdba 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004d8e:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0ef      	beq.n	8004d7a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004da0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004da4:	6093      	str	r3, [r2, #8]
 8004da6:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	4909      	ldr	r1, [pc, #36]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004dc0:	d30e      	bcc.n	8004de0 <HAL_RCC_OscConfig+0x288>
 8004dc2:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f023 021f 	bic.w	r2, r3, #31
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	4902      	ldr	r1, [pc, #8]	@ (8004dd8 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60cb      	str	r3, [r1, #12]
 8004dd4:	e04a      	b.n	8004e6c <HAL_RCC_OscConfig+0x314>
 8004dd6:	bf00      	nop
 8004dd8:	46020c00 	.word	0x46020c00
 8004ddc:	20000014 	.word	0x20000014
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	da0a      	bge.n	8004dfe <HAL_RCC_OscConfig+0x2a6>
 8004de8:	4b98      	ldr	r3, [pc, #608]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	015b      	lsls	r3, r3, #5
 8004df6:	4995      	ldr	r1, [pc, #596]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60cb      	str	r3, [r1, #12]
 8004dfc:	e036      	b.n	8004e6c <HAL_RCC_OscConfig+0x314>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e06:	d30a      	bcc.n	8004e1e <HAL_RCC_OscConfig+0x2c6>
 8004e08:	4b90      	ldr	r3, [pc, #576]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	498d      	ldr	r1, [pc, #564]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60cb      	str	r3, [r1, #12]
 8004e1c:	e026      	b.n	8004e6c <HAL_RCC_OscConfig+0x314>
 8004e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	03db      	lsls	r3, r3, #15
 8004e2c:	4987      	ldr	r1, [pc, #540]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60cb      	str	r3, [r1, #12]
 8004e32:	e01b      	b.n	8004e6c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004e34:	4b85      	ldr	r3, [pc, #532]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a84      	ldr	r2, [pc, #528]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e40:	f7fc ff98 	bl	8001d74 <HAL_GetTick>
 8004e44:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004e46:	e009      	b.n	8004e5c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e48:	f7fc ff94 	bl	8001d74 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d902      	bls.n	8004e5c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	f000 bd53 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004e5c:	4b7b      	ldr	r3, [pc, #492]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ef      	bne.n	8004e48 <HAL_RCC_OscConfig+0x2f0>
 8004e68:	e000      	b.n	8004e6c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 808b 	beq.w	8004f90 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d005      	beq.n	8004e8c <HAL_RCC_OscConfig+0x334>
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	2b0c      	cmp	r3, #12
 8004e84:	d109      	bne.n	8004e9a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d17d      	bne.n	8004f90 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f000 bd34 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x35a>
 8004ea4:	4b69      	ldr	r3, [pc, #420]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a68      	ldr	r2, [pc, #416]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e041      	b.n	8004f36 <HAL_RCC_OscConfig+0x3de>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eba:	d112      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x38a>
 8004ebc:	4b63      	ldr	r3, [pc, #396]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a62      	ldr	r2, [pc, #392]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004ec2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b60      	ldr	r3, [pc, #384]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a5f      	ldr	r2, [pc, #380]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004ece:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b5d      	ldr	r3, [pc, #372]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a5c      	ldr	r2, [pc, #368]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	e029      	b.n	8004f36 <HAL_RCC_OscConfig+0x3de>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004eea:	d112      	bne.n	8004f12 <HAL_RCC_OscConfig+0x3ba>
 8004eec:	4b57      	ldr	r3, [pc, #348]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a56      	ldr	r2, [pc, #344]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004ef2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b54      	ldr	r3, [pc, #336]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a53      	ldr	r2, [pc, #332]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b51      	ldr	r3, [pc, #324]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a50      	ldr	r2, [pc, #320]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	e011      	b.n	8004f36 <HAL_RCC_OscConfig+0x3de>
 8004f12:	4b4e      	ldr	r3, [pc, #312]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a4d      	ldr	r2, [pc, #308]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a4a      	ldr	r2, [pc, #296]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	4b48      	ldr	r3, [pc, #288]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a47      	ldr	r2, [pc, #284]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d014      	beq.n	8004f68 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004f3e:	f7fc ff19 	bl	8001d74 <HAL_GetTick>
 8004f42:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f44:	e009      	b.n	8004f5a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f46:	f7fc ff15 	bl	8001d74 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b64      	cmp	r3, #100	@ 0x64
 8004f52:	d902      	bls.n	8004f5a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	f000 bcd4 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0ef      	beq.n	8004f46 <HAL_RCC_OscConfig+0x3ee>
 8004f66:	e013      	b.n	8004f90 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004f68:	f7fc ff04 	bl	8001d74 <HAL_GetTick>
 8004f6c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f6e:	e009      	b.n	8004f84 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f70:	f7fc ff00 	bl	8001d74 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	@ 0x64
 8004f7c:	d902      	bls.n	8004f84 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	f000 bcbf 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f84:	4b31      	ldr	r3, [pc, #196]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ef      	bne.n	8004f70 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d05f      	beq.n	800505c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d005      	beq.n	8004fae <HAL_RCC_OscConfig+0x456>
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d114      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d111      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f000 bca3 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004fbc:	4b23      	ldr	r3, [pc, #140]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	4920      	ldr	r1, [pc, #128]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004fd0:	e044      	b.n	800505c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d024      	beq.n	8005024 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004fda:	4b1c      	ldr	r3, [pc, #112]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004fe6:	f7fc fec5 	bl	8001d74 <HAL_GetTick>
 8004fea:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fec:	e009      	b.n	8005002 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fee:	f7fc fec1 	bl	8001d74 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d902      	bls.n	8005002 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	f000 bc80 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005002:	4b12      	ldr	r3, [pc, #72]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ef      	beq.n	8004fee <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800500e:	4b0f      	ldr	r3, [pc, #60]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	490b      	ldr	r1, [pc, #44]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 800501e:	4313      	orrs	r3, r2
 8005020:	610b      	str	r3, [r1, #16]
 8005022:	e01b      	b.n	800505c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005024:	4b09      	ldr	r3, [pc, #36]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a08      	ldr	r2, [pc, #32]	@ (800504c <HAL_RCC_OscConfig+0x4f4>)
 800502a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800502e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005030:	f7fc fea0 	bl	8001d74 <HAL_GetTick>
 8005034:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005036:	e00b      	b.n	8005050 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005038:	f7fc fe9c 	bl	8001d74 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d904      	bls.n	8005050 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	f000 bc5b 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
 800504c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005050:	4baf      	ldr	r3, [pc, #700]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ed      	bne.n	8005038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80c8 	beq.w	80051fa <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005070:	4ba7      	ldr	r3, [pc, #668]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d111      	bne.n	80050a2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507e:	4ba4      	ldr	r3, [pc, #656]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005084:	4aa2      	ldr	r2, [pc, #648]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005086:	f043 0304 	orr.w	r3, r3, #4
 800508a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800508e:	4ba0      	ldr	r3, [pc, #640]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800509c:	2301      	movs	r3, #1
 800509e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050a2:	4b9c      	ldr	r3, [pc, #624]	@ (8005314 <HAL_RCC_OscConfig+0x7bc>)
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d119      	bne.n	80050e2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80050ae:	4b99      	ldr	r3, [pc, #612]	@ (8005314 <HAL_RCC_OscConfig+0x7bc>)
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	4a98      	ldr	r2, [pc, #608]	@ (8005314 <HAL_RCC_OscConfig+0x7bc>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ba:	f7fc fe5b 	bl	8001d74 <HAL_GetTick>
 80050be:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050c0:	e009      	b.n	80050d6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c2:	f7fc fe57 	bl	8001d74 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d902      	bls.n	80050d6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	f000 bc16 	b.w	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005314 <HAL_RCC_OscConfig+0x7bc>)
 80050d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0ef      	beq.n	80050c2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d05f      	beq.n	80051aa <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80050ea:	4b89      	ldr	r3, [pc, #548]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80050ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050f0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d037      	beq.n	8005170 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d006      	beq.n	8005118 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e3f4      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01b      	beq.n	800515a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005122:	4b7b      	ldr	r3, [pc, #492]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005128:	4a79      	ldr	r2, [pc, #484]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 800512a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800512e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005132:	f7fc fe1f 	bl	8001d74 <HAL_GetTick>
 8005136:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513a:	f7fc fe1b 	bl	8001d74 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b05      	cmp	r3, #5
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e3da      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800514c:	4b70      	ldr	r3, [pc, #448]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 800514e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005152:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1ef      	bne.n	800513a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800515a:	4b6d      	ldr	r3, [pc, #436]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 800515c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005160:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	4969      	ldr	r1, [pc, #420]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005170:	4b67      	ldr	r3, [pc, #412]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005176:	4a66      	ldr	r2, [pc, #408]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005178:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800517c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005180:	f7fc fdf8 	bl	8001d74 <HAL_GetTick>
 8005184:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005188:	f7fc fdf4 	bl	8001d74 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b05      	cmp	r3, #5
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e3b3      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800519a:	4b5d      	ldr	r3, [pc, #372]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 800519c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ef      	beq.n	8005188 <HAL_RCC_OscConfig+0x630>
 80051a8:	e01b      	b.n	80051e2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80051aa:	4b59      	ldr	r3, [pc, #356]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80051ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051b0:	4a57      	ldr	r2, [pc, #348]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80051b2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80051b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80051ba:	f7fc fddb 	bl	8001d74 <HAL_GetTick>
 80051be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c2:	f7fc fdd7 	bl	8001d74 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e396      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80051d4:	4b4e      	ldr	r3, [pc, #312]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80051d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1ef      	bne.n	80051c2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ea:	4b49      	ldr	r3, [pc, #292]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80051ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051f0:	4a47      	ldr	r2, [pc, #284]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80051f2:	f023 0304 	bic.w	r3, r3, #4
 80051f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8111 	beq.w	800542a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520e:	4b40      	ldr	r3, [pc, #256]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d111      	bne.n	8005240 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521c:	4b3c      	ldr	r3, [pc, #240]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 800521e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005222:	4a3b      	ldr	r2, [pc, #236]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005224:	f043 0304 	orr.w	r3, r3, #4
 8005228:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800522c:	4b38      	ldr	r3, [pc, #224]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 800522e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005240:	4b34      	ldr	r3, [pc, #208]	@ (8005314 <HAL_RCC_OscConfig+0x7bc>)
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d118      	bne.n	800527e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800524c:	4b31      	ldr	r3, [pc, #196]	@ (8005314 <HAL_RCC_OscConfig+0x7bc>)
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	4a30      	ldr	r2, [pc, #192]	@ (8005314 <HAL_RCC_OscConfig+0x7bc>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005258:	f7fc fd8c 	bl	8001d74 <HAL_GetTick>
 800525c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005260:	f7fc fd88 	bl	8001d74 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e347      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005272:	4b28      	ldr	r3, [pc, #160]	@ (8005314 <HAL_RCC_OscConfig+0x7bc>)
 8005274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01f      	beq.n	80052ca <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d010      	beq.n	80052b8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005296:	4b1e      	ldr	r3, [pc, #120]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 8005298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800529c:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80052a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052ac:	4a18      	ldr	r2, [pc, #96]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052b6:	e018      	b.n	80052ea <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052b8:	4b15      	ldr	r3, [pc, #84]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80052ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052be:	4a14      	ldr	r2, [pc, #80]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052c8:	e00f      	b.n	80052ea <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052ca:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80052cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052da:	4b0d      	ldr	r3, [pc, #52]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80052dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005310 <HAL_RCC_OscConfig+0x7b8>)
 80052e2:	f023 0304 	bic.w	r3, r3, #4
 80052e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d057      	beq.n	80053a2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80052f2:	f7fc fd3f 	bl	8001d74 <HAL_GetTick>
 80052f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f8:	e00e      	b.n	8005318 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fc fd3b 	bl	8001d74 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d905      	bls.n	8005318 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e2f8      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
 8005310:	46020c00 	.word	0x46020c00
 8005314:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005318:	4b9c      	ldr	r3, [pc, #624]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 800531a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0e9      	beq.n	80052fa <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01b      	beq.n	800536a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005332:	4b96      	ldr	r3, [pc, #600]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005338:	4a94      	ldr	r2, [pc, #592]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 800533a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800533e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005342:	e00a      	b.n	800535a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7fc fd16 	bl	8001d74 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e2d3      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800535a:	4b8c      	ldr	r3, [pc, #560]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 800535c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0ed      	beq.n	8005344 <HAL_RCC_OscConfig+0x7ec>
 8005368:	e053      	b.n	8005412 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800536a:	4b88      	ldr	r3, [pc, #544]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 800536c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005370:	4a86      	ldr	r2, [pc, #536]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005376:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800537a:	e00a      	b.n	8005392 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fc fcfa 	bl	8001d74 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e2b7      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005392:	4b7e      	ldr	r3, [pc, #504]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1ed      	bne.n	800537c <HAL_RCC_OscConfig+0x824>
 80053a0:	e037      	b.n	8005412 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80053a2:	f7fc fce7 	bl	8001d74 <HAL_GetTick>
 80053a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fc fce3 	bl	8001d74 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e2a0      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053c0:	4b72      	ldr	r3, [pc, #456]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 80053c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ed      	bne.n	80053aa <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80053ce:	4b6f      	ldr	r3, [pc, #444]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 80053d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01a      	beq.n	8005412 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80053dc:	4b6b      	ldr	r3, [pc, #428]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 80053de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053e2:	4a6a      	ldr	r2, [pc, #424]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 80053e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053ec:	e00a      	b.n	8005404 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ee:	f7fc fcc1 	bl	8001d74 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e27e      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005404:	4b61      	ldr	r3, [pc, #388]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800540a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1ed      	bne.n	80053ee <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005412:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005416:	2b01      	cmp	r3, #1
 8005418:	d107      	bne.n	800542a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800541a:	4b5c      	ldr	r3, [pc, #368]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005420:	4a5a      	ldr	r2, [pc, #360]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005422:	f023 0304 	bic.w	r3, r3, #4
 8005426:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d036      	beq.n	80054a4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d019      	beq.n	8005472 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800543e:	4b53      	ldr	r3, [pc, #332]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a52      	ldr	r2, [pc, #328]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005444:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005448:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800544a:	f7fc fc93 	bl	8001d74 <HAL_GetTick>
 800544e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005452:	f7fc fc8f 	bl	8001d74 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e24e      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005464:	4b49      	ldr	r3, [pc, #292]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x8fa>
 8005470:	e018      	b.n	80054a4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005472:	4b46      	ldr	r3, [pc, #280]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a45      	ldr	r2, [pc, #276]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005478:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800547c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800547e:	f7fc fc79 	bl	8001d74 <HAL_GetTick>
 8005482:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005486:	f7fc fc75 	bl	8001d74 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e234      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005498:	4b3c      	ldr	r3, [pc, #240]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f0      	bne.n	8005486 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d036      	beq.n	800551e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d019      	beq.n	80054ec <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80054b8:	4b34      	ldr	r3, [pc, #208]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a33      	ldr	r2, [pc, #204]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 80054be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054c4:	f7fc fc56 	bl	8001d74 <HAL_GetTick>
 80054c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80054cc:	f7fc fc52 	bl	8001d74 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e211      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80054de:	4b2b      	ldr	r3, [pc, #172]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x974>
 80054ea:	e018      	b.n	800551e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80054ec:	4b27      	ldr	r3, [pc, #156]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a26      	ldr	r2, [pc, #152]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 80054f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054f8:	f7fc fc3c 	bl	8001d74 <HAL_GetTick>
 80054fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005500:	f7fc fc38 	bl	8001d74 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e1f7      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005512:	4b1e      	ldr	r3, [pc, #120]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d07f      	beq.n	800562a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552e:	2b00      	cmp	r3, #0
 8005530:	d062      	beq.n	80055f8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005532:	4b16      	ldr	r3, [pc, #88]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	4a15      	ldr	r2, [pc, #84]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005538:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800553c:	6093      	str	r3, [r2, #8]
 800553e:	4b13      	ldr	r3, [pc, #76]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554a:	4910      	ldr	r1, [pc, #64]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 800554c:	4313      	orrs	r3, r2
 800554e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005558:	d309      	bcc.n	800556e <HAL_RCC_OscConfig+0xa16>
 800555a:	4b0c      	ldr	r3, [pc, #48]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f023 021f 	bic.w	r2, r3, #31
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4909      	ldr	r1, [pc, #36]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005568:	4313      	orrs	r3, r2
 800556a:	60cb      	str	r3, [r1, #12]
 800556c:	e02a      	b.n	80055c4 <HAL_RCC_OscConfig+0xa6c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	da0c      	bge.n	8005590 <HAL_RCC_OscConfig+0xa38>
 8005576:	4b05      	ldr	r3, [pc, #20]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	015b      	lsls	r3, r3, #5
 8005584:	4901      	ldr	r1, [pc, #4]	@ (800558c <HAL_RCC_OscConfig+0xa34>)
 8005586:	4313      	orrs	r3, r2
 8005588:	60cb      	str	r3, [r1, #12]
 800558a:	e01b      	b.n	80055c4 <HAL_RCC_OscConfig+0xa6c>
 800558c:	46020c00 	.word	0x46020c00
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005598:	d30a      	bcc.n	80055b0 <HAL_RCC_OscConfig+0xa58>
 800559a:	4ba1      	ldr	r3, [pc, #644]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	029b      	lsls	r3, r3, #10
 80055a8:	499d      	ldr	r1, [pc, #628]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60cb      	str	r3, [r1, #12]
 80055ae:	e009      	b.n	80055c4 <HAL_RCC_OscConfig+0xa6c>
 80055b0:	4b9b      	ldr	r3, [pc, #620]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	03db      	lsls	r3, r3, #15
 80055be:	4998      	ldr	r1, [pc, #608]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80055c4:	4b96      	ldr	r3, [pc, #600]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a95      	ldr	r2, [pc, #596]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80055ca:	f043 0310 	orr.w	r3, r3, #16
 80055ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055d0:	f7fc fbd0 	bl	8001d74 <HAL_GetTick>
 80055d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80055d8:	f7fc fbcc 	bl	8001d74 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e18b      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80055ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0xa80>
 80055f6:	e018      	b.n	800562a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80055f8:	4b89      	ldr	r3, [pc, #548]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a88      	ldr	r2, [pc, #544]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80055fe:	f023 0310 	bic.w	r3, r3, #16
 8005602:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005604:	f7fc fbb6 	bl	8001d74 <HAL_GetTick>
 8005608:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800560c:	f7fc fbb2 	bl	8001d74 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e171      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800561e:	4b80      	ldr	r3, [pc, #512]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8166 	beq.w	8005900 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800563a:	4b79      	ldr	r3, [pc, #484]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b0c      	cmp	r3, #12
 8005644:	f000 80f2 	beq.w	800582c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564c:	2b02      	cmp	r3, #2
 800564e:	f040 80c5 	bne.w	80057dc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005652:	4b73      	ldr	r3, [pc, #460]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a72      	ldr	r2, [pc, #456]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005658:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800565c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800565e:	f7fc fb89 	bl	8001d74 <HAL_GetTick>
 8005662:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005666:	f7fc fb85 	bl	8001d74 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e144      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005678:	4b69      	ldr	r3, [pc, #420]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f0      	bne.n	8005666 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005684:	4b66      	ldr	r3, [pc, #408]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d111      	bne.n	80056b6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005692:	4b63      	ldr	r3, [pc, #396]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005698:	4a61      	ldr	r2, [pc, #388]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 800569a:	f043 0304 	orr.w	r3, r3, #4
 800569e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80056a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80056a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80056b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005824 <HAL_RCC_OscConfig+0xccc>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056c2:	d102      	bne.n	80056ca <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80056ca:	4b56      	ldr	r3, [pc, #344]	@ (8005824 <HAL_RCC_OscConfig+0xccc>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4a55      	ldr	r2, [pc, #340]	@ (8005824 <HAL_RCC_OscConfig+0xccc>)
 80056d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056d4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80056d6:	4b52      	ldr	r3, [pc, #328]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80056ea:	3a01      	subs	r2, #1
 80056ec:	0212      	lsls	r2, r2, #8
 80056ee:	4311      	orrs	r1, r2
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80056f4:	430a      	orrs	r2, r1
 80056f6:	494a      	ldr	r1, [pc, #296]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80056fc:	4b48      	ldr	r3, [pc, #288]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80056fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005700:	4b49      	ldr	r3, [pc, #292]	@ (8005828 <HAL_RCC_OscConfig+0xcd0>)
 8005702:	4013      	ands	r3, r2
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005708:	3a01      	subs	r2, #1
 800570a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005712:	3a01      	subs	r2, #1
 8005714:	0252      	lsls	r2, r2, #9
 8005716:	b292      	uxth	r2, r2
 8005718:	4311      	orrs	r1, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800571e:	3a01      	subs	r2, #1
 8005720:	0412      	lsls	r2, r2, #16
 8005722:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005726:	4311      	orrs	r1, r2
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800572c:	3a01      	subs	r2, #1
 800572e:	0612      	lsls	r2, r2, #24
 8005730:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005734:	430a      	orrs	r2, r1
 8005736:	493a      	ldr	r1, [pc, #232]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005738:	4313      	orrs	r3, r2
 800573a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800573c:	4b38      	ldr	r3, [pc, #224]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	4a37      	ldr	r2, [pc, #220]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005742:	f023 0310 	bic.w	r3, r3, #16
 8005746:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574c:	4a34      	ldr	r2, [pc, #208]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005752:	4b33      	ldr	r3, [pc, #204]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	4a32      	ldr	r2, [pc, #200]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005758:	f043 0310 	orr.w	r3, r3, #16
 800575c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800575e:	4b30      	ldr	r3, [pc, #192]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	f023 020c 	bic.w	r2, r3, #12
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	492d      	ldr	r1, [pc, #180]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 800576c:	4313      	orrs	r3, r2
 800576e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005774:	2b01      	cmp	r3, #1
 8005776:	d105      	bne.n	8005784 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005778:	4b2a      	ldr	r3, [pc, #168]	@ (8005824 <HAL_RCC_OscConfig+0xccc>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4a29      	ldr	r2, [pc, #164]	@ (8005824 <HAL_RCC_OscConfig+0xccc>)
 800577e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005782:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005784:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005788:	2b01      	cmp	r3, #1
 800578a:	d107      	bne.n	800579c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800578c:	4b24      	ldr	r3, [pc, #144]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 800578e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005792:	4a23      	ldr	r2, [pc, #140]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005794:	f023 0304 	bic.w	r3, r3, #4
 8005798:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800579c:	4b20      	ldr	r3, [pc, #128]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80057a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80057a8:	f7fc fae4 	bl	8001d74 <HAL_GetTick>
 80057ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fc fae0 	bl	8001d74 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e09f      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80057c2:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057ce:	4b14      	ldr	r3, [pc, #80]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80057d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d2:	4a13      	ldr	r2, [pc, #76]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80057d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057d8:	6293      	str	r3, [r2, #40]	@ 0x28
 80057da:	e091      	b.n	8005900 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80057dc:	4b10      	ldr	r3, [pc, #64]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80057e8:	f7fc fac4 	bl	8001d74 <HAL_GetTick>
 80057ec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fc fac0 	bl	8001d74 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e07f      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005802:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800580e:	4b04      	ldr	r3, [pc, #16]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005812:	4a03      	ldr	r2, [pc, #12]	@ (8005820 <HAL_RCC_OscConfig+0xcc8>)
 8005814:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005818:	f023 0303 	bic.w	r3, r3, #3
 800581c:	6293      	str	r3, [r2, #40]	@ 0x28
 800581e:	e06f      	b.n	8005900 <HAL_RCC_OscConfig+0xda8>
 8005820:	46020c00 	.word	0x46020c00
 8005824:	46020800 	.word	0x46020800
 8005828:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800582c:	4b37      	ldr	r3, [pc, #220]	@ (800590c <HAL_RCC_OscConfig+0xdb4>)
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005832:	4b36      	ldr	r3, [pc, #216]	@ (800590c <HAL_RCC_OscConfig+0xdb4>)
 8005834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005836:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	2b01      	cmp	r3, #1
 800583e:	d039      	beq.n	80058b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f003 0203 	and.w	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800584a:	429a      	cmp	r2, r3
 800584c:	d132      	bne.n	80058b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800585c:	429a      	cmp	r2, r3
 800585e:	d129      	bne.n	80058b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800586a:	429a      	cmp	r2, r3
 800586c:	d122      	bne.n	80058b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005878:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800587a:	429a      	cmp	r2, r3
 800587c:	d11a      	bne.n	80058b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	0a5b      	lsrs	r3, r3, #9
 8005882:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800588c:	429a      	cmp	r2, r3
 800588e:	d111      	bne.n	80058b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	0c1b      	lsrs	r3, r3, #16
 8005894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d108      	bne.n	80058b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	0e1b      	lsrs	r3, r3, #24
 80058a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e024      	b.n	8005902 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <HAL_RCC_OscConfig+0xdb4>)
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d01a      	beq.n	8005900 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80058ca:	4b10      	ldr	r3, [pc, #64]	@ (800590c <HAL_RCC_OscConfig+0xdb4>)
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	4a0f      	ldr	r2, [pc, #60]	@ (800590c <HAL_RCC_OscConfig+0xdb4>)
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d6:	f7fc fa4d 	bl	8001d74 <HAL_GetTick>
 80058da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80058dc:	bf00      	nop
 80058de:	f7fc fa49 	bl	8001d74 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d0f9      	beq.n	80058de <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ee:	4a07      	ldr	r2, [pc, #28]	@ (800590c <HAL_RCC_OscConfig+0xdb4>)
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80058f4:	4b05      	ldr	r3, [pc, #20]	@ (800590c <HAL_RCC_OscConfig+0xdb4>)
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	4a04      	ldr	r2, [pc, #16]	@ (800590c <HAL_RCC_OscConfig+0xdb4>)
 80058fa:	f043 0310 	orr.w	r3, r3, #16
 80058fe:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3738      	adds	r7, #56	@ 0x38
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	46020c00 	.word	0x46020c00

08005910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e1d9      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005924:	4b9b      	ldr	r3, [pc, #620]	@ (8005b94 <HAL_RCC_ClockConfig+0x284>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d910      	bls.n	8005954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005932:	4b98      	ldr	r3, [pc, #608]	@ (8005b94 <HAL_RCC_ClockConfig+0x284>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 020f 	bic.w	r2, r3, #15
 800593a:	4996      	ldr	r1, [pc, #600]	@ (8005b94 <HAL_RCC_ClockConfig+0x284>)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	4313      	orrs	r3, r2
 8005940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005942:	4b94      	ldr	r3, [pc, #592]	@ (8005b94 <HAL_RCC_ClockConfig+0x284>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e1c1      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	d010      	beq.n	8005982 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695a      	ldr	r2, [r3, #20]
 8005964:	4b8c      	ldr	r3, [pc, #560]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800596c:	429a      	cmp	r2, r3
 800596e:	d908      	bls.n	8005982 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005970:	4b89      	ldr	r3, [pc, #548]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	4986      	ldr	r1, [pc, #536]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 800597e:	4313      	orrs	r3, r2
 8005980:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d012      	beq.n	80059b4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	4b81      	ldr	r3, [pc, #516]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800599c:	429a      	cmp	r2, r3
 800599e:	d909      	bls.n	80059b4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80059a0:	4b7d      	ldr	r3, [pc, #500]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	497a      	ldr	r1, [pc, #488]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	4b74      	ldr	r3, [pc, #464]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d908      	bls.n	80059e2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80059d0:	4b71      	ldr	r3, [pc, #452]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	496e      	ldr	r1, [pc, #440]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d010      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	4b69      	ldr	r3, [pc, #420]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d908      	bls.n	8005a10 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80059fe:	4b66      	ldr	r3, [pc, #408]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f023 020f 	bic.w	r2, r3, #15
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	4963      	ldr	r1, [pc, #396]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80d2 	beq.w	8005bc2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d143      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d110      	bne.n	8005a5a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a38:	4b57      	ldr	r3, [pc, #348]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3e:	4a56      	ldr	r2, [pc, #344]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005a40:	f043 0304 	orr.w	r3, r3, #4
 8005a44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005a48:	4b53      	ldr	r3, [pc, #332]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	60bb      	str	r3, [r7, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005a56:	2301      	movs	r3, #1
 8005a58:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005a5a:	f7fc f98b 	bl	8001d74 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005a60:	4b4e      	ldr	r3, [pc, #312]	@ (8005b9c <HAL_RCC_ClockConfig+0x28c>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00f      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005a6e:	f7fc f981 	bl	8001d74 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e12b      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005a80:	4b46      	ldr	r3, [pc, #280]	@ (8005b9c <HAL_RCC_ClockConfig+0x28c>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f0      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005a92:	4b41      	ldr	r3, [pc, #260]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a98:	4a3f      	ldr	r2, [pc, #252]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005a9a:	f023 0304 	bic.w	r3, r3, #4
 8005a9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d121      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e112      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d107      	bne.n	8005aca <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aba:	4b37      	ldr	r3, [pc, #220]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d115      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e106      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d107      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005ad2:	4b31      	ldr	r3, [pc, #196]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e0fa      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e0f2      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005af2:	4b29      	ldr	r3, [pc, #164]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f023 0203 	bic.w	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4926      	ldr	r1, [pc, #152]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005b04:	f7fc f936 	bl	8001d74 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d112      	bne.n	8005b38 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b14:	f7fc f92e 	bl	8001d74 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e0d6      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
 8005b32:	2b0c      	cmp	r3, #12
 8005b34:	d1ee      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x204>
 8005b36:	e044      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d112      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b40:	e00a      	b.n	8005b58 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b42:	f7fc f917 	bl	8001d74 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e0bf      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b58:	4b0f      	ldr	r3, [pc, #60]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f003 030c 	and.w	r3, r3, #12
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d1ee      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x232>
 8005b64:	e02d      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d123      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b70:	f7fc f900 	bl	8001d74 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e0a8      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b86:	4b04      	ldr	r3, [pc, #16]	@ (8005b98 <HAL_RCC_ClockConfig+0x288>)
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1ee      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x260>
 8005b92:	e016      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x2b2>
 8005b94:	40022000 	.word	0x40022000
 8005b98:	46020c00 	.word	0x46020c00
 8005b9c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba0:	f7fc f8e8 	bl	8001d74 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e090      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d1ee      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d010      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	4b43      	ldr	r3, [pc, #268]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d208      	bcs.n	8005bf0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005bde:	4b40      	ldr	r3, [pc, #256]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f023 020f 	bic.w	r2, r3, #15
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	493d      	ldr	r1, [pc, #244]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ce4 <HAL_RCC_ClockConfig+0x3d4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d210      	bcs.n	8005c20 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b39      	ldr	r3, [pc, #228]	@ (8005ce4 <HAL_RCC_ClockConfig+0x3d4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 020f 	bic.w	r2, r3, #15
 8005c06:	4937      	ldr	r1, [pc, #220]	@ (8005ce4 <HAL_RCC_ClockConfig+0x3d4>)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b35      	ldr	r3, [pc, #212]	@ (8005ce4 <HAL_RCC_ClockConfig+0x3d4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e05b      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d010      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d208      	bcs.n	8005c4e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005c3c:	4b28      	ldr	r3, [pc, #160]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4925      	ldr	r1, [pc, #148]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d012      	beq.n	8005c80 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	4b20      	ldr	r3, [pc, #128]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d209      	bcs.n	8005c80 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	4919      	ldr	r1, [pc, #100]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d010      	beq.n	8005cae <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	4b13      	ldr	r3, [pc, #76]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d208      	bcs.n	8005cae <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005c9c:	4b10      	ldr	r3, [pc, #64]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	490d      	ldr	r1, [pc, #52]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005cae:	f000 f859 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <HAL_RCC_ClockConfig+0x3d0>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	490a      	ldr	r1, [pc, #40]	@ (8005ce8 <HAL_RCC_ClockConfig+0x3d8>)
 8005cbe:	5ccb      	ldrb	r3, [r1, r3]
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	4a09      	ldr	r2, [pc, #36]	@ (8005cec <HAL_RCC_ClockConfig+0x3dc>)
 8005cc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005cc8:	4b09      	ldr	r3, [pc, #36]	@ (8005cf0 <HAL_RCC_ClockConfig+0x3e0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fb ffc7 	bl	8001c60 <HAL_InitTick>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	73fb      	strb	r3, [r7, #15]

  return status;
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	46020c00 	.word	0x46020c00
 8005ce4:	40022000 	.word	0x40022000
 8005ce8:	0800c49c 	.word	0x0800c49c
 8005cec:	20000000 	.word	0x20000000
 8005cf0:	20000014 	.word	0x20000014

08005cf4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	@ 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 8005d00:	4b16      	ldr	r3, [pc, #88]	@ (8005d5c <HAL_RCC_MCOConfig+0x68>)
 8005d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d06:	4a15      	ldr	r2, [pc, #84]	@ (8005d5c <HAL_RCC_MCOConfig+0x68>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005d10:	4b12      	ldr	r3, [pc, #72]	@ (8005d5c <HAL_RCC_MCOConfig+0x68>)
 8005d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Pin = MCO1_PIN;
 8005d1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d22:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Mode = GPIO_MODE_AF_PP;
 8005d24:	2302      	movs	r3, #2
 8005d26:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull = GPIO_NOPULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Alternate = GPIO_AF0_MCO;
 8005d30:	2300      	movs	r3, #0
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio_initstruct);
 8005d34:	f107 0314 	add.w	r3, r7, #20
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4809      	ldr	r0, [pc, #36]	@ (8005d60 <HAL_RCC_MCOConfig+0x6c>)
 8005d3c:	f7fd fb2c 	bl	8003398 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8005d40:	4b06      	ldr	r3, [pc, #24]	@ (8005d5c <HAL_RCC_MCOConfig+0x68>)
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	4903      	ldr	r1, [pc, #12]	@ (8005d5c <HAL_RCC_MCOConfig+0x68>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61cb      	str	r3, [r1, #28]
}
 8005d54:	bf00      	nop
 8005d56:	3728      	adds	r7, #40	@ 0x28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	46020c00 	.word	0x46020c00
 8005d60:	42020000 	.word	0x42020000

08005d64 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b08b      	sub	sp, #44	@ 0x2c
 8005d68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d72:	4b78      	ldr	r3, [pc, #480]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d7c:	4b75      	ldr	r3, [pc, #468]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0x34>
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d121      	bne.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d11e      	bne.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005d98:	4b6e      	ldr	r3, [pc, #440]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d107      	bne.n	8005db4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005da4:	4b6b      	ldr	r3, [pc, #428]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005daa:	0b1b      	lsrs	r3, r3, #12
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db2:	e005      	b.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005db4:	4b67      	ldr	r3, [pc, #412]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	0f1b      	lsrs	r3, r3, #28
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005dc0:	4a65      	ldr	r2, [pc, #404]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d110      	bne.n	8005df2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dd4:	e00d      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 030c 	and.w	r3, r3, #12
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d102      	bne.n	8005de8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005de2:	4b5e      	ldr	r3, [pc, #376]	@ (8005f5c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005de4:	623b      	str	r3, [r7, #32]
 8005de6:	e004      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dee:	4b5b      	ldr	r3, [pc, #364]	@ (8005f5c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005df0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b0c      	cmp	r3, #12
 8005df6:	f040 80a5 	bne.w	8005f44 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005dfa:	4b56      	ldr	r3, [pc, #344]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005e04:	4b53      	ldr	r3, [pc, #332]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005e12:	4b50      	ldr	r3, [pc, #320]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e16:	091b      	lsrs	r3, r3, #4
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e22:	08db      	lsrs	r3, r3, #3
 8005e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d003      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0xe4>
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d022      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0x128>
 8005e46:	e043      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e52:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005f60 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005e6a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005e6e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005f64 <HAL_RCC_GetSysClockFreq+0x200>
 8005e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8a:	e046      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005f60 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005eae:	ed97 6a01 	vldr	s12, [r7, #4]
 8005eb2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005f64 <HAL_RCC_GetSysClockFreq+0x200>
 8005eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ece:	e024      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ef8:	ed97 6a01 	vldr	s12, [r7, #4]
 8005efc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005f64 <HAL_RCC_GetSysClockFreq+0x200>
 8005f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f18:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1e:	0e1b      	lsrs	r3, r3, #24
 8005f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f24:	3301      	adds	r3, #1
 8005f26:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3e:	ee17 3a90 	vmov	r3, s15
 8005f42:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005f44:	6a3b      	ldr	r3, [r7, #32]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	372c      	adds	r7, #44	@ 0x2c
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	46020c00 	.word	0x46020c00
 8005f58:	0800c4b4 	.word	0x0800c4b4
 8005f5c:	00f42400 	.word	0x00f42400
 8005f60:	4b742400 	.word	0x4b742400
 8005f64:	46000000 	.word	0x46000000

08005f68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005f6c:	f7ff fefa 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005f70:	4602      	mov	r2, r0
 8005f72:	4b07      	ldr	r3, [pc, #28]	@ (8005f90 <HAL_RCC_GetHCLKFreq+0x28>)
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	4906      	ldr	r1, [pc, #24]	@ (8005f94 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005f7c:	5ccb      	ldrb	r3, [r1, r3]
 8005f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f82:	4a05      	ldr	r2, [pc, #20]	@ (8005f98 <HAL_RCC_GetHCLKFreq+0x30>)
 8005f84:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005f86:	4b04      	ldr	r3, [pc, #16]	@ (8005f98 <HAL_RCC_GetHCLKFreq+0x30>)
 8005f88:	681b      	ldr	r3, [r3, #0]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	46020c00 	.word	0x46020c00
 8005f94:	0800c49c 	.word	0x0800c49c
 8005f98:	20000000 	.word	0x20000000

08005f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005fa0:	f7ff ffe2 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	4b05      	ldr	r3, [pc, #20]	@ (8005fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	091b      	lsrs	r3, r3, #4
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	4903      	ldr	r1, [pc, #12]	@ (8005fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fb2:	5ccb      	ldrb	r3, [r1, r3]
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	46020c00 	.word	0x46020c00
 8005fc0:	0800c4ac 	.word	0x0800c4ac

08005fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005fc8:	f7ff ffce 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	4903      	ldr	r1, [pc, #12]	@ (8005fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fda:	5ccb      	ldrb	r3, [r1, r3]
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	46020c00 	.word	0x46020c00
 8005fe8:	0800c4ac 	.word	0x0800c4ac

08005fec <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005ff0:	f7ff ffba 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	4b05      	ldr	r3, [pc, #20]	@ (800600c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	091b      	lsrs	r3, r3, #4
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	4903      	ldr	r1, [pc, #12]	@ (8006010 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006002:	5ccb      	ldrb	r3, [r1, r3]
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	46020c00 	.word	0x46020c00
 8006010:	0800c4ac 	.word	0x0800c4ac

08006014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800601c:	4b3e      	ldr	r3, [pc, #248]	@ (8006118 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800601e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800602a:	f7fe fd07 	bl	8004a3c <HAL_PWREx_GetVoltageRange>
 800602e:	6178      	str	r0, [r7, #20]
 8006030:	e019      	b.n	8006066 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006032:	4b39      	ldr	r3, [pc, #228]	@ (8006118 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006038:	4a37      	ldr	r2, [pc, #220]	@ (8006118 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800603a:	f043 0304 	orr.w	r3, r3, #4
 800603e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006042:	4b35      	ldr	r3, [pc, #212]	@ (8006118 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006050:	f7fe fcf4 	bl	8004a3c <HAL_PWREx_GetVoltageRange>
 8006054:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006056:	4b30      	ldr	r3, [pc, #192]	@ (8006118 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800605c:	4a2e      	ldr	r2, [pc, #184]	@ (8006118 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800605e:	f023 0304 	bic.w	r3, r3, #4
 8006062:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800606c:	d003      	beq.n	8006076 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006074:	d109      	bne.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800607c:	d202      	bcs.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800607e:	2301      	movs	r3, #1
 8006080:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006082:	e033      	b.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006084:	2300      	movs	r3, #0
 8006086:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006088:	e030      	b.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006090:	d208      	bcs.n	80060a4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006098:	d102      	bne.n	80060a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800609a:	2303      	movs	r3, #3
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	e025      	b.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e035      	b.n	8006110 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060aa:	d90f      	bls.n	80060cc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060b8:	d902      	bls.n	80060c0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	e015      	b.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80060c0:	2301      	movs	r3, #1
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	e012      	b.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	e00f      	b.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d2:	d109      	bne.n	80060e8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060da:	d102      	bne.n	80060e2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80060dc:	2301      	movs	r3, #1
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	e004      	b.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80060e2:	2302      	movs	r3, #2
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	e001      	b.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80060e8:	2301      	movs	r3, #1
 80060ea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060ec:	4b0b      	ldr	r3, [pc, #44]	@ (800611c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f023 020f 	bic.w	r2, r3, #15
 80060f4:	4909      	ldr	r1, [pc, #36]	@ (800611c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80060fc:	4b07      	ldr	r3, [pc, #28]	@ (800611c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	429a      	cmp	r2, r3
 8006108:	d001      	beq.n	800610e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	46020c00 	.word	0x46020c00
 800611c:	40022000 	.word	0x40022000

08006120 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006124:	b0b8      	sub	sp, #224	@ 0xe0
 8006126:	af00      	add	r7, sp, #0
 8006128:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800612c:	2300      	movs	r3, #0
 800612e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006132:	2300      	movs	r3, #0
 8006134:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f002 0401 	and.w	r4, r2, #1
 8006144:	2500      	movs	r5, #0
 8006146:	ea54 0305 	orrs.w	r3, r4, r5
 800614a:	d00b      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800614c:	4bca      	ldr	r3, [pc, #808]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800614e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006152:	f023 0103 	bic.w	r1, r3, #3
 8006156:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800615a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800615c:	4ac6      	ldr	r2, [pc, #792]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800615e:	430b      	orrs	r3, r1
 8006160:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006164:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f002 0802 	and.w	r8, r2, #2
 8006170:	f04f 0900 	mov.w	r9, #0
 8006174:	ea58 0309 	orrs.w	r3, r8, r9
 8006178:	d00b      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800617a:	4bbf      	ldr	r3, [pc, #764]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800617c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006180:	f023 010c 	bic.w	r1, r3, #12
 8006184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618a:	4abb      	ldr	r2, [pc, #748]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800618c:	430b      	orrs	r3, r1
 800618e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f002 0a04 	and.w	sl, r2, #4
 800619e:	f04f 0b00 	mov.w	fp, #0
 80061a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80061a6:	d00b      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80061a8:	4bb3      	ldr	r3, [pc, #716]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061ae:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80061b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b8:	4aaf      	ldr	r2, [pc, #700]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061ba:	430b      	orrs	r3, r1
 80061bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f002 0308 	and.w	r3, r2, #8
 80061cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061d0:	2300      	movs	r3, #0
 80061d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061da:	460b      	mov	r3, r1
 80061dc:	4313      	orrs	r3, r2
 80061de:	d00b      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80061e0:	4ba5      	ldr	r3, [pc, #660]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80061ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f0:	4aa1      	ldr	r2, [pc, #644]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f002 0310 	and.w	r3, r2, #16
 8006204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006208:	2300      	movs	r3, #0
 800620a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800620e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d00b      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006218:	4b97      	ldr	r3, [pc, #604]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800621a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800621e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006228:	4a93      	ldr	r2, [pc, #588]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800622a:	430b      	orrs	r3, r1
 800622c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006230:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f002 0320 	and.w	r3, r2, #32
 800623c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006240:	2300      	movs	r3, #0
 8006242:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006246:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800624a:	460b      	mov	r3, r1
 800624c:	4313      	orrs	r3, r2
 800624e:	d00b      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006250:	4b89      	ldr	r3, [pc, #548]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006256:	f023 0107 	bic.w	r1, r3, #7
 800625a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800625e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006260:	4a85      	ldr	r2, [pc, #532]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006262:	430b      	orrs	r3, r1
 8006264:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006278:	2300      	movs	r3, #0
 800627a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800627e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006282:	460b      	mov	r3, r1
 8006284:	4313      	orrs	r3, r2
 8006286:	d00b      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006288:	4b7b      	ldr	r3, [pc, #492]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800628a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800628e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006292:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006298:	4a77      	ldr	r2, [pc, #476]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800629a:	430b      	orrs	r3, r1
 800629c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80062ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062b0:	2300      	movs	r3, #0
 80062b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062b6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4313      	orrs	r3, r2
 80062be:	d00b      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80062c0:	4b6d      	ldr	r3, [pc, #436]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062d0:	4a69      	ldr	r2, [pc, #420]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80062e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062e8:	2300      	movs	r3, #0
 80062ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80062f2:	460b      	mov	r3, r1
 80062f4:	4313      	orrs	r3, r2
 80062f6:	d00b      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80062f8:	4b5f      	ldr	r3, [pc, #380]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006308:	4a5b      	ldr	r2, [pc, #364]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800630a:	430b      	orrs	r3, r1
 800630c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800631c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006320:	2300      	movs	r3, #0
 8006322:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006326:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800632a:	460b      	mov	r3, r1
 800632c:	4313      	orrs	r3, r2
 800632e:	d00b      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006330:	4b51      	ldr	r3, [pc, #324]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006336:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800633a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800633e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006340:	4a4d      	ldr	r2, [pc, #308]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006342:	430b      	orrs	r3, r1
 8006344:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006358:	2300      	movs	r3, #0
 800635a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800635e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006362:	460b      	mov	r3, r1
 8006364:	4313      	orrs	r3, r2
 8006366:	d00b      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006368:	4b43      	ldr	r3, [pc, #268]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800636a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800636e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006372:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006378:	4a3f      	ldr	r2, [pc, #252]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800637a:	430b      	orrs	r3, r1
 800637c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800638c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006390:	2300      	movs	r3, #0
 8006392:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006396:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d00b      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80063a0:	4b35      	ldr	r3, [pc, #212]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80063a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063a6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80063aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063b0:	4a31      	ldr	r2, [pc, #196]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80063b2:	430b      	orrs	r3, r1
 80063b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80063b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80063c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063c6:	2300      	movs	r3, #0
 80063c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063ce:	460b      	mov	r3, r1
 80063d0:	4313      	orrs	r3, r2
 80063d2:	d00c      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80063d4:	4b28      	ldr	r3, [pc, #160]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80063d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063e6:	4a24      	ldr	r2, [pc, #144]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80063e8:	430b      	orrs	r3, r1
 80063ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80063fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80063fc:	2300      	movs	r3, #0
 80063fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006400:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006404:	460b      	mov	r3, r1
 8006406:	4313      	orrs	r3, r2
 8006408:	d04f      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800640a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006412:	2b80      	cmp	r3, #128	@ 0x80
 8006414:	d02d      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006416:	2b80      	cmp	r3, #128	@ 0x80
 8006418:	d827      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800641a:	2b60      	cmp	r3, #96	@ 0x60
 800641c:	d02e      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800641e:	2b60      	cmp	r3, #96	@ 0x60
 8006420:	d823      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006422:	2b40      	cmp	r3, #64	@ 0x40
 8006424:	d006      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006426:	2b40      	cmp	r3, #64	@ 0x40
 8006428:	d81f      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800642e:	2b20      	cmp	r3, #32
 8006430:	d011      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006432:	e01a      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006434:	4b10      	ldr	r3, [pc, #64]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006438:	4a0f      	ldr	r2, [pc, #60]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800643a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800643e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006440:	e01d      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006442:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006446:	3308      	adds	r3, #8
 8006448:	4618      	mov	r0, r3
 800644a:	f002 f9d1 	bl	80087f0 <RCCEx_PLL2_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006454:	e013      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006456:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800645a:	332c      	adds	r3, #44	@ 0x2c
 800645c:	4618      	mov	r0, r3
 800645e:	f002 fa5f 	bl	8008920 <RCCEx_PLL3_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006468:	e009      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006470:	e005      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8006472:	bf00      	nop
 8006474:	e003      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006476:	bf00      	nop
 8006478:	46020c00 	.word	0x46020c00
        break;
 800647c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800647e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10d      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006486:	4bb6      	ldr	r3, [pc, #728]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006488:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800648c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006498:	4ab1      	ldr	r2, [pc, #708]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800649a:	430b      	orrs	r3, r1
 800649c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80064a0:	e003      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064a6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80064b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064b8:	2300      	movs	r3, #0
 80064ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064bc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d053      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80064c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d2:	d033      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d8:	d82c      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80064da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064de:	d02f      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80064e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e4:	d826      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80064e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ea:	d008      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80064ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f0:	d820      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80064f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fa:	d011      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80064fc:	e01a      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064fe:	4b98      	ldr	r3, [pc, #608]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	4a97      	ldr	r2, [pc, #604]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006508:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800650a:	e01a      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800650c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006510:	3308      	adds	r3, #8
 8006512:	4618      	mov	r0, r3
 8006514:	f002 f96c 	bl	80087f0 <RCCEx_PLL2_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800651e:	e010      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006524:	332c      	adds	r3, #44	@ 0x2c
 8006526:	4618      	mov	r0, r3
 8006528:	f002 f9fa 	bl	8008920 <RCCEx_PLL3_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006532:	e006      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800653a:	e002      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800653c:	bf00      	nop
 800653e:	e000      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006542:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10d      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800654a:	4b85      	ldr	r3, [pc, #532]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800654c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006550:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800655c:	4a80      	ldr	r2, [pc, #512]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800655e:	430b      	orrs	r3, r1
 8006560:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006564:	e003      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006566:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800656a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800656e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800657a:	663b      	str	r3, [r7, #96]	@ 0x60
 800657c:	2300      	movs	r3, #0
 800657e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006580:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006584:	460b      	mov	r3, r1
 8006586:	4313      	orrs	r3, r2
 8006588:	d046      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800658a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800658e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006592:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006596:	d028      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006598:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800659c:	d821      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800659e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065a2:	d022      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80065a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065a8:	d81b      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80065aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065ae:	d01c      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80065b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065b4:	d815      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ba:	d008      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80065bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065c0:	d80f      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d011      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ca:	d00e      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80065cc:	e009      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065d2:	3308      	adds	r3, #8
 80065d4:	4618      	mov	r0, r3
 80065d6:	f002 f90b 	bl	80087f0 <RCCEx_PLL2_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80065e0:	e004      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80065e8:	e000      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80065ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10d      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80065f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80065f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065fa:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80065fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006606:	4a56      	ldr	r2, [pc, #344]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006608:	430b      	orrs	r3, r1
 800660a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006614:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006624:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006626:	2300      	movs	r3, #0
 8006628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800662a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	d03f      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006634:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663c:	2b04      	cmp	r3, #4
 800663e:	d81e      	bhi.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8006640:	a201      	add	r2, pc, #4	@ (adr r2, 8006648 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	08006687 	.word	0x08006687
 800664c:	0800665d 	.word	0x0800665d
 8006650:	0800666b 	.word	0x0800666b
 8006654:	08006687 	.word	0x08006687
 8006658:	08006687 	.word	0x08006687
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800665c:	4b40      	ldr	r3, [pc, #256]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	4a3f      	ldr	r2, [pc, #252]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006666:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006668:	e00e      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800666a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800666e:	332c      	adds	r3, #44	@ 0x2c
 8006670:	4618      	mov	r0, r3
 8006672:	f002 f955 	bl	8008920 <RCCEx_PLL3_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800667c:	e004      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006684:	e000      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8006686:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006688:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10d      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006690:	4b33      	ldr	r3, [pc, #204]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006692:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006696:	f023 0107 	bic.w	r1, r3, #7
 800669a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80066a4:	430b      	orrs	r3, r1
 80066a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80066aa:	e003      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ac:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80066b0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80066b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80066c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80066c2:	2300      	movs	r3, #0
 80066c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80066c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80066ca:	460b      	mov	r3, r1
 80066cc:	4313      	orrs	r3, r2
 80066ce:	d04d      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80066d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066dc:	d028      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80066de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066e2:	d821      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80066e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066e8:	d024      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80066ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066ee:	d81b      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80066f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066f4:	d00e      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80066f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066fa:	d815      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01b      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006704:	d110      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006706:	4b16      	ldr	r3, [pc, #88]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	4a15      	ldr	r2, [pc, #84]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800670c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006710:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006712:	e012      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006718:	332c      	adds	r3, #44	@ 0x2c
 800671a:	4618      	mov	r0, r3
 800671c:	f002 f900 	bl	8008920 <RCCEx_PLL3_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006726:	e008      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800672e:	e004      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006730:	bf00      	nop
 8006732:	e002      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006734:	bf00      	nop
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006738:	bf00      	nop
    }
    if (ret == HAL_OK)
 800673a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800673e:	2b00      	cmp	r3, #0
 8006740:	d110      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006742:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006748:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800674c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006754:	4a02      	ldr	r2, [pc, #8]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006756:	430b      	orrs	r3, r1
 8006758:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800675c:	e006      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800675e:	bf00      	nop
 8006760:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006764:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006768:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800676c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800677a:	2300      	movs	r3, #0
 800677c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800677e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	f000 80b5 	beq.w	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800678a:	2300      	movs	r3, #0
 800678c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006790:	4b9d      	ldr	r3, [pc, #628]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d113      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800679e:	4b9a      	ldr	r3, [pc, #616]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a4:	4a98      	ldr	r2, [pc, #608]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067a6:	f043 0304 	orr.w	r3, r3, #4
 80067aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80067ae:	4b96      	ldr	r3, [pc, #600]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80067c6:	4b91      	ldr	r3, [pc, #580]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	4a90      	ldr	r2, [pc, #576]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067d2:	f7fb facf 	bl	8001d74 <HAL_GetTick>
 80067d6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80067da:	e00b      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067dc:	f7fb faca 	bl	8001d74 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d903      	bls.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80067f2:	e005      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80067f4:	4b85      	ldr	r3, [pc, #532]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0ed      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006800:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006804:	2b00      	cmp	r3, #0
 8006806:	d165      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006808:	4b7f      	ldr	r3, [pc, #508]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800680a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800680e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800681a:	2b00      	cmp	r3, #0
 800681c:	d023      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800681e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006822:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800682a:	4293      	cmp	r3, r2
 800682c:	d01b      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800682e:	4b76      	ldr	r3, [pc, #472]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006838:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800683c:	4b72      	ldr	r3, [pc, #456]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800683e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006842:	4a71      	ldr	r2, [pc, #452]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006848:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800684c:	4b6e      	ldr	r3, [pc, #440]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800684e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006852:	4a6d      	ldr	r2, [pc, #436]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006858:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800685c:	4a6a      	ldr	r2, [pc, #424]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800685e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006862:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d019      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006872:	f7fb fa7f 	bl	8001d74 <HAL_GetTick>
 8006876:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800687a:	e00d      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800687c:	f7fb fa7a 	bl	8001d74 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	f241 3388 	movw	r3, #5000	@ 0x1388
 800688c:	429a      	cmp	r2, r3
 800688e:	d903      	bls.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8006896:	e006      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006898:	4b5b      	ldr	r3, [pc, #364]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800689a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0ea      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80068a6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10d      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80068ae:	4b56      	ldr	r3, [pc, #344]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80068c0:	4a51      	ldr	r2, [pc, #324]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068c2:	430b      	orrs	r3, r1
 80068c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80068c8:	e008      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068ce:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80068d2:	e003      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068d8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068dc:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d107      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e4:	4b48      	ldr	r3, [pc, #288]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ea:	4a47      	ldr	r2, [pc, #284]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068ec:	f023 0304 	bic.w	r3, r3, #4
 80068f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80068f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006900:	643b      	str	r3, [r7, #64]	@ 0x40
 8006902:	2300      	movs	r3, #0
 8006904:	647b      	str	r3, [r7, #68]	@ 0x44
 8006906:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800690a:	460b      	mov	r3, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	d042      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006914:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006918:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800691c:	d022      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800691e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006922:	d81b      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006928:	d011      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800692a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800692e:	d815      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d019      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006934:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006938:	d110      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800693a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800693e:	3308      	adds	r3, #8
 8006940:	4618      	mov	r0, r3
 8006942:	f001 ff55 	bl	80087f0 <RCCEx_PLL2_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800694c:	e00d      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800694e:	4b2e      	ldr	r3, [pc, #184]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	4a2d      	ldr	r2, [pc, #180]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006958:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800695a:	e006      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006962:	e002      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006964:	bf00      	nop
 8006966:	e000      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006968:	bf00      	nop
    }
    if (ret == HAL_OK)
 800696a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10d      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006972:	4b25      	ldr	r3, [pc, #148]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006978:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800697c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006980:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006984:	4a20      	ldr	r2, [pc, #128]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006986:	430b      	orrs	r3, r1
 8006988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800698c:	e003      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006992:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80069a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069a4:	2300      	movs	r3, #0
 80069a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80069ac:	460b      	mov	r3, r1
 80069ae:	4313      	orrs	r3, r2
 80069b0:	d032      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80069b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069be:	d00b      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80069c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069c4:	d804      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d008      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ce:	d007      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80069d6:	e004      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80069d8:	bf00      	nop
 80069da:	e002      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80069dc:	bf00      	nop
 80069de:	e000      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80069e0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80069e2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d112      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80069ea:	4b07      	ldr	r3, [pc, #28]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80069ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069fc:	4a02      	ldr	r2, [pc, #8]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80069fe:	430b      	orrs	r3, r1
 8006a00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a04:	e008      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006a06:	bf00      	nop
 8006a08:	46020c00 	.word	0x46020c00
 8006a0c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a10:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a14:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a24:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a26:	2300      	movs	r3, #0
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4313      	orrs	r3, r2
 8006a32:	d019      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006a34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a40:	d105      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a42:	4b88      	ldr	r3, [pc, #544]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a46:	4a87      	ldr	r2, [pc, #540]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a4c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006a4e:	4b85      	ldr	r3, [pc, #532]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a54:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006a58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a60:	4a80      	ldr	r2, [pc, #512]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a62:	430b      	orrs	r3, r1
 8006a64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006a68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a76:	2300      	movs	r3, #0
 8006a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4313      	orrs	r3, r2
 8006a82:	d00c      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006a84:	4b77      	ldr	r3, [pc, #476]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a96:	4973      	ldr	r1, [pc, #460]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006a9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006aaa:	623b      	str	r3, [r7, #32]
 8006aac:	2300      	movs	r3, #0
 8006aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ab0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d00c      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006aba:	4b6a      	ldr	r3, [pc, #424]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ac0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ac8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006acc:	4965      	ldr	r1, [pc, #404]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006aea:	460b      	mov	r3, r1
 8006aec:	4313      	orrs	r3, r2
 8006aee:	d00c      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006af0:	4b5c      	ldr	r3, [pc, #368]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006af6:	f023 0218 	bic.w	r2, r3, #24
 8006afa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006afe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b02:	4958      	ldr	r1, [pc, #352]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b20:	460b      	mov	r3, r1
 8006b22:	4313      	orrs	r3, r2
 8006b24:	d032      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b32:	d105      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b34:	4b4b      	ldr	r3, [pc, #300]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	4a4a      	ldr	r2, [pc, #296]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b3e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b4c:	d108      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b52:	3308      	adds	r3, #8
 8006b54:	4618      	mov	r0, r3
 8006b56:	f001 fe4b 	bl	80087f0 <RCCEx_PLL2_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8006b60:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10d      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006b68:	4b3e      	ldr	r3, [pc, #248]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b7a:	493a      	ldr	r1, [pc, #232]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b88:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d03a      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bb4:	d00e      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bba:	d815      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d017      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bc4:	d110      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc6:	4b27      	ldr	r3, [pc, #156]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	4a26      	ldr	r2, [pc, #152]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bd0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006bd2:	e00e      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bd8:	3308      	adds	r3, #8
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 fe08 	bl	80087f0 <RCCEx_PLL2_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006be6:	e004      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006bee:	e000      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006bf0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006bf2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10d      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c00:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c0c:	4915      	ldr	r1, [pc, #84]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006c14:	e003      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c16:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c1a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	607b      	str	r3, [r7, #4]
 8006c30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c34:	460b      	mov	r3, r1
 8006c36:	4313      	orrs	r3, r2
 8006c38:	d00c      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c40:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c4c:	4905      	ldr	r1, [pc, #20]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006c54:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	37e0      	adds	r7, #224	@ 0xe0
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c62:	bf00      	nop
 8006c64:	46020c00 	.word	0x46020c00

08006c68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b089      	sub	sp, #36	@ 0x24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006c70:	4ba6      	ldr	r3, [pc, #664]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c78:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006c7a:	4ba4      	ldr	r3, [pc, #656]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006c84:	4ba1      	ldr	r3, [pc, #644]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	3301      	adds	r3, #1
 8006c90:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006c92:	4b9e      	ldr	r3, [pc, #632]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c96:	091b      	lsrs	r3, r3, #4
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006c9e:	4b9b      	ldr	r3, [pc, #620]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca2:	08db      	lsrs	r3, r3, #3
 8006ca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d062      	beq.n	8006d86 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	f200 8081 	bhi.w	8006dca <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d024      	beq.n	8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d17a      	bne.n	8006dca <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006f10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce6:	4b89      	ldr	r3, [pc, #548]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cfa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d16:	e08f      	b.n	8006e38 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006d18:	4b7c      	ldr	r3, [pc, #496]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006d24:	4b79      	ldr	r3, [pc, #484]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	0f1b      	lsrs	r3, r3, #28
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	e006      	b.n	8006d3e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006d30:	4b76      	ldr	r3, [pc, #472]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	0f1b      	lsrs	r3, r3, #28
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	4a76      	ldr	r2, [pc, #472]	@ (8006f18 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d44:	ee07 3a90 	vmov	s15, r3
 8006d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d64:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d68:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d84:	e058      	b.n	8006e38 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	ee07 3a90 	vmov	s15, r3
 8006d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d90:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d98:	4b5c      	ldr	r3, [pc, #368]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da0:	ee07 3a90 	vmov	s15, r3
 8006da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006da8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006db8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc8:	e036      	b.n	8006e38 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006dca:	4b50      	ldr	r3, [pc, #320]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	0f1b      	lsrs	r3, r3, #28
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	e006      	b.n	8006df0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006de2:	4b4a      	ldr	r3, [pc, #296]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	0f1b      	lsrs	r3, r3, #28
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	4a49      	ldr	r2, [pc, #292]	@ (8006f18 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e1a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006f14 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e36:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006e38:	4b34      	ldr	r3, [pc, #208]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d017      	beq.n	8006e74 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006e44:	4b31      	ldr	r3, [pc, #196]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e48:	0a5b      	lsrs	r3, r3, #9
 8006e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e6a:	ee17 2a90 	vmov	r2, s15
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	e002      	b.n	8006e7a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006e7a:	4b24      	ldr	r3, [pc, #144]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d017      	beq.n	8006eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006e86:	4b21      	ldr	r3, [pc, #132]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8a:	0c1b      	lsrs	r3, r3, #16
 8006e8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e90:	ee07 3a90 	vmov	s15, r3
 8006e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006e98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e9c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ea0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eac:	ee17 2a90 	vmov	r2, s15
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	605a      	str	r2, [r3, #4]
 8006eb4:	e002      	b.n	8006ebc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006ebc:	4b13      	ldr	r3, [pc, #76]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d017      	beq.n	8006ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ec8:	4b10      	ldr	r3, [pc, #64]	@ (8006f0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ecc:	0e1b      	lsrs	r3, r3, #24
 8006ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ede:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eee:	ee17 2a90 	vmov	r2, s15
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006ef6:	e002      	b.n	8006efe <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	609a      	str	r2, [r3, #8]
}
 8006efe:	bf00      	nop
 8006f00:	3724      	adds	r7, #36	@ 0x24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	46020c00 	.word	0x46020c00
 8006f10:	4b742400 	.word	0x4b742400
 8006f14:	46000000 	.word	0x46000000
 8006f18:	0800c4b4 	.word	0x0800c4b4

08006f1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b089      	sub	sp, #36	@ 0x24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006f24:	4ba6      	ldr	r3, [pc, #664]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006f2e:	4ba4      	ldr	r3, [pc, #656]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006f38:	4ba1      	ldr	r3, [pc, #644]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	3301      	adds	r3, #1
 8006f44:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006f46:	4b9e      	ldr	r3, [pc, #632]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4a:	091b      	lsrs	r3, r3, #4
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006f52:	4b9b      	ldr	r3, [pc, #620]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	08db      	lsrs	r3, r3, #3
 8006f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d062      	beq.n	800703a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	f200 8081 	bhi.w	800707e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d024      	beq.n	8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d17a      	bne.n	800707e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b89      	ldr	r3, [pc, #548]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fae:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fca:	e08f      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006fd8:	4b79      	ldr	r3, [pc, #484]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	0f1b      	lsrs	r3, r3, #28
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	e006      	b.n	8006ff2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006fe4:	4b76      	ldr	r3, [pc, #472]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	0f1b      	lsrs	r3, r3, #28
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	4a76      	ldr	r2, [pc, #472]	@ (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff8:	ee07 3a90 	vmov	s15, r3
 8006ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007018:	ed97 6a02 	vldr	s12, [r7, #8]
 800701c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800702c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007034:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007038:	e058      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	ee07 3a90 	vmov	s15, r3
 8007040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007044:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704c:	4b5c      	ldr	r3, [pc, #368]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800704e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007054:	ee07 3a90 	vmov	s15, r3
 8007058:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800705c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007060:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007064:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007068:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800706c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007070:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007078:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800707c:	e036      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800707e:	4b50      	ldr	r3, [pc, #320]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800708a:	4b4d      	ldr	r3, [pc, #308]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	0f1b      	lsrs	r3, r3, #28
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	e006      	b.n	80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8007096:	4b4a      	ldr	r3, [pc, #296]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	0f1b      	lsrs	r3, r3, #28
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	4a49      	ldr	r2, [pc, #292]	@ (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80070a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ce:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80070d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070ea:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80070ec:	4b34      	ldr	r3, [pc, #208]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d017      	beq.n	8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80070f8:	4b31      	ldr	r3, [pc, #196]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80070fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fc:	0a5b      	lsrs	r3, r3, #9
 80070fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800710a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800710e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007112:	edd7 6a07 	vldr	s13, [r7, #28]
 8007116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800711a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800711e:	ee17 2a90 	vmov	r2, s15
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e002      	b.n	800712e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800712e:	4b24      	ldr	r3, [pc, #144]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d017      	beq.n	800716a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800713a:	4b21      	ldr	r3, [pc, #132]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800713c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713e:	0c1b      	lsrs	r3, r3, #16
 8007140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007144:	ee07 3a90 	vmov	s15, r3
 8007148:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800714c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007150:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007154:	edd7 6a07 	vldr	s13, [r7, #28]
 8007158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800715c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007160:	ee17 2a90 	vmov	r2, s15
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	605a      	str	r2, [r3, #4]
 8007168:	e002      	b.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007170:	4b13      	ldr	r3, [pc, #76]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d017      	beq.n	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800717c:	4b10      	ldr	r3, [pc, #64]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800717e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007180:	0e1b      	lsrs	r3, r3, #24
 8007182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800718e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007192:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007196:	edd7 6a07 	vldr	s13, [r7, #28]
 800719a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a2:	ee17 2a90 	vmov	r2, s15
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071aa:	e002      	b.n	80071b2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	609a      	str	r2, [r3, #8]
}
 80071b2:	bf00      	nop
 80071b4:	3724      	adds	r7, #36	@ 0x24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	46020c00 	.word	0x46020c00
 80071c4:	4b742400 	.word	0x4b742400
 80071c8:	46000000 	.word	0x46000000
 80071cc:	0800c4b4 	.word	0x0800c4b4

080071d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b089      	sub	sp, #36	@ 0x24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80071d8:	4ba6      	ldr	r3, [pc, #664]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80071e2:	4ba4      	ldr	r3, [pc, #656]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80071ec:	4ba1      	ldr	r3, [pc, #644]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f0:	0a1b      	lsrs	r3, r3, #8
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	3301      	adds	r3, #1
 80071f8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80071fa:	4b9e      	ldr	r3, [pc, #632]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fe:	091b      	lsrs	r3, r3, #4
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007206:	4b9b      	ldr	r3, [pc, #620]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800720a:	08db      	lsrs	r3, r3, #3
 800720c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	fb02 f303 	mul.w	r3, r2, r3
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b03      	cmp	r3, #3
 8007226:	d062      	beq.n	80072ee <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2b03      	cmp	r3, #3
 800722c:	f200 8081 	bhi.w	8007332 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d024      	beq.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d17a      	bne.n	8007332 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b89      	ldr	r3, [pc, #548]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800725e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007262:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800726e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800727e:	e08f      	b.n	80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007280:	4b7c      	ldr	r3, [pc, #496]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800728c:	4b79      	ldr	r3, [pc, #484]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	0f1b      	lsrs	r3, r3, #28
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	e006      	b.n	80072a6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8007298:	4b76      	ldr	r3, [pc, #472]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800729a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800729e:	041b      	lsls	r3, r3, #16
 80072a0:	0f1b      	lsrs	r3, r3, #28
 80072a2:	f003 030f 	and.w	r3, r3, #15
 80072a6:	4a76      	ldr	r2, [pc, #472]	@ (8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80072a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80072d0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80072d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80072e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072ec:	e058      	b.n	80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80072fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007300:	4b5c      	ldr	r3, [pc, #368]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007308:	ee07 3a90 	vmov	s15, r3
 800730c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007310:	ed97 6a02 	vldr	s12, [r7, #8]
 8007314:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007318:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800731c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007324:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007330:	e036      	b.n	80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007332:	4b50      	ldr	r3, [pc, #320]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800733e:	4b4d      	ldr	r3, [pc, #308]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	0f1b      	lsrs	r3, r3, #28
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	e006      	b.n	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800734a:	4b4a      	ldr	r3, [pc, #296]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800734c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	0f1b      	lsrs	r3, r3, #28
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	4a49      	ldr	r2, [pc, #292]	@ (8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800735a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	ee07 3a90 	vmov	s15, r3
 800736c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007382:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007392:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800739e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80073a0:	4b34      	ldr	r3, [pc, #208]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80073a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d017      	beq.n	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80073ac:	4b31      	ldr	r3, [pc, #196]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80073ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b0:	0a5b      	lsrs	r3, r3, #9
 80073b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80073be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80073c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d2:	ee17 2a90 	vmov	r2, s15
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e002      	b.n	80073e2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80073e2:	4b24      	ldr	r3, [pc, #144]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80073e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d017      	beq.n	800741e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80073ee:	4b21      	ldr	r3, [pc, #132]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80073f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f2:	0c1b      	lsrs	r3, r3, #16
 80073f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007400:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007404:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007408:	edd7 6a07 	vldr	s13, [r7, #28]
 800740c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007414:	ee17 2a90 	vmov	r2, s15
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]
 800741c:	e002      	b.n	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007424:	4b13      	ldr	r3, [pc, #76]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d017      	beq.n	8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007430:	4b10      	ldr	r3, [pc, #64]	@ (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007434:	0e1b      	lsrs	r3, r3, #24
 8007436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007446:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800744a:	edd7 6a07 	vldr	s13, [r7, #28]
 800744e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007456:	ee17 2a90 	vmov	r2, s15
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800745e:	e002      	b.n	8007466 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	609a      	str	r2, [r3, #8]
}
 8007466:	bf00      	nop
 8007468:	3724      	adds	r7, #36	@ 0x24
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	46020c00 	.word	0x46020c00
 8007478:	4b742400 	.word	0x4b742400
 800747c:	46000000 	.word	0x46000000
 8007480:	0800c4b4 	.word	0x0800c4b4

08007484 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08e      	sub	sp, #56	@ 0x38
 8007488:	af00      	add	r7, sp, #0
 800748a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800748e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007492:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007496:	430b      	orrs	r3, r1
 8007498:	d145      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800749a:	4baa      	ldr	r3, [pc, #680]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800749c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074a4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80074a6:	4ba7      	ldr	r3, [pc, #668]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d108      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ba:	d104      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80074bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c2:	f001 b987 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80074c6:	4b9f      	ldr	r3, [pc, #636]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074d4:	d114      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074dc:	d110      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80074de:	4b99      	ldr	r3, [pc, #612]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ec:	d103      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80074ee:	23fa      	movs	r3, #250	@ 0xfa
 80074f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80074f2:	f001 b96f 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80074f6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80074fa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80074fc:	f001 b96a 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007500:	4b90      	ldr	r3, [pc, #576]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800750c:	d107      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007514:	d103      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007516:	4b8c      	ldr	r3, [pc, #560]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007518:	637b      	str	r3, [r7, #52]	@ 0x34
 800751a:	f001 b95b 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
 8007522:	f001 b957 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800752a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800752e:	430b      	orrs	r3, r1
 8007530:	d151      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007532:	4b84      	ldr	r3, [pc, #528]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007534:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007538:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800753c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	2b80      	cmp	r3, #128	@ 0x80
 8007542:	d035      	beq.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007546:	2b80      	cmp	r3, #128	@ 0x80
 8007548:	d841      	bhi.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	2b60      	cmp	r3, #96	@ 0x60
 800754e:	d02a      	beq.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007552:	2b60      	cmp	r3, #96	@ 0x60
 8007554:	d83b      	bhi.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	2b40      	cmp	r3, #64	@ 0x40
 800755a:	d009      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	2b40      	cmp	r3, #64	@ 0x40
 8007560:	d835      	bhi.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00c      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	2b20      	cmp	r3, #32
 800756c:	d012      	beq.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800756e:	e02e      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fb77 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800757e:	f001 b929 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007582:	f107 0318 	add.w	r3, r7, #24
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff fcc8 	bl	8006f1c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007590:	f001 b920 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007594:	f107 030c 	add.w	r3, r7, #12
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fe19 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075a2:	f001 b917 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80075a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ac:	f001 b912 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075b0:	4b64      	ldr	r3, [pc, #400]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075bc:	d103      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80075be:	4b63      	ldr	r3, [pc, #396]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80075c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075c2:	f001 b907 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ca:	f001 b903 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075d2:	f001 b8ff 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80075d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075da:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80075de:	430b      	orrs	r3, r1
 80075e0:	d158      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80075e2:	4b58      	ldr	r3, [pc, #352]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80075e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f4:	d03b      	beq.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075fc:	d846      	bhi.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007604:	d02e      	beq.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800760c:	d83e      	bhi.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007614:	d00b      	beq.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800761c:	d836      	bhi.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00d      	beq.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800762a:	d012      	beq.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800762c:	e02e      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800762e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff fb18 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800763c:	f001 b8ca 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007640:	f107 0318 	add.w	r3, r7, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fc69 	bl	8006f1c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800764e:	f001 b8c1 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007652:	f107 030c 	add.w	r3, r7, #12
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff fdba 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007660:	f001 b8b8 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007664:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007668:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800766a:	f001 b8b3 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800766e:	4b35      	ldr	r3, [pc, #212]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800767a:	d103      	bne.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800767c:	4b33      	ldr	r3, [pc, #204]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007680:	f001 b8a8 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007688:	f001 b8a4 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007690:	f001 b8a0 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007698:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800769c:	430b      	orrs	r3, r1
 800769e:	d16e      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80076a0:	4b28      	ldr	r3, [pc, #160]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80076a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076a6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80076aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80076b2:	d034      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80076ba:	d85c      	bhi.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076c2:	d00b      	beq.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80076c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ca:	d854      	bhi.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80076cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d016      	beq.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076d8:	d009      	beq.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80076da:	e04c      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff fac1 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80076e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076ea:	f001 b873 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ee:	f107 0318 	add.w	r3, r7, #24
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff fc12 	bl	8006f1c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076fc:	f001 b86a 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007700:	4b10      	ldr	r3, [pc, #64]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800770c:	d103      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800770e:	4b10      	ldr	r3, [pc, #64]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007710:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007712:	f001 b85f 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800771a:	f001 b85b 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800771e:	4b09      	ldr	r3, [pc, #36]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b20      	cmp	r3, #32
 8007728:	d121      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800772a:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00e      	beq.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007736:	4b03      	ldr	r3, [pc, #12]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	0e1b      	lsrs	r3, r3, #24
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	e00f      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007742:	bf00      	nop
 8007744:	46020c00 	.word	0x46020c00
 8007748:	0007a120 	.word	0x0007a120
 800774c:	00f42400 	.word	0x00f42400
 8007750:	02dc6c00 	.word	0x02dc6c00
 8007754:	4ba7      	ldr	r3, [pc, #668]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	0e1b      	lsrs	r3, r3, #24
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	4aa5      	ldr	r2, [pc, #660]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800776a:	f001 b833 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007772:	f001 b82f 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800777a:	f001 b82b 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800777e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007782:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007786:	430b      	orrs	r3, r1
 8007788:	d17f      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800778a:	4b9a      	ldr	r3, [pc, #616]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800778c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007794:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	2b00      	cmp	r3, #0
 800779a:	d165      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800779c:	4b95      	ldr	r3, [pc, #596]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800779e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077a2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80077a6:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80077ae:	d034      	beq.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80077b6:	d853      	bhi.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80077b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077be:	d00b      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80077c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077c6:	d84b      	bhi.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d016      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077d4:	d009      	beq.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80077d6:	e043      	b.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff fa43 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80077e6:	f000 bff5 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ea:	f107 0318 	add.w	r3, r7, #24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fb94 	bl	8006f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80077f8:	f000 bfec 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80077fc:	4b7d      	ldr	r3, [pc, #500]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007808:	d103      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800780a:	4b7c      	ldr	r3, [pc, #496]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800780e:	f000 bfe1 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007816:	f000 bfdd 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800781a:	4b76      	ldr	r3, [pc, #472]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b20      	cmp	r3, #32
 8007824:	d118      	bne.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007826:	4b73      	ldr	r3, [pc, #460]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007832:	4b70      	ldr	r3, [pc, #448]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	0e1b      	lsrs	r3, r3, #24
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	e006      	b.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800783e:	4b6d      	ldr	r3, [pc, #436]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007844:	041b      	lsls	r3, r3, #16
 8007846:	0e1b      	lsrs	r3, r3, #24
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	4a6a      	ldr	r2, [pc, #424]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800784e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007852:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007854:	f000 bfbe 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800785c:	f000 bfba 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007864:	f000 bfb6 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800786e:	d108      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff f9f7 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
 800787e:	f000 bfa9 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	637b      	str	r3, [r7, #52]	@ 0x34
 8007886:	f000 bfa5 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800788a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788e:	1e51      	subs	r1, r2, #1
 8007890:	430b      	orrs	r3, r1
 8007892:	d136      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007894:	4b57      	ldr	r3, [pc, #348]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d104      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80078a6:	f7fe fb8d 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 80078aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80078ac:	f000 bf92 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80078b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d104      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078b6:	f7fe fa55 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 80078ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80078bc:	f000 bf8a 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80078c0:	4b4c      	ldr	r3, [pc, #304]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078cc:	d106      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d103      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80078d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d8:	f000 bf7c 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80078dc:	4b45      	ldr	r3, [pc, #276]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80078de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d107      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d104      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80078f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f6:	f000 bf6d 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078fe:	f000 bf69 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007906:	1e91      	subs	r1, r2, #2
 8007908:	430b      	orrs	r3, r1
 800790a:	d136      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800790c:	4b39      	ldr	r3, [pc, #228]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800790e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007912:	f003 030c 	and.w	r3, r3, #12
 8007916:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800791e:	f7fe fb3d 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8007922:	6378      	str	r0, [r7, #52]	@ 0x34
 8007924:	f000 bf56 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	2b04      	cmp	r3, #4
 800792c:	d104      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800792e:	f7fe fa19 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007932:	6378      	str	r0, [r7, #52]	@ 0x34
 8007934:	f000 bf4e 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007938:	4b2e      	ldr	r3, [pc, #184]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007944:	d106      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	2b08      	cmp	r3, #8
 800794a:	d103      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 800794c:	4b2c      	ldr	r3, [pc, #176]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800794e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007950:	f000 bf40 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007954:	4b27      	ldr	r3, [pc, #156]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b02      	cmp	r3, #2
 8007960:	d107      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	2b0c      	cmp	r3, #12
 8007966:	d104      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007968:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
 800796e:	f000 bf31 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
 8007976:	f000 bf2d 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800797a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800797e:	1f11      	subs	r1, r2, #4
 8007980:	430b      	orrs	r3, r1
 8007982:	d13f      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007984:	4b1b      	ldr	r3, [pc, #108]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800798a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800798e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007996:	f7fe fb01 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 800799a:	6378      	str	r0, [r7, #52]	@ 0x34
 800799c:	f000 bf1a 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	2b10      	cmp	r3, #16
 80079a4:	d104      	bne.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079a6:	f7fe f9dd 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 80079aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80079ac:	f000 bf12 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80079b0:	4b10      	ldr	r3, [pc, #64]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079bc:	d106      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	d103      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80079c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c8:	f000 bf04 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80079cc:	4b09      	ldr	r3, [pc, #36]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80079ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d107      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	2b30      	cmp	r3, #48	@ 0x30
 80079de:	d104      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80079e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e6:	f000 bef5 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ee:	f000 bef1 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80079f2:	bf00      	nop
 80079f4:	46020c00 	.word	0x46020c00
 80079f8:	0800c4b4 	.word	0x0800c4b4
 80079fc:	02dc6c00 	.word	0x02dc6c00
 8007a00:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a08:	f1a2 0108 	sub.w	r1, r2, #8
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	d136      	bne.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007a10:	4ba4      	ldr	r3, [pc, #656]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a1a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d104      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a22:	f7fe fabb 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8007a26:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a28:	f000 bed4 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2e:	2b40      	cmp	r3, #64	@ 0x40
 8007a30:	d104      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a32:	f7fe f997 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007a36:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a38:	f000 becc 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007a3c:	4b99      	ldr	r3, [pc, #612]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a48:	d106      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	2b80      	cmp	r3, #128	@ 0x80
 8007a4e:	d103      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007a50:	4b95      	ldr	r3, [pc, #596]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a54:	f000 bebe 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007a58:	4b92      	ldr	r3, [pc, #584]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d107      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a6a:	d104      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a72:	f000 beaf 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a7a:	f000 beab 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a82:	f1a2 0110 	sub.w	r1, r2, #16
 8007a86:	430b      	orrs	r3, r1
 8007a88:	d139      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007a8a:	4b86      	ldr	r3, [pc, #536]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a94:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a9c:	f7fe fa7e 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8007aa0:	6378      	str	r0, [r7, #52]	@ 0x34
 8007aa2:	f000 be97 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aac:	d104      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007aae:	f7fe f959 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007ab2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ab4:	f000 be8e 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007ab8:	4b7a      	ldr	r3, [pc, #488]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac4:	d107      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007acc:	d103      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8007ace:	4b76      	ldr	r3, [pc, #472]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad2:	f000 be7f 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007ad6:	4b73      	ldr	r3, [pc, #460]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d108      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aea:	d104      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007aec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007af2:	f000 be6f 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007afa:	f000 be6b 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b02:	f1a2 0120 	sub.w	r1, r2, #32
 8007b06:	430b      	orrs	r3, r1
 8007b08:	d158      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007b0a:	4b66      	ldr	r3, [pc, #408]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007b1c:	f7fe fa66 	bl	8005fec <HAL_RCC_GetPCLK3Freq>
 8007b20:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b22:	f000 be57 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d104      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b2c:	f7fe f91a 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007b30:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b32:	f000 be4f 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007b36:	4b5b      	ldr	r3, [pc, #364]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b42:	d106      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d103      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007b4a:	4b57      	ldr	r3, [pc, #348]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4e:	f000 be41 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007b52:	4b54      	ldr	r3, [pc, #336]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d107      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8007b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d104      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6c:	f000 be32 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007b70:	4b4c      	ldr	r3, [pc, #304]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d11b      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d118      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b82:	4b48      	ldr	r3, [pc, #288]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8007b8e:	4b45      	ldr	r3, [pc, #276]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	0e1b      	lsrs	r3, r3, #24
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	e006      	b.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007b9a:	4b42      	ldr	r3, [pc, #264]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ba0:	041b      	lsls	r3, r3, #16
 8007ba2:	0e1b      	lsrs	r3, r3, #24
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	4a40      	ldr	r2, [pc, #256]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb0:	f000 be10 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb8:	f000 be0c 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	d173      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007bc8:	4b36      	ldr	r3, [pc, #216]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007bca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007bd2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bda:	d104      	bne.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bdc:	f7fe f8c2 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007be0:	6378      	str	r0, [r7, #52]	@ 0x34
 8007be2:	f000 bdf7 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bec:	d108      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bee:	f107 0318 	add.w	r3, r7, #24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff f992 	bl	8006f1c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfc:	f000 bdea 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d104      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007c06:	f7fe f9af 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8007c0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c0c:	f000 bde2 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007c16:	d122      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c18:	4b22      	ldr	r3, [pc, #136]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	d118      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c24:	4b1f      	ldr	r3, [pc, #124]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007c30:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	0e1b      	lsrs	r3, r3, #24
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	e006      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007c3c:	4b19      	ldr	r3, [pc, #100]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c42:	041b      	lsls	r3, r3, #16
 8007c44:	0e1b      	lsrs	r3, r3, #24
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	4a18      	ldr	r2, [pc, #96]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c52:	f000 bdbf 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c5a:	f000 bdbb 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007c5e:	4b11      	ldr	r3, [pc, #68]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c6a:	d107      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c72:	d103      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007c74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c78:	f000 bdac 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007c7c:	4b09      	ldr	r3, [pc, #36]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c88:	d107      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c90:	d103      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8007c92:	4b05      	ldr	r3, [pc, #20]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c96:	f000 bd9d 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c9e:	f000 bd99 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007ca2:	bf00      	nop
 8007ca4:	46020c00 	.word	0x46020c00
 8007ca8:	00f42400 	.word	0x00f42400
 8007cac:	0800c4b4 	.word	0x0800c4b4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	d158      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007cbc:	4bad      	ldr	r3, [pc, #692]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007cbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d84b      	bhi.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007cce:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007d0d 	.word	0x08007d0d
 8007cd8:	08007ce9 	.word	0x08007ce9
 8007cdc:	08007cfb 	.word	0x08007cfb
 8007ce0:	08007d17 	.word	0x08007d17
 8007ce4:	08007d21 	.word	0x08007d21
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe ffbb 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cf6:	f000 bd6d 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cfa:	f107 030c 	add.w	r3, r7, #12
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fa66 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d08:	f000 bd64 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007d0c:	f7fe f92c 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8007d10:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d12:	f000 bd5f 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007d16:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007d1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d1c:	f000 bd5a 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d20:	4b94      	ldr	r3, [pc, #592]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d118      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d2c:	4b91      	ldr	r3, [pc, #580]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d005      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8007d38:	4b8e      	ldr	r3, [pc, #568]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	0e1b      	lsrs	r3, r3, #24
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	e006      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8007d44:	4b8b      	ldr	r3, [pc, #556]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d4a:	041b      	lsls	r3, r3, #16
 8007d4c:	0e1b      	lsrs	r3, r3, #24
 8007d4e:	f003 030f 	and.w	r3, r3, #15
 8007d52:	4a89      	ldr	r2, [pc, #548]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d5a:	f000 bd3b 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d62:	f000 bd37 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d6a:	f000 bd33 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d72:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007d76:	430b      	orrs	r3, r1
 8007d78:	d167      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007d7a:	4b7e      	ldr	r3, [pc, #504]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d80:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007d84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d8c:	d036      	beq.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d94:	d855      	bhi.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d9c:	d029      	beq.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007da4:	d84d      	bhi.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dac:	d013      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007db4:	d845      	bhi.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d015      	beq.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dc2:	d13e      	bne.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe ff4d 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dd2:	f000 bcff 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dd6:	f107 030c 	add.w	r3, r7, #12
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff f9f8 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007de4:	f000 bcf6 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007de8:	f7fe f8be 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8007dec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007dee:	f000 bcf1 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007df2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007df6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007df8:	f000 bcec 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007dfc:	4b5d      	ldr	r3, [pc, #372]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	d118      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e08:	4b5a      	ldr	r3, [pc, #360]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8007e14:	4b57      	ldr	r3, [pc, #348]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	0e1b      	lsrs	r3, r3, #24
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	e006      	b.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007e20:	4b54      	ldr	r3, [pc, #336]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	0e1b      	lsrs	r3, r3, #24
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	4a52      	ldr	r2, [pc, #328]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e34:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e36:	f000 bccd 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e3e:	f000 bcc9 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e46:	f000 bcc5 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e4e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007e52:	430b      	orrs	r3, r1
 8007e54:	d14c      	bne.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007e56:	4b47      	ldr	r3, [pc, #284]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d104      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e68:	f7fe f898 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8007e6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e6e:	f000 bcb1 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e78:	d104      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e7a:	f7fd ff73 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007e7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e80:	f000 bca8 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007e84:	4b3b      	ldr	r3, [pc, #236]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e90:	d107      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e98:	d103      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8007e9a:	4b38      	ldr	r3, [pc, #224]	@ (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e9e:	f000 bc99 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007ea2:	4b34      	ldr	r3, [pc, #208]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d11c      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007eb4:	d118      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	0e1b      	lsrs	r3, r3, #24
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	e006      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8007ece:	4b29      	ldr	r3, [pc, #164]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ed4:	041b      	lsls	r3, r3, #16
 8007ed6:	0e1b      	lsrs	r3, r3, #24
 8007ed8:	f003 030f 	and.w	r3, r3, #15
 8007edc:	4a26      	ldr	r2, [pc, #152]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ee4:	f000 bc76 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eec:	f000 bc72 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	d152      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007efc:	4b1d      	ldr	r3, [pc, #116]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007f06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f0e:	f7fe f845 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8007f12:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f14:	f000 bc5e 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f1e:	d104      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f20:	f7fd ff20 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007f24:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f26:	f000 bc55 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007f2a:	4b12      	ldr	r3, [pc, #72]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f36:	d107      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8007f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f3e:	d103      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8007f40:	4b0e      	ldr	r3, [pc, #56]	@ (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f44:	f000 bc46 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007f48:	4b0a      	ldr	r3, [pc, #40]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	d122      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f5a:	d11e      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f5c:	4b05      	ldr	r3, [pc, #20]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8007f68:	4b02      	ldr	r3, [pc, #8]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	0e1b      	lsrs	r3, r3, #24
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	e00c      	b.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8007f74:	46020c00 	.word	0x46020c00
 8007f78:	0800c4b4 	.word	0x0800c4b4
 8007f7c:	00f42400 	.word	0x00f42400
 8007f80:	4ba1      	ldr	r3, [pc, #644]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	0e1b      	lsrs	r3, r3, #24
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	4a9f      	ldr	r2, [pc, #636]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f96:	f000 bc1d 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f9e:	f000 bc19 	b.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007faa:	430b      	orrs	r3, r1
 8007fac:	d151      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007fae:	4b96      	ldr	r3, [pc, #600]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fb8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fbe:	d024      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fc4:	d842      	bhi.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	2b80      	cmp	r3, #128	@ 0x80
 8007fca:	d00d      	beq.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fce:	2b80      	cmp	r3, #128	@ 0x80
 8007fd0:	d83c      	bhi.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	2b40      	cmp	r3, #64	@ 0x40
 8007fdc:	d011      	beq.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8007fde:	e035      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007fe0:	f7fe f804 	bl	8005fec <HAL_RCC_GetPCLK3Freq>
 8007fe4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007fe6:	e3f5      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fe8:	4b87      	ldr	r3, [pc, #540]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ff4:	d102      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8007ff6:	4b86      	ldr	r3, [pc, #536]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007ff8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ffa:	e3eb      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008000:	e3e8      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008002:	f7fd feaf 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8008006:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008008:	e3e4      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800800a:	4b7f      	ldr	r3, [pc, #508]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b20      	cmp	r3, #32
 8008014:	d117      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008016:	4b7c      	ldr	r3, [pc, #496]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8008022:	4b79      	ldr	r3, [pc, #484]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	0e1b      	lsrs	r3, r3, #24
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	e006      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800802e:	4b76      	ldr	r3, [pc, #472]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008034:	041b      	lsls	r3, r3, #16
 8008036:	0e1b      	lsrs	r3, r3, #24
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	4a73      	ldr	r2, [pc, #460]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800803e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008042:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008044:	e3c6      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800804a:	e3c3      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008050:	e3c0      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008056:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800805a:	430b      	orrs	r3, r1
 800805c:	d147      	bne.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800805e:	4b6a      	ldr	r3, [pc, #424]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008064:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008068:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008070:	f7fd ff94 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8008074:	6378      	str	r0, [r7, #52]	@ 0x34
 8008076:	e3ad      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800807e:	d103      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008080:	f7fd fe70 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8008084:	6378      	str	r0, [r7, #52]	@ 0x34
 8008086:	e3a5      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008088:	4b5f      	ldr	r3, [pc, #380]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008094:	d106      	bne.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8008096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800809c:	d102      	bne.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800809e:	4b5c      	ldr	r3, [pc, #368]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80080a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080a2:	e397      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80080a4:	4b58      	ldr	r3, [pc, #352]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	d11b      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80080b6:	d117      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080b8:	4b53      	ldr	r3, [pc, #332]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80080c4:	4b50      	ldr	r3, [pc, #320]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	0e1b      	lsrs	r3, r3, #24
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	e006      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80080d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	0e1b      	lsrs	r3, r3, #24
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	4a4b      	ldr	r2, [pc, #300]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080e6:	e375      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ec:	e372      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80080ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80080f6:	430b      	orrs	r3, r1
 80080f8:	d164      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80080fa:	4b43      	ldr	r3, [pc, #268]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008104:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	2b00      	cmp	r3, #0
 800810a:	d120      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800810c:	4b3e      	ldr	r3, [pc, #248]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b20      	cmp	r3, #32
 8008116:	d117      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008118:	4b3b      	ldr	r3, [pc, #236]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d005      	beq.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8008124:	4b38      	ldr	r3, [pc, #224]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	0e1b      	lsrs	r3, r3, #24
 800812a:	f003 030f 	and.w	r3, r3, #15
 800812e:	e006      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8008130:	4b35      	ldr	r3, [pc, #212]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	0e1b      	lsrs	r3, r3, #24
 800813a:	f003 030f 	and.w	r3, r3, #15
 800813e:	4a33      	ldr	r2, [pc, #204]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
 8008146:	e345      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34
 800814c:	e342      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800814e:	4b2e      	ldr	r3, [pc, #184]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800815c:	d112      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008164:	d10e      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008166:	4b28      	ldr	r3, [pc, #160]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800816c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008174:	d102      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8008176:	23fa      	movs	r3, #250	@ 0xfa
 8008178:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800817a:	e32b      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800817c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008180:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008182:	e327      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008184:	4b20      	ldr	r3, [pc, #128]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800818c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008190:	d106      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008198:	d102      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800819a:	4b1d      	ldr	r3, [pc, #116]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800819c:	637b      	str	r3, [r7, #52]	@ 0x34
 800819e:	e319      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80081a0:	4b19      	ldr	r3, [pc, #100]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80081a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d107      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081b4:	d103      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80081b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80081bc:	e30a      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c2:	e307      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80081c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80081cc:	430b      	orrs	r3, r1
 80081ce:	d16b      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80081d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80081d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081d6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80081da:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80081dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d127      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80081e2:	4b09      	ldr	r3, [pc, #36]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b20      	cmp	r3, #32
 80081ec:	d11e      	bne.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081ee:	4b06      	ldr	r3, [pc, #24]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00c      	beq.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80081fa:	4b03      	ldr	r3, [pc, #12]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	0e1b      	lsrs	r3, r3, #24
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	e00d      	b.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008206:	bf00      	nop
 8008208:	46020c00 	.word	0x46020c00
 800820c:	0800c4b4 	.word	0x0800c4b4
 8008210:	00f42400 	.word	0x00f42400
 8008214:	4b94      	ldr	r3, [pc, #592]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	0e1b      	lsrs	r3, r3, #24
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	4a92      	ldr	r2, [pc, #584]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008228:	637b      	str	r3, [r7, #52]	@ 0x34
 800822a:	e2d3      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008230:	e2d0      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008232:	4b8d      	ldr	r3, [pc, #564]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800823c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008240:	d112      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8008242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008248:	d10e      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800824a:	4b87      	ldr	r3, [pc, #540]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800824c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008258:	d102      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800825a:	23fa      	movs	r3, #250	@ 0xfa
 800825c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800825e:	e2b9      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008260:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008264:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008266:	e2b5      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008268:	4b7f      	ldr	r3, [pc, #508]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008274:	d106      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800827c:	d102      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800827e:	4b7c      	ldr	r3, [pc, #496]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008280:	637b      	str	r3, [r7, #52]	@ 0x34
 8008282:	e2a7      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008284:	4b78      	ldr	r3, [pc, #480]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b02      	cmp	r3, #2
 8008290:	d107      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008298:	d103      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800829a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800829e:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a0:	e298      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a6:	e295      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80082a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80082b0:	430b      	orrs	r3, r1
 80082b2:	d147      	bne.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80082b4:	4b6c      	ldr	r3, [pc, #432]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80082b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082ba:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80082be:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80082c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80082c6:	f7fd fe69 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 80082ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80082cc:	e282      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80082ce:	4b66      	ldr	r3, [pc, #408]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80082d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082dc:	d112      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082e4:	d10e      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082e6:	4b60      	ldr	r3, [pc, #384]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80082e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082f4:	d102      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80082f6:	23fa      	movs	r3, #250	@ 0xfa
 80082f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082fa:	e26b      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80082fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008300:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008302:	e267      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008304:	4b58      	ldr	r3, [pc, #352]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800830c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008310:	d106      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008318:	d102      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800831a:	4b55      	ldr	r3, [pc, #340]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800831c:	637b      	str	r3, [r7, #52]	@ 0x34
 800831e:	e259      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008320:	4b51      	ldr	r3, [pc, #324]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b02      	cmp	r3, #2
 800832c:	d107      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008334:	d103      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8008336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800833a:	637b      	str	r3, [r7, #52]	@ 0x34
 800833c:	e24a      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	637b      	str	r3, [r7, #52]	@ 0x34
 8008342:	e247      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008348:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800834c:	430b      	orrs	r3, r1
 800834e:	d12d      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008350:	4b45      	ldr	r3, [pc, #276]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008356:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800835a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800835c:	4b42      	ldr	r3, [pc, #264]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008368:	d105      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800836a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8008370:	4b3f      	ldr	r3, [pc, #252]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008372:	637b      	str	r3, [r7, #52]	@ 0x34
 8008374:	e22e      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800837c:	d107      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800837e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fc70 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
 800838c:	e222      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008394:	d107      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008396:	f107 0318 	add.w	r3, r7, #24
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fdbe 	bl	8006f1c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a4:	e216      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083aa:	e213      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80083ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80083b4:	430b      	orrs	r3, r1
 80083b6:	d15d      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80083b8:	4b2b      	ldr	r3, [pc, #172]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80083ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80083c2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80083c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083ca:	d028      	beq.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80083cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083d2:	d845      	bhi.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083da:	d013      	beq.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083e2:	d83d      	bhi.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d004      	beq.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80083ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083f0:	d004      	beq.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80083f2:	e035      	b.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80083f4:	f7fd fde6 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 80083f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80083fa:	e1eb      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80083fc:	f7fd fcb2 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8008400:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008402:	e1e7      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008404:	4b18      	ldr	r3, [pc, #96]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800840c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008410:	d102      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8008412:	4b17      	ldr	r3, [pc, #92]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008414:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008416:	e1dd      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800841c:	e1da      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800841e:	4b12      	ldr	r3, [pc, #72]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0320 	and.w	r3, r3, #32
 8008426:	2b20      	cmp	r3, #32
 8008428:	d117      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800842a:	4b0f      	ldr	r3, [pc, #60]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d005      	beq.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8008436:	4b0c      	ldr	r3, [pc, #48]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	0e1b      	lsrs	r3, r3, #24
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	e006      	b.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8008442:	4b09      	ldr	r3, [pc, #36]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008448:	041b      	lsls	r3, r3, #16
 800844a:	0e1b      	lsrs	r3, r3, #24
 800844c:	f003 030f 	and.w	r3, r3, #15
 8008450:	4a06      	ldr	r2, [pc, #24]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008458:	e1bc      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800845e:	e1b9      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008464:	e1b6      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008466:	bf00      	nop
 8008468:	46020c00 	.word	0x46020c00
 800846c:	0800c4b4 	.word	0x0800c4b4
 8008470:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008478:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800847c:	430b      	orrs	r3, r1
 800847e:	d156      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008480:	4ba5      	ldr	r3, [pc, #660]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008486:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800848a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800848c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008492:	d028      	beq.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8008494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008496:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800849a:	d845      	bhi.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800849c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084a2:	d013      	beq.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084aa:	d83d      	bhi.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d004      	beq.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084b8:	d004      	beq.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80084ba:	e035      	b.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80084bc:	f7fd fd6e 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 80084c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084c2:	e187      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80084c4:	f7fd fc4e 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 80084c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084ca:	e183      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084cc:	4b92      	ldr	r3, [pc, #584]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d8:	d102      	bne.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80084da:	4b90      	ldr	r3, [pc, #576]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80084dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084de:	e179      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084e4:	e176      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084e6:	4b8c      	ldr	r3, [pc, #560]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d117      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084f2:	4b89      	ldr	r3, [pc, #548]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80084fe:	4b86      	ldr	r3, [pc, #536]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	0e1b      	lsrs	r3, r3, #24
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	e006      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800850a:	4b83      	ldr	r3, [pc, #524]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800850c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008510:	041b      	lsls	r3, r3, #16
 8008512:	0e1b      	lsrs	r3, r3, #24
 8008514:	f003 030f 	and.w	r3, r3, #15
 8008518:	4a81      	ldr	r2, [pc, #516]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800851a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800851e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008520:	e158      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008526:	e155      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800852c:	e152      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800852e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008532:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008536:	430b      	orrs	r3, r1
 8008538:	d177      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800853a:	4b77      	ldr	r3, [pc, #476]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800853c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008540:	f003 0318 	and.w	r3, r3, #24
 8008544:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	2b18      	cmp	r3, #24
 800854a:	d86b      	bhi.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800854c:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	080085b9 	.word	0x080085b9
 8008558:	08008625 	.word	0x08008625
 800855c:	08008625 	.word	0x08008625
 8008560:	08008625 	.word	0x08008625
 8008564:	08008625 	.word	0x08008625
 8008568:	08008625 	.word	0x08008625
 800856c:	08008625 	.word	0x08008625
 8008570:	08008625 	.word	0x08008625
 8008574:	080085c1 	.word	0x080085c1
 8008578:	08008625 	.word	0x08008625
 800857c:	08008625 	.word	0x08008625
 8008580:	08008625 	.word	0x08008625
 8008584:	08008625 	.word	0x08008625
 8008588:	08008625 	.word	0x08008625
 800858c:	08008625 	.word	0x08008625
 8008590:	08008625 	.word	0x08008625
 8008594:	080085c9 	.word	0x080085c9
 8008598:	08008625 	.word	0x08008625
 800859c:	08008625 	.word	0x08008625
 80085a0:	08008625 	.word	0x08008625
 80085a4:	08008625 	.word	0x08008625
 80085a8:	08008625 	.word	0x08008625
 80085ac:	08008625 	.word	0x08008625
 80085b0:	08008625 	.word	0x08008625
 80085b4:	080085e3 	.word	0x080085e3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80085b8:	f7fd fd18 	bl	8005fec <HAL_RCC_GetPCLK3Freq>
 80085bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80085be:	e109      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80085c0:	f7fd fbd0 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 80085c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80085c6:	e105      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085c8:	4b53      	ldr	r3, [pc, #332]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d4:	d102      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80085d6:	4b51      	ldr	r3, [pc, #324]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80085d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085da:	e0fb      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085e0:	e0f8      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80085e2:	4b4d      	ldr	r3, [pc, #308]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	d117      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085ee:	4b4a      	ldr	r3, [pc, #296]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80085fa:	4b47      	ldr	r3, [pc, #284]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	0e1b      	lsrs	r3, r3, #24
 8008600:	f003 030f 	and.w	r3, r3, #15
 8008604:	e006      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008606:	4b44      	ldr	r3, [pc, #272]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	0e1b      	lsrs	r3, r3, #24
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	4a42      	ldr	r2, [pc, #264]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800861a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800861c:	e0da      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008622:	e0d7      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008628:	e0d4      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800862a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800862e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008632:	430b      	orrs	r3, r1
 8008634:	d155      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008636:	4b38      	ldr	r3, [pc, #224]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008638:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800863c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008640:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008648:	d013      	beq.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008650:	d844      	bhi.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008658:	d013      	beq.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008660:	d83c      	bhi.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	2b00      	cmp	r3, #0
 8008666:	d014      	beq.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8008668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800866e:	d014      	beq.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8008670:	e034      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008672:	f107 0318 	add.w	r3, r7, #24
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fc50 	bl	8006f1c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008680:	e0a8      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe faee 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008690:	e0a0      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008692:	f7fd fb67 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8008696:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008698:	e09c      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800869a:	4b1f      	ldr	r3, [pc, #124]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d117      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086a6:	4b1c      	ldr	r3, [pc, #112]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80086b2:	4b19      	ldr	r3, [pc, #100]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	0e1b      	lsrs	r3, r3, #24
 80086b8:	f003 030f 	and.w	r3, r3, #15
 80086bc:	e006      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 80086be:	4b16      	ldr	r3, [pc, #88]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80086c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086c4:	041b      	lsls	r3, r3, #16
 80086c6:	0e1b      	lsrs	r3, r3, #24
 80086c8:	f003 030f 	and.w	r3, r3, #15
 80086cc:	4a14      	ldr	r2, [pc, #80]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80086ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086d4:	e07e      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086da:	e07b      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086e0:	e078      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80086e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80086ea:	430b      	orrs	r3, r1
 80086ec:	d138      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80086ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80086f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086f8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80086fa:	4b07      	ldr	r3, [pc, #28]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80086fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	2b02      	cmp	r3, #2
 8008706:	d10d      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800870e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008712:	637b      	str	r3, [r7, #52]	@ 0x34
 8008714:	e05e      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008716:	bf00      	nop
 8008718:	46020c00 	.word	0x46020c00
 800871c:	00f42400 	.word	0x00f42400
 8008720:	0800c4b4 	.word	0x0800c4b4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008724:	4b2e      	ldr	r3, [pc, #184]	@ (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800872a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800872e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008732:	d112      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800873a:	d10e      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800873c:	4b28      	ldr	r3, [pc, #160]	@ (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800873e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800874a:	d102      	bne.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800874c:	23fa      	movs	r3, #250	@ 0xfa
 800874e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008750:	e040      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008752:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008756:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008758:	e03c      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	637b      	str	r3, [r7, #52]	@ 0x34
 800875e:	e039      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008764:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008768:	430b      	orrs	r3, r1
 800876a:	d131      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800876c:	4b1c      	ldr	r3, [pc, #112]	@ (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800876e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008772:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008776:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008778:	4b19      	ldr	r3, [pc, #100]	@ (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008784:	d105      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800878c:	4b15      	ldr	r3, [pc, #84]	@ (80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800878e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008790:	e020      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008792:	4b13      	ldr	r3, [pc, #76]	@ (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800879a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800879e:	d106      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a6:	d102      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80087a8:	4b0f      	ldr	r3, [pc, #60]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80087aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ac:	e012      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80087ae:	4b0c      	ldr	r3, [pc, #48]	@ (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ba:	d106      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c2:	d102      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80087c4:	4b09      	ldr	r3, [pc, #36]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80087c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087c8:	e004      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ce:	e001      	b.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80087d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3738      	adds	r7, #56	@ 0x38
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	46020c00 	.word	0x46020c00
 80087e4:	02dc6c00 	.word	0x02dc6c00
 80087e8:	016e3600 	.word	0x016e3600
 80087ec:	00f42400 	.word	0x00f42400

080087f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80087f8:	4b47      	ldr	r3, [pc, #284]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a46      	ldr	r2, [pc, #280]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80087fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008802:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008804:	f7f9 fab6 	bl	8001d74 <HAL_GetTick>
 8008808:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800880a:	e008      	b.n	800881e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800880c:	f7f9 fab2 	bl	8001d74 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d901      	bls.n	800881e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e077      	b.n	800890e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800881e:	4b3e      	ldr	r3, [pc, #248]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f0      	bne.n	800880c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800882a:	4b3b      	ldr	r3, [pc, #236]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 800882c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6811      	ldr	r1, [r2, #0]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	6852      	ldr	r2, [r2, #4]
 800883e:	3a01      	subs	r2, #1
 8008840:	0212      	lsls	r2, r2, #8
 8008842:	430a      	orrs	r2, r1
 8008844:	4934      	ldr	r1, [pc, #208]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 8008846:	4313      	orrs	r3, r2
 8008848:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800884a:	4b33      	ldr	r3, [pc, #204]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 800884c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800884e:	4b33      	ldr	r3, [pc, #204]	@ (800891c <RCCEx_PLL2_Config+0x12c>)
 8008850:	4013      	ands	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6892      	ldr	r2, [r2, #8]
 8008856:	3a01      	subs	r2, #1
 8008858:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	68d2      	ldr	r2, [r2, #12]
 8008860:	3a01      	subs	r2, #1
 8008862:	0252      	lsls	r2, r2, #9
 8008864:	b292      	uxth	r2, r2
 8008866:	4311      	orrs	r1, r2
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6912      	ldr	r2, [r2, #16]
 800886c:	3a01      	subs	r2, #1
 800886e:	0412      	lsls	r2, r2, #16
 8008870:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008874:	4311      	orrs	r1, r2
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	6952      	ldr	r2, [r2, #20]
 800887a:	3a01      	subs	r2, #1
 800887c:	0612      	lsls	r2, r2, #24
 800887e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008882:	430a      	orrs	r2, r1
 8008884:	4924      	ldr	r1, [pc, #144]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 8008886:	4313      	orrs	r3, r2
 8008888:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800888a:	4b23      	ldr	r3, [pc, #140]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 800888c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888e:	f023 020c 	bic.w	r2, r3, #12
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	4920      	ldr	r1, [pc, #128]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 8008898:	4313      	orrs	r3, r2
 800889a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800889c:	4b1e      	ldr	r3, [pc, #120]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 800889e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	491c      	ldr	r1, [pc, #112]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80088aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80088ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80088b0:	f023 0310 	bic.w	r3, r3, #16
 80088b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088b6:	4b18      	ldr	r3, [pc, #96]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80088b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088be:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	69d2      	ldr	r2, [r2, #28]
 80088c6:	00d2      	lsls	r2, r2, #3
 80088c8:	4913      	ldr	r1, [pc, #76]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80088ce:	4b12      	ldr	r3, [pc, #72]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80088d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d2:	4a11      	ldr	r2, [pc, #68]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80088d4:	f043 0310 	orr.w	r3, r3, #16
 80088d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80088da:	4b0f      	ldr	r3, [pc, #60]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a0e      	ldr	r2, [pc, #56]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 80088e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088e4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80088e6:	f7f9 fa45 	bl	8001d74 <HAL_GetTick>
 80088ea:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088ec:	e008      	b.n	8008900 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088ee:	f7f9 fa41 	bl	8001d74 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d901      	bls.n	8008900 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e006      	b.n	800890e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008900:	4b05      	ldr	r3, [pc, #20]	@ (8008918 <RCCEx_PLL2_Config+0x128>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0f0      	beq.n	80088ee <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800890c:	2300      	movs	r3, #0

}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	46020c00 	.word	0x46020c00
 800891c:	80800000 	.word	0x80800000

08008920 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008928:	4b47      	ldr	r3, [pc, #284]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a46      	ldr	r2, [pc, #280]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 800892e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008932:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008934:	f7f9 fa1e 	bl	8001d74 <HAL_GetTick>
 8008938:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800893a:	e008      	b.n	800894e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800893c:	f7f9 fa1a 	bl	8001d74 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e077      	b.n	8008a3e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800894e:	4b3e      	ldr	r3, [pc, #248]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f0      	bne.n	800893c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800895a:	4b3b      	ldr	r3, [pc, #236]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 800895c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008962:	f023 0303 	bic.w	r3, r3, #3
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	6811      	ldr	r1, [r2, #0]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6852      	ldr	r2, [r2, #4]
 800896e:	3a01      	subs	r2, #1
 8008970:	0212      	lsls	r2, r2, #8
 8008972:	430a      	orrs	r2, r1
 8008974:	4934      	ldr	r1, [pc, #208]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 8008976:	4313      	orrs	r3, r2
 8008978:	630b      	str	r3, [r1, #48]	@ 0x30
 800897a:	4b33      	ldr	r3, [pc, #204]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 800897c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800897e:	4b33      	ldr	r3, [pc, #204]	@ (8008a4c <RCCEx_PLL3_Config+0x12c>)
 8008980:	4013      	ands	r3, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6892      	ldr	r2, [r2, #8]
 8008986:	3a01      	subs	r2, #1
 8008988:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	68d2      	ldr	r2, [r2, #12]
 8008990:	3a01      	subs	r2, #1
 8008992:	0252      	lsls	r2, r2, #9
 8008994:	b292      	uxth	r2, r2
 8008996:	4311      	orrs	r1, r2
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6912      	ldr	r2, [r2, #16]
 800899c:	3a01      	subs	r2, #1
 800899e:	0412      	lsls	r2, r2, #16
 80089a0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80089a4:	4311      	orrs	r1, r2
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6952      	ldr	r2, [r2, #20]
 80089aa:	3a01      	subs	r2, #1
 80089ac:	0612      	lsls	r2, r2, #24
 80089ae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80089b2:	430a      	orrs	r2, r1
 80089b4:	4924      	ldr	r1, [pc, #144]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80089ba:	4b23      	ldr	r3, [pc, #140]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	f023 020c 	bic.w	r2, r3, #12
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	4920      	ldr	r1, [pc, #128]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80089cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 80089ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	491c      	ldr	r1, [pc, #112]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80089da:	4b1b      	ldr	r3, [pc, #108]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089de:	4a1a      	ldr	r2, [pc, #104]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 80089e0:	f023 0310 	bic.w	r3, r3, #16
 80089e4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089e6:	4b18      	ldr	r3, [pc, #96]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 80089e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089ee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	69d2      	ldr	r2, [r2, #28]
 80089f6:	00d2      	lsls	r2, r2, #3
 80089f8:	4913      	ldr	r1, [pc, #76]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80089fe:	4b12      	ldr	r3, [pc, #72]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a02:	4a11      	ldr	r2, [pc, #68]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 8008a04:	f043 0310 	orr.w	r3, r3, #16
 8008a08:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 8008a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a14:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a16:	f7f9 f9ad 	bl	8001d74 <HAL_GetTick>
 8008a1a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a1c:	e008      	b.n	8008a30 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a1e:	f7f9 f9a9 	bl	8001d74 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d901      	bls.n	8008a30 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e006      	b.n	8008a3e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a30:	4b05      	ldr	r3, [pc, #20]	@ (8008a48 <RCCEx_PLL3_Config+0x128>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0f0      	beq.n	8008a1e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	46020c00 	.word	0x46020c00
 8008a4c:	80800000 	.word	0x80800000

08008a50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e0fb      	b.n	8008c5a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a7f      	ldr	r2, [pc, #508]	@ (8008c64 <HAL_SPI_Init+0x214>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d004      	beq.n	8008a76 <HAL_SPI_Init+0x26>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a7d      	ldr	r2, [pc, #500]	@ (8008c68 <HAL_SPI_Init+0x218>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	e000      	b.n	8008a78 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008a76:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a78      	ldr	r2, [pc, #480]	@ (8008c64 <HAL_SPI_Init+0x214>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d004      	beq.n	8008a92 <HAL_SPI_Init+0x42>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a76      	ldr	r2, [pc, #472]	@ (8008c68 <HAL_SPI_Init+0x218>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d105      	bne.n	8008a9e <HAL_SPI_Init+0x4e>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d901      	bls.n	8008a9e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e0dd      	b.n	8008c5a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fbce 	bl	8009240 <SPI_GetPacketSize>
 8008aa4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8008c64 <HAL_SPI_Init+0x214>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d004      	beq.n	8008aba <HAL_SPI_Init+0x6a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a6c      	ldr	r2, [pc, #432]	@ (8008c68 <HAL_SPI_Init+0x218>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d102      	bne.n	8008ac0 <HAL_SPI_Init+0x70>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d816      	bhi.n	8008aee <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008ac4:	4a69      	ldr	r2, [pc, #420]	@ (8008c6c <HAL_SPI_Init+0x21c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00e      	beq.n	8008ae8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a68      	ldr	r2, [pc, #416]	@ (8008c70 <HAL_SPI_Init+0x220>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d009      	beq.n	8008ae8 <HAL_SPI_Init+0x98>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a66      	ldr	r2, [pc, #408]	@ (8008c74 <HAL_SPI_Init+0x224>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d004      	beq.n	8008ae8 <HAL_SPI_Init+0x98>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a65      	ldr	r2, [pc, #404]	@ (8008c78 <HAL_SPI_Init+0x228>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d104      	bne.n	8008af2 <HAL_SPI_Init+0xa2>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b10      	cmp	r3, #16
 8008aec:	d901      	bls.n	8008af2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e0b3      	b.n	8008c5a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d106      	bne.n	8008b0c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7f8 fc12 	bl	8001330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0201 	bic.w	r2, r2, #1
 8008b22:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008b2e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b38:	d119      	bne.n	8008b6e <HAL_SPI_Init+0x11e>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b42:	d103      	bne.n	8008b4c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d008      	beq.n	8008b5e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10c      	bne.n	8008b6e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008b58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b5c:	d107      	bne.n	8008b6e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00f      	beq.n	8008b9a <HAL_SPI_Init+0x14a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	2b06      	cmp	r3, #6
 8008b80:	d90b      	bls.n	8008b9a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	430a      	orrs	r2, r1
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	e007      	b.n	8008baa <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ba8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69da      	ldr	r2, [r3, #28]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bbc:	ea42 0103 	orr.w	r1, r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	431a      	orrs	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	431a      	orrs	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c16:	ea42 0103 	orr.w	r1, r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	46002000 	.word	0x46002000
 8008c68:	56002000 	.word	0x56002000
 8008c6c:	40013000 	.word	0x40013000
 8008c70:	50013000 	.word	0x50013000
 8008c74:	40003800 	.word	0x40003800
 8008c78:	50003800 	.word	0x50003800

08008c7c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3320      	adds	r3, #32
 8008c92:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a90      	ldr	r2, [pc, #576]	@ (8008edc <HAL_SPI_Transmit+0x260>)
 8008c9a:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c9c:	f7f9 f86a 	bl	8001d74 <HAL_GetTick>
 8008ca0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d001      	beq.n	8008cb2 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e1f4      	b.n	800909c <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <HAL_SPI_Transmit+0x42>
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e1ec      	b.n	800909c <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d101      	bne.n	8008cd0 <HAL_SPI_Transmit+0x54>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e1e5      	b.n	800909c <HAL_SPI_Transmit+0x420>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2203      	movs	r2, #3
 8008cdc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	88fa      	ldrh	r2, [r7, #6]
 8008cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	88fa      	ldrh	r2, [r7, #6]
 8008cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008d28:	d108      	bne.n	8008d3c <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	e009      	b.n	8008d50 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008d4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	0c1b      	lsrs	r3, r3, #16
 8008d58:	041b      	lsls	r3, r3, #16
 8008d5a:	88f9      	ldrh	r1, [r7, #6]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	6812      	ldr	r2, [r2, #0]
 8008d60:	430b      	orrs	r3, r1
 8008d62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10c      	bne.n	8008d9c <HAL_SPI_Transmit+0x120>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d8a:	d107      	bne.n	8008d9c <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d95b      	bls.n	8008e5c <HAL_SPI_Transmit+0x1e0>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a4d      	ldr	r2, [pc, #308]	@ (8008ee0 <HAL_SPI_Transmit+0x264>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d04f      	beq.n	8008e4e <HAL_SPI_Transmit+0x1d2>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a4c      	ldr	r2, [pc, #304]	@ (8008ee4 <HAL_SPI_Transmit+0x268>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d04a      	beq.n	8008e4e <HAL_SPI_Transmit+0x1d2>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8008ee8 <HAL_SPI_Transmit+0x26c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d045      	beq.n	8008e4e <HAL_SPI_Transmit+0x1d2>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a49      	ldr	r2, [pc, #292]	@ (8008eec <HAL_SPI_Transmit+0x270>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d147      	bne.n	8008e5c <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008dcc:	e03f      	b.n	8008e4e <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	695b      	ldr	r3, [r3, #20]
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d114      	bne.n	8008e06 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6812      	ldr	r2, [r2, #0]
 8008de6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dec:	1d1a      	adds	r2, r3, #4
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e04:	e023      	b.n	8008e4e <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e06:	f7f8 ffb5 	bl	8001d74 <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d803      	bhi.n	8008e1e <HAL_SPI_Transmit+0x1a2>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d102      	bne.n	8008e24 <HAL_SPI_Transmit+0x1a8>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d114      	bne.n	8008e4e <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 f93d 	bl	80090a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e126      	b.n	800909c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1b9      	bne.n	8008dce <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008e5a:	e0f9      	b.n	8009050 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	2b07      	cmp	r3, #7
 8008e62:	f240 80ee 	bls.w	8009042 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008e66:	e067      	b.n	8008f38 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d13c      	bne.n	8008ef0 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d918      	bls.n	8008eb4 <HAL_SPI_Transmit+0x238>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d014      	beq.n	8008eb4 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6812      	ldr	r2, [r2, #0]
 8008e94:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e9a:	1d1a      	adds	r2, r3, #4
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b02      	subs	r3, #2
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008eb2:	e041      	b.n	8008f38 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eb8:	881a      	ldrh	r2, [r3, #0]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ec2:	1c9a      	adds	r2, r3, #2
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008eda:	e02d      	b.n	8008f38 <HAL_SPI_Transmit+0x2bc>
 8008edc:	46002000 	.word	0x46002000
 8008ee0:	40013000 	.word	0x40013000
 8008ee4:	50013000 	.word	0x50013000
 8008ee8:	40003800 	.word	0x40003800
 8008eec:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ef0:	f7f8 ff40 	bl	8001d74 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d803      	bhi.n	8008f08 <HAL_SPI_Transmit+0x28c>
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f06:	d102      	bne.n	8008f0e <HAL_SPI_Transmit+0x292>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d114      	bne.n	8008f38 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 f8c8 	bl	80090a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e0b1      	b.n	800909c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d191      	bne.n	8008e68 <HAL_SPI_Transmit+0x1ec>
 8008f44:	e084      	b.n	8009050 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d152      	bne.n	8008ffa <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d918      	bls.n	8008f92 <HAL_SPI_Transmit+0x316>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f64:	2b40      	cmp	r3, #64	@ 0x40
 8008f66:	d914      	bls.n	8008f92 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6812      	ldr	r2, [r2, #0]
 8008f72:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f78:	1d1a      	adds	r2, r3, #4
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	3b04      	subs	r3, #4
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008f90:	e057      	b.n	8009042 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d917      	bls.n	8008fce <HAL_SPI_Transmit+0x352>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d013      	beq.n	8008fce <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008faa:	881a      	ldrh	r2, [r3, #0]
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fb4:	1c9a      	adds	r2, r3, #2
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	3b02      	subs	r3, #2
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008fcc:	e039      	b.n	8009042 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3320      	adds	r3, #32
 8008fd8:	7812      	ldrb	r2, [r2, #0]
 8008fda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ff8:	e023      	b.n	8009042 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ffa:	f7f8 febb 	bl	8001d74 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	429a      	cmp	r2, r3
 8009008:	d803      	bhi.n	8009012 <HAL_SPI_Transmit+0x396>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009010:	d102      	bne.n	8009018 <HAL_SPI_Transmit+0x39c>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d114      	bne.n	8009042 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 f843 	bl	80090a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009024:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e02c      	b.n	800909c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009048:	b29b      	uxth	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	f47f af7b 	bne.w	8008f46 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2200      	movs	r2, #0
 8009058:	2108      	movs	r1, #8
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 f8c2 	bl	80091e4 <SPI_WaitOnFlagUntilTimeout>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d007      	beq.n	8009076 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800906c:	f043 0220 	orr.w	r2, r3, #32
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f814 	bl	80090a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800909a:	2300      	movs	r3, #0
  }
}
 800909c:	4618      	mov	r0, r3
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0208 	orr.w	r2, r2, #8
 80090c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699a      	ldr	r2, [r3, #24]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0210 	orr.w	r2, r2, #16
 80090d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 0201 	bic.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	6812      	ldr	r2, [r2, #0]
 80090ee:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009106:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b04      	cmp	r3, #4
 8009112:	d014      	beq.n	800913e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00f      	beq.n	800913e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009124:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	699a      	ldr	r2, [r3, #24]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f042 0220 	orr.w	r2, r2, #32
 800913c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b03      	cmp	r3, #3
 8009148:	d014      	beq.n	8009174 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00f      	beq.n	8009174 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800915a:	f043 0204 	orr.w	r2, r3, #4
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	699a      	ldr	r2, [r3, #24]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009172:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00f      	beq.n	800919e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009184:	f043 0201 	orr.w	r2, r3, #1
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	699a      	ldr	r2, [r3, #24]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800919c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00f      	beq.n	80091c8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091ae:	f043 0208 	orr.w	r2, r3, #8
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	699a      	ldr	r2, [r3, #24]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80091d8:	bf00      	nop
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	4613      	mov	r3, r2
 80091f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80091f4:	e010      	b.n	8009218 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091f6:	f7f8 fdbd 	bl	8001d74 <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d803      	bhi.n	800920e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920c:	d102      	bne.n	8009214 <SPI_WaitOnFlagUntilTimeout+0x30>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e00f      	b.n	8009238 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	695a      	ldr	r2, [r3, #20]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	4013      	ands	r3, r2
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	429a      	cmp	r2, r3
 8009226:	bf0c      	ite	eq
 8009228:	2301      	moveq	r3, #1
 800922a:	2300      	movne	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	79fb      	ldrb	r3, [r7, #7]
 8009232:	429a      	cmp	r2, r3
 8009234:	d0df      	beq.n	80091f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800924c:	095b      	lsrs	r3, r3, #5
 800924e:	3301      	adds	r3, #1
 8009250:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	3301      	adds	r3, #1
 8009258:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3307      	adds	r3, #7
 800925e:	08db      	lsrs	r3, r3, #3
 8009260:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	fb02 f303 	mul.w	r3, r2, r3
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b01      	cmp	r3, #1
 800928a:	d12e      	bne.n	80092ea <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009292:	2b01      	cmp	r3, #1
 8009294:	d101      	bne.n	800929a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009296:	2302      	movs	r3, #2
 8009298:	e028      	b.n	80092ec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2202      	movs	r2, #2
 80092a6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 0201 	bic.w	r2, r2, #1
 80092b8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80092c6:	ea42 0103 	orr.w	r1, r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	689a      	ldr	r2, [r3, #8]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e000      	b.n	80092ec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
  }
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e049      	b.n	800939e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d106      	bne.n	8009324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7f8 f90a 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2202      	movs	r2, #2
 8009328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3304      	adds	r3, #4
 8009334:	4619      	mov	r1, r3
 8009336:	4610      	mov	r0, r2
 8009338:	f000 fcda 	bl	8009cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e049      	b.n	800944c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f841 	bl	8009454 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3304      	adds	r3, #4
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f000 fc83 	bl	8009cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d109      	bne.n	800948c <HAL_TIM_OC_Start+0x24>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b01      	cmp	r3, #1
 8009482:	bf14      	ite	ne
 8009484:	2301      	movne	r3, #1
 8009486:	2300      	moveq	r3, #0
 8009488:	b2db      	uxtb	r3, r3
 800948a:	e03c      	b.n	8009506 <HAL_TIM_OC_Start+0x9e>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2b04      	cmp	r3, #4
 8009490:	d109      	bne.n	80094a6 <HAL_TIM_OC_Start+0x3e>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b01      	cmp	r3, #1
 800949c:	bf14      	ite	ne
 800949e:	2301      	movne	r3, #1
 80094a0:	2300      	moveq	r3, #0
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	e02f      	b.n	8009506 <HAL_TIM_OC_Start+0x9e>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b08      	cmp	r3, #8
 80094aa:	d109      	bne.n	80094c0 <HAL_TIM_OC_Start+0x58>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	bf14      	ite	ne
 80094b8:	2301      	movne	r3, #1
 80094ba:	2300      	moveq	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	e022      	b.n	8009506 <HAL_TIM_OC_Start+0x9e>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b0c      	cmp	r3, #12
 80094c4:	d109      	bne.n	80094da <HAL_TIM_OC_Start+0x72>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	bf14      	ite	ne
 80094d2:	2301      	movne	r3, #1
 80094d4:	2300      	moveq	r3, #0
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	e015      	b.n	8009506 <HAL_TIM_OC_Start+0x9e>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b10      	cmp	r3, #16
 80094de:	d109      	bne.n	80094f4 <HAL_TIM_OC_Start+0x8c>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	bf14      	ite	ne
 80094ec:	2301      	movne	r3, #1
 80094ee:	2300      	moveq	r3, #0
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	e008      	b.n	8009506 <HAL_TIM_OC_Start+0x9e>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	bf14      	ite	ne
 8009500:	2301      	movne	r3, #1
 8009502:	2300      	moveq	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e0d8      	b.n	80096c0 <HAL_TIM_OC_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <HAL_TIM_OC_Start+0xb6>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800951c:	e023      	b.n	8009566 <HAL_TIM_OC_Start+0xfe>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b04      	cmp	r3, #4
 8009522:	d104      	bne.n	800952e <HAL_TIM_OC_Start+0xc6>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800952c:	e01b      	b.n	8009566 <HAL_TIM_OC_Start+0xfe>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b08      	cmp	r3, #8
 8009532:	d104      	bne.n	800953e <HAL_TIM_OC_Start+0xd6>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800953c:	e013      	b.n	8009566 <HAL_TIM_OC_Start+0xfe>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b0c      	cmp	r3, #12
 8009542:	d104      	bne.n	800954e <HAL_TIM_OC_Start+0xe6>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2202      	movs	r2, #2
 8009548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800954c:	e00b      	b.n	8009566 <HAL_TIM_OC_Start+0xfe>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2b10      	cmp	r3, #16
 8009552:	d104      	bne.n	800955e <HAL_TIM_OC_Start+0xf6>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800955c:	e003      	b.n	8009566 <HAL_TIM_OC_Start+0xfe>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2202      	movs	r2, #2
 8009562:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2201      	movs	r2, #1
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	f001 f930 	bl	800a7d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a53      	ldr	r2, [pc, #332]	@ (80096c8 <HAL_TIM_OC_Start+0x260>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d02c      	beq.n	80095d8 <HAL_TIM_OC_Start+0x170>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a52      	ldr	r2, [pc, #328]	@ (80096cc <HAL_TIM_OC_Start+0x264>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d027      	beq.n	80095d8 <HAL_TIM_OC_Start+0x170>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a50      	ldr	r2, [pc, #320]	@ (80096d0 <HAL_TIM_OC_Start+0x268>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d022      	beq.n	80095d8 <HAL_TIM_OC_Start+0x170>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a4f      	ldr	r2, [pc, #316]	@ (80096d4 <HAL_TIM_OC_Start+0x26c>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d01d      	beq.n	80095d8 <HAL_TIM_OC_Start+0x170>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a4d      	ldr	r2, [pc, #308]	@ (80096d8 <HAL_TIM_OC_Start+0x270>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d018      	beq.n	80095d8 <HAL_TIM_OC_Start+0x170>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a4c      	ldr	r2, [pc, #304]	@ (80096dc <HAL_TIM_OC_Start+0x274>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d013      	beq.n	80095d8 <HAL_TIM_OC_Start+0x170>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a4a      	ldr	r2, [pc, #296]	@ (80096e0 <HAL_TIM_OC_Start+0x278>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00e      	beq.n	80095d8 <HAL_TIM_OC_Start+0x170>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a49      	ldr	r2, [pc, #292]	@ (80096e4 <HAL_TIM_OC_Start+0x27c>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d009      	beq.n	80095d8 <HAL_TIM_OC_Start+0x170>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a47      	ldr	r2, [pc, #284]	@ (80096e8 <HAL_TIM_OC_Start+0x280>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d004      	beq.n	80095d8 <HAL_TIM_OC_Start+0x170>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a46      	ldr	r2, [pc, #280]	@ (80096ec <HAL_TIM_OC_Start+0x284>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d101      	bne.n	80095dc <HAL_TIM_OC_Start+0x174>
 80095d8:	2301      	movs	r3, #1
 80095da:	e000      	b.n	80095de <HAL_TIM_OC_Start+0x176>
 80095dc:	2300      	movs	r3, #0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d007      	beq.n	80095f2 <HAL_TIM_OC_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a34      	ldr	r2, [pc, #208]	@ (80096c8 <HAL_TIM_OC_Start+0x260>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d040      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a32      	ldr	r2, [pc, #200]	@ (80096cc <HAL_TIM_OC_Start+0x264>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d03b      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800960e:	d036      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009618:	d031      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a34      	ldr	r2, [pc, #208]	@ (80096f0 <HAL_TIM_OC_Start+0x288>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d02c      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a32      	ldr	r2, [pc, #200]	@ (80096f4 <HAL_TIM_OC_Start+0x28c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d027      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a31      	ldr	r2, [pc, #196]	@ (80096f8 <HAL_TIM_OC_Start+0x290>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d022      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a2f      	ldr	r2, [pc, #188]	@ (80096fc <HAL_TIM_OC_Start+0x294>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d01d      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a2e      	ldr	r2, [pc, #184]	@ (8009700 <HAL_TIM_OC_Start+0x298>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d018      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a2c      	ldr	r2, [pc, #176]	@ (8009704 <HAL_TIM_OC_Start+0x29c>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d013      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a1d      	ldr	r2, [pc, #116]	@ (80096d0 <HAL_TIM_OC_Start+0x268>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00e      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a1b      	ldr	r2, [pc, #108]	@ (80096d4 <HAL_TIM_OC_Start+0x26c>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d009      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a1a      	ldr	r2, [pc, #104]	@ (80096d8 <HAL_TIM_OC_Start+0x270>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d004      	beq.n	800967e <HAL_TIM_OC_Start+0x216>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a18      	ldr	r2, [pc, #96]	@ (80096dc <HAL_TIM_OC_Start+0x274>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d115      	bne.n	80096aa <HAL_TIM_OC_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	4b20      	ldr	r3, [pc, #128]	@ (8009708 <HAL_TIM_OC_Start+0x2a0>)
 8009686:	4013      	ands	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b06      	cmp	r3, #6
 800968e:	d015      	beq.n	80096bc <HAL_TIM_OC_Start+0x254>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009696:	d011      	beq.n	80096bc <HAL_TIM_OC_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096a8:	e008      	b.n	80096bc <HAL_TIM_OC_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f042 0201 	orr.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	e000      	b.n	80096be <HAL_TIM_OC_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	40012c00 	.word	0x40012c00
 80096cc:	50012c00 	.word	0x50012c00
 80096d0:	40013400 	.word	0x40013400
 80096d4:	50013400 	.word	0x50013400
 80096d8:	40014000 	.word	0x40014000
 80096dc:	50014000 	.word	0x50014000
 80096e0:	40014400 	.word	0x40014400
 80096e4:	50014400 	.word	0x50014400
 80096e8:	40014800 	.word	0x40014800
 80096ec:	50014800 	.word	0x50014800
 80096f0:	40000400 	.word	0x40000400
 80096f4:	50000400 	.word	0x50000400
 80096f8:	40000800 	.word	0x40000800
 80096fc:	50000800 	.word	0x50000800
 8009700:	40000c00 	.word	0x40000c00
 8009704:	50000c00 	.word	0x50000c00
 8009708:	00010007 	.word	0x00010007

0800970c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e049      	b.n	80097b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f841 	bl	80097ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2202      	movs	r2, #2
 800973c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3304      	adds	r3, #4
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f000 fad0 	bl	8009cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b083      	sub	sp, #12
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80097c2:	bf00      	nop
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d101      	bne.n	80097ee <HAL_TIM_OC_ConfigChannel+0x1e>
 80097ea:	2302      	movs	r3, #2
 80097ec:	e066      	b.n	80098bc <HAL_TIM_OC_ConfigChannel+0xec>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b14      	cmp	r3, #20
 80097fa:	d857      	bhi.n	80098ac <HAL_TIM_OC_ConfigChannel+0xdc>
 80097fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009804 <HAL_TIM_OC_ConfigChannel+0x34>)
 80097fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009802:	bf00      	nop
 8009804:	08009859 	.word	0x08009859
 8009808:	080098ad 	.word	0x080098ad
 800980c:	080098ad 	.word	0x080098ad
 8009810:	080098ad 	.word	0x080098ad
 8009814:	08009867 	.word	0x08009867
 8009818:	080098ad 	.word	0x080098ad
 800981c:	080098ad 	.word	0x080098ad
 8009820:	080098ad 	.word	0x080098ad
 8009824:	08009875 	.word	0x08009875
 8009828:	080098ad 	.word	0x080098ad
 800982c:	080098ad 	.word	0x080098ad
 8009830:	080098ad 	.word	0x080098ad
 8009834:	08009883 	.word	0x08009883
 8009838:	080098ad 	.word	0x080098ad
 800983c:	080098ad 	.word	0x080098ad
 8009840:	080098ad 	.word	0x080098ad
 8009844:	08009891 	.word	0x08009891
 8009848:	080098ad 	.word	0x080098ad
 800984c:	080098ad 	.word	0x080098ad
 8009850:	080098ad 	.word	0x080098ad
 8009854:	0800989f 	.word	0x0800989f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fb46 	bl	8009ef0 <TIM_OC1_SetConfig>
      break;
 8009864:	e025      	b.n	80098b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fc01 	bl	800a074 <TIM_OC2_SetConfig>
      break;
 8009872:	e01e      	b.n	80098b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68b9      	ldr	r1, [r7, #8]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fcaa 	bl	800a1d4 <TIM_OC3_SetConfig>
      break;
 8009880:	e017      	b.n	80098b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68b9      	ldr	r1, [r7, #8]
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fd51 	bl	800a330 <TIM_OC4_SetConfig>
      break;
 800988e:	e010      	b.n	80098b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fdfa 	bl	800a490 <TIM_OC5_SetConfig>
      break;
 800989c:	e009      	b.n	80098b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68b9      	ldr	r1, [r7, #8]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 fe75 	bl	800a594 <TIM_OC6_SetConfig>
      break;
 80098aa:	e002      	b.n	80098b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	75fb      	strb	r3, [r7, #23]
      break;
 80098b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d101      	bne.n	80098e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80098de:	2302      	movs	r3, #2
 80098e0:	e0ff      	b.n	8009ae2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b14      	cmp	r3, #20
 80098ee:	f200 80f0 	bhi.w	8009ad2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80098f2:	a201      	add	r2, pc, #4	@ (adr r2, 80098f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80098f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f8:	0800994d 	.word	0x0800994d
 80098fc:	08009ad3 	.word	0x08009ad3
 8009900:	08009ad3 	.word	0x08009ad3
 8009904:	08009ad3 	.word	0x08009ad3
 8009908:	0800998d 	.word	0x0800998d
 800990c:	08009ad3 	.word	0x08009ad3
 8009910:	08009ad3 	.word	0x08009ad3
 8009914:	08009ad3 	.word	0x08009ad3
 8009918:	080099cf 	.word	0x080099cf
 800991c:	08009ad3 	.word	0x08009ad3
 8009920:	08009ad3 	.word	0x08009ad3
 8009924:	08009ad3 	.word	0x08009ad3
 8009928:	08009a0f 	.word	0x08009a0f
 800992c:	08009ad3 	.word	0x08009ad3
 8009930:	08009ad3 	.word	0x08009ad3
 8009934:	08009ad3 	.word	0x08009ad3
 8009938:	08009a51 	.word	0x08009a51
 800993c:	08009ad3 	.word	0x08009ad3
 8009940:	08009ad3 	.word	0x08009ad3
 8009944:	08009ad3 	.word	0x08009ad3
 8009948:	08009a91 	.word	0x08009a91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68b9      	ldr	r1, [r7, #8]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 facc 	bl	8009ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f042 0208 	orr.w	r2, r2, #8
 8009966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	699a      	ldr	r2, [r3, #24]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0204 	bic.w	r2, r2, #4
 8009976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6999      	ldr	r1, [r3, #24]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	691a      	ldr	r2, [r3, #16]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	430a      	orrs	r2, r1
 8009988:	619a      	str	r2, [r3, #24]
      break;
 800998a:	e0a5      	b.n	8009ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fb6e 	bl	800a074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6999      	ldr	r1, [r3, #24]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	021a      	lsls	r2, r3, #8
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	430a      	orrs	r2, r1
 80099ca:	619a      	str	r2, [r3, #24]
      break;
 80099cc:	e084      	b.n	8009ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68b9      	ldr	r1, [r7, #8]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 fbfd 	bl	800a1d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69da      	ldr	r2, [r3, #28]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0208 	orr.w	r2, r2, #8
 80099e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	69da      	ldr	r2, [r3, #28]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 0204 	bic.w	r2, r2, #4
 80099f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	69d9      	ldr	r1, [r3, #28]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	691a      	ldr	r2, [r3, #16]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	61da      	str	r2, [r3, #28]
      break;
 8009a0c:	e064      	b.n	8009ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fc8b 	bl	800a330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69da      	ldr	r2, [r3, #28]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69d9      	ldr	r1, [r3, #28]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	021a      	lsls	r2, r3, #8
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	61da      	str	r2, [r3, #28]
      break;
 8009a4e:	e043      	b.n	8009ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fd1a 	bl	800a490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0208 	orr.w	r2, r2, #8
 8009a6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0204 	bic.w	r2, r2, #4
 8009a7a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	691a      	ldr	r2, [r3, #16]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009a8e:	e023      	b.n	8009ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68b9      	ldr	r1, [r7, #8]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fd7c 	bl	800a594 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009aaa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009aba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	021a      	lsls	r2, r3, #8
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	430a      	orrs	r2, r1
 8009ace:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009ad0:	e002      	b.n	8009ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop

08009aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d101      	bne.n	8009b08 <HAL_TIM_ConfigClockSource+0x1c>
 8009b04:	2302      	movs	r3, #2
 8009b06:	e0e6      	b.n	8009cd6 <HAL_TIM_ConfigClockSource+0x1ea>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009b26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a67      	ldr	r2, [pc, #412]	@ (8009ce0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	f000 80b1 	beq.w	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009b48:	4a65      	ldr	r2, [pc, #404]	@ (8009ce0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	f200 80b6 	bhi.w	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009b50:	4a64      	ldr	r2, [pc, #400]	@ (8009ce4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	f000 80a9 	beq.w	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009b58:	4a62      	ldr	r2, [pc, #392]	@ (8009ce4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	f200 80ae 	bhi.w	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009b60:	4a61      	ldr	r2, [pc, #388]	@ (8009ce8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	f000 80a1 	beq.w	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009b68:	4a5f      	ldr	r2, [pc, #380]	@ (8009ce8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	f200 80a6 	bhi.w	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009b70:	4a5e      	ldr	r2, [pc, #376]	@ (8009cec <HAL_TIM_ConfigClockSource+0x200>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	f000 8099 	beq.w	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009b78:	4a5c      	ldr	r2, [pc, #368]	@ (8009cec <HAL_TIM_ConfigClockSource+0x200>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	f200 809e 	bhi.w	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009b80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b84:	f000 8091 	beq.w	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009b88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b8c:	f200 8096 	bhi.w	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b94:	f000 8089 	beq.w	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b9c:	f200 808e 	bhi.w	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ba4:	d03e      	beq.n	8009c24 <HAL_TIM_ConfigClockSource+0x138>
 8009ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009baa:	f200 8087 	bhi.w	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bb2:	f000 8086 	beq.w	8009cc2 <HAL_TIM_ConfigClockSource+0x1d6>
 8009bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bba:	d87f      	bhi.n	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009bbc:	2b70      	cmp	r3, #112	@ 0x70
 8009bbe:	d01a      	beq.n	8009bf6 <HAL_TIM_ConfigClockSource+0x10a>
 8009bc0:	2b70      	cmp	r3, #112	@ 0x70
 8009bc2:	d87b      	bhi.n	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009bc4:	2b60      	cmp	r3, #96	@ 0x60
 8009bc6:	d050      	beq.n	8009c6a <HAL_TIM_ConfigClockSource+0x17e>
 8009bc8:	2b60      	cmp	r3, #96	@ 0x60
 8009bca:	d877      	bhi.n	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009bcc:	2b50      	cmp	r3, #80	@ 0x50
 8009bce:	d03c      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0x15e>
 8009bd0:	2b50      	cmp	r3, #80	@ 0x50
 8009bd2:	d873      	bhi.n	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009bd4:	2b40      	cmp	r3, #64	@ 0x40
 8009bd6:	d058      	beq.n	8009c8a <HAL_TIM_ConfigClockSource+0x19e>
 8009bd8:	2b40      	cmp	r3, #64	@ 0x40
 8009bda:	d86f      	bhi.n	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009bdc:	2b30      	cmp	r3, #48	@ 0x30
 8009bde:	d064      	beq.n	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009be0:	2b30      	cmp	r3, #48	@ 0x30
 8009be2:	d86b      	bhi.n	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d060      	beq.n	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009be8:	2b20      	cmp	r3, #32
 8009bea:	d867      	bhi.n	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d05c      	beq.n	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009bf0:	2b10      	cmp	r3, #16
 8009bf2:	d05a      	beq.n	8009caa <HAL_TIM_ConfigClockSource+0x1be>
 8009bf4:	e062      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c06:	f000 fdc5 	bl	800a794 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	609a      	str	r2, [r3, #8]
      break;
 8009c22:	e04f      	b.n	8009cc4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c34:	f000 fdae 	bl	800a794 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689a      	ldr	r2, [r3, #8]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c46:	609a      	str	r2, [r3, #8]
      break;
 8009c48:	e03c      	b.n	8009cc4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c56:	461a      	mov	r2, r3
 8009c58:	f000 fd20 	bl	800a69c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2150      	movs	r1, #80	@ 0x50
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fd79 	bl	800a75a <TIM_ITRx_SetConfig>
      break;
 8009c68:	e02c      	b.n	8009cc4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c76:	461a      	mov	r2, r3
 8009c78:	f000 fd3f 	bl	800a6fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2160      	movs	r1, #96	@ 0x60
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 fd69 	bl	800a75a <TIM_ITRx_SetConfig>
      break;
 8009c88:	e01c      	b.n	8009cc4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c96:	461a      	mov	r2, r3
 8009c98:	f000 fd00 	bl	800a69c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2140      	movs	r1, #64	@ 0x40
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fd59 	bl	800a75a <TIM_ITRx_SetConfig>
      break;
 8009ca8:	e00c      	b.n	8009cc4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	f000 fd50 	bl	800a75a <TIM_ITRx_SetConfig>
      break;
 8009cba:	e003      	b.n	8009cc4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc0:	e000      	b.n	8009cc4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	00100070 	.word	0x00100070
 8009ce4:	00100040 	.word	0x00100040
 8009ce8:	00100030 	.word	0x00100030
 8009cec:	00100020 	.word	0x00100020

08009cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a6b      	ldr	r2, [pc, #428]	@ (8009eb0 <TIM_Base_SetConfig+0x1c0>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d02b      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a6a      	ldr	r2, [pc, #424]	@ (8009eb4 <TIM_Base_SetConfig+0x1c4>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d027      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d16:	d023      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d1e:	d01f      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a65      	ldr	r2, [pc, #404]	@ (8009eb8 <TIM_Base_SetConfig+0x1c8>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d01b      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a64      	ldr	r2, [pc, #400]	@ (8009ebc <TIM_Base_SetConfig+0x1cc>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d017      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a63      	ldr	r2, [pc, #396]	@ (8009ec0 <TIM_Base_SetConfig+0x1d0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d013      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a62      	ldr	r2, [pc, #392]	@ (8009ec4 <TIM_Base_SetConfig+0x1d4>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00f      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a61      	ldr	r2, [pc, #388]	@ (8009ec8 <TIM_Base_SetConfig+0x1d8>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d00b      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a60      	ldr	r2, [pc, #384]	@ (8009ecc <TIM_Base_SetConfig+0x1dc>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d007      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a5f      	ldr	r2, [pc, #380]	@ (8009ed0 <TIM_Base_SetConfig+0x1e0>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d003      	beq.n	8009d60 <TIM_Base_SetConfig+0x70>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a5e      	ldr	r2, [pc, #376]	@ (8009ed4 <TIM_Base_SetConfig+0x1e4>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d108      	bne.n	8009d72 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a4e      	ldr	r2, [pc, #312]	@ (8009eb0 <TIM_Base_SetConfig+0x1c0>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d043      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a4d      	ldr	r2, [pc, #308]	@ (8009eb4 <TIM_Base_SetConfig+0x1c4>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d03f      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d88:	d03b      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d90:	d037      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a48      	ldr	r2, [pc, #288]	@ (8009eb8 <TIM_Base_SetConfig+0x1c8>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d033      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a47      	ldr	r2, [pc, #284]	@ (8009ebc <TIM_Base_SetConfig+0x1cc>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d02f      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a46      	ldr	r2, [pc, #280]	@ (8009ec0 <TIM_Base_SetConfig+0x1d0>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d02b      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a45      	ldr	r2, [pc, #276]	@ (8009ec4 <TIM_Base_SetConfig+0x1d4>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d027      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a44      	ldr	r2, [pc, #272]	@ (8009ec8 <TIM_Base_SetConfig+0x1d8>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d023      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a43      	ldr	r2, [pc, #268]	@ (8009ecc <TIM_Base_SetConfig+0x1dc>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d01f      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a42      	ldr	r2, [pc, #264]	@ (8009ed0 <TIM_Base_SetConfig+0x1e0>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d01b      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a41      	ldr	r2, [pc, #260]	@ (8009ed4 <TIM_Base_SetConfig+0x1e4>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d017      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a40      	ldr	r2, [pc, #256]	@ (8009ed8 <TIM_Base_SetConfig+0x1e8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d013      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8009edc <TIM_Base_SetConfig+0x1ec>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00f      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a3e      	ldr	r2, [pc, #248]	@ (8009ee0 <TIM_Base_SetConfig+0x1f0>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d00b      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a3d      	ldr	r2, [pc, #244]	@ (8009ee4 <TIM_Base_SetConfig+0x1f4>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d007      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a3c      	ldr	r2, [pc, #240]	@ (8009ee8 <TIM_Base_SetConfig+0x1f8>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d003      	beq.n	8009e02 <TIM_Base_SetConfig+0x112>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8009eec <TIM_Base_SetConfig+0x1fc>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d108      	bne.n	8009e14 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a1e      	ldr	r2, [pc, #120]	@ (8009eb0 <TIM_Base_SetConfig+0x1c0>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d023      	beq.n	8009e82 <TIM_Base_SetConfig+0x192>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb4 <TIM_Base_SetConfig+0x1c4>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d01f      	beq.n	8009e82 <TIM_Base_SetConfig+0x192>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a22      	ldr	r2, [pc, #136]	@ (8009ed0 <TIM_Base_SetConfig+0x1e0>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d01b      	beq.n	8009e82 <TIM_Base_SetConfig+0x192>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a21      	ldr	r2, [pc, #132]	@ (8009ed4 <TIM_Base_SetConfig+0x1e4>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d017      	beq.n	8009e82 <TIM_Base_SetConfig+0x192>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a20      	ldr	r2, [pc, #128]	@ (8009ed8 <TIM_Base_SetConfig+0x1e8>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d013      	beq.n	8009e82 <TIM_Base_SetConfig+0x192>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8009edc <TIM_Base_SetConfig+0x1ec>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d00f      	beq.n	8009e82 <TIM_Base_SetConfig+0x192>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a1e      	ldr	r2, [pc, #120]	@ (8009ee0 <TIM_Base_SetConfig+0x1f0>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d00b      	beq.n	8009e82 <TIM_Base_SetConfig+0x192>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ee4 <TIM_Base_SetConfig+0x1f4>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d007      	beq.n	8009e82 <TIM_Base_SetConfig+0x192>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee8 <TIM_Base_SetConfig+0x1f8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d003      	beq.n	8009e82 <TIM_Base_SetConfig+0x192>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8009eec <TIM_Base_SetConfig+0x1fc>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d103      	bne.n	8009e8a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	691a      	ldr	r2, [r3, #16]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f043 0204 	orr.w	r2, r3, #4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	601a      	str	r2, [r3, #0]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	40012c00 	.word	0x40012c00
 8009eb4:	50012c00 	.word	0x50012c00
 8009eb8:	40000400 	.word	0x40000400
 8009ebc:	50000400 	.word	0x50000400
 8009ec0:	40000800 	.word	0x40000800
 8009ec4:	50000800 	.word	0x50000800
 8009ec8:	40000c00 	.word	0x40000c00
 8009ecc:	50000c00 	.word	0x50000c00
 8009ed0:	40013400 	.word	0x40013400
 8009ed4:	50013400 	.word	0x50013400
 8009ed8:	40014000 	.word	0x40014000
 8009edc:	50014000 	.word	0x50014000
 8009ee0:	40014400 	.word	0x40014400
 8009ee4:	50014400 	.word	0x50014400
 8009ee8:	40014800 	.word	0x40014800
 8009eec:	50014800 	.word	0x50014800

08009ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	f023 0201 	bic.w	r2, r3, #1
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 0303 	bic.w	r3, r3, #3
 8009f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f023 0302 	bic.w	r3, r3, #2
 8009f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a40      	ldr	r2, [pc, #256]	@ (800a04c <TIM_OC1_SetConfig+0x15c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d023      	beq.n	8009f98 <TIM_OC1_SetConfig+0xa8>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a3f      	ldr	r2, [pc, #252]	@ (800a050 <TIM_OC1_SetConfig+0x160>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d01f      	beq.n	8009f98 <TIM_OC1_SetConfig+0xa8>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a3e      	ldr	r2, [pc, #248]	@ (800a054 <TIM_OC1_SetConfig+0x164>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d01b      	beq.n	8009f98 <TIM_OC1_SetConfig+0xa8>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a3d      	ldr	r2, [pc, #244]	@ (800a058 <TIM_OC1_SetConfig+0x168>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d017      	beq.n	8009f98 <TIM_OC1_SetConfig+0xa8>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800a05c <TIM_OC1_SetConfig+0x16c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d013      	beq.n	8009f98 <TIM_OC1_SetConfig+0xa8>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a3b      	ldr	r2, [pc, #236]	@ (800a060 <TIM_OC1_SetConfig+0x170>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d00f      	beq.n	8009f98 <TIM_OC1_SetConfig+0xa8>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a3a      	ldr	r2, [pc, #232]	@ (800a064 <TIM_OC1_SetConfig+0x174>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d00b      	beq.n	8009f98 <TIM_OC1_SetConfig+0xa8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a39      	ldr	r2, [pc, #228]	@ (800a068 <TIM_OC1_SetConfig+0x178>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d007      	beq.n	8009f98 <TIM_OC1_SetConfig+0xa8>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a38      	ldr	r2, [pc, #224]	@ (800a06c <TIM_OC1_SetConfig+0x17c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d003      	beq.n	8009f98 <TIM_OC1_SetConfig+0xa8>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a37      	ldr	r2, [pc, #220]	@ (800a070 <TIM_OC1_SetConfig+0x180>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d10c      	bne.n	8009fb2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f023 0308 	bic.w	r3, r3, #8
 8009f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f023 0304 	bic.w	r3, r3, #4
 8009fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a25      	ldr	r2, [pc, #148]	@ (800a04c <TIM_OC1_SetConfig+0x15c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d023      	beq.n	800a002 <TIM_OC1_SetConfig+0x112>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a24      	ldr	r2, [pc, #144]	@ (800a050 <TIM_OC1_SetConfig+0x160>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d01f      	beq.n	800a002 <TIM_OC1_SetConfig+0x112>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a23      	ldr	r2, [pc, #140]	@ (800a054 <TIM_OC1_SetConfig+0x164>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d01b      	beq.n	800a002 <TIM_OC1_SetConfig+0x112>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a22      	ldr	r2, [pc, #136]	@ (800a058 <TIM_OC1_SetConfig+0x168>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d017      	beq.n	800a002 <TIM_OC1_SetConfig+0x112>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a21      	ldr	r2, [pc, #132]	@ (800a05c <TIM_OC1_SetConfig+0x16c>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d013      	beq.n	800a002 <TIM_OC1_SetConfig+0x112>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a20      	ldr	r2, [pc, #128]	@ (800a060 <TIM_OC1_SetConfig+0x170>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d00f      	beq.n	800a002 <TIM_OC1_SetConfig+0x112>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a1f      	ldr	r2, [pc, #124]	@ (800a064 <TIM_OC1_SetConfig+0x174>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d00b      	beq.n	800a002 <TIM_OC1_SetConfig+0x112>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a1e      	ldr	r2, [pc, #120]	@ (800a068 <TIM_OC1_SetConfig+0x178>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d007      	beq.n	800a002 <TIM_OC1_SetConfig+0x112>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800a06c <TIM_OC1_SetConfig+0x17c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d003      	beq.n	800a002 <TIM_OC1_SetConfig+0x112>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a1c      	ldr	r2, [pc, #112]	@ (800a070 <TIM_OC1_SetConfig+0x180>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d111      	bne.n	800a026 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	4313      	orrs	r3, r2
 800a01a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	621a      	str	r2, [r3, #32]
}
 800a040:	bf00      	nop
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	40012c00 	.word	0x40012c00
 800a050:	50012c00 	.word	0x50012c00
 800a054:	40013400 	.word	0x40013400
 800a058:	50013400 	.word	0x50013400
 800a05c:	40014000 	.word	0x40014000
 800a060:	50014000 	.word	0x50014000
 800a064:	40014400 	.word	0x40014400
 800a068:	50014400 	.word	0x50014400
 800a06c:	40014800 	.word	0x40014800
 800a070:	50014800 	.word	0x50014800

0800a074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	f023 0210 	bic.w	r2, r3, #16
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a0a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	021b      	lsls	r3, r3, #8
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f023 0320 	bic.w	r3, r3, #32
 800a0c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a36      	ldr	r2, [pc, #216]	@ (800a1ac <TIM_OC2_SetConfig+0x138>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d00b      	beq.n	800a0f0 <TIM_OC2_SetConfig+0x7c>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a35      	ldr	r2, [pc, #212]	@ (800a1b0 <TIM_OC2_SetConfig+0x13c>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d007      	beq.n	800a0f0 <TIM_OC2_SetConfig+0x7c>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a34      	ldr	r2, [pc, #208]	@ (800a1b4 <TIM_OC2_SetConfig+0x140>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d003      	beq.n	800a0f0 <TIM_OC2_SetConfig+0x7c>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a33      	ldr	r2, [pc, #204]	@ (800a1b8 <TIM_OC2_SetConfig+0x144>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d10d      	bne.n	800a10c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	4313      	orrs	r3, r2
 800a102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a10a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a27      	ldr	r2, [pc, #156]	@ (800a1ac <TIM_OC2_SetConfig+0x138>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d023      	beq.n	800a15c <TIM_OC2_SetConfig+0xe8>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a26      	ldr	r2, [pc, #152]	@ (800a1b0 <TIM_OC2_SetConfig+0x13c>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d01f      	beq.n	800a15c <TIM_OC2_SetConfig+0xe8>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a25      	ldr	r2, [pc, #148]	@ (800a1b4 <TIM_OC2_SetConfig+0x140>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d01b      	beq.n	800a15c <TIM_OC2_SetConfig+0xe8>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a24      	ldr	r2, [pc, #144]	@ (800a1b8 <TIM_OC2_SetConfig+0x144>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d017      	beq.n	800a15c <TIM_OC2_SetConfig+0xe8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a23      	ldr	r2, [pc, #140]	@ (800a1bc <TIM_OC2_SetConfig+0x148>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d013      	beq.n	800a15c <TIM_OC2_SetConfig+0xe8>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a22      	ldr	r2, [pc, #136]	@ (800a1c0 <TIM_OC2_SetConfig+0x14c>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d00f      	beq.n	800a15c <TIM_OC2_SetConfig+0xe8>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a21      	ldr	r2, [pc, #132]	@ (800a1c4 <TIM_OC2_SetConfig+0x150>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d00b      	beq.n	800a15c <TIM_OC2_SetConfig+0xe8>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a20      	ldr	r2, [pc, #128]	@ (800a1c8 <TIM_OC2_SetConfig+0x154>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d007      	beq.n	800a15c <TIM_OC2_SetConfig+0xe8>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a1f      	ldr	r2, [pc, #124]	@ (800a1cc <TIM_OC2_SetConfig+0x158>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d003      	beq.n	800a15c <TIM_OC2_SetConfig+0xe8>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a1e      	ldr	r2, [pc, #120]	@ (800a1d0 <TIM_OC2_SetConfig+0x15c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d113      	bne.n	800a184 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a16a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	4313      	orrs	r3, r2
 800a176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	4313      	orrs	r3, r2
 800a182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	621a      	str	r2, [r3, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	40012c00 	.word	0x40012c00
 800a1b0:	50012c00 	.word	0x50012c00
 800a1b4:	40013400 	.word	0x40013400
 800a1b8:	50013400 	.word	0x50013400
 800a1bc:	40014000 	.word	0x40014000
 800a1c0:	50014000 	.word	0x50014000
 800a1c4:	40014400 	.word	0x40014400
 800a1c8:	50014400 	.word	0x50014400
 800a1cc:	40014800 	.word	0x40014800
 800a1d0:	50014800 	.word	0x50014800

0800a1d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	4313      	orrs	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	021b      	lsls	r3, r3, #8
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a35      	ldr	r2, [pc, #212]	@ (800a308 <TIM_OC3_SetConfig+0x134>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00b      	beq.n	800a24e <TIM_OC3_SetConfig+0x7a>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a34      	ldr	r2, [pc, #208]	@ (800a30c <TIM_OC3_SetConfig+0x138>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d007      	beq.n	800a24e <TIM_OC3_SetConfig+0x7a>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a33      	ldr	r2, [pc, #204]	@ (800a310 <TIM_OC3_SetConfig+0x13c>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <TIM_OC3_SetConfig+0x7a>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a32      	ldr	r2, [pc, #200]	@ (800a314 <TIM_OC3_SetConfig+0x140>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d10d      	bne.n	800a26a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	021b      	lsls	r3, r3, #8
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	4313      	orrs	r3, r2
 800a260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a26      	ldr	r2, [pc, #152]	@ (800a308 <TIM_OC3_SetConfig+0x134>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d023      	beq.n	800a2ba <TIM_OC3_SetConfig+0xe6>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a25      	ldr	r2, [pc, #148]	@ (800a30c <TIM_OC3_SetConfig+0x138>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d01f      	beq.n	800a2ba <TIM_OC3_SetConfig+0xe6>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a24      	ldr	r2, [pc, #144]	@ (800a310 <TIM_OC3_SetConfig+0x13c>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d01b      	beq.n	800a2ba <TIM_OC3_SetConfig+0xe6>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a23      	ldr	r2, [pc, #140]	@ (800a314 <TIM_OC3_SetConfig+0x140>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d017      	beq.n	800a2ba <TIM_OC3_SetConfig+0xe6>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a22      	ldr	r2, [pc, #136]	@ (800a318 <TIM_OC3_SetConfig+0x144>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d013      	beq.n	800a2ba <TIM_OC3_SetConfig+0xe6>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a21      	ldr	r2, [pc, #132]	@ (800a31c <TIM_OC3_SetConfig+0x148>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00f      	beq.n	800a2ba <TIM_OC3_SetConfig+0xe6>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a20      	ldr	r2, [pc, #128]	@ (800a320 <TIM_OC3_SetConfig+0x14c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d00b      	beq.n	800a2ba <TIM_OC3_SetConfig+0xe6>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a324 <TIM_OC3_SetConfig+0x150>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d007      	beq.n	800a2ba <TIM_OC3_SetConfig+0xe6>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a1e      	ldr	r2, [pc, #120]	@ (800a328 <TIM_OC3_SetConfig+0x154>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d003      	beq.n	800a2ba <TIM_OC3_SetConfig+0xe6>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a32c <TIM_OC3_SetConfig+0x158>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d113      	bne.n	800a2e2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	011b      	lsls	r3, r3, #4
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	011b      	lsls	r3, r3, #4
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	621a      	str	r2, [r3, #32]
}
 800a2fc:	bf00      	nop
 800a2fe:	371c      	adds	r7, #28
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	40012c00 	.word	0x40012c00
 800a30c:	50012c00 	.word	0x50012c00
 800a310:	40013400 	.word	0x40013400
 800a314:	50013400 	.word	0x50013400
 800a318:	40014000 	.word	0x40014000
 800a31c:	50014000 	.word	0x50014000
 800a320:	40014400 	.word	0x40014400
 800a324:	50014400 	.word	0x50014400
 800a328:	40014800 	.word	0x40014800
 800a32c:	50014800 	.word	0x50014800

0800a330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a35e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	021b      	lsls	r3, r3, #8
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4313      	orrs	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a37e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	031b      	lsls	r3, r3, #12
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	4313      	orrs	r3, r2
 800a38a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a36      	ldr	r2, [pc, #216]	@ (800a468 <TIM_OC4_SetConfig+0x138>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d00b      	beq.n	800a3ac <TIM_OC4_SetConfig+0x7c>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a35      	ldr	r2, [pc, #212]	@ (800a46c <TIM_OC4_SetConfig+0x13c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d007      	beq.n	800a3ac <TIM_OC4_SetConfig+0x7c>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a34      	ldr	r2, [pc, #208]	@ (800a470 <TIM_OC4_SetConfig+0x140>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d003      	beq.n	800a3ac <TIM_OC4_SetConfig+0x7c>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a33      	ldr	r2, [pc, #204]	@ (800a474 <TIM_OC4_SetConfig+0x144>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d10d      	bne.n	800a3c8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	031b      	lsls	r3, r3, #12
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a27      	ldr	r2, [pc, #156]	@ (800a468 <TIM_OC4_SetConfig+0x138>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d023      	beq.n	800a418 <TIM_OC4_SetConfig+0xe8>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a26      	ldr	r2, [pc, #152]	@ (800a46c <TIM_OC4_SetConfig+0x13c>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d01f      	beq.n	800a418 <TIM_OC4_SetConfig+0xe8>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a25      	ldr	r2, [pc, #148]	@ (800a470 <TIM_OC4_SetConfig+0x140>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d01b      	beq.n	800a418 <TIM_OC4_SetConfig+0xe8>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a24      	ldr	r2, [pc, #144]	@ (800a474 <TIM_OC4_SetConfig+0x144>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d017      	beq.n	800a418 <TIM_OC4_SetConfig+0xe8>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a23      	ldr	r2, [pc, #140]	@ (800a478 <TIM_OC4_SetConfig+0x148>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d013      	beq.n	800a418 <TIM_OC4_SetConfig+0xe8>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a22      	ldr	r2, [pc, #136]	@ (800a47c <TIM_OC4_SetConfig+0x14c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d00f      	beq.n	800a418 <TIM_OC4_SetConfig+0xe8>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a21      	ldr	r2, [pc, #132]	@ (800a480 <TIM_OC4_SetConfig+0x150>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d00b      	beq.n	800a418 <TIM_OC4_SetConfig+0xe8>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a20      	ldr	r2, [pc, #128]	@ (800a484 <TIM_OC4_SetConfig+0x154>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d007      	beq.n	800a418 <TIM_OC4_SetConfig+0xe8>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a1f      	ldr	r2, [pc, #124]	@ (800a488 <TIM_OC4_SetConfig+0x158>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d003      	beq.n	800a418 <TIM_OC4_SetConfig+0xe8>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a1e      	ldr	r2, [pc, #120]	@ (800a48c <TIM_OC4_SetConfig+0x15c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d113      	bne.n	800a440 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a41e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a426:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	019b      	lsls	r3, r3, #6
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	4313      	orrs	r3, r2
 800a432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	019b      	lsls	r3, r3, #6
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	621a      	str	r2, [r3, #32]
}
 800a45a:	bf00      	nop
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	40012c00 	.word	0x40012c00
 800a46c:	50012c00 	.word	0x50012c00
 800a470:	40013400 	.word	0x40013400
 800a474:	50013400 	.word	0x50013400
 800a478:	40014000 	.word	0x40014000
 800a47c:	50014000 	.word	0x50014000
 800a480:	40014400 	.word	0x40014400
 800a484:	50014400 	.word	0x50014400
 800a488:	40014800 	.word	0x40014800
 800a48c:	50014800 	.word	0x50014800

0800a490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a4d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	041b      	lsls	r3, r3, #16
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a21      	ldr	r2, [pc, #132]	@ (800a56c <TIM_OC5_SetConfig+0xdc>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d023      	beq.n	800a532 <TIM_OC5_SetConfig+0xa2>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a20      	ldr	r2, [pc, #128]	@ (800a570 <TIM_OC5_SetConfig+0xe0>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d01f      	beq.n	800a532 <TIM_OC5_SetConfig+0xa2>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a1f      	ldr	r2, [pc, #124]	@ (800a574 <TIM_OC5_SetConfig+0xe4>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d01b      	beq.n	800a532 <TIM_OC5_SetConfig+0xa2>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a1e      	ldr	r2, [pc, #120]	@ (800a578 <TIM_OC5_SetConfig+0xe8>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d017      	beq.n	800a532 <TIM_OC5_SetConfig+0xa2>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a1d      	ldr	r2, [pc, #116]	@ (800a57c <TIM_OC5_SetConfig+0xec>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d013      	beq.n	800a532 <TIM_OC5_SetConfig+0xa2>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a1c      	ldr	r2, [pc, #112]	@ (800a580 <TIM_OC5_SetConfig+0xf0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d00f      	beq.n	800a532 <TIM_OC5_SetConfig+0xa2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a1b      	ldr	r2, [pc, #108]	@ (800a584 <TIM_OC5_SetConfig+0xf4>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d00b      	beq.n	800a532 <TIM_OC5_SetConfig+0xa2>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a1a      	ldr	r2, [pc, #104]	@ (800a588 <TIM_OC5_SetConfig+0xf8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d007      	beq.n	800a532 <TIM_OC5_SetConfig+0xa2>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a19      	ldr	r2, [pc, #100]	@ (800a58c <TIM_OC5_SetConfig+0xfc>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d003      	beq.n	800a532 <TIM_OC5_SetConfig+0xa2>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a18      	ldr	r2, [pc, #96]	@ (800a590 <TIM_OC5_SetConfig+0x100>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d109      	bne.n	800a546 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a538:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	021b      	lsls	r3, r3, #8
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	4313      	orrs	r3, r2
 800a544:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	621a      	str	r2, [r3, #32]
}
 800a560:	bf00      	nop
 800a562:	371c      	adds	r7, #28
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	40012c00 	.word	0x40012c00
 800a570:	50012c00 	.word	0x50012c00
 800a574:	40013400 	.word	0x40013400
 800a578:	50013400 	.word	0x50013400
 800a57c:	40014000 	.word	0x40014000
 800a580:	50014000 	.word	0x50014000
 800a584:	40014400 	.word	0x40014400
 800a588:	50014400 	.word	0x50014400
 800a58c:	40014800 	.word	0x40014800
 800a590:	50014800 	.word	0x50014800

0800a594 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a5da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	051b      	lsls	r3, r3, #20
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a22      	ldr	r2, [pc, #136]	@ (800a674 <TIM_OC6_SetConfig+0xe0>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d023      	beq.n	800a638 <TIM_OC6_SetConfig+0xa4>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a21      	ldr	r2, [pc, #132]	@ (800a678 <TIM_OC6_SetConfig+0xe4>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d01f      	beq.n	800a638 <TIM_OC6_SetConfig+0xa4>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a20      	ldr	r2, [pc, #128]	@ (800a67c <TIM_OC6_SetConfig+0xe8>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d01b      	beq.n	800a638 <TIM_OC6_SetConfig+0xa4>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a1f      	ldr	r2, [pc, #124]	@ (800a680 <TIM_OC6_SetConfig+0xec>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d017      	beq.n	800a638 <TIM_OC6_SetConfig+0xa4>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a1e      	ldr	r2, [pc, #120]	@ (800a684 <TIM_OC6_SetConfig+0xf0>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d013      	beq.n	800a638 <TIM_OC6_SetConfig+0xa4>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a1d      	ldr	r2, [pc, #116]	@ (800a688 <TIM_OC6_SetConfig+0xf4>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d00f      	beq.n	800a638 <TIM_OC6_SetConfig+0xa4>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a1c      	ldr	r2, [pc, #112]	@ (800a68c <TIM_OC6_SetConfig+0xf8>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d00b      	beq.n	800a638 <TIM_OC6_SetConfig+0xa4>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a1b      	ldr	r2, [pc, #108]	@ (800a690 <TIM_OC6_SetConfig+0xfc>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d007      	beq.n	800a638 <TIM_OC6_SetConfig+0xa4>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a1a      	ldr	r2, [pc, #104]	@ (800a694 <TIM_OC6_SetConfig+0x100>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d003      	beq.n	800a638 <TIM_OC6_SetConfig+0xa4>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a19      	ldr	r2, [pc, #100]	@ (800a698 <TIM_OC6_SetConfig+0x104>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d109      	bne.n	800a64c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a63e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	029b      	lsls	r3, r3, #10
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	4313      	orrs	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	621a      	str	r2, [r3, #32]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	40012c00 	.word	0x40012c00
 800a678:	50012c00 	.word	0x50012c00
 800a67c:	40013400 	.word	0x40013400
 800a680:	50013400 	.word	0x50013400
 800a684:	40014000 	.word	0x40014000
 800a688:	50014000 	.word	0x50014000
 800a68c:	40014400 	.word	0x40014400
 800a690:	50014400 	.word	0x50014400
 800a694:	40014800 	.word	0x40014800
 800a698:	50014800 	.word	0x50014800

0800a69c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	f023 0201 	bic.w	r2, r3, #1
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	011b      	lsls	r3, r3, #4
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f023 030a 	bic.w	r3, r3, #10
 800a6d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	621a      	str	r2, [r3, #32]
}
 800a6ee:	bf00      	nop
 800a6f0:	371c      	adds	r7, #28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b087      	sub	sp, #28
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	f023 0210 	bic.w	r2, r3, #16
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	031b      	lsls	r3, r3, #12
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a736:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	011b      	lsls	r3, r3, #4
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	621a      	str	r2, [r3, #32]
}
 800a74e:	bf00      	nop
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b085      	sub	sp, #20
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	f043 0307 	orr.w	r3, r3, #7
 800a780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	609a      	str	r2, [r3, #8]
}
 800a788:	bf00      	nop
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	021a      	lsls	r2, r3, #8
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	609a      	str	r2, [r3, #8]
}
 800a7c8:	bf00      	nop
 800a7ca:	371c      	adds	r7, #28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	f003 031f 	and.w	r3, r3, #31
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6a1a      	ldr	r2, [r3, #32]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	43db      	mvns	r3, r3
 800a7f6:	401a      	ands	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6a1a      	ldr	r2, [r3, #32]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f003 031f 	and.w	r3, r3, #31
 800a806:	6879      	ldr	r1, [r7, #4]
 800a808:	fa01 f303 	lsl.w	r3, r1, r3
 800a80c:	431a      	orrs	r2, r3
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	621a      	str	r2, [r3, #32]
}
 800a812:	bf00      	nop
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
	...

0800a820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a830:	2b01      	cmp	r3, #1
 800a832:	d101      	bne.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a834:	2302      	movs	r3, #2
 800a836:	e097      	b.n	800a968 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2202      	movs	r2, #2
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a45      	ldr	r2, [pc, #276]	@ (800a974 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d00e      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a44      	ldr	r2, [pc, #272]	@ (800a978 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d009      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a42      	ldr	r2, [pc, #264]	@ (800a97c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d004      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a41      	ldr	r2, [pc, #260]	@ (800a980 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d108      	bne.n	800a892 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a886:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a89c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a2f      	ldr	r2, [pc, #188]	@ (800a974 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d040      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a2e      	ldr	r2, [pc, #184]	@ (800a978 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d03b      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8cc:	d036      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a8d6:	d031      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a29      	ldr	r2, [pc, #164]	@ (800a984 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d02c      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a28      	ldr	r2, [pc, #160]	@ (800a988 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d027      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a26      	ldr	r2, [pc, #152]	@ (800a98c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d022      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a25      	ldr	r2, [pc, #148]	@ (800a990 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d01d      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a23      	ldr	r2, [pc, #140]	@ (800a994 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d018      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a22      	ldr	r2, [pc, #136]	@ (800a998 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d013      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a18      	ldr	r2, [pc, #96]	@ (800a97c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d00e      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a17      	ldr	r2, [pc, #92]	@ (800a980 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d009      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a1b      	ldr	r2, [pc, #108]	@ (800a99c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d004      	beq.n	800a93c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a1a      	ldr	r2, [pc, #104]	@ (800a9a0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d10c      	bne.n	800a956 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a942:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	40012c00 	.word	0x40012c00
 800a978:	50012c00 	.word	0x50012c00
 800a97c:	40013400 	.word	0x40013400
 800a980:	50013400 	.word	0x50013400
 800a984:	40000400 	.word	0x40000400
 800a988:	50000400 	.word	0x50000400
 800a98c:	40000800 	.word	0x40000800
 800a990:	50000800 	.word	0x50000800
 800a994:	40000c00 	.word	0x40000c00
 800a998:	50000c00 	.word	0x50000c00
 800a99c:	40014000 	.word	0x40014000
 800a9a0:	50014000 	.word	0x50014000

0800a9a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d101      	bne.n	800a9c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9bc:	2302      	movs	r3, #2
 800a9be:	e07d      	b.n	800aabc <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa26:	4313      	orrs	r3, r2
 800aa28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	041b      	lsls	r3, r3, #16
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	69db      	ldr	r3, [r3, #28]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a1e      	ldr	r2, [pc, #120]	@ (800aac8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d00e      	beq.n	800aa70 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a1d      	ldr	r2, [pc, #116]	@ (800aacc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d009      	beq.n	800aa70 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a1b      	ldr	r2, [pc, #108]	@ (800aad0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d004      	beq.n	800aa70 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a1a      	ldr	r2, [pc, #104]	@ (800aad4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d11c      	bne.n	800aaaa <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa7a:	051b      	lsls	r3, r3, #20
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	40012c00 	.word	0x40012c00
 800aacc:	50012c00 	.word	0x50012c00
 800aad0:	40013400 	.word	0x40013400
 800aad4:	50013400 	.word	0x50013400

0800aad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e042      	b.n	800ab70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d106      	bne.n	800ab02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7f6 fe55 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2224      	movs	r2, #36	@ 0x24
 800ab06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f022 0201 	bic.w	r2, r2, #1
 800ab18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f9ca 	bl	800aebc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f825 	bl	800ab78 <UART_SetConfig>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d101      	bne.n	800ab38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e01b      	b.n	800ab70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	689a      	ldr	r2, [r3, #8]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f042 0201 	orr.w	r2, r2, #1
 800ab66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fa49 	bl	800b000 <UART_CheckIdleState>
 800ab6e:	4603      	mov	r3, r0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab7c:	b094      	sub	sp, #80	@ 0x50
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab82:	2300      	movs	r3, #0
 800ab84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	4b7e      	ldr	r3, [pc, #504]	@ (800ad88 <UART_SetConfig+0x210>)
 800ab8e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab92:	689a      	ldr	r2, [r3, #8]
 800ab94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	431a      	orrs	r2, r3
 800ab9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	431a      	orrs	r2, r3
 800aba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4977      	ldr	r1, [pc, #476]	@ (800ad8c <UART_SetConfig+0x214>)
 800abb0:	4019      	ands	r1, r3
 800abb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abb8:	430b      	orrs	r3, r1
 800abba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800abc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc8:	68d9      	ldr	r1, [r3, #12]
 800abca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	ea40 0301 	orr.w	r3, r0, r1
 800abd2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	4b6a      	ldr	r3, [pc, #424]	@ (800ad88 <UART_SetConfig+0x210>)
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d009      	beq.n	800abf8 <UART_SetConfig+0x80>
 800abe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	4b69      	ldr	r3, [pc, #420]	@ (800ad90 <UART_SetConfig+0x218>)
 800abea:	429a      	cmp	r2, r3
 800abec:	d004      	beq.n	800abf8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf0:	6a1a      	ldr	r2, [r3, #32]
 800abf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abf4:	4313      	orrs	r3, r2
 800abf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ac02:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ac06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac0c:	430b      	orrs	r3, r1
 800ac0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac16:	f023 000f 	bic.w	r0, r3, #15
 800ac1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ac1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	ea40 0301 	orr.w	r3, r0, r1
 800ac26:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	4b59      	ldr	r3, [pc, #356]	@ (800ad94 <UART_SetConfig+0x21c>)
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d102      	bne.n	800ac38 <UART_SetConfig+0xc0>
 800ac32:	2301      	movs	r3, #1
 800ac34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac36:	e029      	b.n	800ac8c <UART_SetConfig+0x114>
 800ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	4b56      	ldr	r3, [pc, #344]	@ (800ad98 <UART_SetConfig+0x220>)
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d102      	bne.n	800ac48 <UART_SetConfig+0xd0>
 800ac42:	2302      	movs	r3, #2
 800ac44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac46:	e021      	b.n	800ac8c <UART_SetConfig+0x114>
 800ac48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	4b53      	ldr	r3, [pc, #332]	@ (800ad9c <UART_SetConfig+0x224>)
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d102      	bne.n	800ac58 <UART_SetConfig+0xe0>
 800ac52:	2304      	movs	r3, #4
 800ac54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac56:	e019      	b.n	800ac8c <UART_SetConfig+0x114>
 800ac58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	4b50      	ldr	r3, [pc, #320]	@ (800ada0 <UART_SetConfig+0x228>)
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d102      	bne.n	800ac68 <UART_SetConfig+0xf0>
 800ac62:	2308      	movs	r3, #8
 800ac64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac66:	e011      	b.n	800ac8c <UART_SetConfig+0x114>
 800ac68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	4b4d      	ldr	r3, [pc, #308]	@ (800ada4 <UART_SetConfig+0x22c>)
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d102      	bne.n	800ac78 <UART_SetConfig+0x100>
 800ac72:	2310      	movs	r3, #16
 800ac74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac76:	e009      	b.n	800ac8c <UART_SetConfig+0x114>
 800ac78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	4b42      	ldr	r3, [pc, #264]	@ (800ad88 <UART_SetConfig+0x210>)
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d102      	bne.n	800ac88 <UART_SetConfig+0x110>
 800ac82:	2320      	movs	r3, #32
 800ac84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac86:	e001      	b.n	800ac8c <UART_SetConfig+0x114>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	4b3d      	ldr	r3, [pc, #244]	@ (800ad88 <UART_SetConfig+0x210>)
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d005      	beq.n	800aca2 <UART_SetConfig+0x12a>
 800ac96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	4b3d      	ldr	r3, [pc, #244]	@ (800ad90 <UART_SetConfig+0x218>)
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	f040 8085 	bne.w	800adac <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aca4:	2200      	movs	r2, #0
 800aca6:	623b      	str	r3, [r7, #32]
 800aca8:	627a      	str	r2, [r7, #36]	@ 0x24
 800acaa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800acae:	f7fc fbe9 	bl	8007484 <HAL_RCCEx_GetPeriphCLKFreq>
 800acb2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800acb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 80e8 	beq.w	800ae8c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc0:	4a39      	ldr	r2, [pc, #228]	@ (800ada8 <UART_SetConfig+0x230>)
 800acc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acca:	fbb3 f3f2 	udiv	r3, r3, r2
 800acce:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	4413      	add	r3, r2
 800acda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acdc:	429a      	cmp	r2, r3
 800acde:	d305      	bcc.n	800acec <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ace0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ace6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ace8:	429a      	cmp	r2, r3
 800acea:	d903      	bls.n	800acf4 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800acf2:	e048      	b.n	800ad86 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acf6:	2200      	movs	r2, #0
 800acf8:	61bb      	str	r3, [r7, #24]
 800acfa:	61fa      	str	r2, [r7, #28]
 800acfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad00:	4a29      	ldr	r2, [pc, #164]	@ (800ada8 <UART_SetConfig+0x230>)
 800ad02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	2200      	movs	r2, #0
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	617a      	str	r2, [r7, #20]
 800ad0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ad16:	f7f5 faaf 	bl	8000278 <__aeabi_uldivmod>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4610      	mov	r0, r2
 800ad20:	4619      	mov	r1, r3
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	f04f 0300 	mov.w	r3, #0
 800ad2a:	020b      	lsls	r3, r1, #8
 800ad2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad30:	0202      	lsls	r2, r0, #8
 800ad32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad34:	6849      	ldr	r1, [r1, #4]
 800ad36:	0849      	lsrs	r1, r1, #1
 800ad38:	2000      	movs	r0, #0
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	eb12 0804 	adds.w	r8, r2, r4
 800ad42:	eb43 0905 	adc.w	r9, r3, r5
 800ad46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	60bb      	str	r3, [r7, #8]
 800ad4e:	60fa      	str	r2, [r7, #12]
 800ad50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad54:	4640      	mov	r0, r8
 800ad56:	4649      	mov	r1, r9
 800ad58:	f7f5 fa8e 	bl	8000278 <__aeabi_uldivmod>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4613      	mov	r3, r2
 800ad62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad6a:	d308      	bcc.n	800ad7e <UART_SetConfig+0x206>
 800ad6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad72:	d204      	bcs.n	800ad7e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800ad74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad7a:	60da      	str	r2, [r3, #12]
 800ad7c:	e003      	b.n	800ad86 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800ad84:	e082      	b.n	800ae8c <UART_SetConfig+0x314>
 800ad86:	e081      	b.n	800ae8c <UART_SetConfig+0x314>
 800ad88:	46002400 	.word	0x46002400
 800ad8c:	cfff69f3 	.word	0xcfff69f3
 800ad90:	56002400 	.word	0x56002400
 800ad94:	40013800 	.word	0x40013800
 800ad98:	40004400 	.word	0x40004400
 800ad9c:	40004800 	.word	0x40004800
 800ada0:	40004c00 	.word	0x40004c00
 800ada4:	40005000 	.word	0x40005000
 800ada8:	0800c574 	.word	0x0800c574
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adb4:	d13c      	bne.n	800ae30 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800adb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adb8:	2200      	movs	r2, #0
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	607a      	str	r2, [r7, #4]
 800adbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adc2:	f7fc fb5f 	bl	8007484 <HAL_RCCEx_GetPeriphCLKFreq>
 800adc6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d05e      	beq.n	800ae8c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add2:	4a39      	ldr	r2, [pc, #228]	@ (800aeb8 <UART_SetConfig+0x340>)
 800add4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800add8:	461a      	mov	r2, r3
 800adda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800addc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ade0:	005a      	lsls	r2, r3, #1
 800ade2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	085b      	lsrs	r3, r3, #1
 800ade8:	441a      	add	r2, r3
 800adea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	fbb2 f3f3 	udiv	r3, r2, r3
 800adf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adf6:	2b0f      	cmp	r3, #15
 800adf8:	d916      	bls.n	800ae28 <UART_SetConfig+0x2b0>
 800adfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae00:	d212      	bcs.n	800ae28 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	f023 030f 	bic.w	r3, r3, #15
 800ae0a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae0e:	085b      	lsrs	r3, r3, #1
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	f003 0307 	and.w	r3, r3, #7
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ae1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ae24:	60da      	str	r2, [r3, #12]
 800ae26:	e031      	b.n	800ae8c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ae2e:	e02d      	b.n	800ae8c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ae30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae32:	2200      	movs	r2, #0
 800ae34:	469a      	mov	sl, r3
 800ae36:	4693      	mov	fp, r2
 800ae38:	4650      	mov	r0, sl
 800ae3a:	4659      	mov	r1, fp
 800ae3c:	f7fc fb22 	bl	8007484 <HAL_RCCEx_GetPeriphCLKFreq>
 800ae40:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ae42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d021      	beq.n	800ae8c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4c:	4a1a      	ldr	r2, [pc, #104]	@ (800aeb8 <UART_SetConfig+0x340>)
 800ae4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae52:	461a      	mov	r2, r3
 800ae54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae56:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	085b      	lsrs	r3, r3, #1
 800ae60:	441a      	add	r2, r3
 800ae62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae6e:	2b0f      	cmp	r3, #15
 800ae70:	d909      	bls.n	800ae86 <UART_SetConfig+0x30e>
 800ae72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae78:	d205      	bcs.n	800ae86 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	60da      	str	r2, [r3, #12]
 800ae84:	e002      	b.n	800ae8c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae96:	2201      	movs	r2, #1
 800ae98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9e:	2200      	movs	r2, #0
 800aea0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea4:	2200      	movs	r2, #0
 800aea6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aea8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3750      	adds	r7, #80	@ 0x50
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aeb6:	bf00      	nop
 800aeb8:	0800c574 	.word	0x0800c574

0800aebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec8:	f003 0308 	and.w	r3, r3, #8
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00a      	beq.n	800aee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00a      	beq.n	800af08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	430a      	orrs	r2, r1
 800af06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af0c:	f003 0302 	and.w	r3, r3, #2
 800af10:	2b00      	cmp	r3, #0
 800af12:	d00a      	beq.n	800af2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2e:	f003 0304 	and.w	r3, r3, #4
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00a      	beq.n	800af4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	430a      	orrs	r2, r1
 800af4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af50:	f003 0310 	and.w	r3, r3, #16
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00a      	beq.n	800af6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af72:	f003 0320 	and.w	r3, r3, #32
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	430a      	orrs	r2, r1
 800af8e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d01a      	beq.n	800afd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	430a      	orrs	r2, r1
 800afb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afba:	d10a      	bne.n	800afd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	430a      	orrs	r2, r1
 800afd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00a      	beq.n	800aff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	605a      	str	r2, [r3, #4]
  }
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b098      	sub	sp, #96	@ 0x60
 800b004:	af02      	add	r7, sp, #8
 800b006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b010:	f7f6 feb0 	bl	8001d74 <HAL_GetTick>
 800b014:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0308 	and.w	r3, r3, #8
 800b020:	2b08      	cmp	r3, #8
 800b022:	d12f      	bne.n	800b084 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b024:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b02c:	2200      	movs	r2, #0
 800b02e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f88e 	bl	800b154 <UART_WaitOnFlagUntilTimeout>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d022      	beq.n	800b084 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b052:	653b      	str	r3, [r7, #80]	@ 0x50
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	461a      	mov	r2, r3
 800b05a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b05c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b05e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b060:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b064:	e841 2300 	strex	r3, r2, [r1]
 800b068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1e6      	bne.n	800b03e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2220      	movs	r2, #32
 800b074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b080:	2303      	movs	r3, #3
 800b082:	e063      	b.n	800b14c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0304 	and.w	r3, r3, #4
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d149      	bne.n	800b126 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b092:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b09a:	2200      	movs	r2, #0
 800b09c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f857 	bl	800b154 <UART_WaitOnFlagUntilTimeout>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d03c      	beq.n	800b126 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b4:	e853 3f00 	ldrex	r3, [r3]
 800b0b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e6      	bne.n	800b0ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f023 0301 	bic.w	r3, r3, #1
 800b0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0fe:	61fa      	str	r2, [r7, #28]
 800b100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	69b9      	ldr	r1, [r7, #24]
 800b104:	69fa      	ldr	r2, [r7, #28]
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	617b      	str	r3, [r7, #20]
   return(result);
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e5      	bne.n	800b0de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2220      	movs	r2, #32
 800b116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b122:	2303      	movs	r3, #3
 800b124:	e012      	b.n	800b14c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2220      	movs	r2, #32
 800b12a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2220      	movs	r2, #32
 800b132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3758      	adds	r7, #88	@ 0x58
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	603b      	str	r3, [r7, #0]
 800b160:	4613      	mov	r3, r2
 800b162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b164:	e04f      	b.n	800b206 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16c:	d04b      	beq.n	800b206 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b16e:	f7f6 fe01 	bl	8001d74 <HAL_GetTick>
 800b172:	4602      	mov	r2, r0
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d302      	bcc.n	800b184 <UART_WaitOnFlagUntilTimeout+0x30>
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b184:	2303      	movs	r3, #3
 800b186:	e04e      	b.n	800b226 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0304 	and.w	r3, r3, #4
 800b192:	2b00      	cmp	r3, #0
 800b194:	d037      	beq.n	800b206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2b80      	cmp	r3, #128	@ 0x80
 800b19a:	d034      	beq.n	800b206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b40      	cmp	r3, #64	@ 0x40
 800b1a0:	d031      	beq.n	800b206 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	f003 0308 	and.w	r3, r3, #8
 800b1ac:	2b08      	cmp	r3, #8
 800b1ae:	d110      	bne.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2208      	movs	r2, #8
 800b1b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f000 f838 	bl	800b22e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e029      	b.n	800b226 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1e0:	d111      	bne.n	800b206 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 f81e 	bl	800b22e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b202:	2303      	movs	r3, #3
 800b204:	e00f      	b.n	800b226 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	69da      	ldr	r2, [r3, #28]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	4013      	ands	r3, r2
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	429a      	cmp	r2, r3
 800b214:	bf0c      	ite	eq
 800b216:	2301      	moveq	r3, #1
 800b218:	2300      	movne	r3, #0
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	461a      	mov	r2, r3
 800b21e:	79fb      	ldrb	r3, [r7, #7]
 800b220:	429a      	cmp	r2, r3
 800b222:	d0a0      	beq.n	800b166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b22e:	b480      	push	{r7}
 800b230:	b095      	sub	sp, #84	@ 0x54
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b246:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b24a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	461a      	mov	r2, r3
 800b252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b254:	643b      	str	r3, [r7, #64]	@ 0x40
 800b256:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b258:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b25a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b25c:	e841 2300 	strex	r3, r2, [r1]
 800b260:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1e6      	bne.n	800b236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3308      	adds	r3, #8
 800b26e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	e853 3f00 	ldrex	r3, [r3]
 800b276:	61fb      	str	r3, [r7, #28]
   return(result);
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b27e:	f023 0301 	bic.w	r3, r3, #1
 800b282:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3308      	adds	r3, #8
 800b28a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b28c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b28e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b294:	e841 2300 	strex	r3, r2, [r1]
 800b298:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1e3      	bne.n	800b268 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d118      	bne.n	800b2da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	f023 0310 	bic.w	r3, r3, #16
 800b2bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2c6:	61bb      	str	r3, [r7, #24]
 800b2c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6979      	ldr	r1, [r7, #20]
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e6      	bne.n	800b2a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b2ee:	bf00      	nop
 800b2f0:	3754      	adds	r7, #84	@ 0x54
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b085      	sub	sp, #20
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d101      	bne.n	800b310 <HAL_UARTEx_DisableFifoMode+0x16>
 800b30c:	2302      	movs	r3, #2
 800b30e:	e027      	b.n	800b360 <HAL_UARTEx_DisableFifoMode+0x66>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2224      	movs	r2, #36	@ 0x24
 800b31c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f022 0201 	bic.w	r2, r2, #1
 800b336:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b33e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2220      	movs	r2, #32
 800b352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d101      	bne.n	800b384 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b380:	2302      	movs	r3, #2
 800b382:	e02d      	b.n	800b3e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2224      	movs	r2, #36	@ 0x24
 800b390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f022 0201 	bic.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f84f 	bl	800b464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d101      	bne.n	800b400 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	e02d      	b.n	800b45c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2224      	movs	r2, #36	@ 0x24
 800b40c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f022 0201 	bic.w	r2, r2, #1
 800b426:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f811 	bl	800b464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2220      	movs	r2, #32
 800b44e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b470:	2b00      	cmp	r3, #0
 800b472:	d108      	bne.n	800b486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b484:	e031      	b.n	800b4ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b486:	2308      	movs	r3, #8
 800b488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b48a:	2308      	movs	r3, #8
 800b48c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	0e5b      	lsrs	r3, r3, #25
 800b496:	b2db      	uxtb	r3, r3
 800b498:	f003 0307 	and.w	r3, r3, #7
 800b49c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	0f5b      	lsrs	r3, r3, #29
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	f003 0307 	and.w	r3, r3, #7
 800b4ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4ae:	7bbb      	ldrb	r3, [r7, #14]
 800b4b0:	7b3a      	ldrb	r2, [r7, #12]
 800b4b2:	4911      	ldr	r1, [pc, #68]	@ (800b4f8 <UARTEx_SetNbDataToProcess+0x94>)
 800b4b4:	5c8a      	ldrb	r2, [r1, r2]
 800b4b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4ba:	7b3a      	ldrb	r2, [r7, #12]
 800b4bc:	490f      	ldr	r1, [pc, #60]	@ (800b4fc <UARTEx_SetNbDataToProcess+0x98>)
 800b4be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	7b7a      	ldrb	r2, [r7, #13]
 800b4d0:	4909      	ldr	r1, [pc, #36]	@ (800b4f8 <UARTEx_SetNbDataToProcess+0x94>)
 800b4d2:	5c8a      	ldrb	r2, [r1, r2]
 800b4d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b4d8:	7b7a      	ldrb	r2, [r7, #13]
 800b4da:	4908      	ldr	r1, [pc, #32]	@ (800b4fc <UARTEx_SetNbDataToProcess+0x98>)
 800b4dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4de:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b4ea:	bf00      	nop
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	0800c58c 	.word	0x0800c58c
 800b4fc:	0800c594 	.word	0x0800c594

0800b500 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800b500:	b480      	push	{r7}
 800b502:	b08b      	sub	sp, #44	@ 0x2c
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	fa93 f3a3 	rbit	r3, r3
 800b51a:	613b      	str	r3, [r7, #16]
  return result;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b526:	2320      	movs	r3, #32
 800b528:	e003      	b.n	800b532 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	fab3 f383 	clz	r3, r3
 800b530:	b2db      	uxtb	r3, r3
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	2103      	movs	r1, #3
 800b536:	fa01 f303 	lsl.w	r3, r1, r3
 800b53a:	43db      	mvns	r3, r3
 800b53c:	401a      	ands	r2, r3
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	fa93 f3a3 	rbit	r3, r3
 800b548:	61fb      	str	r3, [r7, #28]
  return result;
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b554:	2320      	movs	r3, #32
 800b556:	e003      	b.n	800b560 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55a:	fab3 f383 	clz	r3, r3
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	6879      	ldr	r1, [r7, #4]
 800b564:	fa01 f303 	lsl.w	r3, r1, r3
 800b568:	431a      	orrs	r2, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 800b56e:	bf00      	nop
 800b570:	372c      	adds	r7, #44	@ 0x2c
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800b57a:	b480      	push	{r7}
 800b57c:	b085      	sub	sp, #20
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	685a      	ldr	r2, [r3, #4]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	43db      	mvns	r3, r3
 800b58e:	401a      	ands	r2, r3
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	6879      	ldr	r1, [r7, #4]
 800b594:	fb01 f303 	mul.w	r3, r1, r3
 800b598:	431a      	orrs	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	605a      	str	r2, [r3, #4]
}
 800b59e:	bf00      	nop
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b08b      	sub	sp, #44	@ 0x2c
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	689a      	ldr	r2, [r3, #8]
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	fa93 f3a3 	rbit	r3, r3
 800b5c4:	613b      	str	r3, [r7, #16]
  return result;
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d101      	bne.n	800b5d4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b5d0:	2320      	movs	r3, #32
 800b5d2:	e003      	b.n	800b5dc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	fab3 f383 	clz	r3, r3
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	005b      	lsls	r3, r3, #1
 800b5de:	2103      	movs	r1, #3
 800b5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5e4:	43db      	mvns	r3, r3
 800b5e6:	401a      	ands	r2, r3
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5ec:	6a3b      	ldr	r3, [r7, #32]
 800b5ee:	fa93 f3a3 	rbit	r3, r3
 800b5f2:	61fb      	str	r3, [r7, #28]
  return result;
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b5fe:	2320      	movs	r3, #32
 800b600:	e003      	b.n	800b60a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b604:	fab3 f383 	clz	r3, r3
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	6879      	ldr	r1, [r7, #4]
 800b60e:	fa01 f303 	lsl.w	r3, r1, r3
 800b612:	431a      	orrs	r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800b618:	bf00      	nop
 800b61a:	372c      	adds	r7, #44	@ 0x2c
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800b624:	b480      	push	{r7}
 800b626:	b08b      	sub	sp, #44	@ 0x2c
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	68da      	ldr	r2, [r3, #12]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	fa93 f3a3 	rbit	r3, r3
 800b63e:	613b      	str	r3, [r7, #16]
  return result;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b64a:	2320      	movs	r3, #32
 800b64c:	e003      	b.n	800b656 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	fab3 f383 	clz	r3, r3
 800b654:	b2db      	uxtb	r3, r3
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	2103      	movs	r1, #3
 800b65a:	fa01 f303 	lsl.w	r3, r1, r3
 800b65e:	43db      	mvns	r3, r3
 800b660:	401a      	ands	r2, r3
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	fa93 f3a3 	rbit	r3, r3
 800b66c:	61fb      	str	r3, [r7, #28]
  return result;
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b678:	2320      	movs	r3, #32
 800b67a:	e003      	b.n	800b684 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67e:	fab3 f383 	clz	r3, r3
 800b682:	b2db      	uxtb	r3, r3
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	fa01 f303 	lsl.w	r3, r1, r3
 800b68c:	431a      	orrs	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 800b692:	bf00      	nop
 800b694:	372c      	adds	r7, #44	@ 0x2c
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b08b      	sub	sp, #44	@ 0x2c
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	60f8      	str	r0, [r7, #12]
 800b6a6:	60b9      	str	r1, [r7, #8]
 800b6a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6a1a      	ldr	r2, [r3, #32]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	fa93 f3a3 	rbit	r3, r3
 800b6b8:	613b      	str	r3, [r7, #16]
  return result;
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b6c4:	2320      	movs	r3, #32
 800b6c6:	e003      	b.n	800b6d0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	fab3 f383 	clz	r3, r3
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	210f      	movs	r1, #15
 800b6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b6d8:	43db      	mvns	r3, r3
 800b6da:	401a      	ands	r2, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	fa93 f3a3 	rbit	r3, r3
 800b6e6:	61fb      	str	r3, [r7, #28]
  return result;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d101      	bne.n	800b6f6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b6f2:	2320      	movs	r3, #32
 800b6f4:	e003      	b.n	800b6fe <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f8:	fab3 f383 	clz	r3, r3
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	6879      	ldr	r1, [r7, #4]
 800b702:	fa01 f303 	lsl.w	r3, r1, r3
 800b706:	431a      	orrs	r2, r3
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 800b70c:	bf00      	nop
 800b70e:	372c      	adds	r7, #44	@ 0x2c
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b718:	b480      	push	{r7}
 800b71a:	b08b      	sub	sp, #44	@ 0x2c
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	0a1b      	lsrs	r3, r3, #8
 800b72c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	fa93 f3a3 	rbit	r3, r3
 800b734:	613b      	str	r3, [r7, #16]
  return result;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b740:	2320      	movs	r3, #32
 800b742:	e003      	b.n	800b74c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	fab3 f383 	clz	r3, r3
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	210f      	movs	r1, #15
 800b750:	fa01 f303 	lsl.w	r3, r1, r3
 800b754:	43db      	mvns	r3, r3
 800b756:	401a      	ands	r2, r3
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	0a1b      	lsrs	r3, r3, #8
 800b75c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	fa93 f3a3 	rbit	r3, r3
 800b764:	61fb      	str	r3, [r7, #28]
  return result;
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b770:	2320      	movs	r3, #32
 800b772:	e003      	b.n	800b77c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b776:	fab3 f383 	clz	r3, r3
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	fa01 f303 	lsl.w	r3, r1, r3
 800b784:	431a      	orrs	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 800b78a:	bf00      	nop
 800b78c:	372c      	adds	r7, #44	@ 0x2c
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b08a      	sub	sp, #40	@ 0x28
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	fa93 f3a3 	rbit	r3, r3
 800b7ac:	617b      	str	r3, [r7, #20]
  return result;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d101      	bne.n	800b7bc <LL_GPIO_Init+0x26>
    return 32U;
 800b7b8:	2320      	movs	r3, #32
 800b7ba:	e003      	b.n	800b7c4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	fab3 f383 	clz	r3, r3
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b7c6:	e058      	b.n	800b87a <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d04a      	beq.n	800b874 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d003      	beq.n	800b7ee <LL_GPIO_Init+0x58>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d10e      	bne.n	800b80c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	6a39      	ldr	r1, [r7, #32]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff fed7 	bl	800b5aa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	6819      	ldr	r1, [r3, #0]
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	461a      	mov	r2, r3
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7ff feb7 	bl	800b57a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	461a      	mov	r2, r3
 800b812:	6a39      	ldr	r1, [r7, #32]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7ff ff05 	bl	800b624 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d121      	bne.n	800b866 <LL_GPIO_Init+0xd0>
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	fa93 f3a3 	rbit	r3, r3
 800b82c:	60bb      	str	r3, [r7, #8]
  return result;
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <LL_GPIO_Init+0xa6>
    return 32U;
 800b838:	2320      	movs	r3, #32
 800b83a:	e003      	b.n	800b844 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	fab3 f383 	clz	r3, r3
 800b842:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800b844:	2b07      	cmp	r3, #7
 800b846:	d807      	bhi.n	800b858 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	695b      	ldr	r3, [r3, #20]
 800b84c:	461a      	mov	r2, r3
 800b84e:	6a39      	ldr	r1, [r7, #32]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7ff ff24 	bl	800b69e <LL_GPIO_SetAFPin_0_7>
 800b856:	e006      	b.n	800b866 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	461a      	mov	r2, r3
 800b85e:	6a39      	ldr	r1, [r7, #32]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff ff59 	bl	800b718 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	461a      	mov	r2, r3
 800b86c:	6a39      	ldr	r1, [r7, #32]
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fe46 	bl	800b500 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	3301      	adds	r3, #1
 800b878:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b880:	fa22 f303 	lsr.w	r3, r2, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d19f      	bne.n	800b7c8 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3728      	adds	r7, #40	@ 0x28
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b892:	b084      	sub	sp, #16
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	f107 001c 	add.w	r0, r7, #28
 800b8a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fd89 	bl	800c3c8 <USB_CoreReset>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b8ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	639a      	str	r2, [r3, #56]	@ 0x38
 800b8ce:	e005      	b.n	800b8dc <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8e8:	b004      	add	sp, #16
 800b8ea:	4770      	bx	lr

0800b8ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d165      	bne.n	800b9cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	4a41      	ldr	r2, [pc, #260]	@ (800ba08 <USB_SetTurnaroundTime+0x11c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d906      	bls.n	800b916 <USB_SetTurnaroundTime+0x2a>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4a40      	ldr	r2, [pc, #256]	@ (800ba0c <USB_SetTurnaroundTime+0x120>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d202      	bcs.n	800b916 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b910:	230f      	movs	r3, #15
 800b912:	617b      	str	r3, [r7, #20]
 800b914:	e062      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	4a3c      	ldr	r2, [pc, #240]	@ (800ba0c <USB_SetTurnaroundTime+0x120>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d306      	bcc.n	800b92c <USB_SetTurnaroundTime+0x40>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	4a3b      	ldr	r2, [pc, #236]	@ (800ba10 <USB_SetTurnaroundTime+0x124>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d202      	bcs.n	800b92c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b926:	230e      	movs	r3, #14
 800b928:	617b      	str	r3, [r7, #20]
 800b92a:	e057      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	4a38      	ldr	r2, [pc, #224]	@ (800ba10 <USB_SetTurnaroundTime+0x124>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d306      	bcc.n	800b942 <USB_SetTurnaroundTime+0x56>
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	4a37      	ldr	r2, [pc, #220]	@ (800ba14 <USB_SetTurnaroundTime+0x128>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d202      	bcs.n	800b942 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b93c:	230d      	movs	r3, #13
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e04c      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	4a33      	ldr	r2, [pc, #204]	@ (800ba14 <USB_SetTurnaroundTime+0x128>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d306      	bcc.n	800b958 <USB_SetTurnaroundTime+0x6c>
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	4a32      	ldr	r2, [pc, #200]	@ (800ba18 <USB_SetTurnaroundTime+0x12c>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d802      	bhi.n	800b958 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b952:	230c      	movs	r3, #12
 800b954:	617b      	str	r3, [r7, #20]
 800b956:	e041      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	4a2f      	ldr	r2, [pc, #188]	@ (800ba18 <USB_SetTurnaroundTime+0x12c>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d906      	bls.n	800b96e <USB_SetTurnaroundTime+0x82>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	4a2e      	ldr	r2, [pc, #184]	@ (800ba1c <USB_SetTurnaroundTime+0x130>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d802      	bhi.n	800b96e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b968:	230b      	movs	r3, #11
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	e036      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	4a2a      	ldr	r2, [pc, #168]	@ (800ba1c <USB_SetTurnaroundTime+0x130>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d906      	bls.n	800b984 <USB_SetTurnaroundTime+0x98>
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4a29      	ldr	r2, [pc, #164]	@ (800ba20 <USB_SetTurnaroundTime+0x134>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d802      	bhi.n	800b984 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b97e:	230a      	movs	r3, #10
 800b980:	617b      	str	r3, [r7, #20]
 800b982:	e02b      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	4a26      	ldr	r2, [pc, #152]	@ (800ba20 <USB_SetTurnaroundTime+0x134>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d906      	bls.n	800b99a <USB_SetTurnaroundTime+0xae>
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	4a25      	ldr	r2, [pc, #148]	@ (800ba24 <USB_SetTurnaroundTime+0x138>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d202      	bcs.n	800b99a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b994:	2309      	movs	r3, #9
 800b996:	617b      	str	r3, [r7, #20]
 800b998:	e020      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	4a21      	ldr	r2, [pc, #132]	@ (800ba24 <USB_SetTurnaroundTime+0x138>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d306      	bcc.n	800b9b0 <USB_SetTurnaroundTime+0xc4>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	4a20      	ldr	r2, [pc, #128]	@ (800ba28 <USB_SetTurnaroundTime+0x13c>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d802      	bhi.n	800b9b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b9aa:	2308      	movs	r3, #8
 800b9ac:	617b      	str	r3, [r7, #20]
 800b9ae:	e015      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	4a1d      	ldr	r2, [pc, #116]	@ (800ba28 <USB_SetTurnaroundTime+0x13c>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d906      	bls.n	800b9c6 <USB_SetTurnaroundTime+0xda>
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	4a1c      	ldr	r2, [pc, #112]	@ (800ba2c <USB_SetTurnaroundTime+0x140>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d202      	bcs.n	800b9c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b9c0:	2307      	movs	r3, #7
 800b9c2:	617b      	str	r3, [r7, #20]
 800b9c4:	e00a      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b9c6:	2306      	movs	r3, #6
 800b9c8:	617b      	str	r3, [r7, #20]
 800b9ca:	e007      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b9cc:	79fb      	ldrb	r3, [r7, #7]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d102      	bne.n	800b9d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b9d2:	2309      	movs	r3, #9
 800b9d4:	617b      	str	r3, [r7, #20]
 800b9d6:	e001      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b9d8:	2309      	movs	r3, #9
 800b9da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	68da      	ldr	r2, [r3, #12]
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	029b      	lsls	r3, r3, #10
 800b9f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	371c      	adds	r7, #28
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	00d8acbf 	.word	0x00d8acbf
 800ba0c:	00e4e1c0 	.word	0x00e4e1c0
 800ba10:	00f42400 	.word	0x00f42400
 800ba14:	01067380 	.word	0x01067380
 800ba18:	011a499f 	.word	0x011a499f
 800ba1c:	01312cff 	.word	0x01312cff
 800ba20:	014ca43f 	.word	0x014ca43f
 800ba24:	016e3600 	.word	0x016e3600
 800ba28:	01a6ab1f 	.word	0x01a6ab1f
 800ba2c:	01e84800 	.word	0x01e84800

0800ba30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	f023 0201 	bic.w	r2, r3, #1
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba6e:	78fb      	ldrb	r3, [r7, #3]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d115      	bne.n	800baa0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba80:	200a      	movs	r0, #10
 800ba82:	f7f6 f983 	bl	8001d8c <HAL_Delay>
      ms += 10U;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	330a      	adds	r3, #10
 800ba8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fc0b 	bl	800c2a8 <USB_GetMode>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d01e      	beq.n	800bad6 <USB_SetCurrentMode+0x84>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba9c:	d9f0      	bls.n	800ba80 <USB_SetCurrentMode+0x2e>
 800ba9e:	e01a      	b.n	800bad6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d115      	bne.n	800bad2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bab2:	200a      	movs	r0, #10
 800bab4:	f7f6 f96a 	bl	8001d8c <HAL_Delay>
      ms += 10U;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	330a      	adds	r3, #10
 800babc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fbf2 	bl	800c2a8 <USB_GetMode>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <USB_SetCurrentMode+0x84>
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2bc7      	cmp	r3, #199	@ 0xc7
 800bace:	d9f0      	bls.n	800bab2 <USB_SetCurrentMode+0x60>
 800bad0:	e001      	b.n	800bad6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e005      	b.n	800bae2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2bc8      	cmp	r3, #200	@ 0xc8
 800bada:	d101      	bne.n	800bae0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800badc:	2301      	movs	r3, #1
 800bade:	e000      	b.n	800bae2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800baec:	b084      	sub	sp, #16
 800baee:	b580      	push	{r7, lr}
 800baf0:	b086      	sub	sp, #24
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bafa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb06:	2300      	movs	r3, #0
 800bb08:	613b      	str	r3, [r7, #16]
 800bb0a:	e009      	b.n	800bb20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	3340      	adds	r3, #64	@ 0x40
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	2200      	movs	r2, #0
 800bb18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	613b      	str	r3, [r7, #16]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	2b0e      	cmp	r3, #14
 800bb24:	d9f2      	bls.n	800bb0c <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d11c      	bne.n	800bb68 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb3c:	f043 0302 	orr.w	r3, r3, #2
 800bb40:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb46:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	e005      	b.n	800bb74 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb80:	2103      	movs	r1, #3
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f95e 	bl	800be44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb88:	2110      	movs	r1, #16
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f8fa 	bl	800bd84 <USB_FlushTxFifo>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f924 	bl	800bde8 <USB_FlushRxFifo>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbc8:	461a      	mov	r2, r3
 800bbca:	2300      	movs	r3, #0
 800bbcc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbce:	2300      	movs	r3, #0
 800bbd0:	613b      	str	r3, [r7, #16]
 800bbd2:	e043      	b.n	800bc5c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbe6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbea:	d118      	bne.n	800bc1e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10a      	bne.n	800bc08 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	e013      	b.n	800bc30 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc14:	461a      	mov	r2, r3
 800bc16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bc1a:	6013      	str	r3, [r2, #0]
 800bc1c:	e008      	b.n	800bc30 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	015a      	lsls	r2, r3, #5
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4413      	add	r3, r2
 800bc26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	015a      	lsls	r2, r3, #5
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	4413      	add	r3, r2
 800bc38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	2300      	movs	r3, #0
 800bc40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	015a      	lsls	r2, r3, #5
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4413      	add	r3, r2
 800bc4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	613b      	str	r3, [r7, #16]
 800bc5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bc60:	461a      	mov	r2, r3
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d3b5      	bcc.n	800bbd4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	613b      	str	r3, [r7, #16]
 800bc6c:	e043      	b.n	800bcf6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	015a      	lsls	r2, r3, #5
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc84:	d118      	bne.n	800bcb8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	015a      	lsls	r2, r3, #5
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4413      	add	r3, r2
 800bc94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc98:	461a      	mov	r2, r3
 800bc9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc9e:	6013      	str	r3, [r2, #0]
 800bca0:	e013      	b.n	800bcca <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	015a      	lsls	r2, r3, #5
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	e008      	b.n	800bcca <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	015a      	lsls	r2, r3, #5
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	015a      	lsls	r2, r3, #5
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	2300      	movs	r3, #0
 800bcda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	015a      	lsls	r2, r3, #5
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	4413      	add	r3, r2
 800bce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bce8:	461a      	mov	r2, r3
 800bcea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bcee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	613b      	str	r3, [r7, #16]
 800bcf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d3b5      	bcc.n	800bc6e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bd22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d105      	bne.n	800bd38 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	f043 0210 	orr.w	r2, r3, #16
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	699a      	ldr	r2, [r3, #24]
 800bd3c:	4b10      	ldr	r3, [pc, #64]	@ (800bd80 <USB_DevInit+0x294>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d005      	beq.n	800bd58 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	699b      	ldr	r3, [r3, #24]
 800bd50:	f043 0208 	orr.w	r2, r3, #8
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d107      	bne.n	800bd70 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd68:	f043 0304 	orr.w	r3, r3, #4
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3718      	adds	r7, #24
 800bd76:	46bd      	mov	sp, r7
 800bd78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd7c:	b004      	add	sp, #16
 800bd7e:	4770      	bx	lr
 800bd80:	803c3800 	.word	0x803c3800

0800bd84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3301      	adds	r3, #1
 800bd96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd9e:	d901      	bls.n	800bda4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bda0:	2303      	movs	r3, #3
 800bda2:	e01b      	b.n	800bddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	daf2      	bge.n	800bd92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	019b      	lsls	r3, r3, #6
 800bdb4:	f043 0220 	orr.w	r2, r3, #32
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdc8:	d901      	bls.n	800bdce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e006      	b.n	800bddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	f003 0320 	and.w	r3, r3, #32
 800bdd6:	2b20      	cmp	r3, #32
 800bdd8:	d0f0      	beq.n	800bdbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be00:	d901      	bls.n	800be06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be02:	2303      	movs	r3, #3
 800be04:	e018      	b.n	800be38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	daf2      	bge.n	800bdf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2210      	movs	r2, #16
 800be16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	3301      	adds	r3, #1
 800be1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be24:	d901      	bls.n	800be2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be26:	2303      	movs	r3, #3
 800be28:	e006      	b.n	800be38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	f003 0310 	and.w	r3, r3, #16
 800be32:	2b10      	cmp	r3, #16
 800be34:	d0f0      	beq.n	800be18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	460b      	mov	r3, r1
 800be4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	68f9      	ldr	r1, [r7, #12]
 800be60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be64:	4313      	orrs	r3, r2
 800be66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800be76:	b480      	push	{r7}
 800be78:	b087      	sub	sp, #28
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	f003 0306 	and.w	r3, r3, #6
 800be8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d102      	bne.n	800be9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800be96:	2300      	movs	r3, #0
 800be98:	75fb      	strb	r3, [r7, #23]
 800be9a:	e00a      	b.n	800beb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d002      	beq.n	800bea8 <USB_GetDevSpeed+0x32>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b06      	cmp	r3, #6
 800bea6:	d102      	bne.n	800beae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bea8:	2302      	movs	r3, #2
 800beaa:	75fb      	strb	r3, [r7, #23]
 800beac:	e001      	b.n	800beb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800beae:	230f      	movs	r3, #15
 800beb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	371c      	adds	r7, #28
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800beca:	2300      	movs	r3, #0
 800becc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	785b      	ldrb	r3, [r3, #1]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d14a      	bne.n	800bf74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	015a      	lsls	r2, r3, #5
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	4413      	add	r3, r2
 800bee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bef2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bef6:	f040 8086 	bne.w	800c006 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	4413      	add	r3, r2
 800bf04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	7812      	ldrb	r2, [r2, #0]
 800bf0e:	0151      	lsls	r1, r2, #5
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	440a      	add	r2, r1
 800bf14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	683a      	ldr	r2, [r7, #0]
 800bf30:	7812      	ldrb	r2, [r2, #0]
 800bf32:	0151      	lsls	r1, r2, #5
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	440a      	add	r2, r1
 800bf38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	3301      	adds	r3, #1
 800bf46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d902      	bls.n	800bf58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	75fb      	strb	r3, [r7, #23]
          break;
 800bf56:	e056      	b.n	800c006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	015a      	lsls	r2, r3, #5
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	4413      	add	r3, r2
 800bf62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf70:	d0e7      	beq.n	800bf42 <USB_EPStopXfer+0x82>
 800bf72:	e048      	b.n	800c006 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	015a      	lsls	r2, r3, #5
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf8c:	d13b      	bne.n	800c006 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	7812      	ldrb	r2, [r2, #0]
 800bfa2:	0151      	lsls	r1, r2, #5
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	440a      	add	r2, r1
 800bfa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bfb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	015a      	lsls	r2, r3, #5
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	4413      	add	r3, r2
 800bfbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	7812      	ldrb	r2, [r2, #0]
 800bfc6:	0151      	lsls	r1, r2, #5
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	440a      	add	r2, r1
 800bfcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bfd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d902      	bls.n	800bfec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	75fb      	strb	r3, [r7, #23]
          break;
 800bfea:	e00c      	b.n	800c006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c004:	d0e7      	beq.n	800bfd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c006:	7dfb      	ldrb	r3, [r7, #23]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	371c      	adds	r7, #28
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c014:	b480      	push	{r7}
 800c016:	b089      	sub	sp, #36	@ 0x24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	4611      	mov	r1, r2
 800c020:	461a      	mov	r2, r3
 800c022:	460b      	mov	r3, r1
 800c024:	71fb      	strb	r3, [r7, #7]
 800c026:	4613      	mov	r3, r2
 800c028:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c032:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c036:	2b00      	cmp	r3, #0
 800c038:	d123      	bne.n	800c082 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c03a:	88bb      	ldrh	r3, [r7, #4]
 800c03c:	3303      	adds	r3, #3
 800c03e:	089b      	lsrs	r3, r3, #2
 800c040:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c042:	2300      	movs	r3, #0
 800c044:	61bb      	str	r3, [r7, #24]
 800c046:	e018      	b.n	800c07a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c048:	79fb      	ldrb	r3, [r7, #7]
 800c04a:	031a      	lsls	r2, r3, #12
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c054:	461a      	mov	r2, r3
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	3301      	adds	r3, #1
 800c060:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	3301      	adds	r3, #1
 800c066:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	3301      	adds	r3, #1
 800c06c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	3301      	adds	r3, #1
 800c072:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	3301      	adds	r3, #1
 800c078:	61bb      	str	r3, [r7, #24]
 800c07a:	69ba      	ldr	r2, [r7, #24]
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d3e2      	bcc.n	800c048 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3724      	adds	r7, #36	@ 0x24
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c090:	b480      	push	{r7}
 800c092:	b08b      	sub	sp, #44	@ 0x2c
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	4613      	mov	r3, r2
 800c09c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c0a6:	88fb      	ldrh	r3, [r7, #6]
 800c0a8:	089b      	lsrs	r3, r3, #2
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c0ae:	88fb      	ldrh	r3, [r7, #6]
 800c0b0:	f003 0303 	and.w	r3, r3, #3
 800c0b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	623b      	str	r3, [r7, #32]
 800c0ba:	e014      	b.n	800c0e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c6:	601a      	str	r2, [r3, #0]
    pDest++;
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0dc:	3301      	adds	r3, #1
 800c0de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c0e0:	6a3b      	ldr	r3, [r7, #32]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	623b      	str	r3, [r7, #32]
 800c0e6:	6a3a      	ldr	r2, [r7, #32]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d3e6      	bcc.n	800c0bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c0ee:	8bfb      	ldrh	r3, [r7, #30]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d01e      	beq.n	800c132 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0fe:	461a      	mov	r2, r3
 800c100:	f107 0310 	add.w	r3, r7, #16
 800c104:	6812      	ldr	r2, [r2, #0]
 800c106:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c108:	693a      	ldr	r2, [r7, #16]
 800c10a:	6a3b      	ldr	r3, [r7, #32]
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	00db      	lsls	r3, r3, #3
 800c110:	fa22 f303 	lsr.w	r3, r2, r3
 800c114:	b2da      	uxtb	r2, r3
 800c116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c118:	701a      	strb	r2, [r3, #0]
      i++;
 800c11a:	6a3b      	ldr	r3, [r7, #32]
 800c11c:	3301      	adds	r3, #1
 800c11e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c122:	3301      	adds	r3, #1
 800c124:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c126:	8bfb      	ldrh	r3, [r7, #30]
 800c128:	3b01      	subs	r3, #1
 800c12a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c12c:	8bfb      	ldrh	r3, [r7, #30]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1ea      	bne.n	800c108 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c134:	4618      	mov	r0, r3
 800c136:	372c      	adds	r7, #44	@ 0x2c
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c15a:	f023 0303 	bic.w	r3, r3, #3
 800c15e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c16e:	f043 0302 	orr.w	r3, r3, #2
 800c172:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c182:	b480      	push	{r7}
 800c184:	b085      	sub	sp, #20
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	4013      	ands	r3, r2
 800c198:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c19a:	68fb      	ldr	r3, [r7, #12]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1c4:	69db      	ldr	r3, [r3, #28]
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	0c1b      	lsrs	r3, r3, #16
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3714      	adds	r7, #20
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1ee:	699b      	ldr	r3, [r3, #24]
 800c1f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1f8:	69db      	ldr	r3, [r3, #28]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	b29b      	uxth	r3, r3
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	4013      	ands	r3, r2
 800c23c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c23e:	68bb      	ldr	r3, [r7, #8]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c26c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c26e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c270:	78fb      	ldrb	r3, [r7, #3]
 800c272:	f003 030f 	and.w	r3, r3, #15
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	fa22 f303 	lsr.w	r3, r2, r3
 800c27c:	01db      	lsls	r3, r3, #7
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	4313      	orrs	r3, r2
 800c284:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c286:	78fb      	ldrb	r3, [r7, #3]
 800c288:	015a      	lsls	r2, r3, #5
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	4413      	add	r3, r2
 800c28e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	4013      	ands	r3, r2
 800c298:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c29a:	68bb      	ldr	r3, [r7, #8]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	371c      	adds	r7, #28
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	695b      	ldr	r3, [r3, #20]
 800c2b4:	f003 0301 	and.w	r3, r3, #1
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2de:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c2e2:	f023 0307 	bic.w	r3, r3, #7
 800c2e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
	...

0800c30c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	460b      	mov	r3, r1
 800c316:	607a      	str	r2, [r7, #4]
 800c318:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	333c      	adds	r3, #60	@ 0x3c
 800c322:	3304      	adds	r3, #4
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	4a26      	ldr	r2, [pc, #152]	@ (800c3c4 <USB_EP0_OutStart+0xb8>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d90a      	bls.n	800c346 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c33c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c340:	d101      	bne.n	800c346 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	e037      	b.n	800c3b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c34c:	461a      	mov	r2, r3
 800c34e:	2300      	movs	r3, #0
 800c350:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c374:	f043 0318 	orr.w	r3, r3, #24
 800c378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c388:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c38c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c38e:	7afb      	ldrb	r3, [r7, #11]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d10f      	bne.n	800c3b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c39a:	461a      	mov	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	697a      	ldr	r2, [r7, #20]
 800c3aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c3b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	371c      	adds	r7, #28
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	4f54300a 	.word	0x4f54300a

0800c3c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c3e0:	d901      	bls.n	800c3e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e01b      	b.n	800c41e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	daf2      	bge.n	800c3d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	f043 0201 	orr.w	r2, r3, #1
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3301      	adds	r3, #1
 800c402:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c40a:	d901      	bls.n	800c410 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e006      	b.n	800c41e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	f003 0301 	and.w	r3, r3, #1
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d0f0      	beq.n	800c3fe <USB_CoreReset+0x36>

  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <memset>:
 800c42a:	4402      	add	r2, r0
 800c42c:	4603      	mov	r3, r0
 800c42e:	4293      	cmp	r3, r2
 800c430:	d100      	bne.n	800c434 <memset+0xa>
 800c432:	4770      	bx	lr
 800c434:	f803 1b01 	strb.w	r1, [r3], #1
 800c438:	e7f9      	b.n	800c42e <memset+0x4>
	...

0800c43c <__libc_init_array>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	4d0d      	ldr	r5, [pc, #52]	@ (800c474 <__libc_init_array+0x38>)
 800c440:	2600      	movs	r6, #0
 800c442:	4c0d      	ldr	r4, [pc, #52]	@ (800c478 <__libc_init_array+0x3c>)
 800c444:	1b64      	subs	r4, r4, r5
 800c446:	10a4      	asrs	r4, r4, #2
 800c448:	42a6      	cmp	r6, r4
 800c44a:	d109      	bne.n	800c460 <__libc_init_array+0x24>
 800c44c:	4d0b      	ldr	r5, [pc, #44]	@ (800c47c <__libc_init_array+0x40>)
 800c44e:	2600      	movs	r6, #0
 800c450:	4c0b      	ldr	r4, [pc, #44]	@ (800c480 <__libc_init_array+0x44>)
 800c452:	f000 f817 	bl	800c484 <_init>
 800c456:	1b64      	subs	r4, r4, r5
 800c458:	10a4      	asrs	r4, r4, #2
 800c45a:	42a6      	cmp	r6, r4
 800c45c:	d105      	bne.n	800c46a <__libc_init_array+0x2e>
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	f855 3b04 	ldr.w	r3, [r5], #4
 800c464:	3601      	adds	r6, #1
 800c466:	4798      	blx	r3
 800c468:	e7ee      	b.n	800c448 <__libc_init_array+0xc>
 800c46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c46e:	3601      	adds	r6, #1
 800c470:	4798      	blx	r3
 800c472:	e7f2      	b.n	800c45a <__libc_init_array+0x1e>
 800c474:	0800c5a4 	.word	0x0800c5a4
 800c478:	0800c5a4 	.word	0x0800c5a4
 800c47c:	0800c5a4 	.word	0x0800c5a4
 800c480:	0800c5a8 	.word	0x0800c5a8

0800c484 <_init>:
 800c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c486:	bf00      	nop
 800c488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c48a:	bc08      	pop	{r3}
 800c48c:	469e      	mov	lr, r3
 800c48e:	4770      	bx	lr

0800c490 <_fini>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	bf00      	nop
 800c494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c496:	bc08      	pop	{r3}
 800c498:	469e      	mov	lr, r3
 800c49a:	4770      	bx	lr
