
DeviceProcessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba8c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800bcc4  0800bcc4  0000ccc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bdc4  0800bdc4  0000cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bdcc  0800bdcc  0000cdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bdd0  0800bdd0  0000cdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  0800bdd4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000085c  2000000c  0800bddd  0000d00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000868  0800bddd  0000d868  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021a81  00000000  00000000  0000d03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003cbb  00000000  00000000  0002eac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c10  00000000  00000000  00032780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015d6  00000000  00000000  00034390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038fa9  00000000  00000000  00035966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023a5b  00000000  00000000  0006e90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f992  00000000  00000000  0009236a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00201cfc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a80  00000000  00000000  00201d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  002097c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bcac 	.word	0x0800bcac

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	0800bcac 	.word	0x0800bcac

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800059e:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b4:	68fb      	ldr	r3, [r7, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	46020c00 	.word	0x46020c00

080005c8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005d6:	4909      	ldr	r1, [pc, #36]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	46020c00 	.word	0x46020c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint16_t dmaValCheck[500];
  for(int i = 0; i < 500; i++){
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 800060e:	e00e      	b.n	800062e <main+0x2e>
	  dmaValCheck[i] = 0xbeef;
 8000610:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000614:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8000618:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 800061c:	f64b 61ef 	movw	r1, #48879	@ 0xbeef
 8000620:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(int i = 0; i < 500; i++){
 8000624:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8000628:	3301      	adds	r3, #1
 800062a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 800062e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8000632:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000636:	dbeb      	blt.n	8000610 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f001 f9d8 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f86e 	bl	800071c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000640:	f000 f8d7 	bl	80007f2 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 fc8a 	bl	8000f5c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000648:	f000 f93a 	bl	80008c0 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 800064c:	f000 f8e0 	bl	8000810 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000650:	f000 f956 	bl	8000900 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8000654:	f000 fbce 	bl	8000df4 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000658:	f000 fc02 	bl	8000e60 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800065c:	f000 f964 	bl	8000928 <MX_SPI1_Init>
  MX_FLASH_Init();
 8000660:	f000 f91c 	bl	800089c <MX_FLASH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000664:	f000 fc48 	bl	8000ef8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM8_Init();
 8000668:	f000 f9ce 	bl	8000a08 <MX_TIM8_Init>
  MX_TIM15_Init();
 800066c:	f000 fa7c 	bl	8000b68 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000670:	f000 facc 	bl	8000c0c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000674:	f000 fb44 	bl	8000d00 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  TIM8->ARR = 40-1;
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <main+0xf8>)
 800067a:	2227      	movs	r2, #39	@ 0x27
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM8->CCR1 = TIM8->ARR/2;
 800067e:	4b1e      	ldr	r3, [pc, #120]	@ (80006f8 <main+0xf8>)
 8000680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000682:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <main+0xf8>)
 8000684:	085b      	lsrs	r3, r3, #1
 8000686:	6353      	str	r3, [r2, #52]	@ 0x34
  TIM16->ARR = 10-1;
 8000688:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <main+0xfc>)
 800068a:	2209      	movs	r2, #9
 800068c:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM16->CCR1 = TIM16->ARR/2;
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <main+0xfc>)
 8000690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000692:	4a1a      	ldr	r2, [pc, #104]	@ (80006fc <main+0xfc>)
 8000694:	085b      	lsrs	r3, r3, #1
 8000696:	6353      	str	r3, [r2, #52]	@ 0x34
  TIM17->ARR = 160-1;
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <main+0x100>)
 800069a:	229f      	movs	r2, #159	@ 0x9f
 800069c:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM17->CCR1 = TIM17->ARR/2;
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <main+0x100>)
 80006a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a2:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <main+0x100>)
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	6353      	str	r3, [r2, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80006a8:	2100      	movs	r1, #0
 80006aa:	4816      	ldr	r0, [pc, #88]	@ (8000704 <main+0x104>)
 80006ac:	f008 fb74 	bl	8008d98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4815      	ldr	r0, [pc, #84]	@ (8000708 <main+0x108>)
 80006b4:	f008 fb70 	bl	8008d98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80006b8:	2100      	movs	r1, #0
 80006ba:	4814      	ldr	r0, [pc, #80]	@ (800070c <main+0x10c>)
 80006bc:	f008 fb6c 	bl	8008d98 <HAL_TIM_PWM_Start>
  TIM15->ARR = 20-1;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <main+0x110>)
 80006c2:	2213      	movs	r2, #19
 80006c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM15->CCR1 = TIM15->ARR/2;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <main+0x110>)
 80006c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ca:	4a11      	ldr	r2, [pc, #68]	@ (8000710 <main+0x110>)
 80006cc:	085b      	lsrs	r3, r3, #1
 80006ce:	6353      	str	r3, [r2, #52]	@ 0x34
  TIM15->CR1 = TIM15->CR1 | 0x1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <main+0x110>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <main+0x110>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]
  TIM16->DIER = TIM_DIER_UDE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <main+0xfc>)
 80006de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006e2:	60da      	str	r2, [r3, #12]
  HAL_DMA_Start_IT(&handle_GPDMA1_Channel12,(uint32_t)&GPIOE->IDR,(uint32_t)&dmaValCheck,500*sizeof(uint16_t));
 80006e4:	1d3a      	adds	r2, r7, #4
 80006e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ea:	490a      	ldr	r1, [pc, #40]	@ (8000714 <main+0x114>)
 80006ec:	480a      	ldr	r0, [pc, #40]	@ (8000718 <main+0x118>)
 80006ee:	f002 f8ef 	bl	80028d0 <HAL_DMA_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <main+0xf2>
 80006f6:	bf00      	nop
 80006f8:	40013400 	.word	0x40013400
 80006fc:	40014400 	.word	0x40014400
 8000700:	40014800 	.word	0x40014800
 8000704:	20000144 	.word	0x20000144
 8000708:	200001dc 	.word	0x200001dc
 800070c:	20000228 	.word	0x20000228
 8000710:	40014000 	.word	0x40014000
 8000714:	42021010 	.word	0x42021010
 8000718:	20000274 	.word	0x20000274

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09e      	sub	sp, #120	@ 0x78
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	2260      	movs	r2, #96	@ 0x60
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f00b fa91 	bl	800bc52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
 800073e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000740:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000744:	f004 f876 	bl	8004834 <HAL_PWREx_ControlVoltageScaling>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800074e:	f000 fd33 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000752:	2332      	movs	r3, #50	@ 0x32
 8000754:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800075c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000762:	2310      	movs	r3, #16
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000766:	2301      	movs	r3, #1
 8000768:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800076a:	2310      	movs	r3, #16
 800076c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800076e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000778:	2301      	movs	r3, #1
 800077a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000784:	2350      	movs	r3, #80	@ 0x50
 8000786:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000794:	2300      	movs	r3, #0
 8000796:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0318 	add.w	r3, r7, #24
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 f953 	bl	8004a4c <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 fd04 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	231f      	movs	r3, #31
 80007b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2303      	movs	r3, #3
 80007b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	2104      	movs	r1, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f005 f819 	bl	8005804 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007d8:	f000 fcee 	bl	80011b8 <Error_Handler>
  }

  /** MCO configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 80007dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e0:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80007e4:	2000      	movs	r0, #0
 80007e6:	f005 f9ff 	bl	8005be8 <HAL_RCC_MCOConfig>
}
 80007ea:	bf00      	nop
 80007ec:	3778      	adds	r7, #120	@ 0x78
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80007f6:	f004 f909 	bl	8004a0c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80007fa:	2002      	movs	r0, #2
 80007fc:	f004 f8a6 	bl	800494c <HAL_PWREx_ConfigSupply>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000806:	f000 fcd7 	bl	80011b8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000816:	4a20      	ldr	r2, [pc, #128]	@ (8000898 <MX_ADC1_Init+0x88>)
 8000818:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0x84>)
 800081c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000820:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_ADC1_Init+0x84>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000836:	2204      	movs	r2, #4
 8000838:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_ADC1_Init+0x84>)
 800083c:	2200      	movs	r2, #0
 800083e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000842:	2201      	movs	r2, #1
 8000844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_ADC1_Init+0x84>)
 800084a:	2201      	movs	r2, #1
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000860:	2200      	movs	r2, #0
 8000862:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000866:	2200      	movs	r2, #0
 8000868:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_ADC1_Init+0x84>)
 800086c:	2200      	movs	r2, #0
 800086e:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000872:	2200      	movs	r2, #0
 8000874:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_ADC1_Init+0x84>)
 8000880:	f001 fa9c 	bl	8001dbc <HAL_ADC_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800088a:	f000 fc95 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000028 	.word	0x20000028
 8000898:	42028000 	.word	0x42028000

0800089c <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 80008a0:	f002 fcb8 	bl	8003214 <HAL_FLASH_Unlock>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 80008aa:	f000 fc85 	bl	80011b8 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80008ae:	f002 fcd3 	bl	8003258 <HAL_FLASH_Lock>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 80008b8:	f000 fc7e 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <MX_GPDMA1_Init+0x3c>)
 80008c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008cc:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <MX_GPDMA1_Init+0x3c>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_GPDMA1_Init+0x3c>)
 80008d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2054      	movs	r0, #84	@ 0x54
 80008ea:	f001 fde9 	bl	80024c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80008ee:	2054      	movs	r0, #84	@ 0x54
 80008f0:	f001 fe00 	bl	80024f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	46020c00 	.word	0x46020c00

08000900 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000904:	2000      	movs	r0, #0
 8000906:	f002 feed 	bl	80036e4 <HAL_ICACHE_ConfigAssociativityMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000910:	f000 fc52 	bl	80011b8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000914:	f002 ff06 	bl	8003724 <HAL_ICACHE_Enable>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800091e:	f000 fc4b 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000938:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 800093a:	4a32      	ldr	r2, [pc, #200]	@ (8000a04 <MX_SPI1_Init+0xdc>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000940:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b2e      	ldr	r3, [pc, #184]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 800094e:	2207      	movs	r2, #7
 8000950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000952:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000954:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000958:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095a:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000960:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000962:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000966:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096e:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097a:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000982:	2207      	movs	r2, #7
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000986:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000988:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800098e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000990:	2200      	movs	r2, #0
 8000992:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000994:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 8000996:	2200      	movs	r2, #0
 8000998:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800099a:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 800099c:	2200      	movs	r2, #0
 800099e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009a6:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009b2:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c4:	480e      	ldr	r0, [pc, #56]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 80009c6:	f007 ffbd 	bl	8008944 <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 80009d0:	f000 fbf2 	bl	80011b8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80009d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009dc:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <MX_SPI1_Init+0xd8>)
 80009e8:	f008 f8dd 	bl	8008ba6 <HAL_SPIEx_SetConfigAutonomousMode>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80009f2:	f000 fbe1 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000b4 	.word	0x200000b4
 8000a04:	40013000 	.word	0x40013000

08000a08 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b09c      	sub	sp, #112	@ 0x70
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2234      	movs	r2, #52	@ 0x34
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00b f905 	bl	800bc52 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a48:	4b45      	ldr	r3, [pc, #276]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000a4a:	4a46      	ldr	r2, [pc, #280]	@ (8000b64 <MX_TIM8_Init+0x15c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a4e:	4b44      	ldr	r3, [pc, #272]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b42      	ldr	r3, [pc, #264]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a5a:	4b41      	ldr	r3, [pc, #260]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000a5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a60:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b3f      	ldr	r3, [pc, #252]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a68:	4b3d      	ldr	r3, [pc, #244]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a74:	483a      	ldr	r0, [pc, #232]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000a76:	f008 f8d7 	bl	8008c28 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000a80:	f000 fb9a 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a88:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4833      	ldr	r0, [pc, #204]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000a92:	f008 fbe7 	bl	8009264 <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000a9c:	f000 fb8c 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000aa0:	482f      	ldr	r0, [pc, #188]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000aa2:	f008 f918 	bl	8008cd6 <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000aac:	f000 fb84 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000abc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4827      	ldr	r0, [pc, #156]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000ac4:	f009 fa6e 	bl	8009fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000ace:	f000 fb73 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad2:	2360      	movs	r3, #96	@ 0x60
 8000ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ada:	2300      	movs	r3, #0
 8000adc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	481a      	ldr	r0, [pc, #104]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000af8:	f008 faa0 	bl	800903c <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000b02:	f000 fb59 	bl	80011b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000b44:	f009 faf0 	bl	800a128 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8000b4e:	f000 fb33 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b52:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <MX_TIM8_Init+0x158>)
 8000b54:	f000 fd16 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000b58:	bf00      	nop
 8000b5a:	3770      	adds	r7, #112	@ 0x70
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000144 	.word	0x20000144
 8000b64:	40013400 	.word	0x40013400

08000b68 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000b88:	4a1f      	ldr	r2, [pc, #124]	@ (8000c08 <MX_TIM15_Init+0xa0>)
 8000b8a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000b9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b9e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bac:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000bae:	2280      	movs	r2, #128	@ 0x80
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000bb2:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000bb4:	f008 f838 	bl	8008c28 <HAL_TIM_Base_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000bbe:	f000 fafb 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000bd0:	f008 fb48 	bl	8009264 <HAL_TIM_ConfigClockSource>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000bda:	f000 faed 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <MX_TIM15_Init+0x9c>)
 8000bec:	f009 f9da 	bl	8009fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000bf6:	f000 fadf 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000190 	.word	0x20000190
 8000c08:	40014000 	.word	0x40014000

08000c0c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	@ 0x50
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2234      	movs	r2, #52	@ 0x34
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f00b f810 	bl	800bc52 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c32:	4b31      	ldr	r3, [pc, #196]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000c34:	4a31      	ldr	r2, [pc, #196]	@ (8000cfc <MX_TIM16_Init+0xf0>)
 8000c36:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000c38:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000c44:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000c46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c4a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c52:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c5e:	4826      	ldr	r0, [pc, #152]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000c60:	f007 ffe2 	bl	8008c28 <HAL_TIM_Base_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000c6a:	f000 faa5 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000c6e:	4822      	ldr	r0, [pc, #136]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000c70:	f008 f831 	bl	8008cd6 <HAL_TIM_PWM_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000c7a:	f000 fa9d 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7e:	2360      	movs	r3, #96	@ 0x60
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4815      	ldr	r0, [pc, #84]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000ca4:	f008 f9ca 	bl	800903c <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cae:	f000 fa83 	bl	80011b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000cda:	f009 fa25 	bl	800a128 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000ce4:	f000 fa68 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <MX_TIM16_Init+0xec>)
 8000cea:	f000 fc4b 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	@ 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001dc 	.word	0x200001dc
 8000cfc:	40014400 	.word	0x40014400

08000d00 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	@ 0x50
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]
 8000d18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2234      	movs	r2, #52	@ 0x34
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00a ff96 	bl	800bc52 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d26:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <MX_TIM17_Init+0xf0>)
 8000d2a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d38:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d3e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d46:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d4c:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d4e:	2280      	movs	r2, #128	@ 0x80
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d52:	4826      	ldr	r0, [pc, #152]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d54:	f007 ff68 	bl	8008c28 <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d5e:	f000 fa2b 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d62:	4822      	ldr	r0, [pc, #136]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d64:	f007 ffb7 	bl	8008cd6 <HAL_TIM_PWM_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000d6e:	f000 fa23 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d72:	2360      	movs	r3, #96	@ 0x60
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	4815      	ldr	r0, [pc, #84]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000d98:	f008 f950 	bl	800903c <HAL_TIM_PWM_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000da2:	f000 fa09 	bl	80011b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4807      	ldr	r0, [pc, #28]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000dce:	f009 f9ab 	bl	800a128 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000dd8:	f000 f9ee 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ddc:	4803      	ldr	r0, [pc, #12]	@ (8000dec <MX_TIM17_Init+0xec>)
 8000dde:	f000 fbd1 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	3750      	adds	r7, #80	@ 0x50
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000228 	.word	0x20000228
 8000df0:	40014800 	.word	0x40014800

08000df4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000e0a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000e0e:	f7ff fbdb 	bl	80005c8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fbbc 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fbb9 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e24:	2303      	movs	r3, #3
 8000e26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <MX_UCPD1_Init+0x64>)
 8000e32:	f00a f8c4 	bl	800afbe <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <MX_UCPD1_Init+0x68>)
 8000e4a:	f00a f8b8 	bl	800afbe <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	42020400 	.word	0x42020400
 8000e5c:	42020000 	.word	0x42020000

08000e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e64:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e66:	4a23      	ldr	r2, [pc, #140]	@ (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea8:	4811      	ldr	r0, [pc, #68]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000eaa:	f009 fa29 	bl	800a300 <HAL_UART_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000eb4:	f000 f980 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000ebc:	f009 fe6a 	bl	800ab94 <HAL_UARTEx_SetTxFifoThreshold>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ec6:	f000 f977 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4808      	ldr	r0, [pc, #32]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000ece:	f009 fe9f 	bl	800ac10 <HAL_UARTEx_SetRxFifoThreshold>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed8:	f000 f96e 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <MX_USART1_UART_Init+0x90>)
 8000ede:	f009 fe20 	bl	800ab22 <HAL_UARTEx_DisableFifoMode>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f000 f966 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200002ec 	.word	0x200002ec
 8000ef4:	40013800 	.word	0x40013800

08000ef8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000efc:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000efe:	4a16      	ldr	r2, [pc, #88]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000f00:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f04:	2206      	movs	r2, #6
 8000f06:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f10:	2202      	movs	r2, #2
 8000f12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f40:	f002 fc00 	bl	8003744 <HAL_PCD_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f4a:	f000 f935 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000380 	.word	0x20000380
 8000f58:	42040000 	.word	0x42040000

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	4b87      	ldr	r3, [pc, #540]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f78:	4a85      	ldr	r2, [pc, #532]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f82:	4b83      	ldr	r3, [pc, #524]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	4b7f      	ldr	r3, [pc, #508]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f96:	4a7e      	ldr	r2, [pc, #504]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fa0:	4b7b      	ldr	r3, [pc, #492]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	4b78      	ldr	r3, [pc, #480]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb4:	4a76      	ldr	r2, [pc, #472]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fbe:	4b74      	ldr	r3, [pc, #464]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b70      	ldr	r3, [pc, #448]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd2:	4a6f      	ldr	r2, [pc, #444]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b69      	ldr	r3, [pc, #420]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff0:	4a67      	ldr	r2, [pc, #412]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ffa:	4b65      	ldr	r3, [pc, #404]	@ (8001190 <MX_GPIO_Init+0x234>)
 8000ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	4b61      	ldr	r3, [pc, #388]	@ (8001190 <MX_GPIO_Init+0x234>)
 800100a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800100e:	4a60      	ldr	r2, [pc, #384]	@ (8001190 <MX_GPIO_Init+0x234>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001018:	4b5d      	ldr	r3, [pc, #372]	@ (8001190 <MX_GPIO_Init+0x234>)
 800101a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001026:	4b5a      	ldr	r3, [pc, #360]	@ (8001190 <MX_GPIO_Init+0x234>)
 8001028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800102c:	4a58      	ldr	r2, [pc, #352]	@ (8001190 <MX_GPIO_Init+0x234>)
 800102e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001032:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001036:	4b56      	ldr	r3, [pc, #344]	@ (8001190 <MX_GPIO_Init+0x234>)
 8001038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800103c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 614a 	mov.w	r1, #3232	@ 0xca0
 800104a:	4852      	ldr	r0, [pc, #328]	@ (8001194 <MX_GPIO_Init+0x238>)
 800104c:	f002 faf6 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2104      	movs	r1, #4
 8001054:	4850      	ldr	r0, [pc, #320]	@ (8001198 <MX_GPIO_Init+0x23c>)
 8001056:	f002 faf1 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	484f      	ldr	r0, [pc, #316]	@ (800119c <MX_GPIO_Init+0x240>)
 8001060:	f002 faec 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001064:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001068:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4849      	ldr	r0, [pc, #292]	@ (80011a0 <MX_GPIO_Init+0x244>)
 800107a:	f002 f907 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800107e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001084:	4b47      	ldr	r3, [pc, #284]	@ (80011a4 <MX_GPIO_Init+0x248>)
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4842      	ldr	r0, [pc, #264]	@ (800119c <MX_GPIO_Init+0x240>)
 8001094:	f002 f8fa 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001098:	2302      	movs	r3, #2
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109c:	4b42      	ldr	r3, [pc, #264]	@ (80011a8 <MX_GPIO_Init+0x24c>)
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4840      	ldr	r0, [pc, #256]	@ (80011ac <MX_GPIO_Init+0x250>)
 80010ac:	f002 f8ee 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|UCPD_DBn_Pin;
 80010b0:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4832      	ldr	r0, [pc, #200]	@ (8001194 <MX_GPIO_Init+0x238>)
 80010ca:	f002 f8df 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80010ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	482c      	ldr	r0, [pc, #176]	@ (8001194 <MX_GPIO_Init+0x238>)
 80010e4:	f002 f8d2 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	482c      	ldr	r0, [pc, #176]	@ (80011b0 <MX_GPIO_Init+0x254>)
 80010fe:	f002 f8c5 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001102:	2304      	movs	r3, #4
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	481f      	ldr	r0, [pc, #124]	@ (8001198 <MX_GPIO_Init+0x23c>)
 800111a:	f002 f8b7 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800111e:	2380      	movs	r3, #128	@ 0x80
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	2302      	movs	r3, #2
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4819      	ldr	r0, [pc, #100]	@ (800119c <MX_GPIO_Init+0x240>)
 8001136:	f002 f8a9 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800113a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2302      	movs	r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4817      	ldr	r0, [pc, #92]	@ (80011b4 <MX_GPIO_Init+0x258>)
 8001158:	f002 f898 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2302      	movs	r3, #2
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4808      	ldr	r0, [pc, #32]	@ (8001194 <MX_GPIO_Init+0x238>)
 8001174:	f002 f88a 	bl	800328c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	200c      	movs	r0, #12
 800117e:	f001 f99f 	bl	80024c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001182:	200c      	movs	r0, #12
 8001184:	f001 f9b6 	bl	80024f4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001188:	bf00      	nop
 800118a:	3730      	adds	r7, #48	@ 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	46020c00 	.word	0x46020c00
 8001194:	42020400 	.word	0x42020400
 8001198:	42021800 	.word	0x42021800
 800119c:	42020800 	.word	0x42020800
 80011a0:	42021000 	.word	0x42021000
 80011a4:	10210000 	.word	0x10210000
 80011a8:	10110000 	.word	0x10110000
 80011ac:	42021400 	.word	0x42021400
 80011b0:	42020c00 	.word	0x42020c00
 80011b4:	42020000 	.word	0x42020000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <Error_Handler+0x8>

080011c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <HAL_MspInit+0x38>)
 80011cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_MspInit+0x38>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_MspInit+0x38>)
 80011dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80011e8:	f003 fc20 	bl	8004a2c <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80011ec:	2004      	movs	r0, #4
 80011ee:	f001 f95c 	bl	80024aa <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	46020c00 	.word	0x46020c00

08001200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0bc      	sub	sp, #240	@ 0xf0
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	22c0      	movs	r2, #192	@ 0xc0
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f00a fd16 	bl	800bc52 <memset>
  if(hadc->Instance==ADC1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a33      	ldr	r2, [pc, #204]	@ (80012f8 <HAL_ADC_MspInit+0xf8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d15e      	bne.n	80012ee <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001230:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800123c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001240:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f004 fee3 	bl	8006014 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001254:	f7ff ffb0 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <HAL_ADC_MspInit+0xfc>)
 800125a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800125e:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <HAL_ADC_MspInit+0xfc>)
 8001260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001264:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <HAL_ADC_MspInit+0xfc>)
 800126a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800126e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <HAL_ADC_MspInit+0xfc>)
 8001278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800127c:	4a1f      	ldr	r2, [pc, #124]	@ (80012fc <HAL_ADC_MspInit+0xfc>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <HAL_ADC_MspInit+0xfc>)
 8001288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_ADC_MspInit+0xfc>)
 8001296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129a:	4a18      	ldr	r2, [pc, #96]	@ (80012fc <HAL_ADC_MspInit+0xfc>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_ADC_MspInit+0xfc>)
 80012a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80012b2:	2304      	movs	r3, #4
 80012b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b8:	2303      	movs	r3, #3
 80012ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <HAL_ADC_MspInit+0x100>)
 80012cc:	f001 ffde 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012e6:	4619      	mov	r1, r3
 80012e8:	4806      	ldr	r0, [pc, #24]	@ (8001304 <HAL_ADC_MspInit+0x104>)
 80012ea:	f001 ffcf 	bl	800328c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012ee:	bf00      	nop
 80012f0:	37f0      	adds	r7, #240	@ 0xf0
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	42028000 	.word	0x42028000
 80012fc:	46020c00 	.word	0x46020c00
 8001300:	42020800 	.word	0x42020800
 8001304:	42020400 	.word	0x42020400

08001308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0bc      	sub	sp, #240	@ 0xf0
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	22c0      	movs	r2, #192	@ 0xc0
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f00a fc92 	bl	800bc52 <memset>
  if(hspi->Instance==SPI1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a39      	ldr	r2, [pc, #228]	@ (8001418 <HAL_SPI_MspInit+0x110>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d16a      	bne.n	800140e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001338:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_HSI;
 8001344:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001348:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fe5f 	bl	8006014 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800135c:	f7ff ff2c 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001360:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <HAL_SPI_MspInit+0x114>)
 8001362:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001366:	4a2d      	ldr	r2, [pc, #180]	@ (800141c <HAL_SPI_MspInit+0x114>)
 8001368:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800136c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <HAL_SPI_MspInit+0x114>)
 8001372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b27      	ldr	r3, [pc, #156]	@ (800141c <HAL_SPI_MspInit+0x114>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001384:	4a25      	ldr	r2, [pc, #148]	@ (800141c <HAL_SPI_MspInit+0x114>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <HAL_SPI_MspInit+0x114>)
 8001390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <HAL_SPI_MspInit+0x114>)
 800139e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a2:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <HAL_SPI_MspInit+0x114>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_SPI_MspInit+0x114>)
 80013ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013ba:	23e0      	movs	r3, #224	@ 0xe0
 80013bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013d2:	2305      	movs	r3, #5
 80013d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013dc:	4619      	mov	r1, r3
 80013de:	4810      	ldr	r0, [pc, #64]	@ (8001420 <HAL_SPI_MspInit+0x118>)
 80013e0:	f001 ff54 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fc:	2305      	movs	r3, #5
 80013fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001406:	4619      	mov	r1, r3
 8001408:	4806      	ldr	r0, [pc, #24]	@ (8001424 <HAL_SPI_MspInit+0x11c>)
 800140a:	f001 ff3f 	bl	800328c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800140e:	bf00      	nop
 8001410:	37f0      	adds	r7, #240	@ 0xf0
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40013000 	.word	0x40013000
 800141c:	46020c00 	.word	0x46020c00
 8001420:	42020000 	.word	0x42020000
 8001424:	42020400 	.word	0x42020400

08001428 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a4c      	ldr	r2, [pc, #304]	@ (8001568 <HAL_TIM_Base_MspInit+0x140>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d10f      	bne.n	800145a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800143a:	4b4c      	ldr	r3, [pc, #304]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 800143c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001440:	4a4a      	ldr	r2, [pc, #296]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 8001442:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001446:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800144a:	4b48      	ldr	r3, [pc, #288]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 800144c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001458:	e081      	b.n	800155e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM15)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a44      	ldr	r2, [pc, #272]	@ (8001570 <HAL_TIM_Base_MspInit+0x148>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d10f      	bne.n	8001484 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001464:	4b41      	ldr	r3, [pc, #260]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 8001466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800146a:	4a40      	ldr	r2, [pc, #256]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001470:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001474:	4b3d      	ldr	r3, [pc, #244]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 8001476:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800147a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
}
 8001482:	e06c      	b.n	800155e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM16)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a3a      	ldr	r2, [pc, #232]	@ (8001574 <HAL_TIM_Base_MspInit+0x14c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d153      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800148e:	4b37      	ldr	r3, [pc, #220]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 8001490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001494:	4a35      	ldr	r2, [pc, #212]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 8001496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800149a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800149e:	4b33      	ldr	r3, [pc, #204]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 80014a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 80014ac:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014ae:	4a33      	ldr	r2, [pc, #204]	@ (800157c <HAL_TIM_Base_MspInit+0x154>)
 80014b0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM16_UP;
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014b4:	2253      	movs	r2, #83	@ 0x53
 80014b6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 80014c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 80014ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014d0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80014d2:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014de:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80014e0:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014e6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 80014ee:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80014fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 8001500:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 8001502:	2200      	movs	r2, #0
 8001504:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8001506:	481c      	ldr	r0, [pc, #112]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 8001508:	f001 f8b6 	bl	8002678 <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 8001512:	f7ff fe51 	bl	80011b8 <Error_Handler>
    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel12);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a17      	ldr	r2, [pc, #92]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 800151a:	621a      	str	r2, [r3, #32]
 800151c:	4a16      	ldr	r2, [pc, #88]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001522:	2110      	movs	r1, #16
 8001524:	4814      	ldr	r0, [pc, #80]	@ (8001578 <HAL_TIM_Base_MspInit+0x150>)
 8001526:	f001 fb94 	bl	8002c52 <HAL_DMA_ConfigChannelAttributes>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d016      	beq.n	800155e <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 8001530:	f7ff fe42 	bl	80011b8 <Error_Handler>
}
 8001534:	e013      	b.n	800155e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM17)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a11      	ldr	r2, [pc, #68]	@ (8001580 <HAL_TIM_Base_MspInit+0x158>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d10e      	bne.n	800155e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 8001542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001546:	4a09      	ldr	r2, [pc, #36]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_TIM_Base_MspInit+0x144>)
 8001552:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40013400 	.word	0x40013400
 800156c:	46020c00 	.word	0x46020c00
 8001570:	40014000 	.word	0x40014000
 8001574:	40014400 	.word	0x40014400
 8001578:	20000274 	.word	0x20000274
 800157c:	40020650 	.word	0x40020650
 8001580:	40014800 	.word	0x40014800

08001584 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a38      	ldr	r2, [pc, #224]	@ (8001684 <HAL_TIM_MspPostInit+0x100>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d11f      	bne.n	80015e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <HAL_TIM_MspPostInit+0x104>)
 80015a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ac:	4a36      	ldr	r2, [pc, #216]	@ (8001688 <HAL_TIM_MspPostInit+0x104>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015b6:	4b34      	ldr	r3, [pc, #208]	@ (8001688 <HAL_TIM_MspPostInit+0x104>)
 80015b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c4:	2340      	movs	r3, #64	@ 0x40
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015d4:	2303      	movs	r3, #3
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	482b      	ldr	r0, [pc, #172]	@ (800168c <HAL_TIM_MspPostInit+0x108>)
 80015e0:	f001 fe54 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80015e4:	e04a      	b.n	800167c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM16)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a29      	ldr	r2, [pc, #164]	@ (8001690 <HAL_TIM_MspPostInit+0x10c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d120      	bne.n	8001632 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	4b25      	ldr	r3, [pc, #148]	@ (8001688 <HAL_TIM_MspPostInit+0x104>)
 80015f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f6:	4a24      	ldr	r2, [pc, #144]	@ (8001688 <HAL_TIM_MspPostInit+0x104>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001600:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <HAL_TIM_MspPostInit+0x104>)
 8001602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800160e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001620:	230e      	movs	r3, #14
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	481a      	ldr	r0, [pc, #104]	@ (8001694 <HAL_TIM_MspPostInit+0x110>)
 800162c:	f001 fe2e 	bl	800328c <HAL_GPIO_Init>
}
 8001630:	e024      	b.n	800167c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM17)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a18      	ldr	r2, [pc, #96]	@ (8001698 <HAL_TIM_MspPostInit+0x114>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d11f      	bne.n	800167c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_TIM_MspPostInit+0x104>)
 800163e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001642:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <HAL_TIM_MspPostInit+0x104>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_TIM_MspPostInit+0x104>)
 800164e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800165a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 800166c:	230e      	movs	r3, #14
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	@ (8001694 <HAL_TIM_MspPostInit+0x110>)
 8001678:	f001 fe08 	bl	800328c <HAL_GPIO_Init>
}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	@ 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40013400 	.word	0x40013400
 8001688:	46020c00 	.word	0x46020c00
 800168c:	42020800 	.word	0x42020800
 8001690:	40014400 	.word	0x40014400
 8001694:	42020400 	.word	0x42020400
 8001698:	40014800 	.word	0x40014800

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b0ba      	sub	sp, #232	@ 0xe8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	22c0      	movs	r2, #192	@ 0xc0
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f00a fac8 	bl	800bc52 <memset>
  if(huart->Instance==USART1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a26      	ldr	r2, [pc, #152]	@ (8001760 <HAL_UART_MspInit+0xc4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d145      	bne.n	8001758 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016cc:	f04f 0201 	mov.w	r2, #1
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016d8:	2300      	movs	r3, #0
 80016da:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 fc97 	bl	8006014 <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80016ec:	f7ff fd64 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <HAL_UART_MspInit+0xc8>)
 80016f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001764 <HAL_UART_MspInit+0xc8>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001700:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <HAL_UART_MspInit+0xc8>)
 8001702:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_UART_MspInit+0xc8>)
 8001710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001714:	4a13      	ldr	r2, [pc, #76]	@ (8001764 <HAL_UART_MspInit+0xc8>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_UART_MspInit+0xc8>)
 8001720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800172c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001730:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800173a:	2302      	movs	r3, #2
 800173c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001746:	2307      	movs	r3, #7
 8001748:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001750:	4619      	mov	r1, r3
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <HAL_UART_MspInit+0xcc>)
 8001754:	f001 fd9a 	bl	800328c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001758:	bf00      	nop
 800175a:	37e8      	adds	r7, #232	@ 0xe8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40013800 	.word	0x40013800
 8001764:	46020c00 	.word	0x46020c00
 8001768:	42020000 	.word	0x42020000

0800176c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0bc      	sub	sp, #240	@ 0xf0
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	22c0      	movs	r2, #192	@ 0xc0
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f00a fa60 	bl	800bc52 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a3c      	ldr	r2, [pc, #240]	@ (8001888 <HAL_PCD_MspInit+0x11c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d171      	bne.n	8001880 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800179c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ae:	f107 0318 	add.w	r3, r7, #24
 80017b2:	4618      	mov	r0, r3
 80017b4:	f004 fc2e 	bl	8006014 <HAL_RCCEx_PeriphCLKConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80017be:	f7ff fcfb 	bl	80011b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b32      	ldr	r3, [pc, #200]	@ (800188c <HAL_PCD_MspInit+0x120>)
 80017c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c8:	4a30      	ldr	r2, [pc, #192]	@ (800188c <HAL_PCD_MspInit+0x120>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <HAL_PCD_MspInit+0x120>)
 80017d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80017e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80017fa:	230a      	movs	r3, #10
 80017fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001804:	4619      	mov	r1, r3
 8001806:	4822      	ldr	r0, [pc, #136]	@ (8001890 <HAL_PCD_MspInit+0x124>)
 8001808:	f001 fd40 	bl	800328c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <HAL_PCD_MspInit+0x120>)
 800180e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001812:	4a1e      	ldr	r2, [pc, #120]	@ (800188c <HAL_PCD_MspInit+0x120>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001818:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_PCD_MspInit+0x120>)
 800181e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_PCD_MspInit+0x120>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d119      	bne.n	800186c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <HAL_PCD_MspInit+0x120>)
 800183a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800183e:	4a13      	ldr	r2, [pc, #76]	@ (800188c <HAL_PCD_MspInit+0x120>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_PCD_MspInit+0x120>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001856:	f003 f8c9 	bl	80049ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <HAL_PCD_MspInit+0x120>)
 800185c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001860:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_PCD_MspInit+0x120>)
 8001862:	f023 0304 	bic.w	r3, r3, #4
 8001866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800186a:	e001      	b.n	8001870 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800186c:	f003 f8be 	bl	80049ec <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2049      	movs	r0, #73	@ 0x49
 8001876:	f000 fe23 	bl	80024c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800187a:	2049      	movs	r0, #73	@ 0x49
 800187c:	f000 fe3a 	bl	80024f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001880:	bf00      	nop
 8001882:	37f0      	adds	r7, #240	@ 0xf0
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	42040000 	.word	0x42040000
 800188c:	46020c00 	.word	0x46020c00
 8001890:	42020000 	.word	0x42020000

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <NMI_Handler+0x4>

0800189c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <MemManage_Handler+0x4>

080018ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <UsageFault_Handler+0x4>

080018bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f925 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80018f6:	2002      	movs	r0, #2
 80018f8:	f001 feb8 	bl	800366c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <OTG_FS_IRQHandler+0x10>)
 8001906:	f002 f835 	bl	8003974 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000380 	.word	0x20000380

08001914 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <GPDMA1_Channel12_IRQHandler+0x10>)
 800191a:	f001 f839 	bl	8002990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000274 	.word	0x20000274

08001928 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800192c:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <SystemInit+0x68>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001932:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <SystemInit+0x68>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800193c:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <SystemInit+0x6c>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <SystemInit+0x6c>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <SystemInit+0x6c>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <SystemInit+0x6c>)
 8001950:	2200      	movs	r2, #0
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001954:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <SystemInit+0x6c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0e      	ldr	r2, [pc, #56]	@ (8001994 <SystemInit+0x6c>)
 800195a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800195e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001962:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <SystemInit+0x6c>)
 8001966:	2200      	movs	r2, #0
 8001968:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <SystemInit+0x6c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a09      	ldr	r2, [pc, #36]	@ (8001994 <SystemInit+0x6c>)
 8001970:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001974:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <SystemInit+0x6c>)
 8001978:	2200      	movs	r2, #0
 800197a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <SystemInit+0x68>)
 800197e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001982:	609a      	str	r2, [r3, #8]
  #endif
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	46020c00 	.word	0x46020c00

08001998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019d0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800199c:	f7ff ffc4 	bl	8001928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019a2:	e003      	b.n	80019ac <LoopCopyDataInit>

080019a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019aa:	3104      	adds	r1, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019ac:	480a      	ldr	r0, [pc, #40]	@ (80019d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019ae:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80019b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019b4:	d3f6      	bcc.n	80019a4 <CopyDataInit>
	ldr	r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019b8:	e002      	b.n	80019c0 <LoopFillZerobss>

080019ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019bc:	f842 3b04 	str.w	r3, [r2], #4

080019c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <LoopForever+0x16>)
	cmp	r2, r3
 80019c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019c4:	d3f9      	bcc.n	80019ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c6:	f00a f94d 	bl	800bc64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ca:	f7fe fe19 	bl	8000600 <main>

080019ce <LoopForever>:

LoopForever:
    b LoopForever
 80019ce:	e7fe      	b.n	80019ce <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80019d0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80019d4:	0800bdd4 	.word	0x0800bdd4
	ldr	r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019dc:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 80019e0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80019e4:	20000868 	.word	0x20000868

080019e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_IRQHandler>
	...

080019ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_Init+0x50>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <HAL_Init+0x50>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 fd54 	bl	80024aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a02:	f004 f929 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <HAL_Init+0x54>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	490c      	ldr	r1, [pc, #48]	@ (8001a44 <HAL_Init+0x58>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	4a0b      	ldr	r2, [pc, #44]	@ (8001a48 <HAL_Init+0x5c>)
 8001a1a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a1c:	2004      	movs	r0, #4
 8001a1e:	f000 fd99 	bl	8002554 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f812 	bl	8001a4c <HAL_InitTick>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e002      	b.n	8001a38 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a32:	f7ff fbc7 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40022000 	.word	0x40022000
 8001a40:	46020c00 	.word	0x46020c00
 8001a44:	0800bcc4 	.word	0x0800bcc4
 8001a48:	20000000 	.word	0x20000000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001a58:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <HAL_InitTick+0xdc>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e05c      	b.n	8001b1e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001a64:	4b31      	ldr	r3, [pc, #196]	@ (8001b2c <HAL_InitTick+0xe0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d10c      	bne.n	8001a8a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001a70:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <HAL_InitTick+0xe4>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <HAL_InitTick+0xdc>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e037      	b.n	8001afa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001a8a:	f000 fdbb 	bl	8002604 <HAL_SYSTICK_GetCLKSourceConfig>
 8001a8e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d023      	beq.n	8001ade <HAL_InitTick+0x92>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d82d      	bhi.n	8001af8 <HAL_InitTick+0xac>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_InitTick+0x5e>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001aa8:	e026      	b.n	8001af8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <HAL_InitTick+0xe4>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <HAL_InitTick+0xdc>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	60fb      	str	r3, [r7, #12]
        break;
 8001ac2:	e01a      	b.n	8001afa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <HAL_InitTick+0xdc>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ad2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	60fb      	str	r3, [r7, #12]
        break;
 8001adc:	e00d      	b.n	8001afa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_InitTick+0xdc>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001aec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	60fb      	str	r3, [r7, #12]
        break;
 8001af6:	e000      	b.n	8001afa <HAL_InitTick+0xae>
        break;
 8001af8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fd08 	bl	8002510 <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e009      	b.n	8001b1e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b12:	f000 fcd5 	bl	80024c0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001b16:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <HAL_InitTick+0xe8>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	e000e010 	.word	0xe000e010
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_IncTick+0x24>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <HAL_IncTick+0x24>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000864 	.word	0x20000864

08001b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b03      	ldr	r3, [pc, #12]	@ (8001b74 <HAL_GetTick+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000864 	.word	0x20000864

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff ffee 	bl	8001b60 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f7ff ffde 	bl	8001b60 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <LL_ADC_SetResolution+0x3c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d104      	bne.n	8001c08 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f023 020c 	bic.w	r2, r3, #12
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	60da      	str	r2, [r3, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	46021000 	.word	0x46021000

08001c28 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d002      	beq.n	8001c5a <LL_ADC_SetGainCompensation+0x32>
 8001c54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001c58:	e000      	b.n	8001c5c <LL_ADC_SetGainCompensation+0x34>
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2107      	movs	r1, #7
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6093      	str	r3, [r2, #8]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ce4:	d101      	bne.n	8001cea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_IsEnabled+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_IsEnabled+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d101      	bne.n	8001d86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d101      	bne.n	8001dac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e2b3      	b.n	8002344 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a8b      	ldr	r2, [pc, #556]	@ (8002018 <HAL_ADC_Init+0x25c>)
 8001dea:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fa03 	bl	8001200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff5f 	bl	8001cd0 <LL_ADC_IsDeepPowerDownEnabled>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff45 	bl	8001cac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff7a 	bl	8001d20 <LL_ADC_IsInternalRegulatorEnabled>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d115      	bne.n	8001e5e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff5e 	bl	8001cf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e3c:	4b77      	ldr	r3, [pc, #476]	@ (800201c <HAL_ADC_Init+0x260>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	4a77      	ldr	r2, [pc, #476]	@ (8002020 <HAL_ADC_Init+0x264>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f9      	bne.n	8001e52 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff5c 	bl	8001d20 <LL_ADC_IsInternalRegulatorEnabled>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10e      	bne.n	8001e8c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e72:	f043 0210 	orr.w	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff6c 	bl	8001d6e <LL_ADC_REG_IsConversionOngoing>
 8001e96:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 8244 	bne.w	800232e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f040 8240 	bne.w	800232e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001eb2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001eb6:	f043 0202 	orr.w	r2, r3, #2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff40 	bl	8001d48 <LL_ADC_IsEnabled>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d140      	bne.n	8001f50 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a51      	ldr	r2, [pc, #324]	@ (8002018 <HAL_ADC_Init+0x25c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d028      	beq.n	8001f2a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a51      	ldr	r2, [pc, #324]	@ (8002024 <HAL_ADC_Init+0x268>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d109      	bne.n	8001ef6 <HAL_ADC_Init+0x13a>
 8001ee2:	4850      	ldr	r0, [pc, #320]	@ (8002024 <HAL_ADC_Init+0x268>)
 8001ee4:	f7ff ff30 	bl	8001d48 <LL_ADC_IsEnabled>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	e008      	b.n	8001f08 <HAL_ADC_Init+0x14c>
 8001ef6:	4848      	ldr	r0, [pc, #288]	@ (8002018 <HAL_ADC_Init+0x25c>)
 8001ef8:	f7ff ff26 	bl	8001d48 <LL_ADC_IsEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bf0c      	ite	eq
 8001f02:	2301      	moveq	r3, #1
 8001f04:	2300      	movne	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d021      	beq.n	8001f50 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a44      	ldr	r2, [pc, #272]	@ (8002024 <HAL_ADC_Init+0x268>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_Init+0x15e>
 8001f16:	4a44      	ldr	r2, [pc, #272]	@ (8002028 <HAL_ADC_Init+0x26c>)
 8001f18:	e000      	b.n	8001f1c <HAL_ADC_Init+0x160>
 8001f1a:	4a44      	ldr	r2, [pc, #272]	@ (800202c <HAL_ADC_Init+0x270>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f7ff fe4c 	bl	8001bc0 <LL_ADC_SetCommonClock>
 8001f28:	e012      	b.n	8001f50 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f7ff fe57 	bl	8001be8 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800202c <HAL_ADC_Init+0x270>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001f4a:	4938      	ldr	r1, [pc, #224]	@ (800202c <HAL_ADC_Init+0x270>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a30      	ldr	r2, [pc, #192]	@ (8002018 <HAL_ADC_Init+0x25c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d010      	beq.n	8001f7c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f60:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001f66:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001f6c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001f74:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001f76:	4313      	orrs	r3, r2
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	e030      	b.n	8001fde <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7f1b      	ldrb	r3, [r3, #28]
 8001f80:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f88:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f8a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_ADC_Init+0x1de>
 8001f94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f98:	e000      	b.n	8001f9c <HAL_ADC_Init+0x1e0>
 8001f9a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f9c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001fa2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da04      	bge.n	8001fb6 <HAL_ADC_Init+0x1fa>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fb4:	e001      	b.n	8001fba <HAL_ADC_Init+0x1fe>
 8001fb6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001fba:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4918      	ldr	r1, [pc, #96]	@ (8002024 <HAL_ADC_Init+0x268>)
 8001fc2:	428b      	cmp	r3, r1
 8001fc4:	d103      	bne.n	8001fce <HAL_ADC_Init+0x212>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fcc:	e003      	b.n	8001fd6 <HAL_ADC_Init+0x21a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fd4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001fd6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fd8:	6a3a      	ldr	r2, [r7, #32]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d12f      	bne.n	8002048 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <HAL_ADC_Init+0x25c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	045b      	lsls	r3, r3, #17
 8001ffa:	6a3a      	ldr	r2, [r7, #32]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	e022      	b.n	8002048 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	d111      	bne.n	8002030 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	e018      	b.n	8002048 <HAL_ADC_Init+0x28c>
 8002016:	bf00      	nop
 8002018:	46021000 	.word	0x46021000
 800201c:	20000000 	.word	0x20000000
 8002020:	053e2d63 	.word	0x053e2d63
 8002024:	42028000 	.word	0x42028000
 8002028:	42028308 	.word	0x42028308
 800202c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a92      	ldr	r2, [pc, #584]	@ (8002298 <HAL_ADC_Init+0x4dc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002066:	4313      	orrs	r3, r2
 8002068:	6a3a      	ldr	r2, [r7, #32]
 800206a:	4313      	orrs	r3, r2
 800206c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	4b89      	ldr	r3, [pc, #548]	@ (800229c <HAL_ADC_Init+0x4e0>)
 8002076:	4013      	ands	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	6a39      	ldr	r1, [r7, #32]
 800207e:	430b      	orrs	r3, r1
 8002080:	60d3      	str	r3, [r2, #12]
 8002082:	e031      	b.n	80020e8 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002090:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002098:	4313      	orrs	r3, r2
 800209a:	6a3a      	ldr	r2, [r7, #32]
 800209c:	4313      	orrs	r3, r2
 800209e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b7e      	ldr	r3, [pc, #504]	@ (80022a0 <HAL_ADC_Init+0x4e4>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	6a39      	ldr	r1, [r7, #32]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002298 <HAL_ADC_Init+0x4dc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	f000 8093 	beq.w	800221a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fe38 	bl	8001d6e <LL_ADC_REG_IsConversionOngoing>
 80020fe:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fe45 	bl	8001d94 <LL_ADC_INJ_IsConversionOngoing>
 800210a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d161      	bne.n	80021d6 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d15e      	bne.n	80021d6 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7f1b      	ldrb	r3, [r3, #28]
 800211c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4960      	ldr	r1, [pc, #384]	@ (80022a4 <HAL_ADC_Init+0x4e8>)
 8002124:	428b      	cmp	r3, r1
 8002126:	d102      	bne.n	800212e <HAL_ADC_Init+0x372>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212c:	e002      	b.n	8002134 <HAL_ADC_Init+0x378>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002132:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002134:	4313      	orrs	r3, r2
 8002136:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	6a39      	ldr	r1, [r7, #32]
 800214c:	430b      	orrs	r3, r1
 800214e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f7ff fd60 	bl	8001c28 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800216e:	2b01      	cmp	r3, #1
 8002170:	d11e      	bne.n	80021b0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002176:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	4b4a      	ldr	r3, [pc, #296]	@ (80022a8 <HAL_ADC_Init+0x4ec>)
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002186:	0411      	lsls	r1, r2, #16
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800219e:	0892      	lsrs	r2, r2, #2
 80021a0:	430a      	orrs	r2, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	611a      	str	r2, [r3, #16]
 80021ae:	e007      	b.n	80021c0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10c      	bne.n	80021f8 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	f023 010f 	bic.w	r1, r3, #15
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80021f6:	e007      	b.n	8002208 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 020f 	bic.w	r2, r2, #15
 8002206:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800220c:	f023 0303 	bic.w	r3, r3, #3
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002218:	e092      	b.n	8002340 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002220:	2b01      	cmp	r3, #1
 8002222:	d111      	bne.n	8002248 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800222c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002232:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002238:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	4313      	orrs	r3, r2
 800223e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <HAL_ADC_Init+0x4f0>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	69f9      	ldr	r1, [r7, #28]
 8002258:	430b      	orrs	r3, r1
 800225a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002264:	461a      	mov	r2, r3
 8002266:	2100      	movs	r1, #0
 8002268:	f7ff fd01 	bl	8001c6e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002274:	461a      	mov	r2, r3
 8002276:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800227a:	f7ff fcf8 	bl	8001c6e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f062 020f 	orn	r2, r2, #15
 8002294:	629a      	str	r2, [r3, #40]	@ 0x28
 8002296:	e024      	b.n	80022e2 <HAL_ADC_Init+0x526>
 8002298:	46021000 	.word	0x46021000
 800229c:	fff0c013 	.word	0xfff0c013
 80022a0:	ffde800d 	.word	0xffde800d
 80022a4:	42028000 	.word	0x42028000
 80022a8:	fc00f81e 	.word	0xfc00f81e
 80022ac:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022b8:	d113      	bne.n	80022e2 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	f003 031c 	and.w	r3, r3, #28
 80022cc:	f06f 020f 	mvn.w	r2, #15
 80022d0:	fa02 f103 	lsl.w	r1, r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4b18      	ldr	r3, [pc, #96]	@ (800234c <HAL_ADC_Init+0x590>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	6a3a      	ldr	r2, [r7, #32]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d10b      	bne.n	800230a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022fc:	f023 0303 	bic.w	r3, r3, #3
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002308:	e01a      	b.n	8002340 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800230e:	f023 0312 	bic.w	r3, r3, #18
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800232c:	e008      	b.n	8002340 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002332:	f043 0210 	orr.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002344:	4618      	mov	r0, r3
 8002346:	3728      	adds	r7, #40	@ 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	833ffff3 	.word	0x833ffff3

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	@ (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	@ (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	@ (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	@ 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff4c 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024ce:	f7ff ff63 	bl	8002398 <__NVIC_GetPriorityGrouping>
 80024d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	6978      	ldr	r0, [r7, #20]
 80024da:	f7ff ffb3 	bl	8002444 <NVIC_EncodePriority>
 80024de:	4602      	mov	r2, r0
 80024e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff82 	bl	80023f0 <__NVIC_SetPriority>
}
 80024ec:	bf00      	nop
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff56 	bl	80023b4 <__NVIC_EnableIRQ>
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002520:	d301      	bcc.n	8002526 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002522:	2301      	movs	r3, #1
 8002524:	e00d      	b.n	8002542 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <HAL_SYSTICK_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_SYSTICK_Config+0x40>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_SYSTICK_Config+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a05      	ldr	r2, [pc, #20]	@ (8002550 <HAL_SYSTICK_Config+0x40>)
 800253a:	f043 0303 	orr.w	r3, r3, #3
 800253e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d844      	bhi.n	80025ec <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002562:	a201      	add	r2, pc, #4	@ (adr r2, 8002568 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	0800258b 	.word	0x0800258b
 800256c:	080025a9 	.word	0x080025a9
 8002570:	080025cb 	.word	0x080025cb
 8002574:	080025ed 	.word	0x080025ed
 8002578:	0800257d 	.word	0x0800257d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800257c:	4b1f      	ldr	r3, [pc, #124]	@ (80025fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1e      	ldr	r2, [pc, #120]	@ (80025fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6013      	str	r3, [r2, #0]
      break;
 8002588:	e031      	b.n	80025ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800258a:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1b      	ldr	r2, [pc, #108]	@ (80025fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002596:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800259c:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800259e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80025a6:	e022      	b.n	80025ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80025a8:	4b14      	ldr	r3, [pc, #80]	@ (80025fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a13      	ldr	r2, [pc, #76]	@ (80025fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025be:	4a10      	ldr	r2, [pc, #64]	@ (8002600 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80025c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80025c8:	e011      	b.n	80025ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80025ca:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a0b      	ldr	r2, [pc, #44]	@ (80025fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025dc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025e0:	4a07      	ldr	r2, [pc, #28]	@ (8002600 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80025e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80025ea:	e000      	b.n	80025ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80025ec:	bf00      	nop
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010
 8002600:	46020c00 	.word	0x46020c00

08002604 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002616:	2304      	movs	r3, #4
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	e021      	b.n	8002660 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800261c:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002622:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002626:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800262e:	d011      	beq.n	8002654 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002636:	d810      	bhi.n	800265a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002644:	d003      	beq.n	800264e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002646:	e008      	b.n	800265a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002648:	2300      	movs	r3, #0
 800264a:	607b      	str	r3, [r7, #4]
        break;
 800264c:	e008      	b.n	8002660 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800264e:	2301      	movs	r3, #1
 8002650:	607b      	str	r3, [r7, #4]
        break;
 8002652:	e005      	b.n	8002660 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002654:	2302      	movs	r3, #2
 8002656:	607b      	str	r3, [r7, #4]
        break;
 8002658:	e002      	b.n	8002660 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
        break;
 800265e:	bf00      	nop
    }
  }
  return systick_source;
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010
 8002674:	46020c00 	.word	0x46020c00

08002678 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff fa6e 	bl	8001b60 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0db      	b.n	8002848 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6e      	ldr	r2, [pc, #440]	@ (8002850 <HAL_DMA_Init+0x1d8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	f000 809f 	beq.w	80027da <HAL_DMA_Init+0x162>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6c      	ldr	r2, [pc, #432]	@ (8002854 <HAL_DMA_Init+0x1dc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	f000 8099 	beq.w	80027da <HAL_DMA_Init+0x162>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002858 <HAL_DMA_Init+0x1e0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	f000 8093 	beq.w	80027da <HAL_DMA_Init+0x162>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a68      	ldr	r2, [pc, #416]	@ (800285c <HAL_DMA_Init+0x1e4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	f000 808d 	beq.w	80027da <HAL_DMA_Init+0x162>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a66      	ldr	r2, [pc, #408]	@ (8002860 <HAL_DMA_Init+0x1e8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	f000 8087 	beq.w	80027da <HAL_DMA_Init+0x162>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a64      	ldr	r2, [pc, #400]	@ (8002864 <HAL_DMA_Init+0x1ec>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	f000 8081 	beq.w	80027da <HAL_DMA_Init+0x162>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a62      	ldr	r2, [pc, #392]	@ (8002868 <HAL_DMA_Init+0x1f0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d07b      	beq.n	80027da <HAL_DMA_Init+0x162>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a61      	ldr	r2, [pc, #388]	@ (800286c <HAL_DMA_Init+0x1f4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d076      	beq.n	80027da <HAL_DMA_Init+0x162>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002870 <HAL_DMA_Init+0x1f8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d071      	beq.n	80027da <HAL_DMA_Init+0x162>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002874 <HAL_DMA_Init+0x1fc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d06c      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5c      	ldr	r2, [pc, #368]	@ (8002878 <HAL_DMA_Init+0x200>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d067      	beq.n	80027da <HAL_DMA_Init+0x162>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a5b      	ldr	r2, [pc, #364]	@ (800287c <HAL_DMA_Init+0x204>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d062      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a59      	ldr	r2, [pc, #356]	@ (8002880 <HAL_DMA_Init+0x208>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d05d      	beq.n	80027da <HAL_DMA_Init+0x162>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a58      	ldr	r2, [pc, #352]	@ (8002884 <HAL_DMA_Init+0x20c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d058      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a56      	ldr	r2, [pc, #344]	@ (8002888 <HAL_DMA_Init+0x210>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d053      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a55      	ldr	r2, [pc, #340]	@ (800288c <HAL_DMA_Init+0x214>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d04e      	beq.n	80027da <HAL_DMA_Init+0x162>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a53      	ldr	r2, [pc, #332]	@ (8002890 <HAL_DMA_Init+0x218>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d049      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a52      	ldr	r2, [pc, #328]	@ (8002894 <HAL_DMA_Init+0x21c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d044      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a50      	ldr	r2, [pc, #320]	@ (8002898 <HAL_DMA_Init+0x220>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d03f      	beq.n	80027da <HAL_DMA_Init+0x162>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a4f      	ldr	r2, [pc, #316]	@ (800289c <HAL_DMA_Init+0x224>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d03a      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4d      	ldr	r2, [pc, #308]	@ (80028a0 <HAL_DMA_Init+0x228>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d035      	beq.n	80027da <HAL_DMA_Init+0x162>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a4c      	ldr	r2, [pc, #304]	@ (80028a4 <HAL_DMA_Init+0x22c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d030      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a4a      	ldr	r2, [pc, #296]	@ (80028a8 <HAL_DMA_Init+0x230>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d02b      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a49      	ldr	r2, [pc, #292]	@ (80028ac <HAL_DMA_Init+0x234>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d026      	beq.n	80027da <HAL_DMA_Init+0x162>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a47      	ldr	r2, [pc, #284]	@ (80028b0 <HAL_DMA_Init+0x238>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d021      	beq.n	80027da <HAL_DMA_Init+0x162>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a46      	ldr	r2, [pc, #280]	@ (80028b4 <HAL_DMA_Init+0x23c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d01c      	beq.n	80027da <HAL_DMA_Init+0x162>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a44      	ldr	r2, [pc, #272]	@ (80028b8 <HAL_DMA_Init+0x240>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d017      	beq.n	80027da <HAL_DMA_Init+0x162>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a43      	ldr	r2, [pc, #268]	@ (80028bc <HAL_DMA_Init+0x244>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d012      	beq.n	80027da <HAL_DMA_Init+0x162>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a41      	ldr	r2, [pc, #260]	@ (80028c0 <HAL_DMA_Init+0x248>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_DMA_Init+0x162>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a40      	ldr	r2, [pc, #256]	@ (80028c4 <HAL_DMA_Init+0x24c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d008      	beq.n	80027da <HAL_DMA_Init+0x162>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a3e      	ldr	r2, [pc, #248]	@ (80028c8 <HAL_DMA_Init+0x250>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d003      	beq.n	80027da <HAL_DMA_Init+0x162>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a3d      	ldr	r2, [pc, #244]	@ (80028cc <HAL_DMA_Init+0x254>)
 80027d8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0206 	orr.w	r2, r2, #6
 80027f8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80027fa:	e00f      	b.n	800281c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80027fc:	f7ff f9b0 	bl	8001b60 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b05      	cmp	r3, #5
 8002808:	d908      	bls.n	800281c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2210      	movs	r2, #16
 800280e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2203      	movs	r2, #3
 8002814:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e015      	b.n	8002848 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e8      	bne.n	80027fc <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa72 	bl	8002d14 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40020050 	.word	0x40020050
 8002854:	50020050 	.word	0x50020050
 8002858:	400200d0 	.word	0x400200d0
 800285c:	500200d0 	.word	0x500200d0
 8002860:	40020150 	.word	0x40020150
 8002864:	50020150 	.word	0x50020150
 8002868:	400201d0 	.word	0x400201d0
 800286c:	500201d0 	.word	0x500201d0
 8002870:	40020250 	.word	0x40020250
 8002874:	50020250 	.word	0x50020250
 8002878:	400202d0 	.word	0x400202d0
 800287c:	500202d0 	.word	0x500202d0
 8002880:	40020350 	.word	0x40020350
 8002884:	50020350 	.word	0x50020350
 8002888:	400203d0 	.word	0x400203d0
 800288c:	500203d0 	.word	0x500203d0
 8002890:	40020450 	.word	0x40020450
 8002894:	50020450 	.word	0x50020450
 8002898:	400204d0 	.word	0x400204d0
 800289c:	500204d0 	.word	0x500204d0
 80028a0:	40020550 	.word	0x40020550
 80028a4:	50020550 	.word	0x50020550
 80028a8:	400205d0 	.word	0x400205d0
 80028ac:	500205d0 	.word	0x500205d0
 80028b0:	40020650 	.word	0x40020650
 80028b4:	50020650 	.word	0x50020650
 80028b8:	400206d0 	.word	0x400206d0
 80028bc:	500206d0 	.word	0x500206d0
 80028c0:	40020750 	.word	0x40020750
 80028c4:	50020750 	.word	0x50020750
 80028c8:	400207d0 	.word	0x400207d0
 80028cc:	500207d0 	.word	0x500207d0

080028d0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e04f      	b.n	8002988 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_DMA_Start_IT+0x26>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e048      	b.n	8002988 <HAL_DMA_Start_IT+0xb8>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d136      	bne.n	8002978 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2202      	movs	r2, #2
 800290e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f9d3 	bl	8002cca <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002932:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002962:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e007      	b.n	8002988 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2240      	movs	r2, #64	@ 0x40
 800297c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80029a0:	f023 030f 	bic.w	r3, r3, #15
 80029a4:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ae:	3b50      	subs	r3, #80	@ 0x50
 80029b0:	09db      	lsrs	r3, r3, #7
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	2201      	movs	r2, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 813b 	beq.w	8002c46 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029f4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d011      	beq.n	8002a34 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a26:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2c:	f043 0202 	orr.w	r2, r3, #2
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d011      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a58:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d011      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a8a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	f043 0208 	orr.w	r2, r3, #8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d013      	beq.n	8002ace <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00c      	beq.n	8002ace <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002abc:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d04c      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d045      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af2:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d12e      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b0e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0202 	orr.w	r2, r2, #2
 8002b1e:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b38:	2201      	movs	r2, #1
 8002b3a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2200      	movs	r2, #0
 8002b42:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d07a      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
        }

        return;
 8002b5c:	e075      	b.n	8002c4a <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2205      	movs	r2, #5
 8002b62:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d039      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d032      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d012      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d116      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d111      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	731a      	strb	r2, [r3, #12]
 8002bc2:	e008      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002bde:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d025      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0202 	orr.w	r2, r2, #2
 8002c0e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c28:	2201      	movs	r2, #1
 8002c2a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
 8002c44:	e002      	b.n	8002c4c <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002c4a:	bf00      	nop
    }
  }
}
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e02b      	b.n	8002cbe <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002c6e:	f023 030f 	bic.w	r3, r3, #15
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	3b50      	subs	r3, #80	@ 0x50
 8002c7e:	09db      	lsrs	r3, r3, #7
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2201      	movs	r2, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d012      	beq.n	8002cbc <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f003 0311 	and.w	r3, r3, #17
 8002c9c:	2b11      	cmp	r3, #17
 8002c9e:	d106      	bne.n	8002cae <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	e006      	b.n	8002cbc <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	b291      	uxth	r1, r2
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	430b      	orrs	r3, r1
 8002cec:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002cf6:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a53      	ldr	r2, [pc, #332]	@ (8002ea0 <DMA_Init+0x18c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	f000 80a0 	beq.w	8002e9a <DMA_Init+0x186>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a51      	ldr	r2, [pc, #324]	@ (8002ea4 <DMA_Init+0x190>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	f000 809a 	beq.w	8002e9a <DMA_Init+0x186>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea8 <DMA_Init+0x194>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	f000 8094 	beq.w	8002e9a <DMA_Init+0x186>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4d      	ldr	r2, [pc, #308]	@ (8002eac <DMA_Init+0x198>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	f000 808e 	beq.w	8002e9a <DMA_Init+0x186>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb0 <DMA_Init+0x19c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	f000 8088 	beq.w	8002e9a <DMA_Init+0x186>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a49      	ldr	r2, [pc, #292]	@ (8002eb4 <DMA_Init+0x1a0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	f000 8082 	beq.w	8002e9a <DMA_Init+0x186>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a47      	ldr	r2, [pc, #284]	@ (8002eb8 <DMA_Init+0x1a4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d07c      	beq.n	8002e9a <DMA_Init+0x186>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a45      	ldr	r2, [pc, #276]	@ (8002ebc <DMA_Init+0x1a8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d077      	beq.n	8002e9a <DMA_Init+0x186>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a44      	ldr	r2, [pc, #272]	@ (8002ec0 <DMA_Init+0x1ac>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d072      	beq.n	8002e9a <DMA_Init+0x186>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a42      	ldr	r2, [pc, #264]	@ (8002ec4 <DMA_Init+0x1b0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d06d      	beq.n	8002e9a <DMA_Init+0x186>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a41      	ldr	r2, [pc, #260]	@ (8002ec8 <DMA_Init+0x1b4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d068      	beq.n	8002e9a <DMA_Init+0x186>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8002ecc <DMA_Init+0x1b8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d063      	beq.n	8002e9a <DMA_Init+0x186>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ed0 <DMA_Init+0x1bc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d05e      	beq.n	8002e9a <DMA_Init+0x186>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed4 <DMA_Init+0x1c0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d059      	beq.n	8002e9a <DMA_Init+0x186>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3b      	ldr	r2, [pc, #236]	@ (8002ed8 <DMA_Init+0x1c4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d054      	beq.n	8002e9a <DMA_Init+0x186>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a39      	ldr	r2, [pc, #228]	@ (8002edc <DMA_Init+0x1c8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d04f      	beq.n	8002e9a <DMA_Init+0x186>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a38      	ldr	r2, [pc, #224]	@ (8002ee0 <DMA_Init+0x1cc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d04a      	beq.n	8002e9a <DMA_Init+0x186>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a36      	ldr	r2, [pc, #216]	@ (8002ee4 <DMA_Init+0x1d0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d045      	beq.n	8002e9a <DMA_Init+0x186>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a35      	ldr	r2, [pc, #212]	@ (8002ee8 <DMA_Init+0x1d4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d040      	beq.n	8002e9a <DMA_Init+0x186>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a33      	ldr	r2, [pc, #204]	@ (8002eec <DMA_Init+0x1d8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d03b      	beq.n	8002e9a <DMA_Init+0x186>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a32      	ldr	r2, [pc, #200]	@ (8002ef0 <DMA_Init+0x1dc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d036      	beq.n	8002e9a <DMA_Init+0x186>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a30      	ldr	r2, [pc, #192]	@ (8002ef4 <DMA_Init+0x1e0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d031      	beq.n	8002e9a <DMA_Init+0x186>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef8 <DMA_Init+0x1e4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d02c      	beq.n	8002e9a <DMA_Init+0x186>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2d      	ldr	r2, [pc, #180]	@ (8002efc <DMA_Init+0x1e8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d027      	beq.n	8002e9a <DMA_Init+0x186>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f00 <DMA_Init+0x1ec>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d022      	beq.n	8002e9a <DMA_Init+0x186>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2a      	ldr	r2, [pc, #168]	@ (8002f04 <DMA_Init+0x1f0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01d      	beq.n	8002e9a <DMA_Init+0x186>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a29      	ldr	r2, [pc, #164]	@ (8002f08 <DMA_Init+0x1f4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d018      	beq.n	8002e9a <DMA_Init+0x186>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	@ (8002f0c <DMA_Init+0x1f8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <DMA_Init+0x186>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a26      	ldr	r2, [pc, #152]	@ (8002f10 <DMA_Init+0x1fc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <DMA_Init+0x186>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a24      	ldr	r2, [pc, #144]	@ (8002f14 <DMA_Init+0x200>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d009      	beq.n	8002e9a <DMA_Init+0x186>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a23      	ldr	r2, [pc, #140]	@ (8002f18 <DMA_Init+0x204>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <DMA_Init+0x186>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a21      	ldr	r2, [pc, #132]	@ (8002f1c <DMA_Init+0x208>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d142      	bne.n	8002f20 <DMA_Init+0x20c>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e041      	b.n	8002f22 <DMA_Init+0x20e>
 8002e9e:	bf00      	nop
 8002ea0:	40020050 	.word	0x40020050
 8002ea4:	50020050 	.word	0x50020050
 8002ea8:	400200d0 	.word	0x400200d0
 8002eac:	500200d0 	.word	0x500200d0
 8002eb0:	40020150 	.word	0x40020150
 8002eb4:	50020150 	.word	0x50020150
 8002eb8:	400201d0 	.word	0x400201d0
 8002ebc:	500201d0 	.word	0x500201d0
 8002ec0:	40020250 	.word	0x40020250
 8002ec4:	50020250 	.word	0x50020250
 8002ec8:	400202d0 	.word	0x400202d0
 8002ecc:	500202d0 	.word	0x500202d0
 8002ed0:	40020350 	.word	0x40020350
 8002ed4:	50020350 	.word	0x50020350
 8002ed8:	400203d0 	.word	0x400203d0
 8002edc:	500203d0 	.word	0x500203d0
 8002ee0:	40020450 	.word	0x40020450
 8002ee4:	50020450 	.word	0x50020450
 8002ee8:	400204d0 	.word	0x400204d0
 8002eec:	500204d0 	.word	0x500204d0
 8002ef0:	40020550 	.word	0x40020550
 8002ef4:	50020550 	.word	0x50020550
 8002ef8:	400205d0 	.word	0x400205d0
 8002efc:	500205d0 	.word	0x500205d0
 8002f00:	40020650 	.word	0x40020650
 8002f04:	50020650 	.word	0x50020650
 8002f08:	400206d0 	.word	0x400206d0
 8002f0c:	500206d0 	.word	0x500206d0
 8002f10:	40020750 	.word	0x40020750
 8002f14:	50020750 	.word	0x50020750
 8002f18:	400207d0 	.word	0x400207d0
 8002f1c:	500207d0 	.word	0x500207d0
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d012      	beq.n	8002f4c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	051b      	lsls	r3, r3, #20
 8002f32:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002f36:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002f44:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7e:	f040 80b0 	bne.w	80030e2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a82      	ldr	r2, [pc, #520]	@ (8003190 <DMA_Init+0x47c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	f000 80a0 	beq.w	80030ce <DMA_Init+0x3ba>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a80      	ldr	r2, [pc, #512]	@ (8003194 <DMA_Init+0x480>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	f000 809a 	beq.w	80030ce <DMA_Init+0x3ba>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003198 <DMA_Init+0x484>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	f000 8094 	beq.w	80030ce <DMA_Init+0x3ba>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a7c      	ldr	r2, [pc, #496]	@ (800319c <DMA_Init+0x488>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	f000 808e 	beq.w	80030ce <DMA_Init+0x3ba>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a7a      	ldr	r2, [pc, #488]	@ (80031a0 <DMA_Init+0x48c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	f000 8088 	beq.w	80030ce <DMA_Init+0x3ba>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a78      	ldr	r2, [pc, #480]	@ (80031a4 <DMA_Init+0x490>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	f000 8082 	beq.w	80030ce <DMA_Init+0x3ba>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a76      	ldr	r2, [pc, #472]	@ (80031a8 <DMA_Init+0x494>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d07c      	beq.n	80030ce <DMA_Init+0x3ba>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a74      	ldr	r2, [pc, #464]	@ (80031ac <DMA_Init+0x498>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d077      	beq.n	80030ce <DMA_Init+0x3ba>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a73      	ldr	r2, [pc, #460]	@ (80031b0 <DMA_Init+0x49c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d072      	beq.n	80030ce <DMA_Init+0x3ba>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a71      	ldr	r2, [pc, #452]	@ (80031b4 <DMA_Init+0x4a0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d06d      	beq.n	80030ce <DMA_Init+0x3ba>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a70      	ldr	r2, [pc, #448]	@ (80031b8 <DMA_Init+0x4a4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d068      	beq.n	80030ce <DMA_Init+0x3ba>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6e      	ldr	r2, [pc, #440]	@ (80031bc <DMA_Init+0x4a8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d063      	beq.n	80030ce <DMA_Init+0x3ba>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6d      	ldr	r2, [pc, #436]	@ (80031c0 <DMA_Init+0x4ac>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d05e      	beq.n	80030ce <DMA_Init+0x3ba>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6b      	ldr	r2, [pc, #428]	@ (80031c4 <DMA_Init+0x4b0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d059      	beq.n	80030ce <DMA_Init+0x3ba>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a6a      	ldr	r2, [pc, #424]	@ (80031c8 <DMA_Init+0x4b4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d054      	beq.n	80030ce <DMA_Init+0x3ba>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a68      	ldr	r2, [pc, #416]	@ (80031cc <DMA_Init+0x4b8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d04f      	beq.n	80030ce <DMA_Init+0x3ba>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a67      	ldr	r2, [pc, #412]	@ (80031d0 <DMA_Init+0x4bc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d04a      	beq.n	80030ce <DMA_Init+0x3ba>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a65      	ldr	r2, [pc, #404]	@ (80031d4 <DMA_Init+0x4c0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d045      	beq.n	80030ce <DMA_Init+0x3ba>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a64      	ldr	r2, [pc, #400]	@ (80031d8 <DMA_Init+0x4c4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d040      	beq.n	80030ce <DMA_Init+0x3ba>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a62      	ldr	r2, [pc, #392]	@ (80031dc <DMA_Init+0x4c8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d03b      	beq.n	80030ce <DMA_Init+0x3ba>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a61      	ldr	r2, [pc, #388]	@ (80031e0 <DMA_Init+0x4cc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d036      	beq.n	80030ce <DMA_Init+0x3ba>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a5f      	ldr	r2, [pc, #380]	@ (80031e4 <DMA_Init+0x4d0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d031      	beq.n	80030ce <DMA_Init+0x3ba>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5e      	ldr	r2, [pc, #376]	@ (80031e8 <DMA_Init+0x4d4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d02c      	beq.n	80030ce <DMA_Init+0x3ba>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a5c      	ldr	r2, [pc, #368]	@ (80031ec <DMA_Init+0x4d8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d027      	beq.n	80030ce <DMA_Init+0x3ba>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a5b      	ldr	r2, [pc, #364]	@ (80031f0 <DMA_Init+0x4dc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <DMA_Init+0x3ba>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a59      	ldr	r2, [pc, #356]	@ (80031f4 <DMA_Init+0x4e0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01d      	beq.n	80030ce <DMA_Init+0x3ba>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a58      	ldr	r2, [pc, #352]	@ (80031f8 <DMA_Init+0x4e4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d018      	beq.n	80030ce <DMA_Init+0x3ba>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a56      	ldr	r2, [pc, #344]	@ (80031fc <DMA_Init+0x4e8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <DMA_Init+0x3ba>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a55      	ldr	r2, [pc, #340]	@ (8003200 <DMA_Init+0x4ec>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <DMA_Init+0x3ba>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a53      	ldr	r2, [pc, #332]	@ (8003204 <DMA_Init+0x4f0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <DMA_Init+0x3ba>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a52      	ldr	r2, [pc, #328]	@ (8003208 <DMA_Init+0x4f4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <DMA_Init+0x3ba>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a50      	ldr	r2, [pc, #320]	@ (800320c <DMA_Init+0x4f8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <DMA_Init+0x3be>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <DMA_Init+0x3c0>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e008      	b.n	80030f4 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ea:	d103      	bne.n	80030f4 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030f2:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030fa:	4b45      	ldr	r3, [pc, #276]	@ (8003210 <DMA_Init+0x4fc>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	430b      	orrs	r3, r1
 8003106:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2200      	movs	r2, #0
 800310e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a36      	ldr	r2, [pc, #216]	@ (80031f0 <DMA_Init+0x4dc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d022      	beq.n	8003160 <DMA_Init+0x44c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a35      	ldr	r2, [pc, #212]	@ (80031f4 <DMA_Init+0x4e0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d01d      	beq.n	8003160 <DMA_Init+0x44c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a33      	ldr	r2, [pc, #204]	@ (80031f8 <DMA_Init+0x4e4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d018      	beq.n	8003160 <DMA_Init+0x44c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a32      	ldr	r2, [pc, #200]	@ (80031fc <DMA_Init+0x4e8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d013      	beq.n	8003160 <DMA_Init+0x44c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a30      	ldr	r2, [pc, #192]	@ (8003200 <DMA_Init+0x4ec>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00e      	beq.n	8003160 <DMA_Init+0x44c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2f      	ldr	r2, [pc, #188]	@ (8003204 <DMA_Init+0x4f0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d009      	beq.n	8003160 <DMA_Init+0x44c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2d      	ldr	r2, [pc, #180]	@ (8003208 <DMA_Init+0x4f4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <DMA_Init+0x44c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2c      	ldr	r2, [pc, #176]	@ (800320c <DMA_Init+0x4f8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <DMA_Init+0x450>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <DMA_Init+0x452>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40020050 	.word	0x40020050
 8003194:	50020050 	.word	0x50020050
 8003198:	400200d0 	.word	0x400200d0
 800319c:	500200d0 	.word	0x500200d0
 80031a0:	40020150 	.word	0x40020150
 80031a4:	50020150 	.word	0x50020150
 80031a8:	400201d0 	.word	0x400201d0
 80031ac:	500201d0 	.word	0x500201d0
 80031b0:	40020250 	.word	0x40020250
 80031b4:	50020250 	.word	0x50020250
 80031b8:	400202d0 	.word	0x400202d0
 80031bc:	500202d0 	.word	0x500202d0
 80031c0:	40020350 	.word	0x40020350
 80031c4:	50020350 	.word	0x50020350
 80031c8:	400203d0 	.word	0x400203d0
 80031cc:	500203d0 	.word	0x500203d0
 80031d0:	40020450 	.word	0x40020450
 80031d4:	50020450 	.word	0x50020450
 80031d8:	400204d0 	.word	0x400204d0
 80031dc:	500204d0 	.word	0x500204d0
 80031e0:	40020550 	.word	0x40020550
 80031e4:	50020550 	.word	0x50020550
 80031e8:	400205d0 	.word	0x400205d0
 80031ec:	500205d0 	.word	0x500205d0
 80031f0:	40020650 	.word	0x40020650
 80031f4:	50020650 	.word	0x50020650
 80031f8:	400206d0 	.word	0x400206d0
 80031fc:	500206d0 	.word	0x500206d0
 8003200:	40020750 	.word	0x40020750
 8003204:	50020750 	.word	0x50020750
 8003208:	400207d0 	.word	0x400207d0
 800320c:	500207d0 	.word	0x500207d0
 8003210:	3cc03180 	.word	0x3cc03180

08003214 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <HAL_FLASH_Unlock+0x38>)
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	da0b      	bge.n	800323e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_FLASH_Unlock+0x38>)
 8003228:	4a09      	ldr	r2, [pc, #36]	@ (8003250 <HAL_FLASH_Unlock+0x3c>)
 800322a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 800322c:	4b07      	ldr	r3, [pc, #28]	@ (800324c <HAL_FLASH_Unlock+0x38>)
 800322e:	4a09      	ldr	r2, [pc, #36]	@ (8003254 <HAL_FLASH_Unlock+0x40>)
 8003230:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_FLASH_Unlock+0x38>)
 8003234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	da01      	bge.n	800323e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800323e:	79fb      	ldrb	r3, [r7, #7]
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40022000 	.word	0x40022000
 8003250:	45670123 	.word	0x45670123
 8003254:	cdef89ab 	.word	0xcdef89ab

08003258 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 8003262:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_FLASH_Lock+0x30>)
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	4a08      	ldr	r2, [pc, #32]	@ (8003288 <HAL_FLASH_Lock+0x30>)
 8003268:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800326c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_FLASH_Lock+0x30>)
 8003270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	da01      	bge.n	800327a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800327a:	79fb      	ldrb	r3, [r7, #7]
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40022000 	.word	0x40022000

0800328c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	@ 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800329e:	e1ba      	b.n	8003616 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 81aa 	beq.w	8003610 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a55      	ldr	r2, [pc, #340]	@ (8003414 <HAL_GPIO_Init+0x188>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d15d      	bne.n	8003380 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80032ca:	2201      	movs	r2, #1
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0201 	and.w	r2, r3, #1
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80032f4:	4a48      	ldr	r2, [pc, #288]	@ (8003418 <HAL_GPIO_Init+0x18c>)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032fc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80032fe:	4a46      	ldr	r2, [pc, #280]	@ (8003418 <HAL_GPIO_Init+0x18c>)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	08da      	lsrs	r2, r3, #3
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3208      	adds	r2, #8
 8003312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003316:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	4013      	ands	r3, r2
 800332c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220b      	movs	r2, #11
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	4313      	orrs	r3, r2
 8003340:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	08da      	lsrs	r2, r3, #3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	3208      	adds	r2, #8
 800334a:	69f9      	ldr	r1, [r7, #28]
 800334c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	2203      	movs	r2, #3
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	4013      	ands	r3, r2
 8003366:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2202      	movs	r2, #2
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	4313      	orrs	r3, r2
 8003376:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e067      	b.n	8003450 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x104>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b12      	cmp	r3, #18
 800338e:	d145      	bne.n	800341c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3208      	adds	r2, #8
 8003398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	220f      	movs	r2, #15
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	08da      	lsrs	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3208      	adds	r2, #8
 80033d6:	69f9      	ldr	r1, [r7, #28]
 80033d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0203 	and.w	r2, r3, #3
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	4313      	orrs	r3, r2
 8003408:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e01e      	b.n	8003450 <HAL_GPIO_Init+0x1c4>
 8003412:	bf00      	nop
 8003414:	46020000 	.word	0x46020000
 8003418:	0800bd1c 	.word	0x0800bd1c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	4013      	ands	r3, r2
 8003432:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	4313      	orrs	r3, r2
 8003448:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d00b      	beq.n	8003470 <HAL_GPIO_Init+0x1e4>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d007      	beq.n	8003470 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003464:	2b11      	cmp	r3, #17
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b12      	cmp	r3, #18
 800346e:	d130      	bne.n	80034d2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	4013      	ands	r3, r2
 8003486:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	4313      	orrs	r3, r2
 8003498:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80034a6:	2201      	movs	r2, #1
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	f003 0201 	and.w	r2, r3, #1
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d017      	beq.n	800350a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2203      	movs	r2, #3
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	4313      	orrs	r3, r2
 8003502:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d07c      	beq.n	8003610 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003516:	4a47      	ldr	r2, [pc, #284]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	3318      	adds	r3, #24
 800351e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003522:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	220f      	movs	r2, #15
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	4013      	ands	r3, r2
 8003538:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	0a9a      	lsrs	r2, r3, #10
 800353e:	4b3e      	ldr	r3, [pc, #248]	@ (8003638 <HAL_GPIO_Init+0x3ac>)
 8003540:	4013      	ands	r3, r2
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	f002 0203 	and.w	r2, r2, #3
 8003548:	00d2      	lsls	r2, r2, #3
 800354a:	4093      	lsls	r3, r2
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	4313      	orrs	r3, r2
 8003550:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003552:	4938      	ldr	r1, [pc, #224]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3318      	adds	r3, #24
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003560:	4b34      	ldr	r3, [pc, #208]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	43db      	mvns	r3, r3
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	4013      	ands	r3, r2
 800356e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003584:	4a2b      	ldr	r2, [pc, #172]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800358a:	4b2a      	ldr	r3, [pc, #168]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	43db      	mvns	r3, r3
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	4013      	ands	r3, r2
 8003598:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80035ae:	4a21      	ldr	r2, [pc, #132]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80035b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	43db      	mvns	r3, r3
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80035da:	4a16      	ldr	r2, [pc, #88]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80035e2:	4b14      	ldr	r3, [pc, #80]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 80035e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003608:	4a0a      	ldr	r2, [pc, #40]	@ (8003634 <HAL_GPIO_Init+0x3a8>)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3301      	adds	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f ae3d 	bne.w	80032a0 <HAL_GPIO_Init+0x14>
  }
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	3724      	adds	r7, #36	@ 0x24
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	46022000 	.word	0x46022000
 8003638:	002f7f7f 	.word	0x002f7f7f

0800363c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
 8003648:	4613      	mov	r3, r2
 800364a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003658:	e002      	b.n	8003660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003676:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003682:	4a0c      	ldr	r2, [pc, #48]	@ (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f814 	bl	80036b8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003690:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d006      	beq.n	80036aa <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800369c:	4a05      	ldr	r2, [pc, #20]	@ (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f812 	bl	80036ce <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	46022000 	.word	0x46022000

080036b8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	4603      	mov	r3, r0
 80036d6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80036f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e007      	b.n	8003712 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003702:	4b07      	ldr	r3, [pc, #28]	@ (8003720 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 0204 	bic.w	r2, r3, #4
 800370a:	4905      	ldr	r1, [pc, #20]	@ (8003720 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40030400 	.word	0x40030400

08003724 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <HAL_ICACHE_Enable+0x1c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <HAL_ICACHE_Enable+0x1c>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40030400 	.word	0x40030400

08003744 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af02      	add	r7, sp, #8
 800374a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e108      	b.n	8003968 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d106      	bne.n	8003776 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7fd fffb 	bl	800176c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4a7b      	ldr	r2, [pc, #492]	@ (8003970 <HAL_PCD_Init+0x22c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d102      	bne.n	800378c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f007 fd61 	bl	800b258 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7c1a      	ldrb	r2, [r3, #16]
 800379e:	f88d 2000 	strb.w	r2, [sp]
 80037a2:	3304      	adds	r3, #4
 80037a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a6:	f007 fc88 	bl	800b0ba <USB_CoreInit>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0d5      	b.n	8003968 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f007 fd59 	bl	800b27a <USB_SetCurrentMode>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0c6      	b.n	8003968 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	e04a      	b.n	8003876 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3315      	adds	r3, #21
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	3314      	adds	r3, #20
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	b298      	uxth	r0, r3
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	332e      	adds	r3, #46	@ 0x2e
 800381c:	4602      	mov	r2, r0
 800381e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	3318      	adds	r3, #24
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	331c      	adds	r3, #28
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3320      	adds	r3, #32
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	3324      	adds	r3, #36	@ 0x24
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	3301      	adds	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	791b      	ldrb	r3, [r3, #4]
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	429a      	cmp	r2, r3
 800387e:	d3af      	bcc.n	80037e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003880:	2300      	movs	r3, #0
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	e044      	b.n	8003910 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	3301      	adds	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	791b      	ldrb	r3, [r3, #4]
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	429a      	cmp	r2, r3
 8003918:	d3b5      	bcc.n	8003886 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7c1a      	ldrb	r2, [r3, #16]
 8003922:	f88d 2000 	strb.w	r2, [sp]
 8003926:	3304      	adds	r3, #4
 8003928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800392a:	f007 fcf3 	bl	800b314 <USB_DevInit>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e013      	b.n	8003968 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7b1b      	ldrb	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 ff3c 	bl	80047d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f008 f801 	bl	800b968 <USB_DevDisconnect>

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	42040000 	.word	0x42040000

08003974 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b08d      	sub	sp, #52	@ 0x34
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f008 f8a0 	bl	800bad0 <USB_GetMode>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 84b9 	bne.w	800430a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f008 f804 	bl	800b9aa <USB_ReadInterrupts>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 84af 	beq.w	8004308 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f007 fff1 	bl	800b9aa <USB_ReadInterrupts>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d107      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f002 0202 	and.w	r2, r2, #2
 80039e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f007 ffdf 	bl	800b9aa <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d161      	bne.n	8003aba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0210 	bic.w	r2, r2, #16
 8003a04:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f003 020f 	and.w	r2, r3, #15
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	3304      	adds	r3, #4
 8003a24:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	0c5b      	lsrs	r3, r3, #17
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d124      	bne.n	8003a7c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d035      	beq.n	8003aaa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6a38      	ldr	r0, [r7, #32]
 8003a52:	f007 ff31 	bl	800b8b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a62:	441a      	add	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a74:	441a      	add	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	615a      	str	r2, [r3, #20]
 8003a7a:	e016      	b.n	8003aaa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	0c5b      	lsrs	r3, r3, #17
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d110      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a8e:	2208      	movs	r2, #8
 8003a90:	4619      	mov	r1, r3
 8003a92:	6a38      	ldr	r0, [r7, #32]
 8003a94:	f007 ff10 	bl	800b8b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa4:	441a      	add	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0210 	orr.w	r2, r2, #16
 8003ab8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f007 ff73 	bl	800b9aa <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ace:	f040 80a7 	bne.w	8003c20 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f007 ff78 	bl	800b9d0 <USB_ReadDevAllOutEpInterrupt>
 8003ae0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003ae2:	e099      	b.n	8003c18 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 808e 	beq.w	8003c0c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f007 ff9c 	bl	800ba38 <USB_ReadDevOutEPInterrupt>
 8003b00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00c      	beq.n	8003b26 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fd29 	bl	8004578 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00c      	beq.n	8003b4a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2308      	movs	r3, #8
 8003b40:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fdff 	bl	8004748 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b60:	461a      	mov	r2, r3
 8003b62:	2310      	movs	r3, #16
 8003b64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d030      	beq.n	8003bd2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b78:	2b80      	cmp	r3, #128	@ 0x80
 8003b7a:	d109      	bne.n	8003b90 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b8e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	78db      	ldrb	r3, [r3, #3]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d108      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fbf2 	bl	80043a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2302      	movs	r3, #2
 8003bd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	2320      	movs	r3, #32
 8003bec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	461a      	mov	r2, r3
 8003c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	3301      	adds	r3, #1
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f47f af62 	bne.w	8003ae4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f007 fec0 	bl	800b9aa <USB_ReadInterrupts>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c34:	f040 80db 	bne.w	8003dee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f007 fee1 	bl	800ba04 <USB_ReadDevAllInEpInterrupt>
 8003c42:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003c48:	e0cd      	b.n	8003de6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80c2 	beq.w	8003dda <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f007 ff07 	bl	800ba74 <USB_ReadDevInEPInterrupt>
 8003c66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d057      	beq.n	8003d22 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	2201      	movs	r2, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69f9      	ldr	r1, [r7, #28]
 8003c8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c92:	4013      	ands	r3, r2
 8003c94:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	799b      	ldrb	r3, [r3, #6]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d132      	bne.n	8003d16 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3320      	adds	r3, #32
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4403      	add	r3, r0
 8003cd0:	331c      	adds	r3, #28
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4419      	add	r1, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4403      	add	r3, r0
 8003ce4:	3320      	adds	r3, #32
 8003ce6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d113      	bne.n	8003d16 <HAL_PCD_IRQHandler+0x3a2>
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	3324      	adds	r3, #36	@ 0x24
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d108      	bne.n	8003d16 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2101      	movs	r1, #1
 8003d12:	f007 ff0f 	bl	800bb34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fb03 	bl	8004328 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d54:	461a      	mov	r2, r3
 8003d56:	2310      	movs	r3, #16
 8003d58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d70:	461a      	mov	r2, r3
 8003d72:	2340      	movs	r3, #64	@ 0x40
 8003d74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d82:	6a38      	ldr	r0, [r7, #32]
 8003d84:	f007 fc12 	bl	800b5ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	3310      	adds	r3, #16
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	3304      	adds	r3, #4
 8003d9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	78db      	ldrb	r3, [r3, #3]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d108      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2200      	movs	r2, #0
 8003da8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fb03 	bl	80043bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003dd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fb42 	bl	800445e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	3301      	adds	r3, #1
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f47f af2e 	bne.w	8003c4a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f007 fdd9 	bl	800b9aa <USB_ReadInterrupts>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e02:	d122      	bne.n	8003e4a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d108      	bne.n	8003e34 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fcf5 	bl	800481c <HAL_PCDEx_LPM_Callback>
 8003e32:	e002      	b.n	8003e3a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 faab 	bl	8004390 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f007 fdab 	bl	800b9aa <USB_ReadInterrupts>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5e:	d112      	bne.n	8003e86 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d102      	bne.n	8003e76 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fa83 	bl	800437c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f007 fd8d 	bl	800b9aa <USB_ReadInterrupts>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e9a:	d121      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003eaa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d111      	bne.n	8003eda <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	f003 020f 	and.w	r2, r3, #15
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fca2 	bl	800481c <HAL_PCDEx_LPM_Callback>
 8003ed8:	e002      	b.n	8003ee0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa4e 	bl	800437c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f007 fd60 	bl	800b9aa <USB_ReadInterrupts>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef4:	f040 80b7 	bne.w	8004066 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2110      	movs	r1, #16
 8003f12:	4618      	mov	r0, r3
 8003f14:	f007 fb4a 	bl	800b5ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f1c:	e046      	b.n	8003fac <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f42:	0151      	lsls	r1, r2, #5
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	440a      	add	r2, r1
 8003f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fa0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fa4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa8:	3301      	adds	r3, #1
 8003faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	791b      	ldrb	r3, [r3, #4]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d3b2      	bcc.n	8003f1e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003fca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7bdb      	ldrb	r3, [r3, #15]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d016      	beq.n	8004002 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fe4:	f043 030b 	orr.w	r3, r3, #11
 8003fe8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ffa:	f043 030b 	orr.w	r3, r3, #11
 8003ffe:	6453      	str	r3, [r2, #68]	@ 0x44
 8004000:	e015      	b.n	800402e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004010:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004014:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004018:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004028:	f043 030b 	orr.w	r3, r3, #11
 800402c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800403c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004040:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004050:	461a      	mov	r2, r3
 8004052:	f007 fd6f 	bl	800bb34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f007 fc9d 	bl	800b9aa <USB_ReadInterrupts>
 8004070:	4603      	mov	r3, r0
 8004072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407a:	d123      	bne.n	80040c4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f007 fd33 	bl	800baec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f007 fb07 	bl	800b69e <USB_GetDevSpeed>
 8004090:	4603      	mov	r3, r0
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681c      	ldr	r4, [r3, #0]
 800409c:	f001 fede 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 80040a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040a6:	461a      	mov	r2, r3
 80040a8:	4620      	mov	r0, r4
 80040aa:	f007 f833 	bl	800b114 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f95a 	bl	8004368 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80040c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f007 fc6e 	bl	800b9aa <USB_ReadInterrupts>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d10a      	bne.n	80040ee <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f93b 	bl	8004354 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f002 0208 	and.w	r2, r2, #8
 80040ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f007 fc59 	bl	800b9aa <USB_ReadInterrupts>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fe:	2b80      	cmp	r3, #128	@ 0x80
 8004100:	d123      	bne.n	800414a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800410e:	2301      	movs	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
 8004112:	e014      	b.n	800413e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d105      	bne.n	8004138 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f962 	bl	80043fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	3301      	adds	r3, #1
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	791b      	ldrb	r3, [r3, #4]
 8004142:	461a      	mov	r2, r3
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	4293      	cmp	r3, r2
 8004148:	d3e4      	bcc.n	8004114 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f007 fc2b 	bl	800b9aa <USB_ReadInterrupts>
 8004154:	4603      	mov	r3, r0
 8004156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800415e:	d13c      	bne.n	80041da <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004160:	2301      	movs	r3, #1
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
 8004164:	e02b      	b.n	80041be <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	3318      	adds	r3, #24
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d115      	bne.n	80041b8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800418c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800418e:	2b00      	cmp	r3, #0
 8004190:	da12      	bge.n	80041b8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	3317      	adds	r3, #23
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f922 	bl	80043fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	3301      	adds	r3, #1
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	791b      	ldrb	r3, [r3, #4]
 80041c2:	461a      	mov	r2, r3
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d3cd      	bcc.n	8004166 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80041d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f007 fbe3 	bl	800b9aa <USB_ReadInterrupts>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041ee:	d156      	bne.n	800429e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041f0:	2301      	movs	r3, #1
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f4:	e045      	b.n	8004282 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d12e      	bne.n	800427c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800421e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004220:	2b00      	cmp	r3, #0
 8004222:	da2b      	bge.n	800427c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004230:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004234:	429a      	cmp	r2, r3
 8004236:	d121      	bne.n	800427c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004274:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004278:	6053      	str	r3, [r2, #4]
            break;
 800427a:	e008      	b.n	800428e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	3301      	adds	r3, #1
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	791b      	ldrb	r3, [r3, #4]
 8004286:	461a      	mov	r2, r3
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	4293      	cmp	r3, r2
 800428c:	d3b3      	bcc.n	80041f6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800429c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f007 fb81 	bl	800b9aa <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b2:	d10a      	bne.n	80042ca <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f88d 	bl	80043d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80042c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f007 fb6b 	bl	800b9aa <USB_ReadInterrupts>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d115      	bne.n	800430a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f879 	bl	80043e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	e000      	b.n	800430a <HAL_PCD_IRQHandler+0x996>
      return;
 8004308:	bf00      	nop
    }
  }
}
 800430a:	3734      	adds	r7, #52	@ 0x34
 800430c:	46bd      	mov	sp, r7
 800430e:	bd90      	pop	{r4, r7, pc}

08004310 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	da0c      	bge.n	800442a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 020f 	and.w	r2, r3, #15
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	3310      	adds	r3, #16
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e00c      	b.n	8004444 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	f003 020f 	and.w	r2, r3, #15
 8004430:	4613      	mov	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4413      	add	r3, r2
 8004440:	3304      	adds	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68f9      	ldr	r1, [r7, #12]
 800444a:	4618      	mov	r0, r3
 800444c:	f007 f94c 	bl	800b6e8 <USB_EPStopXfer>
 8004450:	4603      	mov	r3, r0
 8004452:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004454:	7afb      	ldrb	r3, [r7, #11]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b08a      	sub	sp, #40	@ 0x28
 8004462:	af02      	add	r7, sp, #8
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	3310      	adds	r3, #16
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	429a      	cmp	r2, r3
 8004490:	d901      	bls.n	8004496 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06b      	b.n	800456e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d902      	bls.n	80044b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3303      	adds	r3, #3
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044ba:	e02a      	b.n	8004512 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d902      	bls.n	80044d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	3303      	adds	r3, #3
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68d9      	ldr	r1, [r3, #12]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4603      	mov	r3, r0
 80044f4:	6978      	ldr	r0, [r7, #20]
 80044f6:	f007 f9a1 	bl	800b83c <USB_WritePacket>

    ep->xfer_buff  += len;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	441a      	add	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	441a      	add	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	429a      	cmp	r2, r3
 8004526:	d809      	bhi.n	800453c <PCD_WriteEmptyTxFifo+0xde>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004530:	429a      	cmp	r2, r3
 8004532:	d203      	bcs.n	800453c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1bf      	bne.n	80044bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	429a      	cmp	r2, r3
 8004546:	d811      	bhi.n	800456c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	2201      	movs	r2, #1
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800455c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	43db      	mvns	r3, r3
 8004562:	6939      	ldr	r1, [r7, #16]
 8004564:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004568:	4013      	ands	r3, r2
 800456a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	333c      	adds	r3, #60	@ 0x3c
 8004590:	3304      	adds	r3, #4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	799b      	ldrb	r3, [r3, #6]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d17b      	bne.n	80046a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	4a61      	ldr	r2, [pc, #388]	@ (8004740 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	f240 80b9 	bls.w	8004734 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80b3 	beq.w	8004734 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e0:	6093      	str	r3, [r2, #8]
 80045e2:	e0a7      	b.n	8004734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	2320      	movs	r3, #32
 80045fe:	6093      	str	r3, [r2, #8]
 8004600:	e098      	b.n	8004734 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	f040 8093 	bne.w	8004734 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	4a4b      	ldr	r2, [pc, #300]	@ (8004740 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d90f      	bls.n	8004636 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462c:	461a      	mov	r2, r3
 800462e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004632:	6093      	str	r3, [r2, #8]
 8004634:	e07e      	b.n	8004734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4413      	add	r3, r2
 8004648:	3304      	adds	r3, #4
 800464a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	0159      	lsls	r1, r3, #5
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	440b      	add	r3, r1
 8004658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004662:	1ad2      	subs	r2, r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d114      	bne.n	8004698 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004680:	461a      	mov	r2, r3
 8004682:	2101      	movs	r1, #1
 8004684:	f007 fa56 	bl	800bb34 <USB_EP0_OutStart>
 8004688:	e006      	b.n	8004698 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	441a      	add	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fe36 	bl	8004310 <HAL_PCD_DataOutStageCallback>
 80046a4:	e046      	b.n	8004734 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	4a26      	ldr	r2, [pc, #152]	@ (8004744 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d124      	bne.n	80046f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c4:	461a      	mov	r2, r3
 80046c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ca:	6093      	str	r3, [r2, #8]
 80046cc:	e032      	b.n	8004734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e4:	461a      	mov	r2, r3
 80046e6:	2320      	movs	r3, #32
 80046e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	4619      	mov	r1, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff fe0d 	bl	8004310 <HAL_PCD_DataOutStageCallback>
 80046f6:	e01d      	b.n	8004734 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d114      	bne.n	8004728 <PCD_EP_OutXfrComplete_int+0x1b0>
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004720:	461a      	mov	r2, r3
 8004722:	2100      	movs	r1, #0
 8004724:	f007 fa06 	bl	800bb34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fdee 	bl	8004310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	4f54300a 	.word	0x4f54300a
 8004744:	4f54310a 	.word	0x4f54310a

08004748 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	333c      	adds	r3, #60	@ 0x3c
 8004760:	3304      	adds	r3, #4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d90e      	bls.n	800479c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004794:	461a      	mov	r2, r3
 8004796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800479a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fdcf 	bl	8004340 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a0a      	ldr	r2, [pc, #40]	@ (80047d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d90c      	bls.n	80047c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	799b      	ldrb	r3, [r3, #6]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047bc:	461a      	mov	r2, r3
 80047be:	2101      	movs	r1, #1
 80047c0:	f007 f9b8 	bl	800bb34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	4f54300a 	.word	0x4f54300a

080047d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004806:	f043 0303 	orr.w	r3, r3, #3
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800483c:	4b39      	ldr	r3, [pc, #228]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800483e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004844:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d10b      	bne.n	8004866 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004854:	d905      	bls.n	8004862 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004856:	4b33      	ldr	r3, [pc, #204]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	4a32      	ldr	r2, [pc, #200]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004860:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e057      	b.n	8004916 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486c:	d90a      	bls.n	8004884 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800486e:	4b2d      	ldr	r3, [pc, #180]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4313      	orrs	r3, r2
 800487a:	4a2a      	ldr	r2, [pc, #168]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800487c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004880:	60d3      	str	r3, [r2, #12]
 8004882:	e007      	b.n	8004894 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004884:	4b27      	ldr	r3, [pc, #156]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800488c:	4925      	ldr	r1, [pc, #148]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4313      	orrs	r3, r2
 8004892:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004894:	4b24      	ldr	r3, [pc, #144]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a24      	ldr	r2, [pc, #144]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	2232      	movs	r2, #50	@ 0x32
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	4a21      	ldr	r2, [pc, #132]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	099b      	lsrs	r3, r3, #6
 80048ae:	3301      	adds	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80048b2:	e002      	b.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80048ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_PWREx_ControlVoltageScaling+0x98>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f3      	bne.n	80048b4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80048d2:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a15      	ldr	r2, [pc, #84]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	2232      	movs	r2, #50	@ 0x32
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	4a11      	ldr	r2, [pc, #68]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	099b      	lsrs	r3, r3, #6
 80048ec:	3301      	adds	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048f0:	e002      	b.n	80048f8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f3      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e000      	b.n	8004916 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	46020800 	.word	0x46020800
 8004928:	20000000 	.word	0x20000000
 800492c:	10624dd3 	.word	0x10624dd3

08004930 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <HAL_PWREx_GetVoltageRange+0x18>)
 8004936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004938:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	46020800 	.word	0x46020800

0800494c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004954:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <HAL_PWREx_ConfigSupply+0x94>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a22      	ldr	r2, [pc, #136]	@ (80049e4 <HAL_PWREx_ConfigSupply+0x98>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	099b      	lsrs	r3, r3, #6
 8004960:	2232      	movs	r2, #50	@ 0x32
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	4a1f      	ldr	r2, [pc, #124]	@ (80049e4 <HAL_PWREx_ConfigSupply+0x98>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d113      	bne.n	80049a0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004978:	4b1b      	ldr	r3, [pc, #108]	@ (80049e8 <HAL_PWREx_ConfigSupply+0x9c>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a1a      	ldr	r2, [pc, #104]	@ (80049e8 <HAL_PWREx_ConfigSupply+0x9c>)
 800497e:	f023 0302 	bic.w	r3, r3, #2
 8004982:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004984:	e002      	b.n	800498c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3b01      	subs	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800498c:	4b16      	ldr	r3, [pc, #88]	@ (80049e8 <HAL_PWREx_ConfigSupply+0x9c>)
 800498e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d116      	bne.n	80049c6 <HAL_PWREx_ConfigSupply+0x7a>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f3      	bne.n	8004986 <HAL_PWREx_ConfigSupply+0x3a>
 800499e:	e012      	b.n	80049c6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80049a0:	4b11      	ldr	r3, [pc, #68]	@ (80049e8 <HAL_PWREx_ConfigSupply+0x9c>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4a10      	ldr	r2, [pc, #64]	@ (80049e8 <HAL_PWREx_ConfigSupply+0x9c>)
 80049a6:	f043 0302 	orr.w	r3, r3, #2
 80049aa:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80049ac:	e002      	b.n	80049b4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80049b4:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <HAL_PWREx_ConfigSupply+0x9c>)
 80049b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <HAL_PWREx_ConfigSupply+0x7a>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f3      	bne.n	80049ae <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e000      	b.n	80049d2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000000 	.word	0x20000000
 80049e4:	10624dd3 	.word	0x10624dd3
 80049e8:	46020800 	.word	0x46020800

080049ec <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80049f0:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	4a04      	ldr	r2, [pc, #16]	@ (8004a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049fa:	6113      	str	r3, [r2, #16]
}
 80049fc:	bf00      	nop
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	46020800 	.word	0x46020800

08004a0c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	4a04      	ldr	r2, [pc, #16]	@ (8004a28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a1a:	6113      	str	r3, [r2, #16]
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	46020800 	.word	0x46020800

08004a2c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004a30:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <HAL_PWREx_EnableVddA+0x1c>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	4a04      	ldr	r2, [pc, #16]	@ (8004a48 <HAL_PWREx_EnableVddA+0x1c>)
 8004a36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a3a:	6113      	str	r3, [r2, #16]
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	46020800 	.word	0x46020800

08004a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08e      	sub	sp, #56	@ 0x38
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f000 bec8 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a66:	4b99      	ldr	r3, [pc, #612]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
 8004a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a70:	4b96      	ldr	r3, [pc, #600]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 816c 	beq.w	8004d60 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_RCC_OscConfig+0x52>
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	f040 80de 	bne.w	8004c52 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	f040 80da 	bne.w	8004c52 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d102      	bne.n	8004aac <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f000 bea5 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ab0:	4b86      	ldr	r3, [pc, #536]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x7a>
 8004abc:	4b83      	ldr	r3, [pc, #524]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004ac4:	e005      	b.n	8004ad2 <HAL_RCC_OscConfig+0x86>
 8004ac6:	4b81      	ldr	r3, [pc, #516]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004acc:	041b      	lsls	r3, r3, #16
 8004ace:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d255      	bcs.n	8004b82 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 fa11 	bl	8005f08 <RCC_SetFlashLatencyFromMSIRange>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f000 be82 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004af2:	4b76      	ldr	r3, [pc, #472]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	4a75      	ldr	r2, [pc, #468]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004af8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004afc:	6093      	str	r3, [r2, #8]
 8004afe:	4b73      	ldr	r3, [pc, #460]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	4970      	ldr	r1, [pc, #448]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b18:	d309      	bcc.n	8004b2e <HAL_RCC_OscConfig+0xe2>
 8004b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f023 021f 	bic.w	r2, r3, #31
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	4969      	ldr	r1, [pc, #420]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60cb      	str	r3, [r1, #12]
 8004b2c:	e07e      	b.n	8004c2c <HAL_RCC_OscConfig+0x1e0>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	da0a      	bge.n	8004b4c <HAL_RCC_OscConfig+0x100>
 8004b36:	4b65      	ldr	r3, [pc, #404]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	015b      	lsls	r3, r3, #5
 8004b44:	4961      	ldr	r1, [pc, #388]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60cb      	str	r3, [r1, #12]
 8004b4a:	e06f      	b.n	8004c2c <HAL_RCC_OscConfig+0x1e0>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b54:	d30a      	bcc.n	8004b6c <HAL_RCC_OscConfig+0x120>
 8004b56:	4b5d      	ldr	r3, [pc, #372]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	029b      	lsls	r3, r3, #10
 8004b64:	4959      	ldr	r1, [pc, #356]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60cb      	str	r3, [r1, #12]
 8004b6a:	e05f      	b.n	8004c2c <HAL_RCC_OscConfig+0x1e0>
 8004b6c:	4b57      	ldr	r3, [pc, #348]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	03db      	lsls	r3, r3, #15
 8004b7a:	4954      	ldr	r1, [pc, #336]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60cb      	str	r3, [r1, #12]
 8004b80:	e054      	b.n	8004c2c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004b82:	4b52      	ldr	r3, [pc, #328]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4a51      	ldr	r2, [pc, #324]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b8c:	6093      	str	r3, [r2, #8]
 8004b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	494c      	ldr	r1, [pc, #304]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004ba8:	d309      	bcc.n	8004bbe <HAL_RCC_OscConfig+0x172>
 8004baa:	4b48      	ldr	r3, [pc, #288]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f023 021f 	bic.w	r2, r3, #31
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	4945      	ldr	r1, [pc, #276]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60cb      	str	r3, [r1, #12]
 8004bbc:	e028      	b.n	8004c10 <HAL_RCC_OscConfig+0x1c4>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da0a      	bge.n	8004bdc <HAL_RCC_OscConfig+0x190>
 8004bc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	015b      	lsls	r3, r3, #5
 8004bd4:	493d      	ldr	r1, [pc, #244]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
 8004bda:	e019      	b.n	8004c10 <HAL_RCC_OscConfig+0x1c4>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be4:	d30a      	bcc.n	8004bfc <HAL_RCC_OscConfig+0x1b0>
 8004be6:	4b39      	ldr	r3, [pc, #228]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	029b      	lsls	r3, r3, #10
 8004bf4:	4935      	ldr	r1, [pc, #212]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60cb      	str	r3, [r1, #12]
 8004bfa:	e009      	b.n	8004c10 <HAL_RCC_OscConfig+0x1c4>
 8004bfc:	4b33      	ldr	r3, [pc, #204]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	03db      	lsls	r3, r3, #15
 8004c0a:	4930      	ldr	r1, [pc, #192]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 f974 	bl	8005f08 <RCC_SetFlashLatencyFromMSIRange>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f000 bde5 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004c2c:	f001 f916 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c30:	4b27      	ldr	r3, [pc, #156]	@ (8004cd0 <HAL_RCC_OscConfig+0x284>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fc ff09 	bl	8001a4c <HAL_InitTick>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 808a 	beq.w	8004d5e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c4e:	f000 bdd2 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d066      	beq.n	8004d28 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c66:	f7fc ff7b 	bl	8001b60 <HAL_GetTick>
 8004c6a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004c6c:	e009      	b.n	8004c82 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c6e:	f7fc ff77 	bl	8001b60 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d902      	bls.n	8004c82 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	f000 bdba 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0ef      	beq.n	8004c6e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4a0e      	ldr	r2, [pc, #56]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c98:	6093      	str	r3, [r2, #8]
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	4909      	ldr	r1, [pc, #36]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004cb4:	d30e      	bcc.n	8004cd4 <HAL_RCC_OscConfig+0x288>
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f023 021f 	bic.w	r2, r3, #31
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	4902      	ldr	r1, [pc, #8]	@ (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60cb      	str	r3, [r1, #12]
 8004cc8:	e04a      	b.n	8004d60 <HAL_RCC_OscConfig+0x314>
 8004cca:	bf00      	nop
 8004ccc:	46020c00 	.word	0x46020c00
 8004cd0:	20000004 	.word	0x20000004
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da0a      	bge.n	8004cf2 <HAL_RCC_OscConfig+0x2a6>
 8004cdc:	4b98      	ldr	r3, [pc, #608]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	015b      	lsls	r3, r3, #5
 8004cea:	4995      	ldr	r1, [pc, #596]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60cb      	str	r3, [r1, #12]
 8004cf0:	e036      	b.n	8004d60 <HAL_RCC_OscConfig+0x314>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfa:	d30a      	bcc.n	8004d12 <HAL_RCC_OscConfig+0x2c6>
 8004cfc:	4b90      	ldr	r3, [pc, #576]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	029b      	lsls	r3, r3, #10
 8004d0a:	498d      	ldr	r1, [pc, #564]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60cb      	str	r3, [r1, #12]
 8004d10:	e026      	b.n	8004d60 <HAL_RCC_OscConfig+0x314>
 8004d12:	4b8b      	ldr	r3, [pc, #556]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	03db      	lsls	r3, r3, #15
 8004d20:	4987      	ldr	r1, [pc, #540]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60cb      	str	r3, [r1, #12]
 8004d26:	e01b      	b.n	8004d60 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004d28:	4b85      	ldr	r3, [pc, #532]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a84      	ldr	r2, [pc, #528]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d34:	f7fc ff14 	bl	8001b60 <HAL_GetTick>
 8004d38:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004d3a:	e009      	b.n	8004d50 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d3c:	f7fc ff10 	bl	8001b60 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d902      	bls.n	8004d50 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	f000 bd53 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004d50:	4b7b      	ldr	r3, [pc, #492]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1ef      	bne.n	8004d3c <HAL_RCC_OscConfig+0x2f0>
 8004d5c:	e000      	b.n	8004d60 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 808b 	beq.w	8004e84 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_OscConfig+0x334>
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d109      	bne.n	8004d8e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d106      	bne.n	8004d8e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d17d      	bne.n	8004e84 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f000 bd34 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_OscConfig+0x35a>
 8004d98:	4b69      	ldr	r3, [pc, #420]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a68      	ldr	r2, [pc, #416]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	e041      	b.n	8004e2a <HAL_RCC_OscConfig+0x3de>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dae:	d112      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x38a>
 8004db0:	4b63      	ldr	r3, [pc, #396]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a62      	ldr	r2, [pc, #392]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004db6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4b60      	ldr	r3, [pc, #384]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5f      	ldr	r2, [pc, #380]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004dc2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	4b5d      	ldr	r3, [pc, #372]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a5c      	ldr	r2, [pc, #368]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e029      	b.n	8004e2a <HAL_RCC_OscConfig+0x3de>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004dde:	d112      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3ba>
 8004de0:	4b57      	ldr	r3, [pc, #348]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a56      	ldr	r2, [pc, #344]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004de6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b54      	ldr	r3, [pc, #336]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a53      	ldr	r2, [pc, #332]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	4b51      	ldr	r3, [pc, #324]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a50      	ldr	r2, [pc, #320]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e011      	b.n	8004e2a <HAL_RCC_OscConfig+0x3de>
 8004e06:	4b4e      	ldr	r3, [pc, #312]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	4b4b      	ldr	r3, [pc, #300]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a4a      	ldr	r2, [pc, #296]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	4b48      	ldr	r3, [pc, #288]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a47      	ldr	r2, [pc, #284]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004e24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004e28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d014      	beq.n	8004e5c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004e32:	f7fc fe95 	bl	8001b60 <HAL_GetTick>
 8004e36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e38:	e009      	b.n	8004e4e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e3a:	f7fc fe91 	bl	8001b60 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b64      	cmp	r3, #100	@ 0x64
 8004e46:	d902      	bls.n	8004e4e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	f000 bcd4 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ef      	beq.n	8004e3a <HAL_RCC_OscConfig+0x3ee>
 8004e5a:	e013      	b.n	8004e84 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004e5c:	f7fc fe80 	bl	8001b60 <HAL_GetTick>
 8004e60:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e62:	e009      	b.n	8004e78 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e64:	f7fc fe7c 	bl	8001b60 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	@ 0x64
 8004e70:	d902      	bls.n	8004e78 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	f000 bcbf 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e78:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1ef      	bne.n	8004e64 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05f      	beq.n	8004f50 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d005      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x456>
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	d114      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d111      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f000 bca3 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004eb0:	4b23      	ldr	r3, [pc, #140]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	4920      	ldr	r1, [pc, #128]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ec4:	e044      	b.n	8004f50 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d024      	beq.n	8004f18 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004ece:	4b1c      	ldr	r3, [pc, #112]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004eda:	f7fc fe41 	bl	8001b60 <HAL_GetTick>
 8004ede:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee0:	e009      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee2:	f7fc fe3d 	bl	8001b60 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d902      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	f000 bc80 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ef6:	4b12      	ldr	r3, [pc, #72]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ef      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004f02:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	490b      	ldr	r1, [pc, #44]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	610b      	str	r3, [r1, #16]
 8004f16:	e01b      	b.n	8004f50 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004f18:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a08      	ldr	r2, [pc, #32]	@ (8004f40 <HAL_RCC_OscConfig+0x4f4>)
 8004f1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f24:	f7fc fe1c 	bl	8001b60 <HAL_GetTick>
 8004f28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2c:	f7fc fe18 	bl	8001b60 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d904      	bls.n	8004f44 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	f000 bc5b 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
 8004f40:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f44:	4baf      	ldr	r3, [pc, #700]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ed      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80c8 	beq.w	80050ee <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f64:	4ba7      	ldr	r3, [pc, #668]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d111      	bne.n	8004f96 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f72:	4ba4      	ldr	r3, [pc, #656]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8004f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f78:	4aa2      	ldr	r2, [pc, #648]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8004f7a:	f043 0304 	orr.w	r3, r3, #4
 8004f7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f82:	4ba0      	ldr	r3, [pc, #640]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8004f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f96:	4b9c      	ldr	r3, [pc, #624]	@ (8005208 <HAL_RCC_OscConfig+0x7bc>)
 8004f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d119      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004fa2:	4b99      	ldr	r3, [pc, #612]	@ (8005208 <HAL_RCC_OscConfig+0x7bc>)
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa6:	4a98      	ldr	r2, [pc, #608]	@ (8005208 <HAL_RCC_OscConfig+0x7bc>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fae:	f7fc fdd7 	bl	8001b60 <HAL_GetTick>
 8004fb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fb4:	e009      	b.n	8004fca <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb6:	f7fc fdd3 	bl	8001b60 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d902      	bls.n	8004fca <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	f000 bc16 	b.w	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fca:	4b8f      	ldr	r3, [pc, #572]	@ (8005208 <HAL_RCC_OscConfig+0x7bc>)
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0ef      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d05f      	beq.n	800509e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004fde:	4b89      	ldr	r3, [pc, #548]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8004fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fe4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d037      	beq.n	8005064 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d006      	beq.n	800500c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e3f4      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01b      	beq.n	800504e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005016:	4b7b      	ldr	r3, [pc, #492]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800501c:	4a79      	ldr	r2, [pc, #484]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 800501e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005026:	f7fc fd9b 	bl	8001b60 <HAL_GetTick>
 800502a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800502e:	f7fc fd97 	bl	8001b60 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b05      	cmp	r3, #5
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e3da      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005040:	4b70      	ldr	r3, [pc, #448]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1ef      	bne.n	800502e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800504e:	4b6d      	ldr	r3, [pc, #436]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005054:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	4969      	ldr	r1, [pc, #420]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005064:	4b67      	ldr	r3, [pc, #412]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800506a:	4a66      	ldr	r2, [pc, #408]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 800506c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005070:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005074:	f7fc fd74 	bl	8001b60 <HAL_GetTick>
 8005078:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800507c:	f7fc fd70 	bl	8001b60 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b05      	cmp	r3, #5
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e3b3      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800508e:	4b5d      	ldr	r3, [pc, #372]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ef      	beq.n	800507c <HAL_RCC_OscConfig+0x630>
 800509c:	e01b      	b.n	80050d6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800509e:	4b59      	ldr	r3, [pc, #356]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80050a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050a4:	4a57      	ldr	r2, [pc, #348]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80050a6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80050aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80050ae:	f7fc fd57 	bl	8001b60 <HAL_GetTick>
 80050b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b6:	f7fc fd53 	bl	8001b60 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e396      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80050c8:	4b4e      	ldr	r3, [pc, #312]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80050ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1ef      	bne.n	80050b6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050de:	4b49      	ldr	r3, [pc, #292]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80050e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050e4:	4a47      	ldr	r2, [pc, #284]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80050e6:	f023 0304 	bic.w	r3, r3, #4
 80050ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8111 	beq.w	800531e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80050fc:	2300      	movs	r3, #0
 80050fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005102:	4b40      	ldr	r3, [pc, #256]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d111      	bne.n	8005134 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005110:	4b3c      	ldr	r3, [pc, #240]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005116:	4a3b      	ldr	r2, [pc, #236]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005120:	4b38      	ldr	r3, [pc, #224]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005134:	4b34      	ldr	r3, [pc, #208]	@ (8005208 <HAL_RCC_OscConfig+0x7bc>)
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d118      	bne.n	8005172 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005140:	4b31      	ldr	r3, [pc, #196]	@ (8005208 <HAL_RCC_OscConfig+0x7bc>)
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	4a30      	ldr	r2, [pc, #192]	@ (8005208 <HAL_RCC_OscConfig+0x7bc>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514c:	f7fc fd08 	bl	8001b60 <HAL_GetTick>
 8005150:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005154:	f7fc fd04 	bl	8001b60 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e347      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005166:	4b28      	ldr	r3, [pc, #160]	@ (8005208 <HAL_RCC_OscConfig+0x7bc>)
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01f      	beq.n	80051be <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d010      	beq.n	80051ac <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800518a:	4b1e      	ldr	r3, [pc, #120]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 800518c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005190:	4a1c      	ldr	r2, [pc, #112]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 8005192:	f043 0304 	orr.w	r3, r3, #4
 8005196:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800519a:	4b1a      	ldr	r3, [pc, #104]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 800519c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051a0:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051aa:	e018      	b.n	80051de <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051ac:	4b15      	ldr	r3, [pc, #84]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80051ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051b2:	4a14      	ldr	r2, [pc, #80]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051bc:	e00f      	b.n	80051de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051be:	4b11      	ldr	r3, [pc, #68]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80051c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80051d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005204 <HAL_RCC_OscConfig+0x7b8>)
 80051d6:	f023 0304 	bic.w	r3, r3, #4
 80051da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d057      	beq.n	8005296 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80051e6:	f7fc fcbb 	bl	8001b60 <HAL_GetTick>
 80051ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ec:	e00e      	b.n	800520c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7fc fcb7 	bl	8001b60 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d905      	bls.n	800520c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e2f8      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
 8005204:	46020c00 	.word	0x46020c00
 8005208:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520c:	4b9c      	ldr	r3, [pc, #624]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 800520e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0e9      	beq.n	80051ee <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01b      	beq.n	800525e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005226:	4b96      	ldr	r3, [pc, #600]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800522c:	4a94      	ldr	r2, [pc, #592]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 800522e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005232:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005236:	e00a      	b.n	800524e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005238:	f7fc fc92 	bl	8001b60 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e2d3      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800524e:	4b8c      	ldr	r3, [pc, #560]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ed      	beq.n	8005238 <HAL_RCC_OscConfig+0x7ec>
 800525c:	e053      	b.n	8005306 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800525e:	4b88      	ldr	r3, [pc, #544]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005264:	4a86      	ldr	r2, [pc, #536]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800526a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fc fc76 	bl	8001b60 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e2b7      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005286:	4b7e      	ldr	r3, [pc, #504]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800528c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ed      	bne.n	8005270 <HAL_RCC_OscConfig+0x824>
 8005294:	e037      	b.n	8005306 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005296:	f7fc fc63 	bl	8001b60 <HAL_GetTick>
 800529a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800529c:	e00a      	b.n	80052b4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fc fc5f 	bl	8001b60 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e2a0      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052b4:	4b72      	ldr	r3, [pc, #456]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80052b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ed      	bne.n	800529e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80052c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80052c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01a      	beq.n	8005306 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80052d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80052d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80052d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052e0:	e00a      	b.n	80052f8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e2:	f7fc fc3d 	bl	8001b60 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e27e      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052f8:	4b61      	ldr	r3, [pc, #388]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80052fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1ed      	bne.n	80052e2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005306:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800530a:	2b01      	cmp	r3, #1
 800530c:	d107      	bne.n	800531e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530e:	4b5c      	ldr	r3, [pc, #368]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005314:	4a5a      	ldr	r2, [pc, #360]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005316:	f023 0304 	bic.w	r3, r3, #4
 800531a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d036      	beq.n	8005398 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d019      	beq.n	8005366 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005332:	4b53      	ldr	r3, [pc, #332]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a52      	ldr	r2, [pc, #328]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005338:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800533c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800533e:	f7fc fc0f 	bl	8001b60 <HAL_GetTick>
 8005342:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005346:	f7fc fc0b 	bl	8001b60 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e24e      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005358:	4b49      	ldr	r3, [pc, #292]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f0      	beq.n	8005346 <HAL_RCC_OscConfig+0x8fa>
 8005364:	e018      	b.n	8005398 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005366:	4b46      	ldr	r3, [pc, #280]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a45      	ldr	r2, [pc, #276]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 800536c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005370:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005372:	f7fc fbf5 	bl	8001b60 <HAL_GetTick>
 8005376:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800537a:	f7fc fbf1 	bl	8001b60 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e234      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800538c:	4b3c      	ldr	r3, [pc, #240]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d036      	beq.n	8005412 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d019      	beq.n	80053e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80053ac:	4b34      	ldr	r3, [pc, #208]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a33      	ldr	r2, [pc, #204]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80053b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053b8:	f7fc fbd2 	bl	8001b60 <HAL_GetTick>
 80053bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80053c0:	f7fc fbce 	bl	8001b60 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e211      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80053d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x974>
 80053de:	e018      	b.n	8005412 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80053e0:	4b27      	ldr	r3, [pc, #156]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a26      	ldr	r2, [pc, #152]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 80053e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053ec:	f7fc fbb8 	bl	8001b60 <HAL_GetTick>
 80053f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80053f4:	f7fc fbb4 	bl	8001b60 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e1f7      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005406:	4b1e      	ldr	r3, [pc, #120]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f0      	bne.n	80053f4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d07f      	beq.n	800551e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005422:	2b00      	cmp	r3, #0
 8005424:	d062      	beq.n	80054ec <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005426:	4b16      	ldr	r3, [pc, #88]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 800542c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005430:	6093      	str	r3, [r2, #8]
 8005432:	4b13      	ldr	r3, [pc, #76]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	4910      	ldr	r1, [pc, #64]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005440:	4313      	orrs	r3, r2
 8005442:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800544c:	d309      	bcc.n	8005462 <HAL_RCC_OscConfig+0xa16>
 800544e:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f023 021f 	bic.w	r2, r3, #31
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	4909      	ldr	r1, [pc, #36]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 800545c:	4313      	orrs	r3, r2
 800545e:	60cb      	str	r3, [r1, #12]
 8005460:	e02a      	b.n	80054b8 <HAL_RCC_OscConfig+0xa6c>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	da0c      	bge.n	8005484 <HAL_RCC_OscConfig+0xa38>
 800546a:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	015b      	lsls	r3, r3, #5
 8005478:	4901      	ldr	r1, [pc, #4]	@ (8005480 <HAL_RCC_OscConfig+0xa34>)
 800547a:	4313      	orrs	r3, r2
 800547c:	60cb      	str	r3, [r1, #12]
 800547e:	e01b      	b.n	80054b8 <HAL_RCC_OscConfig+0xa6c>
 8005480:	46020c00 	.word	0x46020c00
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800548c:	d30a      	bcc.n	80054a4 <HAL_RCC_OscConfig+0xa58>
 800548e:	4ba1      	ldr	r3, [pc, #644]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	029b      	lsls	r3, r3, #10
 800549c:	499d      	ldr	r1, [pc, #628]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	60cb      	str	r3, [r1, #12]
 80054a2:	e009      	b.n	80054b8 <HAL_RCC_OscConfig+0xa6c>
 80054a4:	4b9b      	ldr	r3, [pc, #620]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	03db      	lsls	r3, r3, #15
 80054b2:	4998      	ldr	r1, [pc, #608]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80054b8:	4b96      	ldr	r3, [pc, #600]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a95      	ldr	r2, [pc, #596]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80054be:	f043 0310 	orr.w	r3, r3, #16
 80054c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054c4:	f7fc fb4c 	bl	8001b60 <HAL_GetTick>
 80054c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80054cc:	f7fc fb48 	bl	8001b60 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e18b      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80054de:	4b8d      	ldr	r3, [pc, #564]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0xa80>
 80054ea:	e018      	b.n	800551e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80054ec:	4b89      	ldr	r3, [pc, #548]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a88      	ldr	r2, [pc, #544]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80054f2:	f023 0310 	bic.w	r3, r3, #16
 80054f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054f8:	f7fc fb32 	bl	8001b60 <HAL_GetTick>
 80054fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005500:	f7fc fb2e 	bl	8001b60 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e171      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005512:	4b80      	ldr	r3, [pc, #512]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 8166 	beq.w	80057f4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005528:	2300      	movs	r3, #0
 800552a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800552e:	4b79      	ldr	r3, [pc, #484]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b0c      	cmp	r3, #12
 8005538:	f000 80f2 	beq.w	8005720 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	2b02      	cmp	r3, #2
 8005542:	f040 80c5 	bne.w	80056d0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4b73      	ldr	r3, [pc, #460]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a72      	ldr	r2, [pc, #456]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 800554c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005550:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005552:	f7fc fb05 	bl	8001b60 <HAL_GetTick>
 8005556:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555a:	f7fc fb01 	bl	8001b60 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e144      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800556c:	4b69      	ldr	r3, [pc, #420]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f0      	bne.n	800555a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005578:	4b66      	ldr	r3, [pc, #408]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 800557a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d111      	bne.n	80055aa <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	4b63      	ldr	r3, [pc, #396]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800558c:	4a61      	ldr	r2, [pc, #388]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005596:	4b5f      	ldr	r3, [pc, #380]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80055aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005718 <HAL_RCC_OscConfig+0xccc>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055b6:	d102      	bne.n	80055be <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80055be:	4b56      	ldr	r3, [pc, #344]	@ (8005718 <HAL_RCC_OscConfig+0xccc>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	4a55      	ldr	r2, [pc, #340]	@ (8005718 <HAL_RCC_OscConfig+0xccc>)
 80055c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055c8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80055ca:	4b52      	ldr	r3, [pc, #328]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80055de:	3a01      	subs	r2, #1
 80055e0:	0212      	lsls	r2, r2, #8
 80055e2:	4311      	orrs	r1, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80055e8:	430a      	orrs	r2, r1
 80055ea:	494a      	ldr	r1, [pc, #296]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80055f0:	4b48      	ldr	r3, [pc, #288]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80055f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055f4:	4b49      	ldr	r3, [pc, #292]	@ (800571c <HAL_RCC_OscConfig+0xcd0>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055fc:	3a01      	subs	r2, #1
 80055fe:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005606:	3a01      	subs	r2, #1
 8005608:	0252      	lsls	r2, r2, #9
 800560a:	b292      	uxth	r2, r2
 800560c:	4311      	orrs	r1, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005612:	3a01      	subs	r2, #1
 8005614:	0412      	lsls	r2, r2, #16
 8005616:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800561a:	4311      	orrs	r1, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005620:	3a01      	subs	r2, #1
 8005622:	0612      	lsls	r2, r2, #24
 8005624:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005628:	430a      	orrs	r2, r1
 800562a:	493a      	ldr	r1, [pc, #232]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 800562c:	4313      	orrs	r3, r2
 800562e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005630:	4b38      	ldr	r3, [pc, #224]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	4a37      	ldr	r2, [pc, #220]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005636:	f023 0310 	bic.w	r3, r3, #16
 800563a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005640:	4a34      	ldr	r2, [pc, #208]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005646:	4b33      	ldr	r3, [pc, #204]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	4a32      	ldr	r2, [pc, #200]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 800564c:	f043 0310 	orr.w	r3, r3, #16
 8005650:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005652:	4b30      	ldr	r3, [pc, #192]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005656:	f023 020c 	bic.w	r2, r3, #12
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565e:	492d      	ldr	r1, [pc, #180]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005660:	4313      	orrs	r3, r2
 8005662:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005664:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005668:	2b01      	cmp	r3, #1
 800566a:	d105      	bne.n	8005678 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800566c:	4b2a      	ldr	r3, [pc, #168]	@ (8005718 <HAL_RCC_OscConfig+0xccc>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4a29      	ldr	r2, [pc, #164]	@ (8005718 <HAL_RCC_OscConfig+0xccc>)
 8005672:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005676:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005678:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800567c:	2b01      	cmp	r3, #1
 800567e:	d107      	bne.n	8005690 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005680:	4b24      	ldr	r3, [pc, #144]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005686:	4a23      	ldr	r2, [pc, #140]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005688:	f023 0304 	bic.w	r3, r3, #4
 800568c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005690:	4b20      	ldr	r3, [pc, #128]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1f      	ldr	r2, [pc, #124]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005696:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800569a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800569c:	f7fc fa60 	bl	8001b60 <HAL_GetTick>
 80056a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a4:	f7fc fa5c 	bl	8001b60 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e09f      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80056b6:	4b17      	ldr	r3, [pc, #92]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80056c2:	4b14      	ldr	r3, [pc, #80]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c6:	4a13      	ldr	r2, [pc, #76]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80056c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056cc:	6293      	str	r3, [r2, #40]	@ 0x28
 80056ce:	e091      	b.n	80057f4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80056d0:	4b10      	ldr	r3, [pc, #64]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80056d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80056dc:	f7fc fa40 	bl	8001b60 <HAL_GetTick>
 80056e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e4:	f7fc fa3c 	bl	8001b60 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e07f      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80056f6:	4b07      	ldr	r3, [pc, #28]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f0      	bne.n	80056e4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005702:	4b04      	ldr	r3, [pc, #16]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	4a03      	ldr	r2, [pc, #12]	@ (8005714 <HAL_RCC_OscConfig+0xcc8>)
 8005708:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800570c:	f023 0303 	bic.w	r3, r3, #3
 8005710:	6293      	str	r3, [r2, #40]	@ 0x28
 8005712:	e06f      	b.n	80057f4 <HAL_RCC_OscConfig+0xda8>
 8005714:	46020c00 	.word	0x46020c00
 8005718:	46020800 	.word	0x46020800
 800571c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005720:	4b37      	ldr	r3, [pc, #220]	@ (8005800 <HAL_RCC_OscConfig+0xdb4>)
 8005722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005724:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005726:	4b36      	ldr	r3, [pc, #216]	@ (8005800 <HAL_RCC_OscConfig+0xdb4>)
 8005728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005730:	2b01      	cmp	r3, #1
 8005732:	d039      	beq.n	80057a8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 0203 	and.w	r2, r3, #3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d132      	bne.n	80057a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	0a1b      	lsrs	r3, r3, #8
 8005746:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d129      	bne.n	80057a8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800575e:	429a      	cmp	r2, r3
 8005760:	d122      	bne.n	80057a8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800576c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800576e:	429a      	cmp	r2, r3
 8005770:	d11a      	bne.n	80057a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	0a5b      	lsrs	r3, r3, #9
 8005776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800577e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005780:	429a      	cmp	r2, r3
 8005782:	d111      	bne.n	80057a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005790:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d108      	bne.n	80057a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	0e1b      	lsrs	r3, r3, #24
 800579a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d001      	beq.n	80057ac <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e024      	b.n	80057f6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80057ac:	4b14      	ldr	r3, [pc, #80]	@ (8005800 <HAL_RCC_OscConfig+0xdb4>)
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	08db      	lsrs	r3, r3, #3
 80057b2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d01a      	beq.n	80057f4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80057be:	4b10      	ldr	r3, [pc, #64]	@ (8005800 <HAL_RCC_OscConfig+0xdb4>)
 80057c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c2:	4a0f      	ldr	r2, [pc, #60]	@ (8005800 <HAL_RCC_OscConfig+0xdb4>)
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ca:	f7fc f9c9 	bl	8001b60 <HAL_GetTick>
 80057ce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80057d0:	bf00      	nop
 80057d2:	f7fc f9c5 	bl	8001b60 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	4293      	cmp	r3, r2
 80057dc:	d0f9      	beq.n	80057d2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e2:	4a07      	ldr	r2, [pc, #28]	@ (8005800 <HAL_RCC_OscConfig+0xdb4>)
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80057e8:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <HAL_RCC_OscConfig+0xdb4>)
 80057ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ec:	4a04      	ldr	r2, [pc, #16]	@ (8005800 <HAL_RCC_OscConfig+0xdb4>)
 80057ee:	f043 0310 	orr.w	r3, r3, #16
 80057f2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3738      	adds	r7, #56	@ 0x38
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	46020c00 	.word	0x46020c00

08005804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e1d9      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005818:	4b9b      	ldr	r3, [pc, #620]	@ (8005a88 <HAL_RCC_ClockConfig+0x284>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d910      	bls.n	8005848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005826:	4b98      	ldr	r3, [pc, #608]	@ (8005a88 <HAL_RCC_ClockConfig+0x284>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 020f 	bic.w	r2, r3, #15
 800582e:	4996      	ldr	r1, [pc, #600]	@ (8005a88 <HAL_RCC_ClockConfig+0x284>)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4313      	orrs	r3, r2
 8005834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b94      	ldr	r3, [pc, #592]	@ (8005a88 <HAL_RCC_ClockConfig+0x284>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e1c1      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d010      	beq.n	8005876 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	4b8c      	ldr	r3, [pc, #560]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005860:	429a      	cmp	r2, r3
 8005862:	d908      	bls.n	8005876 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005864:	4b89      	ldr	r3, [pc, #548]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	4986      	ldr	r1, [pc, #536]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005872:	4313      	orrs	r3, r2
 8005874:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d012      	beq.n	80058a8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	4b81      	ldr	r3, [pc, #516]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	091b      	lsrs	r3, r3, #4
 800588c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005890:	429a      	cmp	r2, r3
 8005892:	d909      	bls.n	80058a8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005894:	4b7d      	ldr	r3, [pc, #500]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	497a      	ldr	r1, [pc, #488]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d010      	beq.n	80058d6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	4b74      	ldr	r3, [pc, #464]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d908      	bls.n	80058d6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80058c4:	4b71      	ldr	r3, [pc, #452]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	496e      	ldr	r1, [pc, #440]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d010      	beq.n	8005904 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	4b69      	ldr	r3, [pc, #420]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d908      	bls.n	8005904 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80058f2:	4b66      	ldr	r3, [pc, #408]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 020f 	bic.w	r2, r3, #15
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	4963      	ldr	r1, [pc, #396]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005900:	4313      	orrs	r3, r2
 8005902:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80d2 	beq.w	8005ab6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005912:	2300      	movs	r3, #0
 8005914:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b03      	cmp	r3, #3
 800591c:	d143      	bne.n	80059a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800591e:	4b5b      	ldr	r3, [pc, #364]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d110      	bne.n	800594e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800592c:	4b57      	ldr	r3, [pc, #348]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 800592e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005932:	4a56      	ldr	r2, [pc, #344]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800593c:	4b53      	ldr	r3, [pc, #332]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 800593e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800594e:	f7fc f907 	bl	8001b60 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005954:	4b4e      	ldr	r3, [pc, #312]	@ (8005a90 <HAL_RCC_ClockConfig+0x28c>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00f      	beq.n	8005980 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005960:	e008      	b.n	8005974 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005962:	f7fc f8fd 	bl	8001b60 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e12b      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005974:	4b46      	ldr	r3, [pc, #280]	@ (8005a90 <HAL_RCC_ClockConfig+0x28c>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0f0      	beq.n	8005962 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d107      	bne.n	8005996 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005986:	4b41      	ldr	r3, [pc, #260]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800598c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 800598e:	f023 0304 	bic.w	r3, r3, #4
 8005992:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005996:	4b3d      	ldr	r3, [pc, #244]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d121      	bne.n	80059e6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e112      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ae:	4b37      	ldr	r3, [pc, #220]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d115      	bne.n	80059e6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e106      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80059c6:	4b31      	ldr	r3, [pc, #196]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0fa      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059d6:	4b2d      	ldr	r3, [pc, #180]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0f2      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80059e6:	4b29      	ldr	r3, [pc, #164]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f023 0203 	bic.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	4926      	ldr	r1, [pc, #152]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80059f8:	f7fc f8b2 	bl	8001b60 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d112      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a08:	f7fc f8aa 	bl	8001b60 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e0d6      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d1ee      	bne.n	8005a08 <HAL_RCC_ClockConfig+0x204>
 8005a2a:	e044      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d112      	bne.n	8005a5a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a34:	e00a      	b.n	8005a4c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a36:	f7fc f893 	bl	8001b60 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e0bf      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f003 030c 	and.w	r3, r3, #12
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d1ee      	bne.n	8005a36 <HAL_RCC_ClockConfig+0x232>
 8005a58:	e02d      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d123      	bne.n	8005aaa <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a62:	e00a      	b.n	8005a7a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a64:	f7fc f87c 	bl	8001b60 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e0a8      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a7a:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <HAL_RCC_ClockConfig+0x288>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1ee      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x260>
 8005a86:	e016      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x2b2>
 8005a88:	40022000 	.word	0x40022000
 8005a8c:	46020c00 	.word	0x46020c00
 8005a90:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a94:	f7fc f864 	bl	8001b60 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e090      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f003 030c 	and.w	r3, r3, #12
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d1ee      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d010      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	4b43      	ldr	r3, [pc, #268]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d208      	bcs.n	8005ae4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005ad2:	4b40      	ldr	r3, [pc, #256]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f023 020f 	bic.w	r2, r3, #15
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	493d      	ldr	r1, [pc, #244]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8005bd8 <HAL_RCC_ClockConfig+0x3d4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d210      	bcs.n	8005b14 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b39      	ldr	r3, [pc, #228]	@ (8005bd8 <HAL_RCC_ClockConfig+0x3d4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 020f 	bic.w	r2, r3, #15
 8005afa:	4937      	ldr	r1, [pc, #220]	@ (8005bd8 <HAL_RCC_ClockConfig+0x3d4>)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	4b35      	ldr	r3, [pc, #212]	@ (8005bd8 <HAL_RCC_ClockConfig+0x3d4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e05b      	b.n	8005bcc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d010      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d208      	bcs.n	8005b42 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005b30:	4b28      	ldr	r3, [pc, #160]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4925      	ldr	r1, [pc, #148]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d012      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	4b20      	ldr	r3, [pc, #128]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	091b      	lsrs	r3, r3, #4
 8005b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d209      	bcs.n	8005b74 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005b60:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	4919      	ldr	r1, [pc, #100]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d010      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	4b13      	ldr	r3, [pc, #76]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d208      	bcs.n	8005ba2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005b90:	4b10      	ldr	r3, [pc, #64]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	490d      	ldr	r1, [pc, #52]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005ba2:	f000 f859 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd4 <HAL_RCC_ClockConfig+0x3d0>)
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	490a      	ldr	r1, [pc, #40]	@ (8005bdc <HAL_RCC_ClockConfig+0x3d8>)
 8005bb2:	5ccb      	ldrb	r3, [r1, r3]
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb8:	4a09      	ldr	r2, [pc, #36]	@ (8005be0 <HAL_RCC_ClockConfig+0x3dc>)
 8005bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bbc:	4b09      	ldr	r3, [pc, #36]	@ (8005be4 <HAL_RCC_ClockConfig+0x3e0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fb ff43 	bl	8001a4c <HAL_InitTick>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]

  return status;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	46020c00 	.word	0x46020c00
 8005bd8:	40022000 	.word	0x40022000
 8005bdc:	0800bcc4 	.word	0x0800bcc4
 8005be0:	20000000 	.word	0x20000000
 8005be4:	20000004 	.word	0x20000004

08005be8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	@ 0x28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 8005bf4:	4b16      	ldr	r3, [pc, #88]	@ (8005c50 <HAL_RCC_MCOConfig+0x68>)
 8005bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bfa:	4a15      	ldr	r2, [pc, #84]	@ (8005c50 <HAL_RCC_MCOConfig+0x68>)
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005c04:	4b12      	ldr	r3, [pc, #72]	@ (8005c50 <HAL_RCC_MCOConfig+0x68>)
 8005c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Pin = MCO1_PIN;
 8005c12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c16:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Mode = GPIO_MODE_AF_PP;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull = GPIO_NOPULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Alternate = GPIO_AF0_MCO;
 8005c24:	2300      	movs	r3, #0
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio_initstruct);
 8005c28:	f107 0314 	add.w	r3, r7, #20
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4809      	ldr	r0, [pc, #36]	@ (8005c54 <HAL_RCC_MCOConfig+0x6c>)
 8005c30:	f7fd fb2c 	bl	800328c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8005c34:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <HAL_RCC_MCOConfig+0x68>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	430b      	orrs	r3, r1
 8005c42:	4903      	ldr	r1, [pc, #12]	@ (8005c50 <HAL_RCC_MCOConfig+0x68>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61cb      	str	r3, [r1, #28]
}
 8005c48:	bf00      	nop
 8005c4a:	3728      	adds	r7, #40	@ 0x28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	46020c00 	.word	0x46020c00
 8005c54:	42020000 	.word	0x42020000

08005c58 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b08b      	sub	sp, #44	@ 0x2c
 8005c5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c66:	4b78      	ldr	r3, [pc, #480]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c70:	4b75      	ldr	r3, [pc, #468]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x34>
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b0c      	cmp	r3, #12
 8005c84:	d121      	bne.n	8005cca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d11e      	bne.n	8005cca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005c98:	4b6b      	ldr	r3, [pc, #428]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c9e:	0b1b      	lsrs	r3, r3, #12
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ca6:	e005      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005ca8:	4b67      	ldr	r3, [pc, #412]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	0f1b      	lsrs	r3, r3, #28
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cb4:	4a65      	ldr	r2, [pc, #404]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d110      	bne.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cc8:	e00d      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cca:	4b5f      	ldr	r3, [pc, #380]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 030c 	and.w	r3, r3, #12
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d102      	bne.n	8005cdc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005cd8:	623b      	str	r3, [r7, #32]
 8005cda:	e004      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005ce4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b0c      	cmp	r3, #12
 8005cea:	f040 80a5 	bne.w	8005e38 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005cee:	4b56      	ldr	r3, [pc, #344]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005cf8:	4b53      	ldr	r3, [pc, #332]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	0a1b      	lsrs	r3, r3, #8
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005d06:	4b50      	ldr	r3, [pc, #320]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0a:	091b      	lsrs	r3, r3, #4
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d12:	4b4d      	ldr	r3, [pc, #308]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d16:	08db      	lsrs	r3, r3, #3
 8005d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d003      	beq.n	8005d3c <HAL_RCC_GetSysClockFreq+0xe4>
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d022      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x128>
 8005d3a:	e043      	b.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005e54 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d5e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005d62:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x200>
 8005d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d7e:	e046      	b.n	8005e0e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005e54 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d92:	4b2d      	ldr	r3, [pc, #180]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005da2:	ed97 6a01 	vldr	s12, [r7, #4]
 8005da6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x200>
 8005daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dc2:	e024      	b.n	8005e0e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de4:	ee07 3a90 	vmov	s15, r3
 8005de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005dec:	ed97 6a01 	vldr	s12, [r7, #4]
 8005df0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x200>
 8005df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e0c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e12:	0e1b      	lsrs	r3, r3, #24
 8005e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e18:	3301      	adds	r3, #1
 8005e1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e32:	ee17 3a90 	vmov	r3, s15
 8005e36:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005e38:	6a3b      	ldr	r3, [r7, #32]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	372c      	adds	r7, #44	@ 0x2c
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	46020c00 	.word	0x46020c00
 8005e4c:	0800bcdc 	.word	0x0800bcdc
 8005e50:	00f42400 	.word	0x00f42400
 8005e54:	4b742400 	.word	0x4b742400
 8005e58:	46000000 	.word	0x46000000

08005e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005e60:	f7ff fefa 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8005e64:	4602      	mov	r2, r0
 8005e66:	4b07      	ldr	r3, [pc, #28]	@ (8005e84 <HAL_RCC_GetHCLKFreq+0x28>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	4906      	ldr	r1, [pc, #24]	@ (8005e88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005e70:	5ccb      	ldrb	r3, [r1, r3]
 8005e72:	fa22 f303 	lsr.w	r3, r2, r3
 8005e76:	4a05      	ldr	r2, [pc, #20]	@ (8005e8c <HAL_RCC_GetHCLKFreq+0x30>)
 8005e78:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005e7a:	4b04      	ldr	r3, [pc, #16]	@ (8005e8c <HAL_RCC_GetHCLKFreq+0x30>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	46020c00 	.word	0x46020c00
 8005e88:	0800bcc4 	.word	0x0800bcc4
 8005e8c:	20000000 	.word	0x20000000

08005e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005e94:	f7ff ffe2 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	4b05      	ldr	r3, [pc, #20]	@ (8005eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	4903      	ldr	r1, [pc, #12]	@ (8005eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ea6:	5ccb      	ldrb	r3, [r1, r3]
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	46020c00 	.word	0x46020c00
 8005eb4:	0800bcd4 	.word	0x0800bcd4

08005eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005ebc:	f7ff ffce 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	4903      	ldr	r1, [pc, #12]	@ (8005edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ece:	5ccb      	ldrb	r3, [r1, r3]
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	46020c00 	.word	0x46020c00
 8005edc:	0800bcd4 	.word	0x0800bcd4

08005ee0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005ee4:	f7ff ffba 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	4b05      	ldr	r3, [pc, #20]	@ (8005f00 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	091b      	lsrs	r3, r3, #4
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	4903      	ldr	r1, [pc, #12]	@ (8005f04 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005ef6:	5ccb      	ldrb	r3, [r1, r3]
 8005ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	46020c00 	.word	0x46020c00
 8005f04:	0800bcd4 	.word	0x0800bcd4

08005f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f10:	4b3e      	ldr	r3, [pc, #248]	@ (800600c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f1e:	f7fe fd07 	bl	8004930 <HAL_PWREx_GetVoltageRange>
 8005f22:	6178      	str	r0, [r7, #20]
 8005f24:	e019      	b.n	8005f5a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f26:	4b39      	ldr	r3, [pc, #228]	@ (800600c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f2c:	4a37      	ldr	r2, [pc, #220]	@ (800600c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f2e:	f043 0304 	orr.w	r3, r3, #4
 8005f32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005f36:	4b35      	ldr	r3, [pc, #212]	@ (800600c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f44:	f7fe fcf4 	bl	8004930 <HAL_PWREx_GetVoltageRange>
 8005f48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f4a:	4b30      	ldr	r3, [pc, #192]	@ (800600c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f50:	4a2e      	ldr	r2, [pc, #184]	@ (800600c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f52:	f023 0304 	bic.w	r3, r3, #4
 8005f56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f60:	d003      	beq.n	8005f6a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f68:	d109      	bne.n	8005f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f70:	d202      	bcs.n	8005f78 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005f72:	2301      	movs	r3, #1
 8005f74:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005f76:	e033      	b.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005f7c:	e030      	b.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f84:	d208      	bcs.n	8005f98 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f8c:	d102      	bne.n	8005f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005f8e:	2303      	movs	r3, #3
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	e025      	b.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e035      	b.n	8006004 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f9e:	d90f      	bls.n	8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fac:	d902      	bls.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	e015      	b.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	e012      	b.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	e00f      	b.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fc6:	d109      	bne.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fce:	d102      	bne.n	8005fd6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	e004      	b.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	e001      	b.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005fdc:	2301      	movs	r3, #1
 8005fde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f023 020f 	bic.w	r2, r3, #15
 8005fe8:	4909      	ldr	r1, [pc, #36]	@ (8006010 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d001      	beq.n	8006002 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	46020c00 	.word	0x46020c00
 8006010:	40022000 	.word	0x40022000

08006014 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006018:	b0b8      	sub	sp, #224	@ 0xe0
 800601a:	af00      	add	r7, sp, #0
 800601c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006020:	2300      	movs	r3, #0
 8006022:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006026:	2300      	movs	r3, #0
 8006028:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800602c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f002 0401 	and.w	r4, r2, #1
 8006038:	2500      	movs	r5, #0
 800603a:	ea54 0305 	orrs.w	r3, r4, r5
 800603e:	d00b      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006040:	4bca      	ldr	r3, [pc, #808]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006046:	f023 0103 	bic.w	r1, r3, #3
 800604a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800604e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006050:	4ac6      	ldr	r2, [pc, #792]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006052:	430b      	orrs	r3, r1
 8006054:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f002 0802 	and.w	r8, r2, #2
 8006064:	f04f 0900 	mov.w	r9, #0
 8006068:	ea58 0309 	orrs.w	r3, r8, r9
 800606c:	d00b      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800606e:	4bbf      	ldr	r3, [pc, #764]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006074:	f023 010c 	bic.w	r1, r3, #12
 8006078:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800607c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607e:	4abb      	ldr	r2, [pc, #748]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006080:	430b      	orrs	r3, r1
 8006082:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f002 0a04 	and.w	sl, r2, #4
 8006092:	f04f 0b00 	mov.w	fp, #0
 8006096:	ea5a 030b 	orrs.w	r3, sl, fp
 800609a:	d00b      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800609c:	4bb3      	ldr	r3, [pc, #716]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800609e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060a2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80060a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ac:	4aaf      	ldr	r2, [pc, #700]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060ae:	430b      	orrs	r3, r1
 80060b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	f002 0308 	and.w	r3, r2, #8
 80060c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060c4:	2300      	movs	r3, #0
 80060c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4313      	orrs	r3, r2
 80060d2:	d00b      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80060d4:	4ba5      	ldr	r3, [pc, #660]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80060de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e4:	4aa1      	ldr	r2, [pc, #644]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060e6:	430b      	orrs	r3, r1
 80060e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f002 0310 	and.w	r3, r2, #16
 80060f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060fc:	2300      	movs	r3, #0
 80060fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006102:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006106:	460b      	mov	r3, r1
 8006108:	4313      	orrs	r3, r2
 800610a:	d00b      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800610c:	4b97      	ldr	r3, [pc, #604]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800610e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006112:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006116:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800611a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800611c:	4a93      	ldr	r2, [pc, #588]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800611e:	430b      	orrs	r3, r1
 8006120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f002 0320 	and.w	r3, r2, #32
 8006130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800613a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800613e:	460b      	mov	r3, r1
 8006140:	4313      	orrs	r3, r2
 8006142:	d00b      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006144:	4b89      	ldr	r3, [pc, #548]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800614a:	f023 0107 	bic.w	r1, r3, #7
 800614e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006154:	4a85      	ldr	r2, [pc, #532]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006156:	430b      	orrs	r3, r1
 8006158:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800615c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006172:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006176:	460b      	mov	r3, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	d00b      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800617c:	4b7b      	ldr	r3, [pc, #492]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800617e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006182:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006186:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800618a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800618c:	4a77      	ldr	r2, [pc, #476]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800618e:	430b      	orrs	r3, r1
 8006190:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80061aa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4313      	orrs	r3, r2
 80061b2:	d00b      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80061b4:	4b6d      	ldr	r3, [pc, #436]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061c4:	4a69      	ldr	r2, [pc, #420]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061c6:	430b      	orrs	r3, r1
 80061c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80061d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061e6:	460b      	mov	r3, r1
 80061e8:	4313      	orrs	r3, r2
 80061ea:	d00b      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80061ec:	4b5f      	ldr	r3, [pc, #380]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80061f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fc:	4a5b      	ldr	r2, [pc, #364]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061fe:	430b      	orrs	r3, r1
 8006200:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006210:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006214:	2300      	movs	r3, #0
 8006216:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800621a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800621e:	460b      	mov	r3, r1
 8006220:	4313      	orrs	r3, r2
 8006222:	d00b      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006224:	4b51      	ldr	r3, [pc, #324]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800622a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800622e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006234:	4a4d      	ldr	r2, [pc, #308]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006236:	430b      	orrs	r3, r1
 8006238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800623c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800624c:	2300      	movs	r3, #0
 800624e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006252:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006256:	460b      	mov	r3, r1
 8006258:	4313      	orrs	r3, r2
 800625a:	d00b      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800625c:	4b43      	ldr	r3, [pc, #268]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800625e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006262:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800626a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800626c:	4a3f      	ldr	r2, [pc, #252]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800626e:	430b      	orrs	r3, r1
 8006270:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006280:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006284:	2300      	movs	r3, #0
 8006286:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800628a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800628e:	460b      	mov	r3, r1
 8006290:	4313      	orrs	r3, r2
 8006292:	d00b      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006294:	4b35      	ldr	r3, [pc, #212]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800629a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800629e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062a4:	4a31      	ldr	r2, [pc, #196]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062a6:	430b      	orrs	r3, r1
 80062a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80062ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80062b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062ba:	2300      	movs	r3, #0
 80062bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80062c2:	460b      	mov	r3, r1
 80062c4:	4313      	orrs	r3, r2
 80062c6:	d00c      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80062c8:	4b28      	ldr	r3, [pc, #160]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062da:	4a24      	ldr	r2, [pc, #144]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062dc:	430b      	orrs	r3, r1
 80062de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80062ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80062f0:	2300      	movs	r3, #0
 80062f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80062f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80062f8:	460b      	mov	r3, r1
 80062fa:	4313      	orrs	r3, r2
 80062fc:	d04f      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80062fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	2b80      	cmp	r3, #128	@ 0x80
 8006308:	d02d      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800630a:	2b80      	cmp	r3, #128	@ 0x80
 800630c:	d827      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800630e:	2b60      	cmp	r3, #96	@ 0x60
 8006310:	d02e      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006312:	2b60      	cmp	r3, #96	@ 0x60
 8006314:	d823      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006316:	2b40      	cmp	r3, #64	@ 0x40
 8006318:	d006      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800631a:	2b40      	cmp	r3, #64	@ 0x40
 800631c:	d81f      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8006322:	2b20      	cmp	r3, #32
 8006324:	d011      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006326:	e01a      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006328:	4b10      	ldr	r3, [pc, #64]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800632a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632c:	4a0f      	ldr	r2, [pc, #60]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800632e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006332:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006334:	e01d      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006336:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800633a:	3308      	adds	r3, #8
 800633c:	4618      	mov	r0, r3
 800633e:	f002 f9d1 	bl	80086e4 <RCCEx_PLL2_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006348:	e013      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800634a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800634e:	332c      	adds	r3, #44	@ 0x2c
 8006350:	4618      	mov	r0, r3
 8006352:	f002 fa5f 	bl	8008814 <RCCEx_PLL3_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800635c:	e009      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006364:	e005      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8006366:	bf00      	nop
 8006368:	e003      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800636a:	bf00      	nop
 800636c:	46020c00 	.word	0x46020c00
        break;
 8006370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006372:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10d      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800637a:	4bb6      	ldr	r3, [pc, #728]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800637c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006380:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	4ab1      	ldr	r2, [pc, #708]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800638e:	430b      	orrs	r3, r1
 8006390:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006394:	e003      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006396:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800639a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800639e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80063aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063ac:	2300      	movs	r3, #0
 80063ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80063b4:	460b      	mov	r3, r1
 80063b6:	4313      	orrs	r3, r2
 80063b8:	d053      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80063ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c6:	d033      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80063c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063cc:	d82c      	bhi.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80063ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d2:	d02f      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80063d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d8:	d826      	bhi.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80063da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063de:	d008      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80063e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e4:	d820      	bhi.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80063ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ee:	d011      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80063f0:	e01a      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063f2:	4b98      	ldr	r3, [pc, #608]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	4a97      	ldr	r2, [pc, #604]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063fe:	e01a      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006404:	3308      	adds	r3, #8
 8006406:	4618      	mov	r0, r3
 8006408:	f002 f96c 	bl	80086e4 <RCCEx_PLL2_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006412:	e010      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006418:	332c      	adds	r3, #44	@ 0x2c
 800641a:	4618      	mov	r0, r3
 800641c:	f002 f9fa 	bl	8008814 <RCCEx_PLL3_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006426:	e006      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800642e:	e002      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006436:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10d      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800643e:	4b85      	ldr	r3, [pc, #532]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006444:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006448:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800644c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006450:	4a80      	ldr	r2, [pc, #512]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006452:	430b      	orrs	r3, r1
 8006454:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006458:	e003      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800645e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800646e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006470:	2300      	movs	r3, #0
 8006472:	667b      	str	r3, [r7, #100]	@ 0x64
 8006474:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006478:	460b      	mov	r3, r1
 800647a:	4313      	orrs	r3, r2
 800647c:	d046      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800647e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006486:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800648a:	d028      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800648c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006490:	d821      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006496:	d022      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800649c:	d81b      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800649e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064a2:	d01c      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80064a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064a8:	d815      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ae:	d008      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80064b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064b4:	d80f      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d011      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064be:	d00e      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80064c0:	e009      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064c6:	3308      	adds	r3, #8
 80064c8:	4618      	mov	r0, r3
 80064ca:	f002 f90b 	bl	80086e4 <RCCEx_PLL2_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80064d4:	e004      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80064dc:	e000      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80064de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10d      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80064e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80064ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064ee:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80064f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064fa:	4a56      	ldr	r2, [pc, #344]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80064fc:	430b      	orrs	r3, r1
 80064fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006502:	e003      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006508:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800650c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006518:	65bb      	str	r3, [r7, #88]	@ 0x58
 800651a:	2300      	movs	r3, #0
 800651c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800651e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006522:	460b      	mov	r3, r1
 8006524:	4313      	orrs	r3, r2
 8006526:	d03f      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006528:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006530:	2b04      	cmp	r3, #4
 8006532:	d81e      	bhi.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8006534:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	0800657b 	.word	0x0800657b
 8006540:	08006551 	.word	0x08006551
 8006544:	0800655f 	.word	0x0800655f
 8006548:	0800657b 	.word	0x0800657b
 800654c:	0800657b 	.word	0x0800657b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006550:	4b40      	ldr	r3, [pc, #256]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006554:	4a3f      	ldr	r2, [pc, #252]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800655a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800655c:	e00e      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800655e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006562:	332c      	adds	r3, #44	@ 0x2c
 8006564:	4618      	mov	r0, r3
 8006566:	f002 f955 	bl	8008814 <RCCEx_PLL3_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006570:	e004      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006578:	e000      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800657a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800657c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10d      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006584:	4b33      	ldr	r3, [pc, #204]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006586:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800658a:	f023 0107 	bic.w	r1, r3, #7
 800658e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006596:	4a2f      	ldr	r2, [pc, #188]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006598:	430b      	orrs	r3, r1
 800659a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800659e:	e003      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80065a4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80065a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80065b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80065b6:	2300      	movs	r3, #0
 80065b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80065ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065be:	460b      	mov	r3, r1
 80065c0:	4313      	orrs	r3, r2
 80065c2:	d04d      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80065c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065d0:	d028      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80065d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065d6:	d821      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80065d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065dc:	d024      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80065de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065e2:	d81b      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80065e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065e8:	d00e      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80065ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065ee:	d815      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01b      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x618>
 80065f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f8:	d110      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065fa:	4b16      	ldr	r3, [pc, #88]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	4a15      	ldr	r2, [pc, #84]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006604:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006606:	e012      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800660c:	332c      	adds	r3, #44	@ 0x2c
 800660e:	4618      	mov	r0, r3
 8006610:	f002 f900 	bl	8008814 <RCCEx_PLL3_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800661a:	e008      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006622:	e004      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006624:	bf00      	nop
 8006626:	e002      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800662c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800662e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006632:	2b00      	cmp	r3, #0
 8006634:	d110      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006636:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800663c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006648:	4a02      	ldr	r2, [pc, #8]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800664a:	430b      	orrs	r3, r1
 800664c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006650:	e006      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006652:	bf00      	nop
 8006654:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800665c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800666c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800666e:	2300      	movs	r3, #0
 8006670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006672:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006676:	460b      	mov	r3, r1
 8006678:	4313      	orrs	r3, r2
 800667a:	f000 80b5 	beq.w	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800667e:	2300      	movs	r3, #0
 8006680:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006684:	4b9d      	ldr	r3, [pc, #628]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d113      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006692:	4b9a      	ldr	r3, [pc, #616]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006698:	4a98      	ldr	r2, [pc, #608]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800669a:	f043 0304 	orr.w	r3, r3, #4
 800669e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80066a2:	4b96      	ldr	r3, [pc, #600]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80066ba:	4b91      	ldr	r3, [pc, #580]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066be:	4a90      	ldr	r2, [pc, #576]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066c6:	f7fb fa4b 	bl	8001b60 <HAL_GetTick>
 80066ca:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066ce:	e00b      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d0:	f7fb fa46 	bl	8001b60 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d903      	bls.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80066e6:	e005      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066e8:	4b85      	ldr	r3, [pc, #532]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0ed      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80066f4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d165      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066fc:	4b7f      	ldr	r3, [pc, #508]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006706:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800670a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800670e:	2b00      	cmp	r3, #0
 8006710:	d023      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006716:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800671a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800671e:	4293      	cmp	r3, r2
 8006720:	d01b      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006722:	4b76      	ldr	r3, [pc, #472]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800672c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006730:	4b72      	ldr	r3, [pc, #456]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006736:	4a71      	ldr	r2, [pc, #452]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800673c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006740:	4b6e      	ldr	r3, [pc, #440]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006746:	4a6d      	ldr	r2, [pc, #436]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800674c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006750:	4a6a      	ldr	r2, [pc, #424]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006756:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800675a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d019      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006766:	f7fb f9fb 	bl	8001b60 <HAL_GetTick>
 800676a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800676e:	e00d      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006770:	f7fb f9f6 	bl	8001b60 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800677a:	1ad2      	subs	r2, r2, r3
 800677c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006780:	429a      	cmp	r2, r3
 8006782:	d903      	bls.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800678a:	e006      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800678c:	4b5b      	ldr	r3, [pc, #364]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800678e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0ea      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800679a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10d      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80067a2:	4b56      	ldr	r3, [pc, #344]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80067b4:	4a51      	ldr	r2, [pc, #324]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067b6:	430b      	orrs	r3, r1
 80067b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067bc:	e008      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067be:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067c2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80067c6:	e003      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067cc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067d0:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d107      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067d8:	4b48      	ldr	r3, [pc, #288]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067de:	4a47      	ldr	r2, [pc, #284]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067e0:	f023 0304 	bic.w	r3, r3, #4
 80067e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80067e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80067f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80067f6:	2300      	movs	r3, #0
 80067f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d042      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006804:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006808:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800680c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006810:	d022      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006812:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006816:	d81b      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800681c:	d011      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800681e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006822:	d815      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d019      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800682c:	d110      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800682e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006832:	3308      	adds	r3, #8
 8006834:	4618      	mov	r0, r3
 8006836:	f001 ff55 	bl	80086e4 <RCCEx_PLL2_Config>
 800683a:	4603      	mov	r3, r0
 800683c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006840:	e00d      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006842:	4b2e      	ldr	r3, [pc, #184]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	4a2d      	ldr	r2, [pc, #180]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800684c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800684e:	e006      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006856:	e002      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006858:	bf00      	nop
 800685a:	e000      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800685c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800685e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10d      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006866:	4b25      	ldr	r3, [pc, #148]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800686c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006878:	4a20      	ldr	r2, [pc, #128]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800687a:	430b      	orrs	r3, r1
 800687c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006880:	e003      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006882:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006886:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800688a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006896:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800689c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80068a0:	460b      	mov	r3, r1
 80068a2:	4313      	orrs	r3, r2
 80068a4:	d032      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80068a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b2:	d00b      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80068b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b8:	d804      	bhi.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d008      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068c2:	d007      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80068ca:	e004      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80068cc:	bf00      	nop
 80068ce:	e002      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80068d0:	bf00      	nop
 80068d2:	e000      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80068d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80068d6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d112      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80068de:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068f0:	4a02      	ldr	r2, [pc, #8]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80068f2:	430b      	orrs	r3, r1
 80068f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80068f8:	e008      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80068fa:	bf00      	nop
 80068fc:	46020c00 	.word	0x46020c00
 8006900:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006904:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006908:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800690c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006918:	633b      	str	r3, [r7, #48]	@ 0x30
 800691a:	2300      	movs	r3, #0
 800691c:	637b      	str	r3, [r7, #52]	@ 0x34
 800691e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006922:	460b      	mov	r3, r1
 8006924:	4313      	orrs	r3, r2
 8006926:	d019      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006928:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800692c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006934:	d105      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006936:	4b88      	ldr	r3, [pc, #544]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693a:	4a87      	ldr	r2, [pc, #540]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006940:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006942:	4b85      	ldr	r3, [pc, #532]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006944:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006948:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800694c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006950:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006954:	4a80      	ldr	r2, [pc, #512]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006956:	430b      	orrs	r3, r1
 8006958:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800695c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800696a:	2300      	movs	r3, #0
 800696c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800696e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006972:	460b      	mov	r3, r1
 8006974:	4313      	orrs	r3, r2
 8006976:	d00c      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006978:	4b77      	ldr	r3, [pc, #476]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800697a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800697e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006982:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800698a:	4973      	ldr	r1, [pc, #460]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006992:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800699e:	623b      	str	r3, [r7, #32]
 80069a0:	2300      	movs	r3, #0
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d00c      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80069ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069c0:	4965      	ldr	r1, [pc, #404]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80069c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80069de:	460b      	mov	r3, r1
 80069e0:	4313      	orrs	r3, r2
 80069e2:	d00c      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80069e4:	4b5c      	ldr	r3, [pc, #368]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069ea:	f023 0218 	bic.w	r2, r3, #24
 80069ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80069f6:	4958      	ldr	r1, [pc, #352]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80069fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a14:	460b      	mov	r3, r1
 8006a16:	4313      	orrs	r3, r2
 8006a18:	d032      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006a1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a26:	d105      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a28:	4b4b      	ldr	r3, [pc, #300]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a32:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006a34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a40:	d108      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a46:	3308      	adds	r3, #8
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fe4b 	bl	80086e4 <RCCEx_PLL2_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8006a54:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10d      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a6e:	493a      	ldr	r1, [pc, #232]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006a76:	e003      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a78:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a7c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006a80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a96:	460b      	mov	r3, r1
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	d03a      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006aaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aae:	d815      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d017      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab8:	d110      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aba:	4b27      	ldr	r3, [pc, #156]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	4a26      	ldr	r2, [pc, #152]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ac4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006ac6:	e00e      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ac8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006acc:	3308      	adds	r3, #8
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 fe08 	bl	80086e4 <RCCEx_PLL2_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006ada:	e004      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006ae2:	e000      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006ae4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ae6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10d      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006aee:	4b1a      	ldr	r3, [pc, #104]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006af4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006af8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b00:	4915      	ldr	r1, [pc, #84]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006b08:	e003      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b0e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006b12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	2300      	movs	r3, #0
 8006b22:	607b      	str	r3, [r7, #4]
 8006b24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	d00c      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b34:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006b38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b40:	4905      	ldr	r1, [pc, #20]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006b48:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	37e0      	adds	r7, #224	@ 0xe0
 8006b50:	46bd      	mov	sp, r7
 8006b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b56:	bf00      	nop
 8006b58:	46020c00 	.word	0x46020c00

08006b5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b089      	sub	sp, #36	@ 0x24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006b64:	4ba6      	ldr	r3, [pc, #664]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006b6e:	4ba4      	ldr	r3, [pc, #656]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006b78:	4ba1      	ldr	r3, [pc, #644]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	0a1b      	lsrs	r3, r3, #8
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	3301      	adds	r3, #1
 8006b84:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006b86:	4b9e      	ldr	r3, [pc, #632]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	091b      	lsrs	r3, r3, #4
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b92:	4b9b      	ldr	r3, [pc, #620]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b96:	08db      	lsrs	r3, r3, #3
 8006b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d062      	beq.n	8006c7a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	f200 8081 	bhi.w	8006cbe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d024      	beq.n	8006c0c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d17a      	bne.n	8006cbe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	4b89      	ldr	r3, [pc, #548]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0a:	e08f      	b.n	8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c0c:	4b7c      	ldr	r3, [pc, #496]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006c18:	4b79      	ldr	r3, [pc, #484]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	0f1b      	lsrs	r3, r3, #28
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	e006      	b.n	8006c32 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006c24:	4b76      	ldr	r3, [pc, #472]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c2a:	041b      	lsls	r3, r3, #16
 8006c2c:	0f1b      	lsrs	r3, r3, #28
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	4a76      	ldr	r2, [pc, #472]	@ (8006e0c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c58:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c5c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c78:	e058      	b.n	8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c84:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ca0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cbc:	e036      	b.n	8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006cbe:	4b50      	ldr	r3, [pc, #320]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006cca:	4b4d      	ldr	r3, [pc, #308]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	0f1b      	lsrs	r3, r3, #28
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	e006      	b.n	8006ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cdc:	041b      	lsls	r3, r3, #16
 8006cde:	0f1b      	lsrs	r3, r3, #28
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	4a49      	ldr	r2, [pc, #292]	@ (8006e0c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	ee07 3a90 	vmov	s15, r3
 8006cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d0e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d2a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006d2c:	4b34      	ldr	r3, [pc, #208]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d017      	beq.n	8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d38:	4b31      	ldr	r3, [pc, #196]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d3c:	0a5b      	lsrs	r3, r3, #9
 8006d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006d4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5e:	ee17 2a90 	vmov	r2, s15
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e002      	b.n	8006d6e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006d6e:	4b24      	ldr	r3, [pc, #144]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d017      	beq.n	8006daa <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d7a:	4b21      	ldr	r3, [pc, #132]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d7e:	0c1b      	lsrs	r3, r3, #16
 8006d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d84:	ee07 3a90 	vmov	s15, r3
 8006d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006d8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d90:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da0:	ee17 2a90 	vmov	r2, s15
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	605a      	str	r2, [r3, #4]
 8006da8:	e002      	b.n	8006db0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006db0:	4b13      	ldr	r3, [pc, #76]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d017      	beq.n	8006dec <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006dbc:	4b10      	ldr	r3, [pc, #64]	@ (8006e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc0:	0e1b      	lsrs	r3, r3, #24
 8006dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de2:	ee17 2a90 	vmov	r2, s15
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006dea:	e002      	b.n	8006df2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	609a      	str	r2, [r3, #8]
}
 8006df2:	bf00      	nop
 8006df4:	3724      	adds	r7, #36	@ 0x24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	46020c00 	.word	0x46020c00
 8006e04:	4b742400 	.word	0x4b742400
 8006e08:	46000000 	.word	0x46000000
 8006e0c:	0800bcdc 	.word	0x0800bcdc

08006e10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b089      	sub	sp, #36	@ 0x24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006e18:	4ba6      	ldr	r3, [pc, #664]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e20:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006e22:	4ba4      	ldr	r3, [pc, #656]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006e2c:	4ba1      	ldr	r3, [pc, #644]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	3301      	adds	r3, #1
 8006e38:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006e3a:	4b9e      	ldr	r3, [pc, #632]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	091b      	lsrs	r3, r3, #4
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006e46:	4b9b      	ldr	r3, [pc, #620]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	08db      	lsrs	r3, r3, #3
 8006e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d062      	beq.n	8006f2e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	f200 8081 	bhi.w	8006f72 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d024      	beq.n	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d17a      	bne.n	8006f72 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8e:	4b89      	ldr	r3, [pc, #548]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ea2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ebe:	e08f      	b.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006ec0:	4b7c      	ldr	r3, [pc, #496]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006ecc:	4b79      	ldr	r3, [pc, #484]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	0f1b      	lsrs	r3, r3, #28
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	e006      	b.n	8006ee6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006ed8:	4b76      	ldr	r3, [pc, #472]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ede:	041b      	lsls	r3, r3, #16
 8006ee0:	0f1b      	lsrs	r3, r3, #28
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	4a76      	ldr	r2, [pc, #472]	@ (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	ee07 3a90 	vmov	s15, r3
 8006f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f10:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f2c:	e058      	b.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	ee07 3a90 	vmov	s15, r3
 8006f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f38:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f40:	4b5c      	ldr	r3, [pc, #368]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f48:	ee07 3a90 	vmov	s15, r3
 8006f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f50:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f54:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f70:	e036      	b.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006f72:	4b50      	ldr	r3, [pc, #320]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006f7e:	4b4d      	ldr	r3, [pc, #308]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	0f1b      	lsrs	r3, r3, #28
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	e006      	b.n	8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f90:	041b      	lsls	r3, r3, #16
 8006f92:	0f1b      	lsrs	r3, r3, #28
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	4a49      	ldr	r2, [pc, #292]	@ (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	ee07 3a90 	vmov	s15, r3
 8006fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fc2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fde:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006fe0:	4b34      	ldr	r3, [pc, #208]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d017      	beq.n	800701c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fec:	4b31      	ldr	r3, [pc, #196]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff0:	0a5b      	lsrs	r3, r3, #9
 8006ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006ffe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007002:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007006:	edd7 6a07 	vldr	s13, [r7, #28]
 800700a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800700e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007012:	ee17 2a90 	vmov	r2, s15
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	e002      	b.n	8007022 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007022:	4b24      	ldr	r3, [pc, #144]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d017      	beq.n	800705e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800702e:	4b21      	ldr	r3, [pc, #132]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007038:	ee07 3a90 	vmov	s15, r3
 800703c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007040:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007044:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007048:	edd7 6a07 	vldr	s13, [r7, #28]
 800704c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007054:	ee17 2a90 	vmov	r2, s15
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	605a      	str	r2, [r3, #4]
 800705c:	e002      	b.n	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007064:	4b13      	ldr	r3, [pc, #76]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d017      	beq.n	80070a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007070:	4b10      	ldr	r3, [pc, #64]	@ (80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007074:	0e1b      	lsrs	r3, r3, #24
 8007076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007086:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800708a:	edd7 6a07 	vldr	s13, [r7, #28]
 800708e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007096:	ee17 2a90 	vmov	r2, s15
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800709e:	e002      	b.n	80070a6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	609a      	str	r2, [r3, #8]
}
 80070a6:	bf00      	nop
 80070a8:	3724      	adds	r7, #36	@ 0x24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	46020c00 	.word	0x46020c00
 80070b8:	4b742400 	.word	0x4b742400
 80070bc:	46000000 	.word	0x46000000
 80070c0:	0800bcdc 	.word	0x0800bcdc

080070c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b089      	sub	sp, #36	@ 0x24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80070cc:	4ba6      	ldr	r3, [pc, #664]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80070d6:	4ba4      	ldr	r3, [pc, #656]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80070e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	3301      	adds	r3, #1
 80070ec:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80070ee:	4b9e      	ldr	r3, [pc, #632]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f2:	091b      	lsrs	r3, r3, #4
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80070fa:	4b9b      	ldr	r3, [pc, #620]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070fe:	08db      	lsrs	r3, r3, #3
 8007100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d062      	beq.n	80071e2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b03      	cmp	r3, #3
 8007120:	f200 8081 	bhi.w	8007226 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d024      	beq.n	8007174 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d17a      	bne.n	8007226 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800736c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800713e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007142:	4b89      	ldr	r3, [pc, #548]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007152:	ed97 6a02 	vldr	s12, [r7, #8]
 8007156:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800715a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800715e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007166:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800716a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8007172:	e08f      	b.n	8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007174:	4b7c      	ldr	r3, [pc, #496]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007180:	4b79      	ldr	r3, [pc, #484]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	0f1b      	lsrs	r3, r3, #28
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	e006      	b.n	800719a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800718c:	4b76      	ldr	r3, [pc, #472]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800718e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007192:	041b      	lsls	r3, r3, #16
 8007194:	0f1b      	lsrs	r3, r3, #28
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	4a76      	ldr	r2, [pc, #472]	@ (8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800719c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a0:	ee07 3a90 	vmov	s15, r3
 80071a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80071c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071e0:	e058      	b.n	8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	ee07 3a90 	vmov	s15, r3
 80071e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ec:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800736c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80071f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f4:	4b5c      	ldr	r3, [pc, #368]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fc:	ee07 3a90 	vmov	s15, r3
 8007200:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007204:	ed97 6a02 	vldr	s12, [r7, #8]
 8007208:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800720c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007210:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007214:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007218:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800721c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007220:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007224:	e036      	b.n	8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007226:	4b50      	ldr	r3, [pc, #320]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8007232:	4b4d      	ldr	r3, [pc, #308]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	0f1b      	lsrs	r3, r3, #28
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	e006      	b.n	800724c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800723e:	4b4a      	ldr	r3, [pc, #296]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	0f1b      	lsrs	r3, r3, #28
 8007248:	f003 030f 	and.w	r3, r3, #15
 800724c:	4a49      	ldr	r2, [pc, #292]	@ (8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800724e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	ee07 3a90 	vmov	s15, r3
 8007260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	ed97 6a02 	vldr	s12, [r7, #8]
 8007276:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007286:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007292:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007294:	4b34      	ldr	r3, [pc, #208]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d017      	beq.n	80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072a0:	4b31      	ldr	r3, [pc, #196]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a4:	0a5b      	lsrs	r3, r3, #9
 80072a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	e002      	b.n	80072d6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80072d6:	4b24      	ldr	r3, [pc, #144]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d017      	beq.n	8007312 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072e2:	4b21      	ldr	r3, [pc, #132]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80072e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80072f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072f8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007308:	ee17 2a90 	vmov	r2, s15
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	605a      	str	r2, [r3, #4]
 8007310:	e002      	b.n	8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007318:	4b13      	ldr	r3, [pc, #76]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800731a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d017      	beq.n	8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007324:	4b10      	ldr	r3, [pc, #64]	@ (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007328:	0e1b      	lsrs	r3, r3, #24
 800732a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800733a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800733e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734a:	ee17 2a90 	vmov	r2, s15
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007352:	e002      	b.n	800735a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	609a      	str	r2, [r3, #8]
}
 800735a:	bf00      	nop
 800735c:	3724      	adds	r7, #36	@ 0x24
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	46020c00 	.word	0x46020c00
 800736c:	4b742400 	.word	0x4b742400
 8007370:	46000000 	.word	0x46000000
 8007374:	0800bcdc 	.word	0x0800bcdc

08007378 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08e      	sub	sp, #56	@ 0x38
 800737c:	af00      	add	r7, sp, #0
 800737e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007386:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800738a:	430b      	orrs	r3, r1
 800738c:	d145      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800738e:	4baa      	ldr	r3, [pc, #680]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007398:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800739a:	4ba7      	ldr	r3, [pc, #668]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800739c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d108      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80073a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ae:	d104      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80073b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b6:	f001 b987 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80073ba:	4b9f      	ldr	r3, [pc, #636]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80073bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073c8:	d114      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80073ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073d0:	d110      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073d2:	4b99      	ldr	r3, [pc, #612]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80073d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073e0:	d103      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80073e2:	23fa      	movs	r3, #250	@ 0xfa
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073e6:	f001 b96f 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80073ea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073ee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073f0:	f001 b96a 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80073f4:	4b90      	ldr	r3, [pc, #576]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007400:	d107      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007408:	d103      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800740a:	4b8c      	ldr	r3, [pc, #560]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800740c:	637b      	str	r3, [r7, #52]	@ 0x34
 800740e:	f001 b95b 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	637b      	str	r3, [r7, #52]	@ 0x34
 8007416:	f001 b957 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800741a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800741e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007422:	430b      	orrs	r3, r1
 8007424:	d151      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007426:	4b84      	ldr	r3, [pc, #528]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007428:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800742c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007430:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	2b80      	cmp	r3, #128	@ 0x80
 8007436:	d035      	beq.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	2b80      	cmp	r3, #128	@ 0x80
 800743c:	d841      	bhi.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	2b60      	cmp	r3, #96	@ 0x60
 8007442:	d02a      	beq.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007446:	2b60      	cmp	r3, #96	@ 0x60
 8007448:	d83b      	bhi.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	2b40      	cmp	r3, #64	@ 0x40
 800744e:	d009      	beq.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	2b40      	cmp	r3, #64	@ 0x40
 8007454:	d835      	bhi.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00c      	beq.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	2b20      	cmp	r3, #32
 8007460:	d012      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007462:	e02e      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff fb77 	bl	8006b5c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007472:	f001 b929 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007476:	f107 0318 	add.w	r3, r7, #24
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fcc8 	bl	8006e10 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007484:	f001 b920 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff fe19 	bl	80070c4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007496:	f001 b917 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800749a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800749e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074a0:	f001 b912 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074a4:	4b64      	ldr	r3, [pc, #400]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074b0:	d103      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80074b2:	4b63      	ldr	r3, [pc, #396]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074b6:	f001 b907 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074be:	f001 b903 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c6:	f001 b8ff 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80074ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ce:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80074d2:	430b      	orrs	r3, r1
 80074d4:	d158      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80074d6:	4b58      	ldr	r3, [pc, #352]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80074e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e8:	d03b      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074f0:	d846      	bhi.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074f8:	d02e      	beq.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007500:	d83e      	bhi.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007508:	d00b      	beq.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007510:	d836      	bhi.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00d      	beq.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800751e:	d012      	beq.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007520:	e02e      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fb18 	bl	8006b5c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800752c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007530:	f001 b8ca 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007534:	f107 0318 	add.w	r3, r7, #24
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fc69 	bl	8006e10 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007542:	f001 b8c1 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007546:	f107 030c 	add.w	r3, r7, #12
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff fdba 	bl	80070c4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007554:	f001 b8b8 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007558:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800755c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800755e:	f001 b8b3 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007562:	4b35      	ldr	r3, [pc, #212]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800756a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800756e:	d103      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007570:	4b33      	ldr	r3, [pc, #204]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007572:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007574:	f001 b8a8 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800757c:	f001 b8a4 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007584:	f001 b8a0 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8007590:	430b      	orrs	r3, r1
 8007592:	d16e      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007594:	4b28      	ldr	r3, [pc, #160]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800759a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800759e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80075a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80075a6:	d034      	beq.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80075ae:	d85c      	bhi.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075b6:	d00b      	beq.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80075b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075be:	d854      	bhi.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80075c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d016      	beq.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075cc:	d009      	beq.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80075ce:	e04c      	b.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fac1 	bl	8006b5c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80075da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075de:	f001 b873 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075e2:	f107 0318 	add.w	r3, r7, #24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fc12 	bl	8006e10 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075f0:	f001 b86a 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80075f4:	4b10      	ldr	r3, [pc, #64]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007600:	d103      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8007602:	4b10      	ldr	r3, [pc, #64]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007606:	f001 b85f 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800760e:	f001 b85b 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007612:	4b09      	ldr	r3, [pc, #36]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b20      	cmp	r3, #32
 800761c:	d121      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800761e:	4b06      	ldr	r3, [pc, #24]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00e      	beq.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800762a:	4b03      	ldr	r3, [pc, #12]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	0e1b      	lsrs	r3, r3, #24
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	e00f      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007636:	bf00      	nop
 8007638:	46020c00 	.word	0x46020c00
 800763c:	0007a120 	.word	0x0007a120
 8007640:	00f42400 	.word	0x00f42400
 8007644:	02dc6c00 	.word	0x02dc6c00
 8007648:	4ba7      	ldr	r3, [pc, #668]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800764a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	0e1b      	lsrs	r3, r3, #24
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	4aa5      	ldr	r2, [pc, #660]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800765e:	f001 b833 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007666:	f001 b82f 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800766e:	f001 b82b 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007676:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800767a:	430b      	orrs	r3, r1
 800767c:	d17f      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800767e:	4b9a      	ldr	r3, [pc, #616]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007680:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007688:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	2b00      	cmp	r3, #0
 800768e:	d165      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007690:	4b95      	ldr	r3, [pc, #596]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007696:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800769a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80076a2:	d034      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80076aa:	d853      	bhi.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076b2:	d00b      	beq.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ba:	d84b      	bhi.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d016      	beq.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076c8:	d009      	beq.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80076ca:	e043      	b.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff fa43 	bl	8006b5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80076da:	f000 bff5 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076de:	f107 0318 	add.w	r3, r7, #24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fb94 	bl	8006e10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80076ec:	f000 bfec 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80076f0:	4b7d      	ldr	r3, [pc, #500]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076fc:	d103      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80076fe:	4b7c      	ldr	r3, [pc, #496]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007700:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007702:	f000 bfe1 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800770a:	f000 bfdd 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800770e:	4b76      	ldr	r3, [pc, #472]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b20      	cmp	r3, #32
 8007718:	d118      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800771a:	4b73      	ldr	r3, [pc, #460]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007726:	4b70      	ldr	r3, [pc, #448]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	0e1b      	lsrs	r3, r3, #24
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	e006      	b.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8007732:	4b6d      	ldr	r3, [pc, #436]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007738:	041b      	lsls	r3, r3, #16
 800773a:	0e1b      	lsrs	r3, r3, #24
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	4a6a      	ldr	r2, [pc, #424]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007746:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007748:	f000 bfbe 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007750:	f000 bfba 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007758:	f000 bfb6 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007762:	d108      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff f9f7 	bl	8006b5c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	637b      	str	r3, [r7, #52]	@ 0x34
 8007772:	f000 bfa9 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	637b      	str	r3, [r7, #52]	@ 0x34
 800777a:	f000 bfa5 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800777e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007782:	1e51      	subs	r1, r2, #1
 8007784:	430b      	orrs	r3, r1
 8007786:	d136      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007788:	4b57      	ldr	r3, [pc, #348]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800778a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800779a:	f7fe fb8d 	bl	8005eb8 <HAL_RCC_GetPCLK2Freq>
 800779e:	6378      	str	r0, [r7, #52]	@ 0x34
 80077a0:	f000 bf92 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80077a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d104      	bne.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077aa:	f7fe fa55 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 80077ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80077b0:	f000 bf8a 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80077b4:	4b4c      	ldr	r3, [pc, #304]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077c0:	d106      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d103      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80077c8:	4b4a      	ldr	r3, [pc, #296]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80077cc:	f000 bf7c 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80077d0:	4b45      	ldr	r3, [pc, #276]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80077d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d107      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d104      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80077e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ea:	f000 bf6d 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f2:	f000 bf69 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80077f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077fa:	1e91      	subs	r1, r2, #2
 80077fc:	430b      	orrs	r3, r1
 80077fe:	d136      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007800:	4b39      	ldr	r3, [pc, #228]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007806:	f003 030c 	and.w	r3, r3, #12
 800780a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007812:	f7fe fb3d 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 8007816:	6378      	str	r0, [r7, #52]	@ 0x34
 8007818:	f000 bf56 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	2b04      	cmp	r3, #4
 8007820:	d104      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007822:	f7fe fa19 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8007826:	6378      	str	r0, [r7, #52]	@ 0x34
 8007828:	f000 bf4e 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800782c:	4b2e      	ldr	r3, [pc, #184]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007838:	d106      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	2b08      	cmp	r3, #8
 800783e:	d103      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8007840:	4b2c      	ldr	r3, [pc, #176]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007842:	637b      	str	r3, [r7, #52]	@ 0x34
 8007844:	f000 bf40 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007848:	4b27      	ldr	r3, [pc, #156]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800784a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b02      	cmp	r3, #2
 8007854:	d107      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	2b0c      	cmp	r3, #12
 800785a:	d104      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800785c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007860:	637b      	str	r3, [r7, #52]	@ 0x34
 8007862:	f000 bf31 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
 800786a:	f000 bf2d 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800786e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007872:	1f11      	subs	r1, r2, #4
 8007874:	430b      	orrs	r3, r1
 8007876:	d13f      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007878:	4b1b      	ldr	r3, [pc, #108]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800787a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800787e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007882:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007886:	2b00      	cmp	r3, #0
 8007888:	d104      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800788a:	f7fe fb01 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 800788e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007890:	f000 bf1a 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007896:	2b10      	cmp	r3, #16
 8007898:	d104      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800789a:	f7fe f9dd 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 800789e:	6378      	str	r0, [r7, #52]	@ 0x34
 80078a0:	f000 bf12 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80078a4:	4b10      	ldr	r3, [pc, #64]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078b0:	d106      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d103      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80078b8:	4b0e      	ldr	r3, [pc, #56]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80078ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80078bc:	f000 bf04 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80078c0:	4b09      	ldr	r3, [pc, #36]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80078c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d107      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	2b30      	cmp	r3, #48	@ 0x30
 80078d2:	d104      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80078d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078da:	f000 bef5 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e2:	f000 bef1 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80078e6:	bf00      	nop
 80078e8:	46020c00 	.word	0x46020c00
 80078ec:	0800bcdc 	.word	0x0800bcdc
 80078f0:	02dc6c00 	.word	0x02dc6c00
 80078f4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80078f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fc:	f1a2 0108 	sub.w	r1, r2, #8
 8007900:	430b      	orrs	r3, r1
 8007902:	d136      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007904:	4ba4      	ldr	r3, [pc, #656]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800790a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800790e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	2b00      	cmp	r3, #0
 8007914:	d104      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007916:	f7fe fabb 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 800791a:	6378      	str	r0, [r7, #52]	@ 0x34
 800791c:	f000 bed4 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007922:	2b40      	cmp	r3, #64	@ 0x40
 8007924:	d104      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007926:	f7fe f997 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 800792a:	6378      	str	r0, [r7, #52]	@ 0x34
 800792c:	f000 becc 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007930:	4b99      	ldr	r3, [pc, #612]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800793c:	d106      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	2b80      	cmp	r3, #128	@ 0x80
 8007942:	d103      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007944:	4b95      	ldr	r3, [pc, #596]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007946:	637b      	str	r3, [r7, #52]	@ 0x34
 8007948:	f000 bebe 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800794c:	4b92      	ldr	r3, [pc, #584]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800794e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b02      	cmp	r3, #2
 8007958:	d107      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800795a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795c:	2bc0      	cmp	r3, #192	@ 0xc0
 800795e:	d104      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007960:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007964:	637b      	str	r3, [r7, #52]	@ 0x34
 8007966:	f000 beaf 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
 800796e:	f000 beab 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007976:	f1a2 0110 	sub.w	r1, r2, #16
 800797a:	430b      	orrs	r3, r1
 800797c:	d139      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800797e:	4b86      	ldr	r3, [pc, #536]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007988:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007990:	f7fe fa7e 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 8007994:	6378      	str	r0, [r7, #52]	@ 0x34
 8007996:	f000 be97 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a0:	d104      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079a2:	f7fe f959 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 80079a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80079a8:	f000 be8e 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80079ac:	4b7a      	ldr	r3, [pc, #488]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079b8:	d107      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c0:	d103      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80079c2:	4b76      	ldr	r3, [pc, #472]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80079c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c6:	f000 be7f 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80079ca:	4b73      	ldr	r3, [pc, #460]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80079cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d108      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079de:	d104      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80079e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e6:	f000 be6f 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ee:	f000 be6b 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80079f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f6:	f1a2 0120 	sub.w	r1, r2, #32
 80079fa:	430b      	orrs	r3, r1
 80079fc:	d158      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80079fe:	4b66      	ldr	r3, [pc, #408]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d104      	bne.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007a10:	f7fe fa66 	bl	8005ee0 <HAL_RCC_GetPCLK3Freq>
 8007a14:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a16:	f000 be57 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d104      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a20:	f7fe f91a 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8007a24:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a26:	f000 be4f 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a36:	d106      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d103      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007a3e:	4b57      	ldr	r3, [pc, #348]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a42:	f000 be41 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007a46:	4b54      	ldr	r3, [pc, #336]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d107      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d104      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a60:	f000 be32 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007a64:	4b4c      	ldr	r3, [pc, #304]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d11b      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d118      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a76:	4b48      	ldr	r3, [pc, #288]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8007a82:	4b45      	ldr	r3, [pc, #276]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	0e1b      	lsrs	r3, r3, #24
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	e006      	b.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007a8e:	4b42      	ldr	r3, [pc, #264]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a94:	041b      	lsls	r3, r3, #16
 8007a96:	0e1b      	lsrs	r3, r3, #24
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	4a40      	ldr	r2, [pc, #256]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa4:	f000 be10 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aac:	f000 be0c 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	d173      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007abc:	4b36      	ldr	r3, [pc, #216]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ac2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007ac6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ace:	d104      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ad0:	f7fe f8c2 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8007ad4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ad6:	f000 bdf7 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae0:	d108      	bne.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae2:	f107 0318 	add.w	r3, r7, #24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff f992 	bl	8006e10 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007af0:	f000 bdea 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007afa:	f7fe f9af 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8007afe:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b00:	f000 bde2 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007b0a:	d122      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b0c:	4b22      	ldr	r3, [pc, #136]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	d118      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b18:	4b1f      	ldr	r3, [pc, #124]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007b24:	4b1c      	ldr	r3, [pc, #112]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	0e1b      	lsrs	r3, r3, #24
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	e006      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007b30:	4b19      	ldr	r3, [pc, #100]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b36:	041b      	lsls	r3, r3, #16
 8007b38:	0e1b      	lsrs	r3, r3, #24
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	4a18      	ldr	r2, [pc, #96]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b46:	f000 bdbf 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4e:	f000 bdbb 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007b52:	4b11      	ldr	r3, [pc, #68]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b5e:	d107      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b66:	d103      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007b68:	4b0c      	ldr	r3, [pc, #48]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6c:	f000 bdac 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007b70:	4b09      	ldr	r3, [pc, #36]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b7c:	d107      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b84:	d103      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8007b86:	4b05      	ldr	r3, [pc, #20]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b8a:	f000 bd9d 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	f000 bd99 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007b96:	bf00      	nop
 8007b98:	46020c00 	.word	0x46020c00
 8007b9c:	00f42400 	.word	0x00f42400
 8007ba0:	0800bcdc 	.word	0x0800bcdc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007bac:	430b      	orrs	r3, r1
 8007bae:	d158      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007bb0:	4bad      	ldr	r3, [pc, #692]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007bb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d84b      	bhi.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc8:	08007c01 	.word	0x08007c01
 8007bcc:	08007bdd 	.word	0x08007bdd
 8007bd0:	08007bef 	.word	0x08007bef
 8007bd4:	08007c0b 	.word	0x08007c0b
 8007bd8:	08007c15 	.word	0x08007c15
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe ffbb 	bl	8006b5c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bea:	f000 bd6d 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bee:	f107 030c 	add.w	r3, r7, #12
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff fa66 	bl	80070c4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bfc:	f000 bd64 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007c00:	f7fe f92c 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8007c04:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c06:	f000 bd5f 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007c0a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007c0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c10:	f000 bd5a 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c14:	4b94      	ldr	r3, [pc, #592]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	d118      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c20:	4b91      	ldr	r3, [pc, #580]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8007c2c:	4b8e      	ldr	r3, [pc, #568]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	0e1b      	lsrs	r3, r3, #24
 8007c32:	f003 030f 	and.w	r3, r3, #15
 8007c36:	e006      	b.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8007c38:	4b8b      	ldr	r3, [pc, #556]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	0e1b      	lsrs	r3, r3, #24
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	4a89      	ldr	r2, [pc, #548]	@ (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c4e:	f000 bd3b 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c56:	f000 bd37 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c5e:	f000 bd33 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c66:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	d167      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007c6e:	4b7e      	ldr	r3, [pc, #504]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c74:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007c78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c80:	d036      	beq.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c88:	d855      	bhi.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c90:	d029      	beq.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c98:	d84d      	bhi.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ca0:	d013      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ca8:	d845      	bhi.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d015      	beq.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb6:	d13e      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe ff4d 	bl	8006b5c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cc6:	f000 bcff 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cca:	f107 030c 	add.w	r3, r7, #12
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7ff f9f8 	bl	80070c4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cd8:	f000 bcf6 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007cdc:	f7fe f8be 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8007ce0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ce2:	f000 bcf1 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007ce6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007cea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cec:	f000 bcec 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007cf0:	4b5d      	ldr	r3, [pc, #372]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d118      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8007d08:	4b57      	ldr	r3, [pc, #348]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	0e1b      	lsrs	r3, r3, #24
 8007d0e:	f003 030f 	and.w	r3, r3, #15
 8007d12:	e006      	b.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007d14:	4b54      	ldr	r3, [pc, #336]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d1a:	041b      	lsls	r3, r3, #16
 8007d1c:	0e1b      	lsrs	r3, r3, #24
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	4a52      	ldr	r2, [pc, #328]	@ (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d2a:	f000 bccd 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d32:	f000 bcc9 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d3a:	f000 bcc5 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d42:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007d46:	430b      	orrs	r3, r1
 8007d48:	d14c      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007d4a:	4b47      	ldr	r3, [pc, #284]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d54:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d5c:	f7fe f898 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 8007d60:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d62:	f000 bcb1 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d6c:	d104      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d6e:	f7fd ff73 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8007d72:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d74:	f000 bca8 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007d78:	4b3b      	ldr	r3, [pc, #236]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d84:	d107      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d8c:	d103      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8007d8e:	4b38      	ldr	r3, [pc, #224]	@ (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d92:	f000 bc99 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007d96:	4b34      	ldr	r3, [pc, #208]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d11c      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007da8:	d118      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007daa:	4b2f      	ldr	r3, [pc, #188]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007db6:	4b2c      	ldr	r3, [pc, #176]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	0e1b      	lsrs	r3, r3, #24
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	e006      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8007dc2:	4b29      	ldr	r3, [pc, #164]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007dc8:	041b      	lsls	r3, r3, #16
 8007dca:	0e1b      	lsrs	r3, r3, #24
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	4a26      	ldr	r2, [pc, #152]	@ (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd8:	f000 bc76 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de0:	f000 bc72 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007dec:	430b      	orrs	r3, r1
 8007dee:	d152      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007df0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007df6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007dfa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e02:	f7fe f845 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 8007e06:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e08:	f000 bc5e 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e12:	d104      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e14:	f7fd ff20 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8007e18:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e1a:	f000 bc55 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007e1e:	4b12      	ldr	r3, [pc, #72]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e2a:	d107      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e32:	d103      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8007e34:	4b0e      	ldr	r3, [pc, #56]	@ (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e38:	f000 bc46 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	d122      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8007e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e4e:	d11e      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e50:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8007e5c:	4b02      	ldr	r3, [pc, #8]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	0e1b      	lsrs	r3, r3, #24
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	e00c      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8007e68:	46020c00 	.word	0x46020c00
 8007e6c:	0800bcdc 	.word	0x0800bcdc
 8007e70:	00f42400 	.word	0x00f42400
 8007e74:	4ba1      	ldr	r3, [pc, #644]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e7a:	041b      	lsls	r3, r3, #16
 8007e7c:	0e1b      	lsrs	r3, r3, #24
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	4a9f      	ldr	r2, [pc, #636]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e8a:	f000 bc1d 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e92:	f000 bc19 	b.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007e96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e9a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	d151      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007ea2:	4b96      	ldr	r3, [pc, #600]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ea8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007eac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eb2:	d024      	beq.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eb8:	d842      	bhi.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	2b80      	cmp	r3, #128	@ 0x80
 8007ebe:	d00d      	beq.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec2:	2b80      	cmp	r3, #128	@ 0x80
 8007ec4:	d83c      	bhi.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	2b40      	cmp	r3, #64	@ 0x40
 8007ed0:	d011      	beq.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8007ed2:	e035      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007ed4:	f7fe f804 	bl	8005ee0 <HAL_RCC_GetPCLK3Freq>
 8007ed8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007eda:	e3f5      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007edc:	4b87      	ldr	r3, [pc, #540]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee8:	d102      	bne.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8007eea:	4b86      	ldr	r3, [pc, #536]	@ (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007eec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007eee:	e3eb      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ef4:	e3e8      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007ef6:	f7fd feaf 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8007efa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007efc:	e3e4      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007efe:	4b7f      	ldr	r3, [pc, #508]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d117      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f0a:	4b7c      	ldr	r3, [pc, #496]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8007f16:	4b79      	ldr	r3, [pc, #484]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	0e1b      	lsrs	r3, r3, #24
 8007f1c:	f003 030f 	and.w	r3, r3, #15
 8007f20:	e006      	b.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8007f22:	4b76      	ldr	r3, [pc, #472]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	0e1b      	lsrs	r3, r3, #24
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	4a73      	ldr	r2, [pc, #460]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f38:	e3c6      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f3e:	e3c3      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f44:	e3c0      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	d147      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007f52:	4b6a      	ldr	r3, [pc, #424]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007f5c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d103      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f64:	f7fd ff94 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 8007f68:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f6a:	e3ad      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f72:	d103      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f74:	f7fd fe70 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8007f78:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f7a:	e3a5      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007f7c:	4b5f      	ldr	r3, [pc, #380]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f88:	d106      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f90:	d102      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8007f92:	4b5c      	ldr	r3, [pc, #368]	@ (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f96:	e397      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007f98:	4b58      	ldr	r3, [pc, #352]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b20      	cmp	r3, #32
 8007fa2:	d11b      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007faa:	d117      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fac:	4b53      	ldr	r3, [pc, #332]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8007fb8:	4b50      	ldr	r3, [pc, #320]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	0e1b      	lsrs	r3, r3, #24
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	e006      	b.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8007fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fca:	041b      	lsls	r3, r3, #16
 8007fcc:	0e1b      	lsrs	r3, r3, #24
 8007fce:	f003 030f 	and.w	r3, r3, #15
 8007fd2:	4a4b      	ldr	r2, [pc, #300]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fda:	e375      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe0:	e372      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007fea:	430b      	orrs	r3, r1
 8007fec:	d164      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007fee:	4b43      	ldr	r3, [pc, #268]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ff8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d120      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008000:	4b3e      	ldr	r3, [pc, #248]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0320 	and.w	r3, r3, #32
 8008008:	2b20      	cmp	r3, #32
 800800a:	d117      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800800c:	4b3b      	ldr	r3, [pc, #236]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8008018:	4b38      	ldr	r3, [pc, #224]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	0e1b      	lsrs	r3, r3, #24
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	e006      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8008024:	4b35      	ldr	r3, [pc, #212]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800802a:	041b      	lsls	r3, r3, #16
 800802c:	0e1b      	lsrs	r3, r3, #24
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	4a33      	ldr	r2, [pc, #204]	@ (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008038:	637b      	str	r3, [r7, #52]	@ 0x34
 800803a:	e345      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008040:	e342      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008042:	4b2e      	ldr	r3, [pc, #184]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800804c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008050:	d112      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008058:	d10e      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800805a:	4b28      	ldr	r3, [pc, #160]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800805c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008068:	d102      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800806a:	23fa      	movs	r3, #250	@ 0xfa
 800806c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800806e:	e32b      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008070:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008074:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008076:	e327      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008078:	4b20      	ldr	r3, [pc, #128]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008084:	d106      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800808c:	d102      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800808e:	4b1d      	ldr	r3, [pc, #116]	@ (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008090:	637b      	str	r3, [r7, #52]	@ 0x34
 8008092:	e319      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008094:	4b19      	ldr	r3, [pc, #100]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d107      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080a8:	d103      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80080aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b0:	e30a      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b6:	e307      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80080b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080bc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80080c0:	430b      	orrs	r3, r1
 80080c2:	d16b      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80080c4:	4b0d      	ldr	r3, [pc, #52]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080ca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80080ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d127      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080d6:	4b09      	ldr	r3, [pc, #36]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d11e      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080e2:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00c      	beq.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80080ee:	4b03      	ldr	r3, [pc, #12]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	0e1b      	lsrs	r3, r3, #24
 80080f4:	f003 030f 	and.w	r3, r3, #15
 80080f8:	e00d      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80080fa:	bf00      	nop
 80080fc:	46020c00 	.word	0x46020c00
 8008100:	0800bcdc 	.word	0x0800bcdc
 8008104:	00f42400 	.word	0x00f42400
 8008108:	4b94      	ldr	r3, [pc, #592]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800810a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800810e:	041b      	lsls	r3, r3, #16
 8008110:	0e1b      	lsrs	r3, r3, #24
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	4a92      	ldr	r2, [pc, #584]	@ (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811c:	637b      	str	r3, [r7, #52]	@ 0x34
 800811e:	e2d3      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	637b      	str	r3, [r7, #52]	@ 0x34
 8008124:	e2d0      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008126:	4b8d      	ldr	r3, [pc, #564]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800812c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008130:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008134:	d112      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800813c:	d10e      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800813e:	4b87      	ldr	r3, [pc, #540]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800814c:	d102      	bne.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800814e:	23fa      	movs	r3, #250	@ 0xfa
 8008150:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008152:	e2b9      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008154:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800815a:	e2b5      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800815c:	4b7f      	ldr	r3, [pc, #508]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008168:	d106      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008170:	d102      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8008172:	4b7c      	ldr	r3, [pc, #496]	@ (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008174:	637b      	str	r3, [r7, #52]	@ 0x34
 8008176:	e2a7      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008178:	4b78      	ldr	r3, [pc, #480]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800817a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b02      	cmp	r3, #2
 8008184:	d107      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800818c:	d103      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800818e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008192:	637b      	str	r3, [r7, #52]	@ 0x34
 8008194:	e298      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	637b      	str	r3, [r7, #52]	@ 0x34
 800819a:	e295      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800819c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80081a4:	430b      	orrs	r3, r1
 80081a6:	d147      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80081a8:	4b6c      	ldr	r3, [pc, #432]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80081aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081ae:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80081b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d103      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081ba:	f7fd fe69 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 80081be:	6378      	str	r0, [r7, #52]	@ 0x34
 80081c0:	e282      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80081c2:	4b66      	ldr	r3, [pc, #408]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80081c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081d0:	d112      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081d8:	d10e      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081da:	4b60      	ldr	r3, [pc, #384]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80081dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081e8:	d102      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80081ea:	23fa      	movs	r3, #250	@ 0xfa
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081ee:	e26b      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80081f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80081f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081f6:	e267      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80081f8:	4b58      	ldr	r3, [pc, #352]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008204:	d106      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800820c:	d102      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800820e:	4b55      	ldr	r3, [pc, #340]	@ (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008210:	637b      	str	r3, [r7, #52]	@ 0x34
 8008212:	e259      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008214:	4b51      	ldr	r3, [pc, #324]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b02      	cmp	r3, #2
 8008220:	d107      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008228:	d103      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800822a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008230:	e24a      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	637b      	str	r3, [r7, #52]	@ 0x34
 8008236:	e247      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800823c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8008240:	430b      	orrs	r3, r1
 8008242:	d12d      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008244:	4b45      	ldr	r3, [pc, #276]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800824a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800824e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008250:	4b42      	ldr	r3, [pc, #264]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800825c:	d105      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800825e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8008264:	4b3f      	ldr	r3, [pc, #252]	@ (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008266:	637b      	str	r3, [r7, #52]	@ 0x34
 8008268:	e22e      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008270:	d107      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fc70 	bl	8006b5c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008280:	e222      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008288:	d107      	bne.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800828a:	f107 0318 	add.w	r3, r7, #24
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fdbe 	bl	8006e10 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	637b      	str	r3, [r7, #52]	@ 0x34
 8008298:	e216      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	637b      	str	r3, [r7, #52]	@ 0x34
 800829e:	e213      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80082a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082a4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80082a8:	430b      	orrs	r3, r1
 80082aa:	d15d      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80082ac:	4b2b      	ldr	r3, [pc, #172]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80082ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80082b6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082be:	d028      	beq.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80082c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082c6:	d845      	bhi.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082ce:	d013      	beq.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082d6:	d83d      	bhi.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80082d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082e4:	d004      	beq.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80082e6:	e035      	b.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80082e8:	f7fd fde6 	bl	8005eb8 <HAL_RCC_GetPCLK2Freq>
 80082ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80082ee:	e1eb      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80082f0:	f7fd fcb2 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 80082f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80082f6:	e1e7      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082f8:	4b18      	ldr	r3, [pc, #96]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008304:	d102      	bne.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8008306:	4b17      	ldr	r3, [pc, #92]	@ (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008308:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800830a:	e1dd      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008310:	e1da      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008312:	4b12      	ldr	r3, [pc, #72]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b20      	cmp	r3, #32
 800831c:	d117      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800831e:	4b0f      	ldr	r3, [pc, #60]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800832a:	4b0c      	ldr	r3, [pc, #48]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	0e1b      	lsrs	r3, r3, #24
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	e006      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8008336:	4b09      	ldr	r3, [pc, #36]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800833c:	041b      	lsls	r3, r3, #16
 800833e:	0e1b      	lsrs	r3, r3, #24
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	4a06      	ldr	r2, [pc, #24]	@ (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800834a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800834c:	e1bc      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008352:	e1b9      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008358:	e1b6      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800835a:	bf00      	nop
 800835c:	46020c00 	.word	0x46020c00
 8008360:	0800bcdc 	.word	0x0800bcdc
 8008364:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800836c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8008370:	430b      	orrs	r3, r1
 8008372:	d156      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008374:	4ba5      	ldr	r3, [pc, #660]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800837a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800837e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008382:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008386:	d028      	beq.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8008388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800838e:	d845      	bhi.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8008390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008392:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008396:	d013      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8008398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800839e:	d83d      	bhi.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80083a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d004      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ac:	d004      	beq.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80083ae:	e035      	b.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80083b0:	f7fd fd6e 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 80083b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80083b6:	e187      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80083b8:	f7fd fc4e 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 80083bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80083be:	e183      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083c0:	4b92      	ldr	r3, [pc, #584]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083cc:	d102      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80083ce:	4b90      	ldr	r3, [pc, #576]	@ (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80083d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083d2:	e179      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083d8:	e176      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80083da:	4b8c      	ldr	r3, [pc, #560]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d117      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083e6:	4b89      	ldr	r3, [pc, #548]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d005      	beq.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80083f2:	4b86      	ldr	r3, [pc, #536]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	0e1b      	lsrs	r3, r3, #24
 80083f8:	f003 030f 	and.w	r3, r3, #15
 80083fc:	e006      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80083fe:	4b83      	ldr	r3, [pc, #524]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008404:	041b      	lsls	r3, r3, #16
 8008406:	0e1b      	lsrs	r3, r3, #24
 8008408:	f003 030f 	and.w	r3, r3, #15
 800840c:	4a81      	ldr	r2, [pc, #516]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800840e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008414:	e158      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800841a:	e155      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008420:	e152      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008426:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800842a:	430b      	orrs	r3, r1
 800842c:	d177      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800842e:	4b77      	ldr	r3, [pc, #476]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008434:	f003 0318 	and.w	r3, r3, #24
 8008438:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843c:	2b18      	cmp	r3, #24
 800843e:	d86b      	bhi.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8008440:	a201      	add	r2, pc, #4	@ (adr r2, 8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	080084ad 	.word	0x080084ad
 800844c:	08008519 	.word	0x08008519
 8008450:	08008519 	.word	0x08008519
 8008454:	08008519 	.word	0x08008519
 8008458:	08008519 	.word	0x08008519
 800845c:	08008519 	.word	0x08008519
 8008460:	08008519 	.word	0x08008519
 8008464:	08008519 	.word	0x08008519
 8008468:	080084b5 	.word	0x080084b5
 800846c:	08008519 	.word	0x08008519
 8008470:	08008519 	.word	0x08008519
 8008474:	08008519 	.word	0x08008519
 8008478:	08008519 	.word	0x08008519
 800847c:	08008519 	.word	0x08008519
 8008480:	08008519 	.word	0x08008519
 8008484:	08008519 	.word	0x08008519
 8008488:	080084bd 	.word	0x080084bd
 800848c:	08008519 	.word	0x08008519
 8008490:	08008519 	.word	0x08008519
 8008494:	08008519 	.word	0x08008519
 8008498:	08008519 	.word	0x08008519
 800849c:	08008519 	.word	0x08008519
 80084a0:	08008519 	.word	0x08008519
 80084a4:	08008519 	.word	0x08008519
 80084a8:	080084d7 	.word	0x080084d7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80084ac:	f7fd fd18 	bl	8005ee0 <HAL_RCC_GetPCLK3Freq>
 80084b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084b2:	e109      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80084b4:	f7fd fbd0 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 80084b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084ba:	e105      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084bc:	4b53      	ldr	r3, [pc, #332]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084c8:	d102      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80084ca:	4b51      	ldr	r3, [pc, #324]	@ (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80084cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084ce:	e0fb      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084d4:	e0f8      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084d6:	4b4d      	ldr	r3, [pc, #308]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0320 	and.w	r3, r3, #32
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d117      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084e2:	4b4a      	ldr	r3, [pc, #296]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d005      	beq.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80084ee:	4b47      	ldr	r3, [pc, #284]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	0e1b      	lsrs	r3, r3, #24
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	e006      	b.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80084fa:	4b44      	ldr	r3, [pc, #272]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008500:	041b      	lsls	r3, r3, #16
 8008502:	0e1b      	lsrs	r3, r3, #24
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	4a42      	ldr	r2, [pc, #264]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800850a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800850e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008510:	e0da      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008516:	e0d7      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800851c:	e0d4      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800851e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008522:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008526:	430b      	orrs	r3, r1
 8008528:	d155      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800852a:	4b38      	ldr	r3, [pc, #224]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800852c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008530:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008534:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008538:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800853c:	d013      	beq.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008540:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008544:	d844      	bhi.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800854c:	d013      	beq.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008554:	d83c      	bhi.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008558:	2b00      	cmp	r3, #0
 800855a:	d014      	beq.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800855c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008562:	d014      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8008564:	e034      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008566:	f107 0318 	add.w	r3, r7, #24
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fc50 	bl	8006e10 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008574:	e0a8      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe faee 	bl	8006b5c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008584:	e0a0      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008586:	f7fd fb67 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 800858a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800858c:	e09c      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800858e:	4b1f      	ldr	r3, [pc, #124]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b20      	cmp	r3, #32
 8008598:	d117      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800859a:	4b1c      	ldr	r3, [pc, #112]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d005      	beq.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80085a6:	4b19      	ldr	r3, [pc, #100]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	0e1b      	lsrs	r3, r3, #24
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	e006      	b.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 80085b2:	4b16      	ldr	r3, [pc, #88]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085b8:	041b      	lsls	r3, r3, #16
 80085ba:	0e1b      	lsrs	r3, r3, #24
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	4a14      	ldr	r2, [pc, #80]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80085c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085c8:	e07e      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085ce:	e07b      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085d4:	e078      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80085d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085da:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80085de:	430b      	orrs	r3, r1
 80085e0:	d138      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80085e2:	4b0a      	ldr	r3, [pc, #40]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085ec:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80085ee:	4b07      	ldr	r3, [pc, #28]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80085f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d10d      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8008602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008606:	637b      	str	r3, [r7, #52]	@ 0x34
 8008608:	e05e      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800860a:	bf00      	nop
 800860c:	46020c00 	.word	0x46020c00
 8008610:	00f42400 	.word	0x00f42400
 8008614:	0800bcdc 	.word	0x0800bcdc
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008618:	4b2e      	ldr	r3, [pc, #184]	@ (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800861a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800861e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008626:	d112      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800862e:	d10e      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008630:	4b28      	ldr	r3, [pc, #160]	@ (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800863a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800863e:	d102      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8008640:	23fa      	movs	r3, #250	@ 0xfa
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008644:	e040      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008646:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800864a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800864c:	e03c      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	637b      	str	r3, [r7, #52]	@ 0x34
 8008652:	e039      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008658:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800865c:	430b      	orrs	r3, r1
 800865e:	d131      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008660:	4b1c      	ldr	r3, [pc, #112]	@ (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008662:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008666:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800866a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800866c:	4b19      	ldr	r3, [pc, #100]	@ (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008678:	d105      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8008680:	4b15      	ldr	r3, [pc, #84]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8008682:	637b      	str	r3, [r7, #52]	@ 0x34
 8008684:	e020      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008686:	4b13      	ldr	r3, [pc, #76]	@ (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800868e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008692:	d106      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800869a:	d102      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800869c:	4b0f      	ldr	r3, [pc, #60]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800869e:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a0:	e012      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80086a2:	4b0c      	ldr	r3, [pc, #48]	@ (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ae:	d106      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086b6:	d102      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80086b8:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80086ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80086bc:	e004      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c2:	e001      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80086c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3738      	adds	r7, #56	@ 0x38
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	46020c00 	.word	0x46020c00
 80086d8:	02dc6c00 	.word	0x02dc6c00
 80086dc:	016e3600 	.word	0x016e3600
 80086e0:	00f42400 	.word	0x00f42400

080086e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80086ec:	4b47      	ldr	r3, [pc, #284]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a46      	ldr	r2, [pc, #280]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80086f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80086f8:	f7f9 fa32 	bl	8001b60 <HAL_GetTick>
 80086fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086fe:	e008      	b.n	8008712 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008700:	f7f9 fa2e 	bl	8001b60 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d901      	bls.n	8008712 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e077      	b.n	8008802 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008712:	4b3e      	ldr	r3, [pc, #248]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1f0      	bne.n	8008700 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800871e:	4b3b      	ldr	r3, [pc, #236]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 8008720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008722:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008726:	f023 0303 	bic.w	r3, r3, #3
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	6811      	ldr	r1, [r2, #0]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	6852      	ldr	r2, [r2, #4]
 8008732:	3a01      	subs	r2, #1
 8008734:	0212      	lsls	r2, r2, #8
 8008736:	430a      	orrs	r2, r1
 8008738:	4934      	ldr	r1, [pc, #208]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 800873a:	4313      	orrs	r3, r2
 800873c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800873e:	4b33      	ldr	r3, [pc, #204]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 8008740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008742:	4b33      	ldr	r3, [pc, #204]	@ (8008810 <RCCEx_PLL2_Config+0x12c>)
 8008744:	4013      	ands	r3, r2
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	6892      	ldr	r2, [r2, #8]
 800874a:	3a01      	subs	r2, #1
 800874c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	68d2      	ldr	r2, [r2, #12]
 8008754:	3a01      	subs	r2, #1
 8008756:	0252      	lsls	r2, r2, #9
 8008758:	b292      	uxth	r2, r2
 800875a:	4311      	orrs	r1, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6912      	ldr	r2, [r2, #16]
 8008760:	3a01      	subs	r2, #1
 8008762:	0412      	lsls	r2, r2, #16
 8008764:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008768:	4311      	orrs	r1, r2
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	6952      	ldr	r2, [r2, #20]
 800876e:	3a01      	subs	r2, #1
 8008770:	0612      	lsls	r2, r2, #24
 8008772:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008776:	430a      	orrs	r2, r1
 8008778:	4924      	ldr	r1, [pc, #144]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 800877a:	4313      	orrs	r3, r2
 800877c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800877e:	4b23      	ldr	r3, [pc, #140]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 8008780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008782:	f023 020c 	bic.w	r2, r3, #12
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	4920      	ldr	r1, [pc, #128]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 800878c:	4313      	orrs	r3, r2
 800878e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008790:	4b1e      	ldr	r3, [pc, #120]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 8008792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	491c      	ldr	r1, [pc, #112]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 800879a:	4313      	orrs	r3, r2
 800879c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800879e:	4b1b      	ldr	r3, [pc, #108]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a2:	4a1a      	ldr	r2, [pc, #104]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80087a4:	f023 0310 	bic.w	r3, r3, #16
 80087a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087aa:	4b18      	ldr	r3, [pc, #96]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80087ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087b2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	69d2      	ldr	r2, [r2, #28]
 80087ba:	00d2      	lsls	r2, r2, #3
 80087bc:	4913      	ldr	r1, [pc, #76]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80087c2:	4b12      	ldr	r3, [pc, #72]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c6:	4a11      	ldr	r2, [pc, #68]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80087c8:	f043 0310 	orr.w	r3, r3, #16
 80087cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80087ce:	4b0f      	ldr	r3, [pc, #60]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a0e      	ldr	r2, [pc, #56]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80087d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80087da:	f7f9 f9c1 	bl	8001b60 <HAL_GetTick>
 80087de:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087e0:	e008      	b.n	80087f4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80087e2:	f7f9 f9bd 	bl	8001b60 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d901      	bls.n	80087f4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e006      	b.n	8008802 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087f4:	4b05      	ldr	r3, [pc, #20]	@ (800880c <RCCEx_PLL2_Config+0x128>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0f0      	beq.n	80087e2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008800:	2300      	movs	r3, #0

}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	46020c00 	.word	0x46020c00
 8008810:	80800000 	.word	0x80800000

08008814 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800881c:	4b47      	ldr	r3, [pc, #284]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a46      	ldr	r2, [pc, #280]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 8008822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008826:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008828:	f7f9 f99a 	bl	8001b60 <HAL_GetTick>
 800882c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800882e:	e008      	b.n	8008842 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008830:	f7f9 f996 	bl	8001b60 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b02      	cmp	r3, #2
 800883c:	d901      	bls.n	8008842 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e077      	b.n	8008932 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008842:	4b3e      	ldr	r3, [pc, #248]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800884e:	4b3b      	ldr	r3, [pc, #236]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008852:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008856:	f023 0303 	bic.w	r3, r3, #3
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6811      	ldr	r1, [r2, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6852      	ldr	r2, [r2, #4]
 8008862:	3a01      	subs	r2, #1
 8008864:	0212      	lsls	r2, r2, #8
 8008866:	430a      	orrs	r2, r1
 8008868:	4934      	ldr	r1, [pc, #208]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 800886a:	4313      	orrs	r3, r2
 800886c:	630b      	str	r3, [r1, #48]	@ 0x30
 800886e:	4b33      	ldr	r3, [pc, #204]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 8008870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008872:	4b33      	ldr	r3, [pc, #204]	@ (8008940 <RCCEx_PLL3_Config+0x12c>)
 8008874:	4013      	ands	r3, r2
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	6892      	ldr	r2, [r2, #8]
 800887a:	3a01      	subs	r2, #1
 800887c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	68d2      	ldr	r2, [r2, #12]
 8008884:	3a01      	subs	r2, #1
 8008886:	0252      	lsls	r2, r2, #9
 8008888:	b292      	uxth	r2, r2
 800888a:	4311      	orrs	r1, r2
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6912      	ldr	r2, [r2, #16]
 8008890:	3a01      	subs	r2, #1
 8008892:	0412      	lsls	r2, r2, #16
 8008894:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008898:	4311      	orrs	r1, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6952      	ldr	r2, [r2, #20]
 800889e:	3a01      	subs	r2, #1
 80088a0:	0612      	lsls	r2, r2, #24
 80088a2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80088a6:	430a      	orrs	r2, r1
 80088a8:	4924      	ldr	r1, [pc, #144]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80088ae:	4b23      	ldr	r3, [pc, #140]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b2:	f023 020c 	bic.w	r2, r3, #12
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	4920      	ldr	r1, [pc, #128]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80088c0:	4b1e      	ldr	r3, [pc, #120]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	491c      	ldr	r1, [pc, #112]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80088ce:	4b1b      	ldr	r3, [pc, #108]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d2:	4a1a      	ldr	r2, [pc, #104]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088d4:	f023 0310 	bic.w	r3, r3, #16
 80088d8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80088da:	4b18      	ldr	r3, [pc, #96]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	69d2      	ldr	r2, [r2, #28]
 80088ea:	00d2      	lsls	r2, r2, #3
 80088ec:	4913      	ldr	r1, [pc, #76]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80088f2:	4b12      	ldr	r3, [pc, #72]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f6:	4a11      	ldr	r2, [pc, #68]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 80088f8:	f043 0310 	orr.w	r3, r3, #16
 80088fc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80088fe:	4b0f      	ldr	r3, [pc, #60]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a0e      	ldr	r2, [pc, #56]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 8008904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008908:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800890a:	f7f9 f929 	bl	8001b60 <HAL_GetTick>
 800890e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008910:	e008      	b.n	8008924 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008912:	f7f9 f925 	bl	8001b60 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d901      	bls.n	8008924 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e006      	b.n	8008932 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008924:	4b05      	ldr	r3, [pc, #20]	@ (800893c <RCCEx_PLL3_Config+0x128>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0f0      	beq.n	8008912 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	46020c00 	.word	0x46020c00
 8008940:	80800000 	.word	0x80800000

08008944 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e0fb      	b.n	8008b4e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a7f      	ldr	r2, [pc, #508]	@ (8008b58 <HAL_SPI_Init+0x214>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d004      	beq.n	800896a <HAL_SPI_Init+0x26>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a7d      	ldr	r2, [pc, #500]	@ (8008b5c <HAL_SPI_Init+0x218>)
 8008966:	4293      	cmp	r3, r2
 8008968:	e000      	b.n	800896c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800896a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a78      	ldr	r2, [pc, #480]	@ (8008b58 <HAL_SPI_Init+0x214>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d004      	beq.n	8008986 <HAL_SPI_Init+0x42>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a76      	ldr	r2, [pc, #472]	@ (8008b5c <HAL_SPI_Init+0x218>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d105      	bne.n	8008992 <HAL_SPI_Init+0x4e>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	2b0f      	cmp	r3, #15
 800898c:	d901      	bls.n	8008992 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e0dd      	b.n	8008b4e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f8ec 	bl	8008b70 <SPI_GetPacketSize>
 8008998:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a6e      	ldr	r2, [pc, #440]	@ (8008b58 <HAL_SPI_Init+0x214>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d004      	beq.n	80089ae <HAL_SPI_Init+0x6a>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a6c      	ldr	r2, [pc, #432]	@ (8008b5c <HAL_SPI_Init+0x218>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d102      	bne.n	80089b4 <HAL_SPI_Init+0x70>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	d816      	bhi.n	80089e2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80089b8:	4a69      	ldr	r2, [pc, #420]	@ (8008b60 <HAL_SPI_Init+0x21c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00e      	beq.n	80089dc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a68      	ldr	r2, [pc, #416]	@ (8008b64 <HAL_SPI_Init+0x220>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d009      	beq.n	80089dc <HAL_SPI_Init+0x98>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a66      	ldr	r2, [pc, #408]	@ (8008b68 <HAL_SPI_Init+0x224>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d004      	beq.n	80089dc <HAL_SPI_Init+0x98>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a65      	ldr	r2, [pc, #404]	@ (8008b6c <HAL_SPI_Init+0x228>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d104      	bne.n	80089e6 <HAL_SPI_Init+0xa2>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d901      	bls.n	80089e6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e0b3      	b.n	8008b4e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d106      	bne.n	8008a00 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7f8 fc84 	bl	8001308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0201 	bic.w	r2, r2, #1
 8008a16:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008a22:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a2c:	d119      	bne.n	8008a62 <HAL_SPI_Init+0x11e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a36:	d103      	bne.n	8008a40 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d008      	beq.n	8008a52 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10c      	bne.n	8008a62 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a50:	d107      	bne.n	8008a62 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00f      	beq.n	8008a8e <HAL_SPI_Init+0x14a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b06      	cmp	r3, #6
 8008a74:	d90b      	bls.n	8008a8e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	e007      	b.n	8008a9e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008a9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	69da      	ldr	r2, [r3, #28]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab0:	ea42 0103 	orr.w	r1, r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	431a      	orrs	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af2:	431a      	orrs	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	431a      	orrs	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008afe:	431a      	orrs	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b0a:	ea42 0103 	orr.w	r1, r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	46002000 	.word	0x46002000
 8008b5c:	56002000 	.word	0x56002000
 8008b60:	40013000 	.word	0x40013000
 8008b64:	50013000 	.word	0x50013000
 8008b68:	40003800 	.word	0x40003800
 8008b6c:	50003800 	.word	0x50003800

08008b70 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b7c:	095b      	lsrs	r3, r3, #5
 8008b7e:	3301      	adds	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	3301      	adds	r3, #1
 8008b88:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	3307      	adds	r3, #7
 8008b8e:	08db      	lsrs	r3, r3, #3
 8008b90:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	fb02 f303 	mul.w	r3, r2, r3
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d12e      	bne.n	8008c1a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e028      	b.n	8008c1c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0201 	bic.w	r2, r2, #1
 8008be8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008bf6:	ea42 0103 	orr.w	r1, r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	e000      	b.n	8008c1c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
  }
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e049      	b.n	8008cce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7f8 fbea 	bl	8001428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4619      	mov	r1, r3
 8008c66:	4610      	mov	r0, r2
 8008c68:	f000 fbfe 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e049      	b.n	8008d7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d106      	bne.n	8008d02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f841 	bl	8008d84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2202      	movs	r2, #2
 8008d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3304      	adds	r3, #4
 8008d12:	4619      	mov	r1, r3
 8008d14:	4610      	mov	r0, r2
 8008d16:	f000 fba7 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <HAL_TIM_PWM_Start+0x24>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	bf14      	ite	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	2300      	moveq	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	e03c      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d109      	bne.n	8008dd6 <HAL_TIM_PWM_Start+0x3e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	bf14      	ite	ne
 8008dce:	2301      	movne	r3, #1
 8008dd0:	2300      	moveq	r3, #0
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	e02f      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d109      	bne.n	8008df0 <HAL_TIM_PWM_Start+0x58>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	bf14      	ite	ne
 8008de8:	2301      	movne	r3, #1
 8008dea:	2300      	moveq	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	e022      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b0c      	cmp	r3, #12
 8008df4:	d109      	bne.n	8008e0a <HAL_TIM_PWM_Start+0x72>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	bf14      	ite	ne
 8008e02:	2301      	movne	r3, #1
 8008e04:	2300      	moveq	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	e015      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b10      	cmp	r3, #16
 8008e0e:	d109      	bne.n	8008e24 <HAL_TIM_PWM_Start+0x8c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	bf14      	ite	ne
 8008e1c:	2301      	movne	r3, #1
 8008e1e:	2300      	moveq	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	e008      	b.n	8008e36 <HAL_TIM_PWM_Start+0x9e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	bf14      	ite	ne
 8008e30:	2301      	movne	r3, #1
 8008e32:	2300      	moveq	r3, #0
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e0d8      	b.n	8008ff0 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <HAL_TIM_PWM_Start+0xb6>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e4c:	e023      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	d104      	bne.n	8008e5e <HAL_TIM_PWM_Start+0xc6>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e5c:	e01b      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d104      	bne.n	8008e6e <HAL_TIM_PWM_Start+0xd6>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e6c:	e013      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b0c      	cmp	r3, #12
 8008e72:	d104      	bne.n	8008e7e <HAL_TIM_PWM_Start+0xe6>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e7c:	e00b      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b10      	cmp	r3, #16
 8008e82:	d104      	bne.n	8008e8e <HAL_TIM_PWM_Start+0xf6>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e8c:	e003      	b.n	8008e96 <HAL_TIM_PWM_Start+0xfe>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2202      	movs	r2, #2
 8008e92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 f85a 	bl	8009f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a53      	ldr	r2, [pc, #332]	@ (8008ff8 <HAL_TIM_PWM_Start+0x260>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d02c      	beq.n	8008f08 <HAL_TIM_PWM_Start+0x170>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a52      	ldr	r2, [pc, #328]	@ (8008ffc <HAL_TIM_PWM_Start+0x264>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d027      	beq.n	8008f08 <HAL_TIM_PWM_Start+0x170>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a50      	ldr	r2, [pc, #320]	@ (8009000 <HAL_TIM_PWM_Start+0x268>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d022      	beq.n	8008f08 <HAL_TIM_PWM_Start+0x170>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a4f      	ldr	r2, [pc, #316]	@ (8009004 <HAL_TIM_PWM_Start+0x26c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d01d      	beq.n	8008f08 <HAL_TIM_PWM_Start+0x170>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a4d      	ldr	r2, [pc, #308]	@ (8009008 <HAL_TIM_PWM_Start+0x270>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d018      	beq.n	8008f08 <HAL_TIM_PWM_Start+0x170>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a4c      	ldr	r2, [pc, #304]	@ (800900c <HAL_TIM_PWM_Start+0x274>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d013      	beq.n	8008f08 <HAL_TIM_PWM_Start+0x170>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8009010 <HAL_TIM_PWM_Start+0x278>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d00e      	beq.n	8008f08 <HAL_TIM_PWM_Start+0x170>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a49      	ldr	r2, [pc, #292]	@ (8009014 <HAL_TIM_PWM_Start+0x27c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d009      	beq.n	8008f08 <HAL_TIM_PWM_Start+0x170>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a47      	ldr	r2, [pc, #284]	@ (8009018 <HAL_TIM_PWM_Start+0x280>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d004      	beq.n	8008f08 <HAL_TIM_PWM_Start+0x170>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a46      	ldr	r2, [pc, #280]	@ (800901c <HAL_TIM_PWM_Start+0x284>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d101      	bne.n	8008f0c <HAL_TIM_PWM_Start+0x174>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <HAL_TIM_PWM_Start+0x176>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d007      	beq.n	8008f22 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a34      	ldr	r2, [pc, #208]	@ (8008ff8 <HAL_TIM_PWM_Start+0x260>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d040      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a32      	ldr	r2, [pc, #200]	@ (8008ffc <HAL_TIM_PWM_Start+0x264>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d03b      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f3e:	d036      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f48:	d031      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a34      	ldr	r2, [pc, #208]	@ (8009020 <HAL_TIM_PWM_Start+0x288>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d02c      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a32      	ldr	r2, [pc, #200]	@ (8009024 <HAL_TIM_PWM_Start+0x28c>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d027      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a31      	ldr	r2, [pc, #196]	@ (8009028 <HAL_TIM_PWM_Start+0x290>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d022      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800902c <HAL_TIM_PWM_Start+0x294>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d01d      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a2e      	ldr	r2, [pc, #184]	@ (8009030 <HAL_TIM_PWM_Start+0x298>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d018      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a2c      	ldr	r2, [pc, #176]	@ (8009034 <HAL_TIM_PWM_Start+0x29c>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d013      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8009000 <HAL_TIM_PWM_Start+0x268>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00e      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a1b      	ldr	r2, [pc, #108]	@ (8009004 <HAL_TIM_PWM_Start+0x26c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d009      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8009008 <HAL_TIM_PWM_Start+0x270>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d004      	beq.n	8008fae <HAL_TIM_PWM_Start+0x216>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a18      	ldr	r2, [pc, #96]	@ (800900c <HAL_TIM_PWM_Start+0x274>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d115      	bne.n	8008fda <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	4b20      	ldr	r3, [pc, #128]	@ (8009038 <HAL_TIM_PWM_Start+0x2a0>)
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b06      	cmp	r3, #6
 8008fbe:	d015      	beq.n	8008fec <HAL_TIM_PWM_Start+0x254>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fc6:	d011      	beq.n	8008fec <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0201 	orr.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd8:	e008      	b.n	8008fec <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f042 0201 	orr.w	r2, r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	e000      	b.n	8008fee <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	40012c00 	.word	0x40012c00
 8008ffc:	50012c00 	.word	0x50012c00
 8009000:	40013400 	.word	0x40013400
 8009004:	50013400 	.word	0x50013400
 8009008:	40014000 	.word	0x40014000
 800900c:	50014000 	.word	0x50014000
 8009010:	40014400 	.word	0x40014400
 8009014:	50014400 	.word	0x50014400
 8009018:	40014800 	.word	0x40014800
 800901c:	50014800 	.word	0x50014800
 8009020:	40000400 	.word	0x40000400
 8009024:	50000400 	.word	0x50000400
 8009028:	40000800 	.word	0x40000800
 800902c:	50000800 	.word	0x50000800
 8009030:	40000c00 	.word	0x40000c00
 8009034:	50000c00 	.word	0x50000c00
 8009038:	00010007 	.word	0x00010007

0800903c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009052:	2b01      	cmp	r3, #1
 8009054:	d101      	bne.n	800905a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009056:	2302      	movs	r3, #2
 8009058:	e0ff      	b.n	800925a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b14      	cmp	r3, #20
 8009066:	f200 80f0 	bhi.w	800924a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800906a:	a201      	add	r2, pc, #4	@ (adr r2, 8009070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	080090c5 	.word	0x080090c5
 8009074:	0800924b 	.word	0x0800924b
 8009078:	0800924b 	.word	0x0800924b
 800907c:	0800924b 	.word	0x0800924b
 8009080:	08009105 	.word	0x08009105
 8009084:	0800924b 	.word	0x0800924b
 8009088:	0800924b 	.word	0x0800924b
 800908c:	0800924b 	.word	0x0800924b
 8009090:	08009147 	.word	0x08009147
 8009094:	0800924b 	.word	0x0800924b
 8009098:	0800924b 	.word	0x0800924b
 800909c:	0800924b 	.word	0x0800924b
 80090a0:	08009187 	.word	0x08009187
 80090a4:	0800924b 	.word	0x0800924b
 80090a8:	0800924b 	.word	0x0800924b
 80090ac:	0800924b 	.word	0x0800924b
 80090b0:	080091c9 	.word	0x080091c9
 80090b4:	0800924b 	.word	0x0800924b
 80090b8:	0800924b 	.word	0x0800924b
 80090bc:	0800924b 	.word	0x0800924b
 80090c0:	08009209 	.word	0x08009209
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fad2 	bl	8009674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	699a      	ldr	r2, [r3, #24]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0208 	orr.w	r2, r2, #8
 80090de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699a      	ldr	r2, [r3, #24]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0204 	bic.w	r2, r2, #4
 80090ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6999      	ldr	r1, [r3, #24]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	691a      	ldr	r2, [r3, #16]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	619a      	str	r2, [r3, #24]
      break;
 8009102:	e0a5      	b.n	8009250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fb74 	bl	80097f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800911e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	699a      	ldr	r2, [r3, #24]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800912e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6999      	ldr	r1, [r3, #24]
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	021a      	lsls	r2, r3, #8
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	619a      	str	r2, [r3, #24]
      break;
 8009144:	e084      	b.n	8009250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68b9      	ldr	r1, [r7, #8]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fc03 	bl	8009958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69da      	ldr	r2, [r3, #28]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f042 0208 	orr.w	r2, r2, #8
 8009160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69da      	ldr	r2, [r3, #28]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0204 	bic.w	r2, r2, #4
 8009170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69d9      	ldr	r1, [r3, #28]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	61da      	str	r2, [r3, #28]
      break;
 8009184:	e064      	b.n	8009250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 fc91 	bl	8009ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69da      	ldr	r2, [r3, #28]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69da      	ldr	r2, [r3, #28]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69d9      	ldr	r1, [r3, #28]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	021a      	lsls	r2, r3, #8
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	61da      	str	r2, [r3, #28]
      break;
 80091c6:	e043      	b.n	8009250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fd20 	bl	8009c14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0208 	orr.w	r2, r2, #8
 80091e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0204 	bic.w	r2, r2, #4
 80091f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009206:	e023      	b.n	8009250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fd82 	bl	8009d18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009222:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009232:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	021a      	lsls	r2, r3, #8
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009248:	e002      	b.n	8009250 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	75fb      	strb	r3, [r7, #23]
      break;
 800924e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop

08009264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_TIM_ConfigClockSource+0x1c>
 800927c:	2302      	movs	r3, #2
 800927e:	e0e6      	b.n	800944e <HAL_TIM_ConfigClockSource+0x1ea>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800929e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80092a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a67      	ldr	r2, [pc, #412]	@ (8009458 <HAL_TIM_ConfigClockSource+0x1f4>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	f000 80b1 	beq.w	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 80092c0:	4a65      	ldr	r2, [pc, #404]	@ (8009458 <HAL_TIM_ConfigClockSource+0x1f4>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	f200 80b6 	bhi.w	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 80092c8:	4a64      	ldr	r2, [pc, #400]	@ (800945c <HAL_TIM_ConfigClockSource+0x1f8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	f000 80a9 	beq.w	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 80092d0:	4a62      	ldr	r2, [pc, #392]	@ (800945c <HAL_TIM_ConfigClockSource+0x1f8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	f200 80ae 	bhi.w	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 80092d8:	4a61      	ldr	r2, [pc, #388]	@ (8009460 <HAL_TIM_ConfigClockSource+0x1fc>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	f000 80a1 	beq.w	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 80092e0:	4a5f      	ldr	r2, [pc, #380]	@ (8009460 <HAL_TIM_ConfigClockSource+0x1fc>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	f200 80a6 	bhi.w	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 80092e8:	4a5e      	ldr	r2, [pc, #376]	@ (8009464 <HAL_TIM_ConfigClockSource+0x200>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	f000 8099 	beq.w	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 80092f0:	4a5c      	ldr	r2, [pc, #368]	@ (8009464 <HAL_TIM_ConfigClockSource+0x200>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	f200 809e 	bhi.w	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 80092f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092fc:	f000 8091 	beq.w	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 8009300:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009304:	f200 8096 	bhi.w	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 8009308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800930c:	f000 8089 	beq.w	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 8009310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009314:	f200 808e 	bhi.w	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 8009318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800931c:	d03e      	beq.n	800939c <HAL_TIM_ConfigClockSource+0x138>
 800931e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009322:	f200 8087 	bhi.w	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 8009326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800932a:	f000 8086 	beq.w	800943a <HAL_TIM_ConfigClockSource+0x1d6>
 800932e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009332:	d87f      	bhi.n	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 8009334:	2b70      	cmp	r3, #112	@ 0x70
 8009336:	d01a      	beq.n	800936e <HAL_TIM_ConfigClockSource+0x10a>
 8009338:	2b70      	cmp	r3, #112	@ 0x70
 800933a:	d87b      	bhi.n	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 800933c:	2b60      	cmp	r3, #96	@ 0x60
 800933e:	d050      	beq.n	80093e2 <HAL_TIM_ConfigClockSource+0x17e>
 8009340:	2b60      	cmp	r3, #96	@ 0x60
 8009342:	d877      	bhi.n	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 8009344:	2b50      	cmp	r3, #80	@ 0x50
 8009346:	d03c      	beq.n	80093c2 <HAL_TIM_ConfigClockSource+0x15e>
 8009348:	2b50      	cmp	r3, #80	@ 0x50
 800934a:	d873      	bhi.n	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 800934c:	2b40      	cmp	r3, #64	@ 0x40
 800934e:	d058      	beq.n	8009402 <HAL_TIM_ConfigClockSource+0x19e>
 8009350:	2b40      	cmp	r3, #64	@ 0x40
 8009352:	d86f      	bhi.n	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 8009354:	2b30      	cmp	r3, #48	@ 0x30
 8009356:	d064      	beq.n	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 8009358:	2b30      	cmp	r3, #48	@ 0x30
 800935a:	d86b      	bhi.n	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 800935c:	2b20      	cmp	r3, #32
 800935e:	d060      	beq.n	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 8009360:	2b20      	cmp	r3, #32
 8009362:	d867      	bhi.n	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d05c      	beq.n	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 8009368:	2b10      	cmp	r3, #16
 800936a:	d05a      	beq.n	8009422 <HAL_TIM_ConfigClockSource+0x1be>
 800936c:	e062      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800937e:	f000 fdcb 	bl	8009f18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	609a      	str	r2, [r3, #8]
      break;
 800939a:	e04f      	b.n	800943c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80093ac:	f000 fdb4 	bl	8009f18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093be:	609a      	str	r2, [r3, #8]
      break;
 80093c0:	e03c      	b.n	800943c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ce:	461a      	mov	r2, r3
 80093d0:	f000 fd26 	bl	8009e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2150      	movs	r1, #80	@ 0x50
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fd7f 	bl	8009ede <TIM_ITRx_SetConfig>
      break;
 80093e0:	e02c      	b.n	800943c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ee:	461a      	mov	r2, r3
 80093f0:	f000 fd45 	bl	8009e7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2160      	movs	r1, #96	@ 0x60
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fd6f 	bl	8009ede <TIM_ITRx_SetConfig>
      break;
 8009400:	e01c      	b.n	800943c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800940e:	461a      	mov	r2, r3
 8009410:	f000 fd06 	bl	8009e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2140      	movs	r1, #64	@ 0x40
 800941a:	4618      	mov	r0, r3
 800941c:	f000 fd5f 	bl	8009ede <TIM_ITRx_SetConfig>
      break;
 8009420:	e00c      	b.n	800943c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4619      	mov	r1, r3
 800942c:	4610      	mov	r0, r2
 800942e:	f000 fd56 	bl	8009ede <TIM_ITRx_SetConfig>
      break;
 8009432:	e003      	b.n	800943c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	73fb      	strb	r3, [r7, #15]
      break;
 8009438:	e000      	b.n	800943c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800943a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	00100070 	.word	0x00100070
 800945c:	00100040 	.word	0x00100040
 8009460:	00100030 	.word	0x00100030
 8009464:	00100020 	.word	0x00100020

08009468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a6e      	ldr	r2, [pc, #440]	@ (8009634 <TIM_Base_SetConfig+0x1cc>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d02b      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a6d      	ldr	r2, [pc, #436]	@ (8009638 <TIM_Base_SetConfig+0x1d0>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d027      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800948e:	d023      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009496:	d01f      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a68      	ldr	r2, [pc, #416]	@ (800963c <TIM_Base_SetConfig+0x1d4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d01b      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a67      	ldr	r2, [pc, #412]	@ (8009640 <TIM_Base_SetConfig+0x1d8>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d017      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a66      	ldr	r2, [pc, #408]	@ (8009644 <TIM_Base_SetConfig+0x1dc>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d013      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a65      	ldr	r2, [pc, #404]	@ (8009648 <TIM_Base_SetConfig+0x1e0>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00f      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a64      	ldr	r2, [pc, #400]	@ (800964c <TIM_Base_SetConfig+0x1e4>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d00b      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a63      	ldr	r2, [pc, #396]	@ (8009650 <TIM_Base_SetConfig+0x1e8>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d007      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a62      	ldr	r2, [pc, #392]	@ (8009654 <TIM_Base_SetConfig+0x1ec>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d003      	beq.n	80094d8 <TIM_Base_SetConfig+0x70>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a61      	ldr	r2, [pc, #388]	@ (8009658 <TIM_Base_SetConfig+0x1f0>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d108      	bne.n	80094ea <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a51      	ldr	r2, [pc, #324]	@ (8009634 <TIM_Base_SetConfig+0x1cc>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d043      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a50      	ldr	r2, [pc, #320]	@ (8009638 <TIM_Base_SetConfig+0x1d0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d03f      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009500:	d03b      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009508:	d037      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a4b      	ldr	r2, [pc, #300]	@ (800963c <TIM_Base_SetConfig+0x1d4>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d033      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a4a      	ldr	r2, [pc, #296]	@ (8009640 <TIM_Base_SetConfig+0x1d8>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d02f      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a49      	ldr	r2, [pc, #292]	@ (8009644 <TIM_Base_SetConfig+0x1dc>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d02b      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a48      	ldr	r2, [pc, #288]	@ (8009648 <TIM_Base_SetConfig+0x1e0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d027      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a47      	ldr	r2, [pc, #284]	@ (800964c <TIM_Base_SetConfig+0x1e4>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d023      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a46      	ldr	r2, [pc, #280]	@ (8009650 <TIM_Base_SetConfig+0x1e8>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d01f      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a45      	ldr	r2, [pc, #276]	@ (8009654 <TIM_Base_SetConfig+0x1ec>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d01b      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a44      	ldr	r2, [pc, #272]	@ (8009658 <TIM_Base_SetConfig+0x1f0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d017      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a43      	ldr	r2, [pc, #268]	@ (800965c <TIM_Base_SetConfig+0x1f4>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d013      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a42      	ldr	r2, [pc, #264]	@ (8009660 <TIM_Base_SetConfig+0x1f8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d00f      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a41      	ldr	r2, [pc, #260]	@ (8009664 <TIM_Base_SetConfig+0x1fc>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d00b      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a40      	ldr	r2, [pc, #256]	@ (8009668 <TIM_Base_SetConfig+0x200>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d007      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a3f      	ldr	r2, [pc, #252]	@ (800966c <TIM_Base_SetConfig+0x204>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d003      	beq.n	800957a <TIM_Base_SetConfig+0x112>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a3e      	ldr	r2, [pc, #248]	@ (8009670 <TIM_Base_SetConfig+0x208>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d108      	bne.n	800958c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	4313      	orrs	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	4313      	orrs	r3, r2
 8009598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a20      	ldr	r2, [pc, #128]	@ (8009634 <TIM_Base_SetConfig+0x1cc>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d023      	beq.n	8009600 <TIM_Base_SetConfig+0x198>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009638 <TIM_Base_SetConfig+0x1d0>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d01f      	beq.n	8009600 <TIM_Base_SetConfig+0x198>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a24      	ldr	r2, [pc, #144]	@ (8009654 <TIM_Base_SetConfig+0x1ec>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d01b      	beq.n	8009600 <TIM_Base_SetConfig+0x198>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a23      	ldr	r2, [pc, #140]	@ (8009658 <TIM_Base_SetConfig+0x1f0>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d017      	beq.n	8009600 <TIM_Base_SetConfig+0x198>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a22      	ldr	r2, [pc, #136]	@ (800965c <TIM_Base_SetConfig+0x1f4>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d013      	beq.n	8009600 <TIM_Base_SetConfig+0x198>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a21      	ldr	r2, [pc, #132]	@ (8009660 <TIM_Base_SetConfig+0x1f8>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d00f      	beq.n	8009600 <TIM_Base_SetConfig+0x198>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a20      	ldr	r2, [pc, #128]	@ (8009664 <TIM_Base_SetConfig+0x1fc>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00b      	beq.n	8009600 <TIM_Base_SetConfig+0x198>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009668 <TIM_Base_SetConfig+0x200>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d007      	beq.n	8009600 <TIM_Base_SetConfig+0x198>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a1e      	ldr	r2, [pc, #120]	@ (800966c <TIM_Base_SetConfig+0x204>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d003      	beq.n	8009600 <TIM_Base_SetConfig+0x198>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a1d      	ldr	r2, [pc, #116]	@ (8009670 <TIM_Base_SetConfig+0x208>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d103      	bne.n	8009608 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b01      	cmp	r3, #1
 8009618:	d105      	bne.n	8009626 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f023 0201 	bic.w	r2, r3, #1
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	611a      	str	r2, [r3, #16]
  }
}
 8009626:	bf00      	nop
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	40012c00 	.word	0x40012c00
 8009638:	50012c00 	.word	0x50012c00
 800963c:	40000400 	.word	0x40000400
 8009640:	50000400 	.word	0x50000400
 8009644:	40000800 	.word	0x40000800
 8009648:	50000800 	.word	0x50000800
 800964c:	40000c00 	.word	0x40000c00
 8009650:	50000c00 	.word	0x50000c00
 8009654:	40013400 	.word	0x40013400
 8009658:	50013400 	.word	0x50013400
 800965c:	40014000 	.word	0x40014000
 8009660:	50014000 	.word	0x50014000
 8009664:	40014400 	.word	0x40014400
 8009668:	50014400 	.word	0x50014400
 800966c:	40014800 	.word	0x40014800
 8009670:	50014800 	.word	0x50014800

08009674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	f023 0201 	bic.w	r2, r3, #1
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f023 0303 	bic.w	r3, r3, #3
 80096ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f023 0302 	bic.w	r3, r3, #2
 80096c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a40      	ldr	r2, [pc, #256]	@ (80097d0 <TIM_OC1_SetConfig+0x15c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d023      	beq.n	800971c <TIM_OC1_SetConfig+0xa8>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a3f      	ldr	r2, [pc, #252]	@ (80097d4 <TIM_OC1_SetConfig+0x160>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d01f      	beq.n	800971c <TIM_OC1_SetConfig+0xa8>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a3e      	ldr	r2, [pc, #248]	@ (80097d8 <TIM_OC1_SetConfig+0x164>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d01b      	beq.n	800971c <TIM_OC1_SetConfig+0xa8>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a3d      	ldr	r2, [pc, #244]	@ (80097dc <TIM_OC1_SetConfig+0x168>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d017      	beq.n	800971c <TIM_OC1_SetConfig+0xa8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a3c      	ldr	r2, [pc, #240]	@ (80097e0 <TIM_OC1_SetConfig+0x16c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d013      	beq.n	800971c <TIM_OC1_SetConfig+0xa8>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a3b      	ldr	r2, [pc, #236]	@ (80097e4 <TIM_OC1_SetConfig+0x170>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d00f      	beq.n	800971c <TIM_OC1_SetConfig+0xa8>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a3a      	ldr	r2, [pc, #232]	@ (80097e8 <TIM_OC1_SetConfig+0x174>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d00b      	beq.n	800971c <TIM_OC1_SetConfig+0xa8>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a39      	ldr	r2, [pc, #228]	@ (80097ec <TIM_OC1_SetConfig+0x178>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d007      	beq.n	800971c <TIM_OC1_SetConfig+0xa8>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a38      	ldr	r2, [pc, #224]	@ (80097f0 <TIM_OC1_SetConfig+0x17c>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d003      	beq.n	800971c <TIM_OC1_SetConfig+0xa8>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a37      	ldr	r2, [pc, #220]	@ (80097f4 <TIM_OC1_SetConfig+0x180>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d10c      	bne.n	8009736 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f023 0308 	bic.w	r3, r3, #8
 8009722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	4313      	orrs	r3, r2
 800972c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f023 0304 	bic.w	r3, r3, #4
 8009734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a25      	ldr	r2, [pc, #148]	@ (80097d0 <TIM_OC1_SetConfig+0x15c>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d023      	beq.n	8009786 <TIM_OC1_SetConfig+0x112>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a24      	ldr	r2, [pc, #144]	@ (80097d4 <TIM_OC1_SetConfig+0x160>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d01f      	beq.n	8009786 <TIM_OC1_SetConfig+0x112>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a23      	ldr	r2, [pc, #140]	@ (80097d8 <TIM_OC1_SetConfig+0x164>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d01b      	beq.n	8009786 <TIM_OC1_SetConfig+0x112>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a22      	ldr	r2, [pc, #136]	@ (80097dc <TIM_OC1_SetConfig+0x168>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d017      	beq.n	8009786 <TIM_OC1_SetConfig+0x112>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a21      	ldr	r2, [pc, #132]	@ (80097e0 <TIM_OC1_SetConfig+0x16c>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d013      	beq.n	8009786 <TIM_OC1_SetConfig+0x112>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a20      	ldr	r2, [pc, #128]	@ (80097e4 <TIM_OC1_SetConfig+0x170>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d00f      	beq.n	8009786 <TIM_OC1_SetConfig+0x112>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a1f      	ldr	r2, [pc, #124]	@ (80097e8 <TIM_OC1_SetConfig+0x174>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00b      	beq.n	8009786 <TIM_OC1_SetConfig+0x112>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a1e      	ldr	r2, [pc, #120]	@ (80097ec <TIM_OC1_SetConfig+0x178>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d007      	beq.n	8009786 <TIM_OC1_SetConfig+0x112>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a1d      	ldr	r2, [pc, #116]	@ (80097f0 <TIM_OC1_SetConfig+0x17c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d003      	beq.n	8009786 <TIM_OC1_SetConfig+0x112>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a1c      	ldr	r2, [pc, #112]	@ (80097f4 <TIM_OC1_SetConfig+0x180>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d111      	bne.n	80097aa <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800978c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	4313      	orrs	r3, r2
 800979e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	621a      	str	r2, [r3, #32]
}
 80097c4:	bf00      	nop
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	40012c00 	.word	0x40012c00
 80097d4:	50012c00 	.word	0x50012c00
 80097d8:	40013400 	.word	0x40013400
 80097dc:	50013400 	.word	0x50013400
 80097e0:	40014000 	.word	0x40014000
 80097e4:	50014000 	.word	0x50014000
 80097e8:	40014400 	.word	0x40014400
 80097ec:	50014400 	.word	0x50014400
 80097f0:	40014800 	.word	0x40014800
 80097f4:	50014800 	.word	0x50014800

080097f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	f023 0210 	bic.w	r2, r3, #16
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800982a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	4313      	orrs	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f023 0320 	bic.w	r3, r3, #32
 8009846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	4313      	orrs	r3, r2
 8009852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a36      	ldr	r2, [pc, #216]	@ (8009930 <TIM_OC2_SetConfig+0x138>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00b      	beq.n	8009874 <TIM_OC2_SetConfig+0x7c>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a35      	ldr	r2, [pc, #212]	@ (8009934 <TIM_OC2_SetConfig+0x13c>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d007      	beq.n	8009874 <TIM_OC2_SetConfig+0x7c>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a34      	ldr	r2, [pc, #208]	@ (8009938 <TIM_OC2_SetConfig+0x140>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d003      	beq.n	8009874 <TIM_OC2_SetConfig+0x7c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a33      	ldr	r2, [pc, #204]	@ (800993c <TIM_OC2_SetConfig+0x144>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d10d      	bne.n	8009890 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800987a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800988e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a27      	ldr	r2, [pc, #156]	@ (8009930 <TIM_OC2_SetConfig+0x138>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d023      	beq.n	80098e0 <TIM_OC2_SetConfig+0xe8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a26      	ldr	r2, [pc, #152]	@ (8009934 <TIM_OC2_SetConfig+0x13c>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d01f      	beq.n	80098e0 <TIM_OC2_SetConfig+0xe8>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a25      	ldr	r2, [pc, #148]	@ (8009938 <TIM_OC2_SetConfig+0x140>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d01b      	beq.n	80098e0 <TIM_OC2_SetConfig+0xe8>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a24      	ldr	r2, [pc, #144]	@ (800993c <TIM_OC2_SetConfig+0x144>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d017      	beq.n	80098e0 <TIM_OC2_SetConfig+0xe8>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a23      	ldr	r2, [pc, #140]	@ (8009940 <TIM_OC2_SetConfig+0x148>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d013      	beq.n	80098e0 <TIM_OC2_SetConfig+0xe8>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a22      	ldr	r2, [pc, #136]	@ (8009944 <TIM_OC2_SetConfig+0x14c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d00f      	beq.n	80098e0 <TIM_OC2_SetConfig+0xe8>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a21      	ldr	r2, [pc, #132]	@ (8009948 <TIM_OC2_SetConfig+0x150>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d00b      	beq.n	80098e0 <TIM_OC2_SetConfig+0xe8>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a20      	ldr	r2, [pc, #128]	@ (800994c <TIM_OC2_SetConfig+0x154>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d007      	beq.n	80098e0 <TIM_OC2_SetConfig+0xe8>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009950 <TIM_OC2_SetConfig+0x158>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d003      	beq.n	80098e0 <TIM_OC2_SetConfig+0xe8>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a1e      	ldr	r2, [pc, #120]	@ (8009954 <TIM_OC2_SetConfig+0x15c>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d113      	bne.n	8009908 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	4313      	orrs	r3, r2
 8009906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	621a      	str	r2, [r3, #32]
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	40012c00 	.word	0x40012c00
 8009934:	50012c00 	.word	0x50012c00
 8009938:	40013400 	.word	0x40013400
 800993c:	50013400 	.word	0x50013400
 8009940:	40014000 	.word	0x40014000
 8009944:	50014000 	.word	0x50014000
 8009948:	40014400 	.word	0x40014400
 800994c:	50014400 	.word	0x50014400
 8009950:	40014800 	.word	0x40014800
 8009954:	50014800 	.word	0x50014800

08009958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800998a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0303 	bic.w	r3, r3, #3
 8009992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	021b      	lsls	r3, r3, #8
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a35      	ldr	r2, [pc, #212]	@ (8009a8c <TIM_OC3_SetConfig+0x134>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d00b      	beq.n	80099d2 <TIM_OC3_SetConfig+0x7a>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a34      	ldr	r2, [pc, #208]	@ (8009a90 <TIM_OC3_SetConfig+0x138>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d007      	beq.n	80099d2 <TIM_OC3_SetConfig+0x7a>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a33      	ldr	r2, [pc, #204]	@ (8009a94 <TIM_OC3_SetConfig+0x13c>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d003      	beq.n	80099d2 <TIM_OC3_SetConfig+0x7a>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a32      	ldr	r2, [pc, #200]	@ (8009a98 <TIM_OC3_SetConfig+0x140>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d10d      	bne.n	80099ee <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	021b      	lsls	r3, r3, #8
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a26      	ldr	r2, [pc, #152]	@ (8009a8c <TIM_OC3_SetConfig+0x134>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d023      	beq.n	8009a3e <TIM_OC3_SetConfig+0xe6>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a25      	ldr	r2, [pc, #148]	@ (8009a90 <TIM_OC3_SetConfig+0x138>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d01f      	beq.n	8009a3e <TIM_OC3_SetConfig+0xe6>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a24      	ldr	r2, [pc, #144]	@ (8009a94 <TIM_OC3_SetConfig+0x13c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d01b      	beq.n	8009a3e <TIM_OC3_SetConfig+0xe6>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a23      	ldr	r2, [pc, #140]	@ (8009a98 <TIM_OC3_SetConfig+0x140>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d017      	beq.n	8009a3e <TIM_OC3_SetConfig+0xe6>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a22      	ldr	r2, [pc, #136]	@ (8009a9c <TIM_OC3_SetConfig+0x144>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d013      	beq.n	8009a3e <TIM_OC3_SetConfig+0xe6>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a21      	ldr	r2, [pc, #132]	@ (8009aa0 <TIM_OC3_SetConfig+0x148>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d00f      	beq.n	8009a3e <TIM_OC3_SetConfig+0xe6>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a20      	ldr	r2, [pc, #128]	@ (8009aa4 <TIM_OC3_SetConfig+0x14c>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d00b      	beq.n	8009a3e <TIM_OC3_SetConfig+0xe6>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a1f      	ldr	r2, [pc, #124]	@ (8009aa8 <TIM_OC3_SetConfig+0x150>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d007      	beq.n	8009a3e <TIM_OC3_SetConfig+0xe6>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a1e      	ldr	r2, [pc, #120]	@ (8009aac <TIM_OC3_SetConfig+0x154>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d003      	beq.n	8009a3e <TIM_OC3_SetConfig+0xe6>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a1d      	ldr	r2, [pc, #116]	@ (8009ab0 <TIM_OC3_SetConfig+0x158>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d113      	bne.n	8009a66 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	011b      	lsls	r3, r3, #4
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	011b      	lsls	r3, r3, #4
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	621a      	str	r2, [r3, #32]
}
 8009a80:	bf00      	nop
 8009a82:	371c      	adds	r7, #28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	40012c00 	.word	0x40012c00
 8009a90:	50012c00 	.word	0x50012c00
 8009a94:	40013400 	.word	0x40013400
 8009a98:	50013400 	.word	0x50013400
 8009a9c:	40014000 	.word	0x40014000
 8009aa0:	50014000 	.word	0x50014000
 8009aa4:	40014400 	.word	0x40014400
 8009aa8:	50014400 	.word	0x50014400
 8009aac:	40014800 	.word	0x40014800
 8009ab0:	50014800 	.word	0x50014800

08009ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	021b      	lsls	r3, r3, #8
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	031b      	lsls	r3, r3, #12
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a36      	ldr	r2, [pc, #216]	@ (8009bec <TIM_OC4_SetConfig+0x138>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d00b      	beq.n	8009b30 <TIM_OC4_SetConfig+0x7c>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a35      	ldr	r2, [pc, #212]	@ (8009bf0 <TIM_OC4_SetConfig+0x13c>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d007      	beq.n	8009b30 <TIM_OC4_SetConfig+0x7c>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a34      	ldr	r2, [pc, #208]	@ (8009bf4 <TIM_OC4_SetConfig+0x140>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d003      	beq.n	8009b30 <TIM_OC4_SetConfig+0x7c>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a33      	ldr	r2, [pc, #204]	@ (8009bf8 <TIM_OC4_SetConfig+0x144>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d10d      	bne.n	8009b4c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	031b      	lsls	r3, r3, #12
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a27      	ldr	r2, [pc, #156]	@ (8009bec <TIM_OC4_SetConfig+0x138>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d023      	beq.n	8009b9c <TIM_OC4_SetConfig+0xe8>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a26      	ldr	r2, [pc, #152]	@ (8009bf0 <TIM_OC4_SetConfig+0x13c>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d01f      	beq.n	8009b9c <TIM_OC4_SetConfig+0xe8>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a25      	ldr	r2, [pc, #148]	@ (8009bf4 <TIM_OC4_SetConfig+0x140>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d01b      	beq.n	8009b9c <TIM_OC4_SetConfig+0xe8>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a24      	ldr	r2, [pc, #144]	@ (8009bf8 <TIM_OC4_SetConfig+0x144>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d017      	beq.n	8009b9c <TIM_OC4_SetConfig+0xe8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a23      	ldr	r2, [pc, #140]	@ (8009bfc <TIM_OC4_SetConfig+0x148>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d013      	beq.n	8009b9c <TIM_OC4_SetConfig+0xe8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a22      	ldr	r2, [pc, #136]	@ (8009c00 <TIM_OC4_SetConfig+0x14c>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d00f      	beq.n	8009b9c <TIM_OC4_SetConfig+0xe8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a21      	ldr	r2, [pc, #132]	@ (8009c04 <TIM_OC4_SetConfig+0x150>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d00b      	beq.n	8009b9c <TIM_OC4_SetConfig+0xe8>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a20      	ldr	r2, [pc, #128]	@ (8009c08 <TIM_OC4_SetConfig+0x154>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d007      	beq.n	8009b9c <TIM_OC4_SetConfig+0xe8>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8009c0c <TIM_OC4_SetConfig+0x158>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d003      	beq.n	8009b9c <TIM_OC4_SetConfig+0xe8>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a1e      	ldr	r2, [pc, #120]	@ (8009c10 <TIM_OC4_SetConfig+0x15c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d113      	bne.n	8009bc4 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ba2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009baa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	019b      	lsls	r3, r3, #6
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	019b      	lsls	r3, r3, #6
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	621a      	str	r2, [r3, #32]
}
 8009bde:	bf00      	nop
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	40012c00 	.word	0x40012c00
 8009bf0:	50012c00 	.word	0x50012c00
 8009bf4:	40013400 	.word	0x40013400
 8009bf8:	50013400 	.word	0x50013400
 8009bfc:	40014000 	.word	0x40014000
 8009c00:	50014000 	.word	0x50014000
 8009c04:	40014400 	.word	0x40014400
 8009c08:	50014400 	.word	0x50014400
 8009c0c:	40014800 	.word	0x40014800
 8009c10:	50014800 	.word	0x50014800

08009c14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009c58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	041b      	lsls	r3, r3, #16
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a21      	ldr	r2, [pc, #132]	@ (8009cf0 <TIM_OC5_SetConfig+0xdc>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d023      	beq.n	8009cb6 <TIM_OC5_SetConfig+0xa2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a20      	ldr	r2, [pc, #128]	@ (8009cf4 <TIM_OC5_SetConfig+0xe0>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d01f      	beq.n	8009cb6 <TIM_OC5_SetConfig+0xa2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a1f      	ldr	r2, [pc, #124]	@ (8009cf8 <TIM_OC5_SetConfig+0xe4>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d01b      	beq.n	8009cb6 <TIM_OC5_SetConfig+0xa2>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a1e      	ldr	r2, [pc, #120]	@ (8009cfc <TIM_OC5_SetConfig+0xe8>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d017      	beq.n	8009cb6 <TIM_OC5_SetConfig+0xa2>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a1d      	ldr	r2, [pc, #116]	@ (8009d00 <TIM_OC5_SetConfig+0xec>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d013      	beq.n	8009cb6 <TIM_OC5_SetConfig+0xa2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a1c      	ldr	r2, [pc, #112]	@ (8009d04 <TIM_OC5_SetConfig+0xf0>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d00f      	beq.n	8009cb6 <TIM_OC5_SetConfig+0xa2>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a1b      	ldr	r2, [pc, #108]	@ (8009d08 <TIM_OC5_SetConfig+0xf4>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d00b      	beq.n	8009cb6 <TIM_OC5_SetConfig+0xa2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8009d0c <TIM_OC5_SetConfig+0xf8>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d007      	beq.n	8009cb6 <TIM_OC5_SetConfig+0xa2>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a19      	ldr	r2, [pc, #100]	@ (8009d10 <TIM_OC5_SetConfig+0xfc>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d003      	beq.n	8009cb6 <TIM_OC5_SetConfig+0xa2>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a18      	ldr	r2, [pc, #96]	@ (8009d14 <TIM_OC5_SetConfig+0x100>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d109      	bne.n	8009cca <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	021b      	lsls	r3, r3, #8
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	621a      	str	r2, [r3, #32]
}
 8009ce4:	bf00      	nop
 8009ce6:	371c      	adds	r7, #28
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	40012c00 	.word	0x40012c00
 8009cf4:	50012c00 	.word	0x50012c00
 8009cf8:	40013400 	.word	0x40013400
 8009cfc:	50013400 	.word	0x50013400
 8009d00:	40014000 	.word	0x40014000
 8009d04:	50014000 	.word	0x50014000
 8009d08:	40014400 	.word	0x40014400
 8009d0c:	50014400 	.word	0x50014400
 8009d10:	40014800 	.word	0x40014800
 8009d14:	50014800 	.word	0x50014800

08009d18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a1b      	ldr	r3, [r3, #32]
 8009d2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	021b      	lsls	r3, r3, #8
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	051b      	lsls	r3, r3, #20
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a22      	ldr	r2, [pc, #136]	@ (8009df8 <TIM_OC6_SetConfig+0xe0>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d023      	beq.n	8009dbc <TIM_OC6_SetConfig+0xa4>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a21      	ldr	r2, [pc, #132]	@ (8009dfc <TIM_OC6_SetConfig+0xe4>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d01f      	beq.n	8009dbc <TIM_OC6_SetConfig+0xa4>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a20      	ldr	r2, [pc, #128]	@ (8009e00 <TIM_OC6_SetConfig+0xe8>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d01b      	beq.n	8009dbc <TIM_OC6_SetConfig+0xa4>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a1f      	ldr	r2, [pc, #124]	@ (8009e04 <TIM_OC6_SetConfig+0xec>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d017      	beq.n	8009dbc <TIM_OC6_SetConfig+0xa4>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009e08 <TIM_OC6_SetConfig+0xf0>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d013      	beq.n	8009dbc <TIM_OC6_SetConfig+0xa4>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a1d      	ldr	r2, [pc, #116]	@ (8009e0c <TIM_OC6_SetConfig+0xf4>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d00f      	beq.n	8009dbc <TIM_OC6_SetConfig+0xa4>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8009e10 <TIM_OC6_SetConfig+0xf8>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d00b      	beq.n	8009dbc <TIM_OC6_SetConfig+0xa4>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a1b      	ldr	r2, [pc, #108]	@ (8009e14 <TIM_OC6_SetConfig+0xfc>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d007      	beq.n	8009dbc <TIM_OC6_SetConfig+0xa4>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a1a      	ldr	r2, [pc, #104]	@ (8009e18 <TIM_OC6_SetConfig+0x100>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d003      	beq.n	8009dbc <TIM_OC6_SetConfig+0xa4>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a19      	ldr	r2, [pc, #100]	@ (8009e1c <TIM_OC6_SetConfig+0x104>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d109      	bne.n	8009dd0 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	029b      	lsls	r3, r3, #10
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	621a      	str	r2, [r3, #32]
}
 8009dea:	bf00      	nop
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	40012c00 	.word	0x40012c00
 8009dfc:	50012c00 	.word	0x50012c00
 8009e00:	40013400 	.word	0x40013400
 8009e04:	50013400 	.word	0x50013400
 8009e08:	40014000 	.word	0x40014000
 8009e0c:	50014000 	.word	0x50014000
 8009e10:	40014400 	.word	0x40014400
 8009e14:	50014400 	.word	0x50014400
 8009e18:	40014800 	.word	0x40014800
 8009e1c:	50014800 	.word	0x50014800

08009e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	f023 0201 	bic.w	r2, r3, #1
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f023 030a 	bic.w	r3, r3, #10
 8009e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	621a      	str	r2, [r3, #32]
}
 8009e72:	bf00      	nop
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b087      	sub	sp, #28
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	f023 0210 	bic.w	r2, r3, #16
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	031b      	lsls	r3, r3, #12
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009eba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	011b      	lsls	r3, r3, #4
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	621a      	str	r2, [r3, #32]
}
 8009ed2:	bf00      	nop
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b085      	sub	sp, #20
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	f043 0307 	orr.w	r3, r3, #7
 8009f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	609a      	str	r2, [r3, #8]
}
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	021a      	lsls	r2, r3, #8
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	609a      	str	r2, [r3, #8]
}
 8009f4c:	bf00      	nop
 8009f4e:	371c      	adds	r7, #28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	f003 031f 	and.w	r3, r3, #31
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6a1a      	ldr	r2, [r3, #32]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	43db      	mvns	r3, r3
 8009f7a:	401a      	ands	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6a1a      	ldr	r2, [r3, #32]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f003 031f 	and.w	r3, r3, #31
 8009f8a:	6879      	ldr	r1, [r7, #4]
 8009f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f90:	431a      	orrs	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	621a      	str	r2, [r3, #32]
}
 8009f96:	bf00      	nop
 8009f98:	371c      	adds	r7, #28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
	...

08009fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d101      	bne.n	8009fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fb8:	2302      	movs	r3, #2
 8009fba:	e097      	b.n	800a0ec <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a45      	ldr	r2, [pc, #276]	@ (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d00e      	beq.n	800a004 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a44      	ldr	r2, [pc, #272]	@ (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d009      	beq.n	800a004 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a42      	ldr	r2, [pc, #264]	@ (800a100 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d004      	beq.n	800a004 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a41      	ldr	r2, [pc, #260]	@ (800a104 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d108      	bne.n	800a016 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a00a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a01c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a2f      	ldr	r2, [pc, #188]	@ (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d040      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a2e      	ldr	r2, [pc, #184]	@ (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d03b      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a050:	d036      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a05a:	d031      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a29      	ldr	r2, [pc, #164]	@ (800a108 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d02c      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a28      	ldr	r2, [pc, #160]	@ (800a10c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d027      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a26      	ldr	r2, [pc, #152]	@ (800a110 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d022      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a25      	ldr	r2, [pc, #148]	@ (800a114 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d01d      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a23      	ldr	r2, [pc, #140]	@ (800a118 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d018      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a22      	ldr	r2, [pc, #136]	@ (800a11c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d013      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a18      	ldr	r2, [pc, #96]	@ (800a100 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d00e      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a17      	ldr	r2, [pc, #92]	@ (800a104 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d009      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a1b      	ldr	r2, [pc, #108]	@ (800a120 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d004      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a1a      	ldr	r2, [pc, #104]	@ (800a124 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d10c      	bne.n	800a0da <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	40012c00 	.word	0x40012c00
 800a0fc:	50012c00 	.word	0x50012c00
 800a100:	40013400 	.word	0x40013400
 800a104:	50013400 	.word	0x50013400
 800a108:	40000400 	.word	0x40000400
 800a10c:	50000400 	.word	0x50000400
 800a110:	40000800 	.word	0x40000800
 800a114:	50000800 	.word	0x50000800
 800a118:	40000c00 	.word	0x40000c00
 800a11c:	50000c00 	.word	0x50000c00
 800a120:	40014000 	.word	0x40014000
 800a124:	50014000 	.word	0x50014000

0800a128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d101      	bne.n	800a144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a140:	2302      	movs	r3, #2
 800a142:	e0c3      	b.n	800a2cc <HAL_TIMEx_ConfigBreakDeadTime+0x1a4>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	4313      	orrs	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	4313      	orrs	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	041b      	lsls	r3, r3, #16
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(htim->Instance))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a45      	ldr	r2, [pc, #276]	@ (800a2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d02c      	beq.n	800a222 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a43      	ldr	r2, [pc, #268]	@ (800a2dc <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d027      	beq.n	800a222 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a42      	ldr	r2, [pc, #264]	@ (800a2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d022      	beq.n	800a222 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a40      	ldr	r2, [pc, #256]	@ (800a2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d01d      	beq.n	800a222 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a3f      	ldr	r2, [pc, #252]	@ (800a2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c0>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d018      	beq.n	800a222 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a3d      	ldr	r2, [pc, #244]	@ (800a2ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d013      	beq.n	800a222 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a3c      	ldr	r2, [pc, #240]	@ (800a2f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00e      	beq.n	800a222 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a3a      	ldr	r2, [pc, #232]	@ (800a2f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1cc>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d009      	beq.n	800a222 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a39      	ldr	r2, [pc, #228]	@ (800a2f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1d0>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d004      	beq.n	800a222 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a37      	ldr	r2, [pc, #220]	@ (800a2fc <HAL_TIMEx_ConfigBreakDeadTime+0x1d4>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d106      	bne.n	800a230 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a28      	ldr	r2, [pc, #160]	@ (800a2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d00e      	beq.n	800a258 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a27      	ldr	r2, [pc, #156]	@ (800a2dc <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d009      	beq.n	800a258 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a25      	ldr	r2, [pc, #148]	@ (800a2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d004      	beq.n	800a258 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a24      	ldr	r2, [pc, #144]	@ (800a2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d130      	bne.n	800a2ba <HAL_TIMEx_ConfigBreakDeadTime+0x192>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a262:	051b      	lsls	r3, r3, #20
 800a264:	4313      	orrs	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a280:	4313      	orrs	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a13      	ldr	r2, [pc, #76]	@ (800a2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00e      	beq.n	800a2ac <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a12      	ldr	r2, [pc, #72]	@ (800a2dc <HAL_TIMEx_ConfigBreakDeadTime+0x1b4>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d009      	beq.n	800a2ac <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a10      	ldr	r2, [pc, #64]	@ (800a2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1b8>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d004      	beq.n	800a2ac <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a0f      	ldr	r2, [pc, #60]	@ (800a2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1bc>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d106      	bne.n	800a2ba <HAL_TIMEx_ConfigBreakDeadTime+0x192>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	40012c00 	.word	0x40012c00
 800a2dc:	50012c00 	.word	0x50012c00
 800a2e0:	40013400 	.word	0x40013400
 800a2e4:	50013400 	.word	0x50013400
 800a2e8:	40014000 	.word	0x40014000
 800a2ec:	50014000 	.word	0x50014000
 800a2f0:	40014400 	.word	0x40014400
 800a2f4:	50014400 	.word	0x50014400
 800a2f8:	40014800 	.word	0x40014800
 800a2fc:	50014800 	.word	0x50014800

0800a300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	e042      	b.n	800a398 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d106      	bne.n	800a32a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7f7 f9b9 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2224      	movs	r2, #36	@ 0x24
 800a32e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 0201 	bic.w	r2, r2, #1
 800a340:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f9ca 	bl	800a6e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f825 	bl	800a3a0 <UART_SetConfig>
 800a356:	4603      	mov	r3, r0
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d101      	bne.n	800a360 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e01b      	b.n	800a398 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a36e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a37e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f042 0201 	orr.w	r2, r2, #1
 800a38e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fa49 	bl	800a828 <UART_CheckIdleState>
 800a396:	4603      	mov	r3, r0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3a4:	b094      	sub	sp, #80	@ 0x50
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	4b7e      	ldr	r3, [pc, #504]	@ (800a5b0 <UART_SetConfig+0x210>)
 800a3b6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4977      	ldr	r1, [pc, #476]	@ (800a5b4 <UART_SetConfig+0x214>)
 800a3d8:	4019      	ands	r1, r3
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3e0:	430b      	orrs	r3, r1
 800a3e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f0:	68d9      	ldr	r1, [r3, #12]
 800a3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	ea40 0301 	orr.w	r3, r0, r1
 800a3fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	4b6a      	ldr	r3, [pc, #424]	@ (800a5b0 <UART_SetConfig+0x210>)
 800a408:	429a      	cmp	r2, r3
 800a40a:	d009      	beq.n	800a420 <UART_SetConfig+0x80>
 800a40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	4b69      	ldr	r3, [pc, #420]	@ (800a5b8 <UART_SetConfig+0x218>)
 800a412:	429a      	cmp	r2, r3
 800a414:	d004      	beq.n	800a420 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a418:	6a1a      	ldr	r2, [r3, #32]
 800a41a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a41c:	4313      	orrs	r3, r2
 800a41e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a42a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a434:	430b      	orrs	r3, r1
 800a436:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43e:	f023 000f 	bic.w	r0, r3, #15
 800a442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a444:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	ea40 0301 	orr.w	r3, r0, r1
 800a44e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	4b59      	ldr	r3, [pc, #356]	@ (800a5bc <UART_SetConfig+0x21c>)
 800a456:	429a      	cmp	r2, r3
 800a458:	d102      	bne.n	800a460 <UART_SetConfig+0xc0>
 800a45a:	2301      	movs	r3, #1
 800a45c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a45e:	e029      	b.n	800a4b4 <UART_SetConfig+0x114>
 800a460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	4b56      	ldr	r3, [pc, #344]	@ (800a5c0 <UART_SetConfig+0x220>)
 800a466:	429a      	cmp	r2, r3
 800a468:	d102      	bne.n	800a470 <UART_SetConfig+0xd0>
 800a46a:	2302      	movs	r3, #2
 800a46c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a46e:	e021      	b.n	800a4b4 <UART_SetConfig+0x114>
 800a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	4b53      	ldr	r3, [pc, #332]	@ (800a5c4 <UART_SetConfig+0x224>)
 800a476:	429a      	cmp	r2, r3
 800a478:	d102      	bne.n	800a480 <UART_SetConfig+0xe0>
 800a47a:	2304      	movs	r3, #4
 800a47c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a47e:	e019      	b.n	800a4b4 <UART_SetConfig+0x114>
 800a480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	4b50      	ldr	r3, [pc, #320]	@ (800a5c8 <UART_SetConfig+0x228>)
 800a486:	429a      	cmp	r2, r3
 800a488:	d102      	bne.n	800a490 <UART_SetConfig+0xf0>
 800a48a:	2308      	movs	r3, #8
 800a48c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a48e:	e011      	b.n	800a4b4 <UART_SetConfig+0x114>
 800a490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	4b4d      	ldr	r3, [pc, #308]	@ (800a5cc <UART_SetConfig+0x22c>)
 800a496:	429a      	cmp	r2, r3
 800a498:	d102      	bne.n	800a4a0 <UART_SetConfig+0x100>
 800a49a:	2310      	movs	r3, #16
 800a49c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a49e:	e009      	b.n	800a4b4 <UART_SetConfig+0x114>
 800a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	4b42      	ldr	r3, [pc, #264]	@ (800a5b0 <UART_SetConfig+0x210>)
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d102      	bne.n	800a4b0 <UART_SetConfig+0x110>
 800a4aa:	2320      	movs	r3, #32
 800a4ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4ae:	e001      	b.n	800a4b4 <UART_SetConfig+0x114>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	4b3d      	ldr	r3, [pc, #244]	@ (800a5b0 <UART_SetConfig+0x210>)
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d005      	beq.n	800a4ca <UART_SetConfig+0x12a>
 800a4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	4b3d      	ldr	r3, [pc, #244]	@ (800a5b8 <UART_SetConfig+0x218>)
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	f040 8085 	bne.w	800a5d4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a4ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	623b      	str	r3, [r7, #32]
 800a4d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a4d6:	f7fc ff4f 	bl	8007378 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4da:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 80e8 	beq.w	800a6b4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e8:	4a39      	ldr	r2, [pc, #228]	@ (800a5d0 <UART_SetConfig+0x230>)
 800a4ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	005b      	lsls	r3, r3, #1
 800a500:	4413      	add	r3, r2
 800a502:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a504:	429a      	cmp	r2, r3
 800a506:	d305      	bcc.n	800a514 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a50e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a510:	429a      	cmp	r2, r3
 800a512:	d903      	bls.n	800a51c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a51a:	e048      	b.n	800a5ae <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a51e:	2200      	movs	r2, #0
 800a520:	61bb      	str	r3, [r7, #24]
 800a522:	61fa      	str	r2, [r7, #28]
 800a524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a528:	4a29      	ldr	r2, [pc, #164]	@ (800a5d0 <UART_SetConfig+0x230>)
 800a52a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a52e:	b29b      	uxth	r3, r3
 800a530:	2200      	movs	r2, #0
 800a532:	613b      	str	r3, [r7, #16]
 800a534:	617a      	str	r2, [r7, #20]
 800a536:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a53a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a53e:	f7f5 fe9b 	bl	8000278 <__aeabi_uldivmod>
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	4610      	mov	r0, r2
 800a548:	4619      	mov	r1, r3
 800a54a:	f04f 0200 	mov.w	r2, #0
 800a54e:	f04f 0300 	mov.w	r3, #0
 800a552:	020b      	lsls	r3, r1, #8
 800a554:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a558:	0202      	lsls	r2, r0, #8
 800a55a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a55c:	6849      	ldr	r1, [r1, #4]
 800a55e:	0849      	lsrs	r1, r1, #1
 800a560:	2000      	movs	r0, #0
 800a562:	460c      	mov	r4, r1
 800a564:	4605      	mov	r5, r0
 800a566:	eb12 0804 	adds.w	r8, r2, r4
 800a56a:	eb43 0905 	adc.w	r9, r3, r5
 800a56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	60bb      	str	r3, [r7, #8]
 800a576:	60fa      	str	r2, [r7, #12]
 800a578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a57c:	4640      	mov	r0, r8
 800a57e:	4649      	mov	r1, r9
 800a580:	f7f5 fe7a 	bl	8000278 <__aeabi_uldivmod>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4613      	mov	r3, r2
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a58c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a58e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a592:	d308      	bcc.n	800a5a6 <UART_SetConfig+0x206>
 800a594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a59a:	d204      	bcs.n	800a5a6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a5a2:	60da      	str	r2, [r3, #12]
 800a5a4:	e003      	b.n	800a5ae <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a5ac:	e082      	b.n	800a6b4 <UART_SetConfig+0x314>
 800a5ae:	e081      	b.n	800a6b4 <UART_SetConfig+0x314>
 800a5b0:	46002400 	.word	0x46002400
 800a5b4:	cfff69f3 	.word	0xcfff69f3
 800a5b8:	56002400 	.word	0x56002400
 800a5bc:	40013800 	.word	0x40013800
 800a5c0:	40004400 	.word	0x40004400
 800a5c4:	40004800 	.word	0x40004800
 800a5c8:	40004c00 	.word	0x40004c00
 800a5cc:	40005000 	.word	0x40005000
 800a5d0:	0800bd9c 	.word	0x0800bd9c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5dc:	d13c      	bne.n	800a658 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a5de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	607a      	str	r2, [r7, #4]
 800a5e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5ea:	f7fc fec5 	bl	8007378 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5ee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d05e      	beq.n	800a6b4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fa:	4a39      	ldr	r2, [pc, #228]	@ (800a6e0 <UART_SetConfig+0x340>)
 800a5fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a600:	461a      	mov	r2, r3
 800a602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a604:	fbb3 f3f2 	udiv	r3, r3, r2
 800a608:	005a      	lsls	r2, r3, #1
 800a60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	085b      	lsrs	r3, r3, #1
 800a610:	441a      	add	r2, r3
 800a612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a61e:	2b0f      	cmp	r3, #15
 800a620:	d916      	bls.n	800a650 <UART_SetConfig+0x2b0>
 800a622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a628:	d212      	bcs.n	800a650 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a62a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	f023 030f 	bic.w	r3, r3, #15
 800a632:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a636:	085b      	lsrs	r3, r3, #1
 800a638:	b29b      	uxth	r3, r3
 800a63a:	f003 0307 	and.w	r3, r3, #7
 800a63e:	b29a      	uxth	r2, r3
 800a640:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a642:	4313      	orrs	r3, r2
 800a644:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a64c:	60da      	str	r2, [r3, #12]
 800a64e:	e031      	b.n	800a6b4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a656:	e02d      	b.n	800a6b4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a65a:	2200      	movs	r2, #0
 800a65c:	469a      	mov	sl, r3
 800a65e:	4693      	mov	fp, r2
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7fc fe88 	bl	8007378 <HAL_RCCEx_GetPeriphCLKFreq>
 800a668:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a66a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d021      	beq.n	800a6b4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a674:	4a1a      	ldr	r2, [pc, #104]	@ (800a6e0 <UART_SetConfig+0x340>)
 800a676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a67a:	461a      	mov	r2, r3
 800a67c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a67e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	085b      	lsrs	r3, r3, #1
 800a688:	441a      	add	r2, r3
 800a68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a696:	2b0f      	cmp	r3, #15
 800a698:	d909      	bls.n	800a6ae <UART_SetConfig+0x30e>
 800a69a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a69c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6a0:	d205      	bcs.n	800a6ae <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	60da      	str	r2, [r3, #12]
 800a6ac:	e002      	b.n	800a6b4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a6d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3750      	adds	r7, #80	@ 0x50
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6de:	bf00      	nop
 800a6e0:	0800bd9c 	.word	0x0800bd9c

0800a6e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f0:	f003 0308 	and.w	r3, r3, #8
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00a      	beq.n	800a70e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	430a      	orrs	r2, r1
 800a70c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	430a      	orrs	r2, r1
 800a72e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a734:	f003 0302 	and.w	r3, r3, #2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00a      	beq.n	800a752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a756:	f003 0304 	and.w	r3, r3, #4
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a778:	f003 0310 	and.w	r3, r3, #16
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00a      	beq.n	800a796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a79a:	f003 0320 	and.w	r3, r3, #32
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00a      	beq.n	800a7b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	430a      	orrs	r2, r1
 800a7b6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d01a      	beq.n	800a7fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7e2:	d10a      	bne.n	800a7fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00a      	beq.n	800a81c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	430a      	orrs	r2, r1
 800a81a:	605a      	str	r2, [r3, #4]
  }
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b098      	sub	sp, #96	@ 0x60
 800a82c:	af02      	add	r7, sp, #8
 800a82e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a838:	f7f7 f992 	bl	8001b60 <HAL_GetTick>
 800a83c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0308 	and.w	r3, r3, #8
 800a848:	2b08      	cmp	r3, #8
 800a84a:	d12f      	bne.n	800a8ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a84c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a854:	2200      	movs	r2, #0
 800a856:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f88e 	bl	800a97c <UART_WaitOnFlagUntilTimeout>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d022      	beq.n	800a8ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86e:	e853 3f00 	ldrex	r3, [r3]
 800a872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a87a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a884:	647b      	str	r3, [r7, #68]	@ 0x44
 800a886:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a88a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a88c:	e841 2300 	strex	r3, r2, [r1]
 800a890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1e6      	bne.n	800a866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e063      	b.n	800a974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0304 	and.w	r3, r3, #4
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d149      	bne.n	800a94e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f857 	bl	800a97c <UART_WaitOnFlagUntilTimeout>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d03c      	beq.n	800a94e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	623b      	str	r3, [r7, #32]
   return(result);
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e6      	bne.n	800a8d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3308      	adds	r3, #8
 800a90c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	60fb      	str	r3, [r7, #12]
   return(result);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f023 0301 	bic.w	r3, r3, #1
 800a91c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3308      	adds	r3, #8
 800a924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a926:	61fa      	str	r2, [r7, #28]
 800a928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92a:	69b9      	ldr	r1, [r7, #24]
 800a92c:	69fa      	ldr	r2, [r7, #28]
 800a92e:	e841 2300 	strex	r3, r2, [r1]
 800a932:	617b      	str	r3, [r7, #20]
   return(result);
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1e5      	bne.n	800a906 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2220      	movs	r2, #32
 800a93e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a94a:	2303      	movs	r3, #3
 800a94c:	e012      	b.n	800a974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2220      	movs	r2, #32
 800a95a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3758      	adds	r7, #88	@ 0x58
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	4613      	mov	r3, r2
 800a98a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a98c:	e04f      	b.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a994:	d04b      	beq.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a996:	f7f7 f8e3 	bl	8001b60 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	69ba      	ldr	r2, [r7, #24]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d302      	bcc.n	800a9ac <UART_WaitOnFlagUntilTimeout+0x30>
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e04e      	b.n	800aa4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d037      	beq.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b80      	cmp	r3, #128	@ 0x80
 800a9c2:	d034      	beq.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2b40      	cmp	r3, #64	@ 0x40
 800a9c8:	d031      	beq.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	2b08      	cmp	r3, #8
 800a9d6:	d110      	bne.n	800a9fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2208      	movs	r2, #8
 800a9de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f838 	bl	800aa56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2208      	movs	r2, #8
 800a9ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e029      	b.n	800aa4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa08:	d111      	bne.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f000 f81e 	bl	800aa56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e00f      	b.n	800aa4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	69da      	ldr	r2, [r3, #28]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	4013      	ands	r3, r2
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	bf0c      	ite	eq
 800aa3e:	2301      	moveq	r3, #1
 800aa40:	2300      	movne	r3, #0
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	461a      	mov	r2, r3
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d0a0      	beq.n	800a98e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b095      	sub	sp, #84	@ 0x54
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e6      	bne.n	800aa5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3308      	adds	r3, #8
 800aa96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	e853 3f00 	ldrex	r3, [r3]
 800aa9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaa6:	f023 0301 	bic.w	r3, r3, #1
 800aaaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3308      	adds	r3, #8
 800aab2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aab4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aaba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aabc:	e841 2300 	strex	r3, r2, [r1]
 800aac0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1e3      	bne.n	800aa90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d118      	bne.n	800ab02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f023 0310 	bic.w	r3, r3, #16
 800aae4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaee:	61bb      	str	r3, [r7, #24]
 800aaf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6979      	ldr	r1, [r7, #20]
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	613b      	str	r3, [r7, #16]
   return(result);
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e6      	bne.n	800aad0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab16:	bf00      	nop
 800ab18:	3754      	adds	r7, #84	@ 0x54
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b085      	sub	sp, #20
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d101      	bne.n	800ab38 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab34:	2302      	movs	r3, #2
 800ab36:	e027      	b.n	800ab88 <HAL_UARTEx_DisableFifoMode+0x66>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2224      	movs	r2, #36	@ 0x24
 800ab44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f022 0201 	bic.w	r2, r2, #1
 800ab5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d101      	bne.n	800abac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aba8:	2302      	movs	r3, #2
 800abaa:	e02d      	b.n	800ac08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2224      	movs	r2, #36	@ 0x24
 800abb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f022 0201 	bic.w	r2, r2, #1
 800abd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f84f 	bl	800ac8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d101      	bne.n	800ac28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac24:	2302      	movs	r3, #2
 800ac26:	e02d      	b.n	800ac84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2224      	movs	r2, #36	@ 0x24
 800ac34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 0201 	bic.w	r2, r2, #1
 800ac4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f811 	bl	800ac8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2220      	movs	r2, #32
 800ac76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d108      	bne.n	800acae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800acac:	e031      	b.n	800ad12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800acae:	2308      	movs	r3, #8
 800acb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800acb2:	2308      	movs	r3, #8
 800acb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	0e5b      	lsrs	r3, r3, #25
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	f003 0307 	and.w	r3, r3, #7
 800acc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	0f5b      	lsrs	r3, r3, #29
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	f003 0307 	and.w	r3, r3, #7
 800acd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	7b3a      	ldrb	r2, [r7, #12]
 800acda:	4911      	ldr	r1, [pc, #68]	@ (800ad20 <UARTEx_SetNbDataToProcess+0x94>)
 800acdc:	5c8a      	ldrb	r2, [r1, r2]
 800acde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ace2:	7b3a      	ldrb	r2, [r7, #12]
 800ace4:	490f      	ldr	r1, [pc, #60]	@ (800ad24 <UARTEx_SetNbDataToProcess+0x98>)
 800ace6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ace8:	fb93 f3f2 	sdiv	r3, r3, r2
 800acec:	b29a      	uxth	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	7b7a      	ldrb	r2, [r7, #13]
 800acf8:	4909      	ldr	r1, [pc, #36]	@ (800ad20 <UARTEx_SetNbDataToProcess+0x94>)
 800acfa:	5c8a      	ldrb	r2, [r1, r2]
 800acfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad00:	7b7a      	ldrb	r2, [r7, #13]
 800ad02:	4908      	ldr	r1, [pc, #32]	@ (800ad24 <UARTEx_SetNbDataToProcess+0x98>)
 800ad04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad06:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ad12:	bf00      	nop
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	0800bdb4 	.word	0x0800bdb4
 800ad24:	0800bdbc 	.word	0x0800bdbc

0800ad28 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b08b      	sub	sp, #44	@ 0x2c
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	fa93 f3a3 	rbit	r3, r3
 800ad42:	613b      	str	r3, [r7, #16]
  return result;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800ad4e:	2320      	movs	r3, #32
 800ad50:	e003      	b.n	800ad5a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	fab3 f383 	clz	r3, r3
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	2103      	movs	r1, #3
 800ad5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad62:	43db      	mvns	r3, r3
 800ad64:	401a      	ands	r2, r3
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	fa93 f3a3 	rbit	r3, r3
 800ad70:	61fb      	str	r3, [r7, #28]
  return result;
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800ad7c:	2320      	movs	r3, #32
 800ad7e:	e003      	b.n	800ad88 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad82:	fab3 f383 	clz	r3, r3
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	005b      	lsls	r3, r3, #1
 800ad8a:	6879      	ldr	r1, [r7, #4]
 800ad8c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad90:	431a      	orrs	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 800ad96:	bf00      	nop
 800ad98:	372c      	adds	r7, #44	@ 0x2c
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b085      	sub	sp, #20
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	60f8      	str	r0, [r7, #12]
 800adaa:	60b9      	str	r1, [r7, #8]
 800adac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	43db      	mvns	r3, r3
 800adb6:	401a      	ands	r2, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	fb01 f303 	mul.w	r3, r1, r3
 800adc0:	431a      	orrs	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	605a      	str	r2, [r3, #4]
}
 800adc6:	bf00      	nop
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800add2:	b480      	push	{r7}
 800add4:	b08b      	sub	sp, #44	@ 0x2c
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	689a      	ldr	r2, [r3, #8]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	fa93 f3a3 	rbit	r3, r3
 800adec:	613b      	str	r3, [r7, #16]
  return result;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800adf8:	2320      	movs	r3, #32
 800adfa:	e003      	b.n	800ae04 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	fab3 f383 	clz	r3, r3
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	2103      	movs	r1, #3
 800ae08:	fa01 f303 	lsl.w	r3, r1, r3
 800ae0c:	43db      	mvns	r3, r3
 800ae0e:	401a      	ands	r2, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	fa93 f3a3 	rbit	r3, r3
 800ae1a:	61fb      	str	r3, [r7, #28]
  return result;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ae20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800ae26:	2320      	movs	r3, #32
 800ae28:	e003      	b.n	800ae32 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	fab3 f383 	clz	r3, r3
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	fa01 f303 	lsl.w	r3, r1, r3
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800ae40:	bf00      	nop
 800ae42:	372c      	adds	r7, #44	@ 0x2c
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b08b      	sub	sp, #44	@ 0x2c
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	68da      	ldr	r2, [r3, #12]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	fa93 f3a3 	rbit	r3, r3
 800ae66:	613b      	str	r3, [r7, #16]
  return result;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800ae72:	2320      	movs	r3, #32
 800ae74:	e003      	b.n	800ae7e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	fab3 f383 	clz	r3, r3
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	005b      	lsls	r3, r3, #1
 800ae80:	2103      	movs	r1, #3
 800ae82:	fa01 f303 	lsl.w	r3, r1, r3
 800ae86:	43db      	mvns	r3, r3
 800ae88:	401a      	ands	r2, r3
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	fa93 f3a3 	rbit	r3, r3
 800ae94:	61fb      	str	r3, [r7, #28]
  return result;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800aea0:	2320      	movs	r3, #32
 800aea2:	e003      	b.n	800aeac <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	fab3 f383 	clz	r3, r3
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	6879      	ldr	r1, [r7, #4]
 800aeb0:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 800aeba:	bf00      	nop
 800aebc:	372c      	adds	r7, #44	@ 0x2c
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b08b      	sub	sp, #44	@ 0x2c
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6a1a      	ldr	r2, [r3, #32]
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	fa93 f3a3 	rbit	r3, r3
 800aee0:	613b      	str	r3, [r7, #16]
  return result;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800aeec:	2320      	movs	r3, #32
 800aeee:	e003      	b.n	800aef8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	fab3 f383 	clz	r3, r3
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	210f      	movs	r1, #15
 800aefc:	fa01 f303 	lsl.w	r3, r1, r3
 800af00:	43db      	mvns	r3, r3
 800af02:	401a      	ands	r2, r3
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	fa93 f3a3 	rbit	r3, r3
 800af0e:	61fb      	str	r3, [r7, #28]
  return result;
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af16:	2b00      	cmp	r3, #0
 800af18:	d101      	bne.n	800af1e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800af1a:	2320      	movs	r3, #32
 800af1c:	e003      	b.n	800af26 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800af1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af20:	fab3 f383 	clz	r3, r3
 800af24:	b2db      	uxtb	r3, r3
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	fa01 f303 	lsl.w	r3, r1, r3
 800af2e:	431a      	orrs	r2, r3
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 800af34:	bf00      	nop
 800af36:	372c      	adds	r7, #44	@ 0x2c
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800af40:	b480      	push	{r7}
 800af42:	b08b      	sub	sp, #44	@ 0x2c
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	0a1b      	lsrs	r3, r3, #8
 800af54:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	fa93 f3a3 	rbit	r3, r3
 800af5c:	613b      	str	r3, [r7, #16]
  return result;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800af68:	2320      	movs	r3, #32
 800af6a:	e003      	b.n	800af74 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	fab3 f383 	clz	r3, r3
 800af72:	b2db      	uxtb	r3, r3
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	210f      	movs	r1, #15
 800af78:	fa01 f303 	lsl.w	r3, r1, r3
 800af7c:	43db      	mvns	r3, r3
 800af7e:	401a      	ands	r2, r3
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	0a1b      	lsrs	r3, r3, #8
 800af84:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	fa93 f3a3 	rbit	r3, r3
 800af8c:	61fb      	str	r3, [r7, #28]
  return result;
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800af98:	2320      	movs	r3, #32
 800af9a:	e003      	b.n	800afa4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9e:	fab3 f383 	clz	r3, r3
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	6879      	ldr	r1, [r7, #4]
 800afa8:	fa01 f303 	lsl.w	r3, r1, r3
 800afac:	431a      	orrs	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 800afb2:	bf00      	nop
 800afb4:	372c      	adds	r7, #44	@ 0x2c
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b08a      	sub	sp, #40	@ 0x28
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	fa93 f3a3 	rbit	r3, r3
 800afd4:	617b      	str	r3, [r7, #20]
  return result;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <LL_GPIO_Init+0x26>
    return 32U;
 800afe0:	2320      	movs	r3, #32
 800afe2:	e003      	b.n	800afec <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	fab3 f383 	clz	r3, r3
 800afea:	b2db      	uxtb	r3, r3
 800afec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800afee:	e058      	b.n	800b0a2 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	2101      	movs	r1, #1
 800aff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff8:	fa01 f303 	lsl.w	r3, r1, r3
 800affc:	4013      	ands	r3, r2
 800affe:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800b000:	6a3b      	ldr	r3, [r7, #32]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d04a      	beq.n	800b09c <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d003      	beq.n	800b016 <LL_GPIO_Init+0x58>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d10e      	bne.n	800b034 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	461a      	mov	r2, r3
 800b01c:	6a39      	ldr	r1, [r7, #32]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff fed7 	bl	800add2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	6819      	ldr	r1, [r3, #0]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	461a      	mov	r2, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7ff feb7 	bl	800ada2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	461a      	mov	r2, r3
 800b03a:	6a39      	ldr	r1, [r7, #32]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff ff05 	bl	800ae4c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d121      	bne.n	800b08e <LL_GPIO_Init+0xd0>
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	fa93 f3a3 	rbit	r3, r3
 800b054:	60bb      	str	r3, [r7, #8]
  return result;
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <LL_GPIO_Init+0xa6>
    return 32U;
 800b060:	2320      	movs	r3, #32
 800b062:	e003      	b.n	800b06c <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	fab3 f383 	clz	r3, r3
 800b06a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800b06c:	2b07      	cmp	r3, #7
 800b06e:	d807      	bhi.n	800b080 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	461a      	mov	r2, r3
 800b076:	6a39      	ldr	r1, [r7, #32]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff ff24 	bl	800aec6 <LL_GPIO_SetAFPin_0_7>
 800b07e:	e006      	b.n	800b08e <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	461a      	mov	r2, r3
 800b086:	6a39      	ldr	r1, [r7, #32]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff ff59 	bl	800af40 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	461a      	mov	r2, r3
 800b094:	6a39      	ldr	r1, [r7, #32]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7ff fe46 	bl	800ad28 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09e:	3301      	adds	r3, #1
 800b0a0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d19f      	bne.n	800aff0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3728      	adds	r7, #40	@ 0x28
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	f107 001c 	add.w	r0, r7, #28
 800b0c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fd89 	bl	800bbf0 <USB_CoreReset>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b0e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	639a      	str	r2, [r3, #56]	@ 0x38
 800b0f6:	e005      	b.n	800b104 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b110:	b004      	add	sp, #16
 800b112:	4770      	bx	lr

0800b114 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	4613      	mov	r3, r2
 800b120:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b122:	79fb      	ldrb	r3, [r7, #7]
 800b124:	2b02      	cmp	r3, #2
 800b126:	d165      	bne.n	800b1f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	4a41      	ldr	r2, [pc, #260]	@ (800b230 <USB_SetTurnaroundTime+0x11c>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d906      	bls.n	800b13e <USB_SetTurnaroundTime+0x2a>
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	4a40      	ldr	r2, [pc, #256]	@ (800b234 <USB_SetTurnaroundTime+0x120>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d202      	bcs.n	800b13e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b138:	230f      	movs	r3, #15
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	e062      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	4a3c      	ldr	r2, [pc, #240]	@ (800b234 <USB_SetTurnaroundTime+0x120>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d306      	bcc.n	800b154 <USB_SetTurnaroundTime+0x40>
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	4a3b      	ldr	r2, [pc, #236]	@ (800b238 <USB_SetTurnaroundTime+0x124>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d202      	bcs.n	800b154 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b14e:	230e      	movs	r3, #14
 800b150:	617b      	str	r3, [r7, #20]
 800b152:	e057      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	4a38      	ldr	r2, [pc, #224]	@ (800b238 <USB_SetTurnaroundTime+0x124>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d306      	bcc.n	800b16a <USB_SetTurnaroundTime+0x56>
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	4a37      	ldr	r2, [pc, #220]	@ (800b23c <USB_SetTurnaroundTime+0x128>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d202      	bcs.n	800b16a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b164:	230d      	movs	r3, #13
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	e04c      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	4a33      	ldr	r2, [pc, #204]	@ (800b23c <USB_SetTurnaroundTime+0x128>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d306      	bcc.n	800b180 <USB_SetTurnaroundTime+0x6c>
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	4a32      	ldr	r2, [pc, #200]	@ (800b240 <USB_SetTurnaroundTime+0x12c>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d802      	bhi.n	800b180 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b17a:	230c      	movs	r3, #12
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	e041      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	4a2f      	ldr	r2, [pc, #188]	@ (800b240 <USB_SetTurnaroundTime+0x12c>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d906      	bls.n	800b196 <USB_SetTurnaroundTime+0x82>
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	4a2e      	ldr	r2, [pc, #184]	@ (800b244 <USB_SetTurnaroundTime+0x130>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d802      	bhi.n	800b196 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b190:	230b      	movs	r3, #11
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	e036      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	4a2a      	ldr	r2, [pc, #168]	@ (800b244 <USB_SetTurnaroundTime+0x130>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d906      	bls.n	800b1ac <USB_SetTurnaroundTime+0x98>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	4a29      	ldr	r2, [pc, #164]	@ (800b248 <USB_SetTurnaroundTime+0x134>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d802      	bhi.n	800b1ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b1a6:	230a      	movs	r3, #10
 800b1a8:	617b      	str	r3, [r7, #20]
 800b1aa:	e02b      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	4a26      	ldr	r2, [pc, #152]	@ (800b248 <USB_SetTurnaroundTime+0x134>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d906      	bls.n	800b1c2 <USB_SetTurnaroundTime+0xae>
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	4a25      	ldr	r2, [pc, #148]	@ (800b24c <USB_SetTurnaroundTime+0x138>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d202      	bcs.n	800b1c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b1bc:	2309      	movs	r3, #9
 800b1be:	617b      	str	r3, [r7, #20]
 800b1c0:	e020      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	4a21      	ldr	r2, [pc, #132]	@ (800b24c <USB_SetTurnaroundTime+0x138>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d306      	bcc.n	800b1d8 <USB_SetTurnaroundTime+0xc4>
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	4a20      	ldr	r2, [pc, #128]	@ (800b250 <USB_SetTurnaroundTime+0x13c>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d802      	bhi.n	800b1d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b1d2:	2308      	movs	r3, #8
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	e015      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	4a1d      	ldr	r2, [pc, #116]	@ (800b250 <USB_SetTurnaroundTime+0x13c>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d906      	bls.n	800b1ee <USB_SetTurnaroundTime+0xda>
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	4a1c      	ldr	r2, [pc, #112]	@ (800b254 <USB_SetTurnaroundTime+0x140>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d202      	bcs.n	800b1ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b1e8:	2307      	movs	r3, #7
 800b1ea:	617b      	str	r3, [r7, #20]
 800b1ec:	e00a      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b1ee:	2306      	movs	r3, #6
 800b1f0:	617b      	str	r3, [r7, #20]
 800b1f2:	e007      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b1fa:	2309      	movs	r3, #9
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	e001      	b.n	800b204 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b200:	2309      	movs	r3, #9
 800b202:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	68da      	ldr	r2, [r3, #12]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	029b      	lsls	r3, r3, #10
 800b218:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b21c:	431a      	orrs	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	371c      	adds	r7, #28
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	00d8acbf 	.word	0x00d8acbf
 800b234:	00e4e1c0 	.word	0x00e4e1c0
 800b238:	00f42400 	.word	0x00f42400
 800b23c:	01067380 	.word	0x01067380
 800b240:	011a499f 	.word	0x011a499f
 800b244:	01312cff 	.word	0x01312cff
 800b248:	014ca43f 	.word	0x014ca43f
 800b24c:	016e3600 	.word	0x016e3600
 800b250:	01a6ab1f 	.word	0x01a6ab1f
 800b254:	01e84800 	.word	0x01e84800

0800b258 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	f023 0201 	bic.w	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	460b      	mov	r3, r1
 800b284:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b286:	2300      	movs	r3, #0
 800b288:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b296:	78fb      	ldrb	r3, [r7, #3]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d115      	bne.n	800b2c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b2a8:	200a      	movs	r0, #10
 800b2aa:	f7f6 fc65 	bl	8001b78 <HAL_Delay>
      ms += 10U;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	330a      	adds	r3, #10
 800b2b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fc0b 	bl	800bad0 <USB_GetMode>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d01e      	beq.n	800b2fe <USB_SetCurrentMode+0x84>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2bc7      	cmp	r3, #199	@ 0xc7
 800b2c4:	d9f0      	bls.n	800b2a8 <USB_SetCurrentMode+0x2e>
 800b2c6:	e01a      	b.n	800b2fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b2c8:	78fb      	ldrb	r3, [r7, #3]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d115      	bne.n	800b2fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b2da:	200a      	movs	r0, #10
 800b2dc:	f7f6 fc4c 	bl	8001b78 <HAL_Delay>
      ms += 10U;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	330a      	adds	r3, #10
 800b2e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fbf2 	bl	800bad0 <USB_GetMode>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d005      	beq.n	800b2fe <USB_SetCurrentMode+0x84>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2bc7      	cmp	r3, #199	@ 0xc7
 800b2f6:	d9f0      	bls.n	800b2da <USB_SetCurrentMode+0x60>
 800b2f8:	e001      	b.n	800b2fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e005      	b.n	800b30a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2bc8      	cmp	r3, #200	@ 0xc8
 800b302:	d101      	bne.n	800b308 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	e000      	b.n	800b30a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
	...

0800b314 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b314:	b084      	sub	sp, #16
 800b316:	b580      	push	{r7, lr}
 800b318:	b086      	sub	sp, #24
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b32e:	2300      	movs	r3, #0
 800b330:	613b      	str	r3, [r7, #16]
 800b332:	e009      	b.n	800b348 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	3340      	adds	r3, #64	@ 0x40
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	2200      	movs	r2, #0
 800b340:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	3301      	adds	r3, #1
 800b346:	613b      	str	r3, [r7, #16]
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	2b0e      	cmp	r3, #14
 800b34c:	d9f2      	bls.n	800b334 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b34e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b352:	2b00      	cmp	r3, #0
 800b354:	d11c      	bne.n	800b390 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b364:	f043 0302 	orr.w	r3, r3, #2
 800b368:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b36e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	e005      	b.n	800b39c <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b394:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b3a8:	2103      	movs	r1, #3
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f95e 	bl	800b66c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b3b0:	2110      	movs	r1, #16
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f8fa 	bl	800b5ac <USB_FlushTxFifo>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f924 	bl	800b610 <USB_FlushRxFifo>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3d8:	461a      	mov	r2, r3
 800b3da:	2300      	movs	r3, #0
 800b3dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	613b      	str	r3, [r7, #16]
 800b3fa:	e043      	b.n	800b484 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b40e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b412:	d118      	bne.n	800b446 <USB_DevInit+0x132>
    {
      if (i == 0U)
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10a      	bne.n	800b430 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	4413      	add	r3, r2
 800b422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b426:	461a      	mov	r2, r3
 800b428:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	e013      	b.n	800b458 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b43c:	461a      	mov	r2, r3
 800b43e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	e008      	b.n	800b458 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	015a      	lsls	r2, r3, #5
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	4413      	add	r3, r2
 800b44e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b452:	461a      	mov	r2, r3
 800b454:	2300      	movs	r3, #0
 800b456:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b464:	461a      	mov	r2, r3
 800b466:	2300      	movs	r3, #0
 800b468:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b476:	461a      	mov	r2, r3
 800b478:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b47c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	3301      	adds	r3, #1
 800b482:	613b      	str	r3, [r7, #16]
 800b484:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b488:	461a      	mov	r2, r3
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d3b5      	bcc.n	800b3fc <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b490:	2300      	movs	r3, #0
 800b492:	613b      	str	r3, [r7, #16]
 800b494:	e043      	b.n	800b51e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4ac:	d118      	bne.n	800b4e0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10a      	bne.n	800b4ca <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b4c6:	6013      	str	r3, [r2, #0]
 800b4c8:	e013      	b.n	800b4f2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	015a      	lsls	r2, r3, #5
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	e008      	b.n	800b4f2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4fe:	461a      	mov	r2, r3
 800b500:	2300      	movs	r3, #0
 800b502:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b510:	461a      	mov	r2, r3
 800b512:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b516:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	3301      	adds	r3, #1
 800b51c:	613b      	str	r3, [r7, #16]
 800b51e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b522:	461a      	mov	r2, r3
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	4293      	cmp	r3, r2
 800b528:	d3b5      	bcc.n	800b496 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b53c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b54a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b54c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b550:	2b00      	cmp	r3, #0
 800b552:	d105      	bne.n	800b560 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	f043 0210 	orr.w	r2, r3, #16
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	699a      	ldr	r2, [r3, #24]
 800b564:	4b10      	ldr	r3, [pc, #64]	@ (800b5a8 <USB_DevInit+0x294>)
 800b566:	4313      	orrs	r3, r2
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b56c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b570:	2b00      	cmp	r3, #0
 800b572:	d005      	beq.n	800b580 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	f043 0208 	orr.w	r2, r3, #8
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b580:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b584:	2b01      	cmp	r3, #1
 800b586:	d107      	bne.n	800b598 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b590:	f043 0304 	orr.w	r3, r3, #4
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b598:	7dfb      	ldrb	r3, [r7, #23]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3718      	adds	r7, #24
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5a4:	b004      	add	sp, #16
 800b5a6:	4770      	bx	lr
 800b5a8:	803c3800 	.word	0x803c3800

0800b5ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b5c6:	d901      	bls.n	800b5cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e01b      	b.n	800b604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	daf2      	bge.n	800b5ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	019b      	lsls	r3, r3, #6
 800b5dc:	f043 0220 	orr.w	r2, r3, #32
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b5f0:	d901      	bls.n	800b5f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e006      	b.n	800b604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	f003 0320 	and.w	r3, r3, #32
 800b5fe:	2b20      	cmp	r3, #32
 800b600:	d0f0      	beq.n	800b5e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b618:	2300      	movs	r3, #0
 800b61a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	3301      	adds	r3, #1
 800b620:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b628:	d901      	bls.n	800b62e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b62a:	2303      	movs	r3, #3
 800b62c:	e018      	b.n	800b660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	daf2      	bge.n	800b61c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b636:	2300      	movs	r3, #0
 800b638:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2210      	movs	r2, #16
 800b63e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3301      	adds	r3, #1
 800b644:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b64c:	d901      	bls.n	800b652 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b64e:	2303      	movs	r3, #3
 800b650:	e006      	b.n	800b660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	f003 0310 	and.w	r3, r3, #16
 800b65a:	2b10      	cmp	r3, #16
 800b65c:	d0f0      	beq.n	800b640 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	78fb      	ldrb	r3, [r7, #3]
 800b686:	68f9      	ldr	r1, [r7, #12]
 800b688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b68c:	4313      	orrs	r3, r2
 800b68e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b087      	sub	sp, #28
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	f003 0306 	and.w	r3, r3, #6
 800b6b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	75fb      	strb	r3, [r7, #23]
 800b6c2:	e00a      	b.n	800b6da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d002      	beq.n	800b6d0 <USB_GetDevSpeed+0x32>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b06      	cmp	r3, #6
 800b6ce:	d102      	bne.n	800b6d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	75fb      	strb	r3, [r7, #23]
 800b6d4:	e001      	b.n	800b6da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b6d6:	230f      	movs	r3, #15
 800b6d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	371c      	adds	r7, #28
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	785b      	ldrb	r3, [r3, #1]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d14a      	bne.n	800b79c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	015a      	lsls	r2, r3, #5
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b71a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b71e:	f040 8086 	bne.w	800b82e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	7812      	ldrb	r2, [r2, #0]
 800b736:	0151      	lsls	r1, r2, #5
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	440a      	add	r2, r1
 800b73c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b740:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b744:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	015a      	lsls	r2, r3, #5
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	4413      	add	r3, r2
 800b750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	7812      	ldrb	r2, [r2, #0]
 800b75a:	0151      	lsls	r1, r2, #5
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	440a      	add	r2, r1
 800b760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b764:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b768:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3301      	adds	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b776:	4293      	cmp	r3, r2
 800b778:	d902      	bls.n	800b780 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	75fb      	strb	r3, [r7, #23]
          break;
 800b77e:	e056      	b.n	800b82e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b798:	d0e7      	beq.n	800b76a <USB_EPStopXfer+0x82>
 800b79a:	e048      	b.n	800b82e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	015a      	lsls	r2, r3, #5
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7b4:	d13b      	bne.n	800b82e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	015a      	lsls	r2, r3, #5
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	7812      	ldrb	r2, [r2, #0]
 800b7ca:	0151      	lsls	r1, r2, #5
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	440a      	add	r2, r1
 800b7d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b7d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	015a      	lsls	r2, r3, #5
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	7812      	ldrb	r2, [r2, #0]
 800b7ee:	0151      	lsls	r1, r2, #5
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	440a      	add	r2, r1
 800b7f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b7fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3301      	adds	r3, #1
 800b802:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d902      	bls.n	800b814 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	75fb      	strb	r3, [r7, #23]
          break;
 800b812:	e00c      	b.n	800b82e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	015a      	lsls	r2, r3, #5
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b82c:	d0e7      	beq.n	800b7fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b830:	4618      	mov	r0, r3
 800b832:	371c      	adds	r7, #28
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b089      	sub	sp, #36	@ 0x24
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4611      	mov	r1, r2
 800b848:	461a      	mov	r2, r3
 800b84a:	460b      	mov	r3, r1
 800b84c:	71fb      	strb	r3, [r7, #7]
 800b84e:	4613      	mov	r3, r2
 800b850:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b85a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d123      	bne.n	800b8aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b862:	88bb      	ldrh	r3, [r7, #4]
 800b864:	3303      	adds	r3, #3
 800b866:	089b      	lsrs	r3, r3, #2
 800b868:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b86a:	2300      	movs	r3, #0
 800b86c:	61bb      	str	r3, [r7, #24]
 800b86e:	e018      	b.n	800b8a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b870:	79fb      	ldrb	r3, [r7, #7]
 800b872:	031a      	lsls	r2, r3, #12
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	4413      	add	r3, r2
 800b878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b87c:	461a      	mov	r2, r3
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	3301      	adds	r3, #1
 800b888:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	3301      	adds	r3, #1
 800b88e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	3301      	adds	r3, #1
 800b894:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	3301      	adds	r3, #1
 800b89a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	61bb      	str	r3, [r7, #24]
 800b8a2:	69ba      	ldr	r2, [r7, #24]
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d3e2      	bcc.n	800b870 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3724      	adds	r7, #36	@ 0x24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b08b      	sub	sp, #44	@ 0x2c
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b8ce:	88fb      	ldrh	r3, [r7, #6]
 800b8d0:	089b      	lsrs	r3, r3, #2
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b8d6:	88fb      	ldrh	r3, [r7, #6]
 800b8d8:	f003 0303 	and.w	r3, r3, #3
 800b8dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b8de:	2300      	movs	r3, #0
 800b8e0:	623b      	str	r3, [r7, #32]
 800b8e2:	e014      	b.n	800b90e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fe:	3301      	adds	r3, #1
 800b900:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b904:	3301      	adds	r3, #1
 800b906:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	3301      	adds	r3, #1
 800b90c:	623b      	str	r3, [r7, #32]
 800b90e:	6a3a      	ldr	r2, [r7, #32]
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	429a      	cmp	r2, r3
 800b914:	d3e6      	bcc.n	800b8e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b916:	8bfb      	ldrh	r3, [r7, #30]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01e      	beq.n	800b95a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b91c:	2300      	movs	r3, #0
 800b91e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b926:	461a      	mov	r2, r3
 800b928:	f107 0310 	add.w	r3, r7, #16
 800b92c:	6812      	ldr	r2, [r2, #0]
 800b92e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	b2db      	uxtb	r3, r3
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	fa22 f303 	lsr.w	r3, r2, r3
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b940:	701a      	strb	r2, [r3, #0]
      i++;
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	3301      	adds	r3, #1
 800b946:	623b      	str	r3, [r7, #32]
      pDest++;
 800b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94a:	3301      	adds	r3, #1
 800b94c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b94e:	8bfb      	ldrh	r3, [r7, #30]
 800b950:	3b01      	subs	r3, #1
 800b952:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b954:	8bfb      	ldrh	r3, [r7, #30]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1ea      	bne.n	800b930 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	372c      	adds	r7, #44	@ 0x2c
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b982:	f023 0303 	bic.w	r3, r3, #3
 800b986:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b996:	f043 0302 	orr.w	r3, r3, #2
 800b99a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b085      	sub	sp, #20
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	0c1b      	lsrs	r3, r3, #16
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba20:	69db      	ldr	r3, [r3, #28]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	4013      	ands	r3, r2
 800ba26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	b29b      	uxth	r3, r3
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	4013      	ands	r3, r2
 800ba64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba66:	68bb      	ldr	r3, [r7, #8]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3714      	adds	r7, #20
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b087      	sub	sp, #28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba96:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ba98:	78fb      	ldrb	r3, [r7, #3]
 800ba9a:	f003 030f 	and.w	r3, r3, #15
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	fa22 f303 	lsr.w	r3, r2, r3
 800baa4:	01db      	lsls	r3, r3, #7
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	4313      	orrs	r3, r2
 800baac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	015a      	lsls	r2, r3, #5
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	4413      	add	r3, r2
 800bab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	4013      	ands	r3, r2
 800bac0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bac2:	68bb      	ldr	r3, [r7, #8]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	f003 0301 	and.w	r3, r3, #1
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bb0a:	f023 0307 	bic.w	r3, r3, #7
 800bb0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3714      	adds	r7, #20
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
	...

0800bb34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b087      	sub	sp, #28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	607a      	str	r2, [r7, #4]
 800bb40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	333c      	adds	r3, #60	@ 0x3c
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	4a26      	ldr	r2, [pc, #152]	@ (800bbec <USB_EP0_OutStart+0xb8>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d90a      	bls.n	800bb6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb68:	d101      	bne.n	800bb6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	e037      	b.n	800bbde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb74:	461a      	mov	r2, r3
 800bb76:	2300      	movs	r3, #0
 800bb78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb9c:	f043 0318 	orr.w	r3, r3, #24
 800bba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbb0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bbb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bbb6:	7afb      	ldrb	r3, [r7, #11]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d10f      	bne.n	800bbdc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbd6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bbda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	371c      	adds	r7, #28
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	4f54300a 	.word	0x4f54300a

0800bbf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc08:	d901      	bls.n	800bc0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	e01b      	b.n	800bc46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	daf2      	bge.n	800bbfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	f043 0201 	orr.w	r2, r3, #1
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc32:	d901      	bls.n	800bc38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e006      	b.n	800bc46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d0f0      	beq.n	800bc26 <USB_CoreReset+0x36>

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <memset>:
 800bc52:	4402      	add	r2, r0
 800bc54:	4603      	mov	r3, r0
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d100      	bne.n	800bc5c <memset+0xa>
 800bc5a:	4770      	bx	lr
 800bc5c:	f803 1b01 	strb.w	r1, [r3], #1
 800bc60:	e7f9      	b.n	800bc56 <memset+0x4>
	...

0800bc64 <__libc_init_array>:
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	4d0d      	ldr	r5, [pc, #52]	@ (800bc9c <__libc_init_array+0x38>)
 800bc68:	2600      	movs	r6, #0
 800bc6a:	4c0d      	ldr	r4, [pc, #52]	@ (800bca0 <__libc_init_array+0x3c>)
 800bc6c:	1b64      	subs	r4, r4, r5
 800bc6e:	10a4      	asrs	r4, r4, #2
 800bc70:	42a6      	cmp	r6, r4
 800bc72:	d109      	bne.n	800bc88 <__libc_init_array+0x24>
 800bc74:	4d0b      	ldr	r5, [pc, #44]	@ (800bca4 <__libc_init_array+0x40>)
 800bc76:	2600      	movs	r6, #0
 800bc78:	4c0b      	ldr	r4, [pc, #44]	@ (800bca8 <__libc_init_array+0x44>)
 800bc7a:	f000 f817 	bl	800bcac <_init>
 800bc7e:	1b64      	subs	r4, r4, r5
 800bc80:	10a4      	asrs	r4, r4, #2
 800bc82:	42a6      	cmp	r6, r4
 800bc84:	d105      	bne.n	800bc92 <__libc_init_array+0x2e>
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc8c:	3601      	adds	r6, #1
 800bc8e:	4798      	blx	r3
 800bc90:	e7ee      	b.n	800bc70 <__libc_init_array+0xc>
 800bc92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc96:	3601      	adds	r6, #1
 800bc98:	4798      	blx	r3
 800bc9a:	e7f2      	b.n	800bc82 <__libc_init_array+0x1e>
 800bc9c:	0800bdcc 	.word	0x0800bdcc
 800bca0:	0800bdcc 	.word	0x0800bdcc
 800bca4:	0800bdcc 	.word	0x0800bdcc
 800bca8:	0800bdd0 	.word	0x0800bdd0

0800bcac <_init>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	bf00      	nop
 800bcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb2:	bc08      	pop	{r3}
 800bcb4:	469e      	mov	lr, r3
 800bcb6:	4770      	bx	lr

0800bcb8 <_fini>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	bf00      	nop
 800bcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcbe:	bc08      	pop	{r3}
 800bcc0:	469e      	mov	lr, r3
 800bcc2:	4770      	bx	lr
