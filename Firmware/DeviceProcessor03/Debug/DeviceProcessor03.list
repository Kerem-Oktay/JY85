
DeviceProcessor03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b774  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800b9ac  0800b9ac  0000c9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bac4  0800bac4  0000cac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800bac8  0800bac8  0000cac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000001db  20000000  0800bacc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000e871  200001dc  0800bca7  0000d1dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000603  2000ea4d  0800bca7  0000da4d  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000d1db  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023427  00000000  00000000  0000d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004fd4  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001dc8  00000000  00000000  00035610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000016c9  00000000  00000000  000373d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037d86  00000000  00000000  00038aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00029d6d  00000000  00000000  00070827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014bc38  00000000  00000000  0009a594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e61cc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007d34  00000000  00000000  001e6210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001edf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001dc 	.word	0x200001dc
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b994 	.word	0x0800b994

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001e0 	.word	0x200001e0
 8000274:	0800b994 	.word	0x0800b994

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f001 f996 	bl	80015ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f81c 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 faf0 	bl	8000868 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000288:	f000 f87c 	bl	8000384 <MX_GPDMA1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800028c:	f000 faba 	bl	8000804 <MX_USB_OTG_FS_PCD_Init>
  MX_ICACHE_Init();
 8000290:	f000 f914 	bl	80004bc <MX_ICACHE_Init>
  MX_TIM8_Init();
 8000294:	f000 fa06 	bl	80006a4 <MX_TIM8_Init>
  MX_I2C2_Init();
 8000298:	f000 f894 	bl	80003c4 <MX_I2C2_Init>
  MX_I2C3_Init();
 800029c:	f000 f8d0 	bl	8000440 <MX_I2C3_Init>
  MX_SPI2_Init();
 80002a0:	f000 f990 	bl	80005c4 <MX_SPI2_Init>
  MX_SPI1_Init();
 80002a4:	f000 f91e 	bl	80004e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 80002a8:	f009 f9a2 	bl	80095f0 <MX_USB_Device_Init>
  HAL_Delay(2000);
 80002ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002b0:	f001 fa42 	bl	8001738 <HAL_Delay>
  run_device();
 80002b4:	f001 f852 	bl	800135c <run_device>
//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	bf00      	nop
 80002ba:	e7fd      	b.n	80002b8 <main+0x40>

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b09e      	sub	sp, #120	@ 0x78
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2260      	movs	r2, #96	@ 0x60
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f00b fb36 	bl	800b93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	463b      	mov	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]
 80002de:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80002e4:	f004 fa26 	bl	8004734 <HAL_PWREx_ControlVoltageScaling>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002ee:	f000 fb9b 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 80002f2:	2370      	movs	r3, #112	@ 0x70
 80002f4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000300:	2310      	movs	r3, #16
 8000302:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000304:	2300      	movs	r3, #0
 8000306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 8000308:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800030c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 800030e:	2310      	movs	r3, #16
 8000310:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000316:	2301      	movs	r3, #1
 8000318:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800031a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800031e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000320:	2303      	movs	r3, #3
 8000322:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000324:	230a      	movs	r3, #10
 8000326:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000328:	2302      	movs	r3, #2
 800032a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800032c:	2302      	movs	r3, #2
 800032e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000330:	2301      	movs	r3, #1
 8000332:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000334:	230c      	movs	r3, #12
 8000336:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4618      	mov	r0, r3
 8000342:	f004 faa3 	bl	800488c <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800034c:	f000 fb6c 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	231f      	movs	r3, #31
 8000352:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2303      	movs	r3, #3
 8000356:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	2104      	movs	r1, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f005 f969 	bl	8005644 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000378:	f000 fb56 	bl	8000a28 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3778      	adds	r7, #120	@ 0x78
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <MX_GPDMA1_Init+0x3c>)
 800038c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000390:	4a0b      	ldr	r2, [pc, #44]	@ (80003c0 <MX_GPDMA1_Init+0x3c>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800039a:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <MX_GPDMA1_Init+0x3c>)
 800039c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2054      	movs	r0, #84	@ 0x54
 80003ae:	f001 fa9f 	bl	80018f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80003b2:	2054      	movs	r0, #84	@ 0x54
 80003b4:	f001 fab6 	bl	8001924 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	46020c00 	.word	0x46020c00

080003c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003ca:	4a1c      	ldr	r2, [pc, #112]	@ (800043c <MX_I2C2_Init+0x78>)
 80003cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003d0:	f640 6214 	movw	r2, #3604	@ 0xe14
 80003d4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003d6:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003dc:	4b16      	ldr	r3, [pc, #88]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003de:	2201      	movs	r2, #1
 80003e0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ee:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f4:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <MX_I2C2_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000400:	480d      	ldr	r0, [pc, #52]	@ (8000438 <MX_I2C2_Init+0x74>)
 8000402:	f002 fa8b 	bl	800291c <HAL_I2C_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800040c:	f000 fb0c 	bl	8000a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000410:	2100      	movs	r1, #0
 8000412:	4809      	ldr	r0, [pc, #36]	@ (8000438 <MX_I2C2_Init+0x74>)
 8000414:	f002 fe2c 	bl	8003070 <HAL_I2CEx_ConfigAnalogFilter>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800041e:	f000 fb03 	bl	8000a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000422:	2100      	movs	r1, #0
 8000424:	4804      	ldr	r0, [pc, #16]	@ (8000438 <MX_I2C2_Init+0x74>)
 8000426:	f002 fe6e 	bl	8003106 <HAL_I2CEx_ConfigDigitalFilter>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000430:	f000 fafa 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200001f8 	.word	0x200001f8
 800043c:	40005800 	.word	0x40005800

08000440 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000446:	4a1c      	ldr	r2, [pc, #112]	@ (80004b8 <MX_I2C3_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <MX_I2C3_Init+0x74>)
 800044c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000450:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000452:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000458:	4b16      	ldr	r3, [pc, #88]	@ (80004b4 <MX_I2C3_Init+0x74>)
 800045a:	2201      	movs	r2, #1
 800045c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800045e:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000464:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800046a:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <MX_I2C3_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000470:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000476:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800047c:	480d      	ldr	r0, [pc, #52]	@ (80004b4 <MX_I2C3_Init+0x74>)
 800047e:	f002 fa4d 	bl	800291c <HAL_I2C_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000488:	f000 face 	bl	8000a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800048c:	2100      	movs	r1, #0
 800048e:	4809      	ldr	r0, [pc, #36]	@ (80004b4 <MX_I2C3_Init+0x74>)
 8000490:	f002 fdee 	bl	8003070 <HAL_I2CEx_ConfigAnalogFilter>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800049a:	f000 fac5 	bl	8000a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800049e:	2100      	movs	r1, #0
 80004a0:	4804      	ldr	r0, [pc, #16]	@ (80004b4 <MX_I2C3_Init+0x74>)
 80004a2:	f002 fe30 	bl	8003106 <HAL_I2CEx_ConfigDigitalFilter>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80004ac:	f000 fabc 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000024c 	.word	0x2000024c
 80004b8:	46002800 	.word	0x46002800

080004bc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80004c0:	2000      	movs	r0, #0
 80004c2:	f002 fe6d 	bl	80031a0 <HAL_ICACHE_ConfigAssociativityMode>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80004cc:	f000 faac 	bl	8000a28 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004d0:	f002 fe86 	bl	80031e0 <HAL_ICACHE_Enable>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80004da:	f000 faa5 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004f4:	4b31      	ldr	r3, [pc, #196]	@ (80005bc <MX_SPI1_Init+0xd8>)
 80004f6:	4a32      	ldr	r2, [pc, #200]	@ (80005c0 <MX_SPI1_Init+0xdc>)
 80004f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004fa:	4b30      	ldr	r3, [pc, #192]	@ (80005bc <MX_SPI1_Init+0xd8>)
 80004fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000502:	4b2e      	ldr	r3, [pc, #184]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000508:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800050a:	2207      	movs	r2, #7
 800050c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800050e:	4b2b      	ldr	r3, [pc, #172]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000510:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000514:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000516:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800051e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000522:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000524:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800052a:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000530:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000536:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000538:	2200      	movs	r2, #0
 800053a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800053c:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800053e:	2207      	movs	r2, #7
 8000540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000542:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000544:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000548:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800054a:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800054c:	2200      	movs	r2, #0
 800054e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000550:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000552:	2200      	movs	r2, #0
 8000554:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000558:	2200      	movs	r2, #0
 800055a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800055c:	4b17      	ldr	r3, [pc, #92]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800055e:	2200      	movs	r2, #0
 8000560:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000564:	2200      	movs	r2, #0
 8000566:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000568:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800056a:	2200      	movs	r2, #0
 800056c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800056e:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000570:	2200      	movs	r2, #0
 8000572:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000576:	2200      	movs	r2, #0
 8000578:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_SPI1_Init+0xd8>)
 800057c:	2200      	movs	r2, #0
 800057e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000580:	480e      	ldr	r0, [pc, #56]	@ (80005bc <MX_SPI1_Init+0xd8>)
 8000582:	f006 fac7 	bl	8006b14 <HAL_SPI_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 800058c:	f000 fa4c 	bl	8000a28 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000594:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	4806      	ldr	r0, [pc, #24]	@ (80005bc <MX_SPI1_Init+0xd8>)
 80005a4:	f006 fbe7 	bl	8006d76 <HAL_SPIEx_SetConfigAutonomousMode>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80005ae:	f000 fa3b 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200002a0 	.word	0x200002a0
 80005c0:	40013000 	.word	0x40013000

080005c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005d4:	4b31      	ldr	r3, [pc, #196]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005d6:	4a32      	ldr	r2, [pc, #200]	@ (80006a0 <MX_SPI2_Init+0xdc>)
 80005d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e8:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005ea:	2207      	movs	r2, #7
 80005ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80005f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005fc:	4b27      	ldr	r3, [pc, #156]	@ (800069c <MX_SPI2_Init+0xd8>)
 80005fe:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000602:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000604:	4b25      	ldr	r3, [pc, #148]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060a:	4b24      	ldr	r3, [pc, #144]	@ (800069c <MX_SPI2_Init+0xd8>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000616:	4b21      	ldr	r3, [pc, #132]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000618:	2200      	movs	r2, #0
 800061a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_SPI2_Init+0xd8>)
 800061e:	2207      	movs	r2, #7
 8000620:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000624:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000628:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_SPI2_Init+0xd8>)
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000636:	4b19      	ldr	r3, [pc, #100]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000638:	2200      	movs	r2, #0
 800063a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_SPI2_Init+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000644:	2200      	movs	r2, #0
 8000646:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_SPI2_Init+0xd8>)
 800064a:	2200      	movs	r2, #0
 800064c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000650:	2200      	movs	r2, #0
 8000652:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000656:	2200      	movs	r2, #0
 8000658:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_SPI2_Init+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000660:	480e      	ldr	r0, [pc, #56]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000662:	f006 fa57 	bl	8006b14 <HAL_SPI_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 800066c:	f000 f9dc 	bl	8000a28 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000674:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	@ (800069c <MX_SPI2_Init+0xd8>)
 8000684:	f006 fb77 	bl	8006d76 <HAL_SPIEx_SetConfigAutonomousMode>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 800068e:	f000 f9cb 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000330 	.word	0x20000330
 80006a0:	40003800 	.word	0x40003800

080006a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09c      	sub	sp, #112	@ 0x70
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
 80006d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2234      	movs	r2, #52	@ 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00b f92c 	bl	800b93c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80006e4:	4b45      	ldr	r3, [pc, #276]	@ (80007fc <MX_TIM8_Init+0x158>)
 80006e6:	4a46      	ldr	r2, [pc, #280]	@ (8000800 <MX_TIM8_Init+0x15c>)
 80006e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80006ea:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <MX_TIM8_Init+0x158>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b42      	ldr	r3, [pc, #264]	@ (80007fc <MX_TIM8_Init+0x158>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80006f6:	4b41      	ldr	r3, [pc, #260]	@ (80007fc <MX_TIM8_Init+0x158>)
 80006f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b3f      	ldr	r3, [pc, #252]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000704:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070a:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <MX_TIM8_Init+0x158>)
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000710:	483a      	ldr	r0, [pc, #232]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000712:	f006 fb71 	bl	8006df8 <HAL_TIM_Base_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800071c:	f000 f984 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000726:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800072a:	4619      	mov	r1, r3
 800072c:	4833      	ldr	r0, [pc, #204]	@ (80007fc <MX_TIM8_Init+0x158>)
 800072e:	f006 fc95 	bl	800705c <HAL_TIM_ConfigClockSource>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000738:	f000 f976 	bl	8000a28 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800073c:	482f      	ldr	r0, [pc, #188]	@ (80007fc <MX_TIM8_Init+0x158>)
 800073e:	f006 fbb2 	bl	8006ea6 <HAL_TIM_OC_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000748:	f000 f96e 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000758:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800075c:	4619      	mov	r1, r3
 800075e:	4827      	ldr	r0, [pc, #156]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000760:	f007 faf0 	bl	8007d44 <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800076a:	f000 f95d 	bl	8000a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800076e:	2330      	movs	r3, #48	@ 0x30
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800077a:	2300      	movs	r3, #0
 800077c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800078a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800078e:	2204      	movs	r2, #4
 8000790:	4619      	mov	r1, r3
 8000792:	481a      	ldr	r0, [pc, #104]	@ (80007fc <MX_TIM8_Init+0x158>)
 8000794:	f006 fbe8 	bl	8006f68 <HAL_TIM_OC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800079e:	f000 f943 	bl	8000a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	4807      	ldr	r0, [pc, #28]	@ (80007fc <MX_TIM8_Init+0x158>)
 80007e0:	f007 fb72 	bl	8007ec8 <HAL_TIMEx_ConfigBreakDeadTime>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80007ea:	f000 f91d 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80007ee:	4803      	ldr	r0, [pc, #12]	@ (80007fc <MX_TIM8_Init+0x158>)
 80007f0:	f000 fb56 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 80007f4:	bf00      	nop
 80007f6:	3770      	adds	r7, #112	@ 0x70
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200003c0 	.word	0x200003c0
 8000800:	40013400 	.word	0x40013400

08000804 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800080a:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800080c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000810:	2206      	movs	r2, #6
 8000812:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000816:	2202      	movs	r2, #2
 8000818:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800081c:	2202      	movs	r2, #2
 800081e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000822:	2200      	movs	r2, #0
 8000824:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000828:	2200      	movs	r2, #0
 800082a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083a:	2200      	movs	r2, #0
 800083c:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000846:	2200      	movs	r2, #0
 8000848:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084c:	f002 fcd8 	bl	8003200 <HAL_PCD_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000856:	f000 f8e7 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000484 	.word	0x20000484
 8000864:	42040000 	.word	0x42040000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	4b65      	ldr	r3, [pc, #404]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000884:	4a63      	ldr	r2, [pc, #396]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800088e:	4b61      	ldr	r3, [pc, #388]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000894:	f003 0310 	and.w	r3, r3, #16
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089c:	4b5d      	ldr	r3, [pc, #372]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 800089e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a2:	4a5c      	ldr	r2, [pc, #368]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ac:	4b59      	ldr	r3, [pc, #356]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b2:	f003 0320 	and.w	r3, r3, #32
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b56      	ldr	r3, [pc, #344]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c0:	4a54      	ldr	r2, [pc, #336]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ca:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008de:	4a4d      	ldr	r2, [pc, #308]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008e8:	4b4a      	ldr	r3, [pc, #296]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f6:	4b47      	ldr	r3, [pc, #284]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008fc:	4a45      	ldr	r2, [pc, #276]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 80008fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000902:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000906:	4b43      	ldr	r3, [pc, #268]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b3f      	ldr	r3, [pc, #252]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000924:	4b3b      	ldr	r3, [pc, #236]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4b38      	ldr	r3, [pc, #224]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000938:	4a36      	ldr	r2, [pc, #216]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000942:	4b34      	ldr	r3, [pc, #208]	@ (8000a14 <MX_GPIO_Init+0x1ac>)
 8000944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000950:	2200      	movs	r2, #0
 8000952:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000956:	4830      	ldr	r0, [pc, #192]	@ (8000a18 <MX_GPIO_Init+0x1b0>)
 8000958:	f001 ffc8 	bl	80028ec <HAL_GPIO_WritePin>
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000962:	482e      	ldr	r0, [pc, #184]	@ (8000a1c <MX_GPIO_Init+0x1b4>)
 8000964:	f001 ffc2 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADCV1_D13_Pin ADCV1_D12_Pin ADCV1_D11_Pin ADCV1_D10_Pin
                           ADCV1_D09_Pin ADCV1_D08_Pin ADCV1_D07_Pin ADCV1_D06_Pin
                           ADCV1_D05_Pin ADCV1_D04_Pin ADCV1_D03_Pin ADCV1_D02_Pin
                           ADCV1_D01_Pin ADCV1_D00_Pin ADCV1_D15_Pin ADCV1_D14_Pin */
  GPIO_InitStruct.Pin = ADCV1_D13_Pin|ADCV1_D12_Pin|ADCV1_D11_Pin|ADCV1_D10_Pin
 8000968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800096c:	61fb      	str	r3, [r7, #28]
                          |ADCV1_D09_Pin|ADCV1_D08_Pin|ADCV1_D07_Pin|ADCV1_D06_Pin
                          |ADCV1_D05_Pin|ADCV1_D04_Pin|ADCV1_D03_Pin|ADCV1_D02_Pin
                          |ADCV1_D01_Pin|ADCV1_D00_Pin|ADCV1_D15_Pin|ADCV1_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4828      	ldr	r0, [pc, #160]	@ (8000a20 <MX_GPIO_Init+0x1b8>)
 800097e:	f001 fddd 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D00_Pin ADCV2_D01_Pin ADCV2_D02_Pin ADCV2_D03_Pin
                           ADCV2_D04_Pin ADCV2_D05_Pin ADCV2_D06_Pin ADCV2_D07_Pin
                           ADCV2_D08_Pin ADCV2_D09_Pin ADCV2_D10_Pin ADCV2_D11_Pin */
  GPIO_InitStruct.Pin = ADCV2_D00_Pin|ADCV2_D01_Pin|ADCV2_D02_Pin|ADCV2_D03_Pin
 8000982:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000986:	61fb      	str	r3, [r7, #28]
                          |ADCV2_D04_Pin|ADCV2_D05_Pin|ADCV2_D06_Pin|ADCV2_D07_Pin
                          |ADCV2_D08_Pin|ADCV2_D09_Pin|ADCV2_D10_Pin|ADCV2_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4823      	ldr	r0, [pc, #140]	@ (8000a24 <MX_GPIO_Init+0x1bc>)
 8000998:	f001 fdd0 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D12_Pin ADCV2_D13_Pin ADCV2_D14_Pin ADCV2_D15_Pin */
  GPIO_InitStruct.Pin = ADCV2_D12_Pin|ADCV2_D13_Pin|ADCV2_D14_Pin|ADCV2_D15_Pin;
 800099c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a6:	2302      	movs	r3, #2
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	@ (8000a24 <MX_GPIO_Init+0x1bc>)
 80009b2:	f001 fdc3 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_01_Pin SWNT_CTRL_02_Pin SWNT_CTRL_03_Pin SWNT_CTRL_04_Pin
                           SWNT_CTRL_05_Pin SWNT_CTRL_06_Pin SWNT_CTRL_07_Pin SWNT_CTRL_08_Pin
                           SWNT_CTRL_09_Pin SWNT_CTRL_10_Pin SWNT_CTRL_11_Pin SWNT_CTRL_12_Pin
                           SWNT_CTRL_13_Pin SWNT_CTRL_14_Pin SWNT_CTRL_15_Pin SWNT_CTRL_16_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 80009b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ba:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <MX_GPIO_Init+0x1b0>)
 80009d0:	f001 fdb4 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_20_Pin SWNT_CTRL_21_Pin SWNT_CTRL_17_Pin SWNT_CTRL_18_Pin
                           SWNT_CTRL_19_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 80009d4:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80009d8:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	480b      	ldr	r0, [pc, #44]	@ (8000a1c <MX_GPIO_Init+0x1b4>)
 80009ee:	f001 fda5 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV1_OTR_Pin ADCV2_OTR_Pin */
  GPIO_InitStruct.Pin = ADCV1_OTR_Pin|ADCV2_OTR_Pin;
 80009f2:	2306      	movs	r3, #6
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_GPIO_Init+0x1b4>)
 8000a06:	f001 fd99 	bl	800253c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	@ 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	46020c00 	.word	0x46020c00
 8000a18:	42021800 	.word	0x42021800
 8000a1c:	42020c00 	.word	0x42020c00
 8000a20:	42021000 	.word	0x42021000
 8000a24:	42021400 	.word	0x42021400

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <HAL_MspInit+0x34>)
 8000a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a40:	4a09      	ldr	r2, [pc, #36]	@ (8000a68 <HAL_MspInit+0x34>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <HAL_MspInit+0x34>)
 8000a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000a58:	f003 fef8 	bl	800484c <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8000a5c:	f003 ff06 	bl	800486c <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	46020c00 	.word	0x46020c00

08000a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0bc      	sub	sp, #240	@ 0xf0
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	22c0      	movs	r2, #192	@ 0xc0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00a ff55 	bl	800b93c <memset>
  if(hi2c->Instance==I2C2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a4d      	ldr	r2, [pc, #308]	@ (8000bcc <HAL_I2C_MspInit+0x160>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d148      	bne.n	8000b2e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a9c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_MSIK;
 8000aa8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f005 f959 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000ac0:	f7ff ffb2 	bl	8000a28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	4b42      	ldr	r3, [pc, #264]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aca:	4a41      	ldr	r2, [pc, #260]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_DAC2_CURR_POT_SCL_Pin|I2C_DAC2_CURR_POT_SDA_Pin;
 8000ae2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aea:	2312      	movs	r3, #18
 8000aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000afc:	2304      	movs	r3, #4
 8000afe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b06:	4619      	mov	r1, r3
 8000b08:	4832      	ldr	r0, [pc, #200]	@ (8000bd4 <HAL_I2C_MspInit+0x168>)
 8000b0a:	f001 fd17 	bl	800253c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0e:	4b30      	ldr	r3, [pc, #192]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b14:	4a2e      	ldr	r2, [pc, #184]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b1a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b2c:	e04a      	b.n	8000bc4 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C3)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a29      	ldr	r2, [pc, #164]	@ (8000bd8 <HAL_I2C_MspInit+0x16c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d145      	bne.n	8000bc4 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_MSIK;
 8000b44:	23c0      	movs	r3, #192	@ 0xc0
 8000b46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 f90c 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8000b5a:	f7ff ff65 	bl	8000a28 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b64:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_DAC1_POT_SCL_Pin|I2C_DAC1_POT_SDA_Pin;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b82:	2312      	movs	r3, #18
 8000b84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b94:	2304      	movs	r3, #4
 8000b96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <HAL_I2C_MspInit+0x170>)
 8000ba2:	f001 fccb 	bl	800253c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000ba8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000bac:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_I2C_MspInit+0x164>)
 8000bb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
}
 8000bc4:	bf00      	nop
 8000bc6:	37f0      	adds	r7, #240	@ 0xf0
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40005800 	.word	0x40005800
 8000bd0:	46020c00 	.word	0x46020c00
 8000bd4:	42020400 	.word	0x42020400
 8000bd8:	46002800 	.word	0x46002800
 8000bdc:	42020800 	.word	0x42020800

08000be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0be      	sub	sp, #248	@ 0xf8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	22c0      	movs	r2, #192	@ 0xc0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00a fe9b 	bl	800b93c <memset>
  if(hspi->Instance==SPI1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8000db4 <HAL_SPI_MspInit+0x1d4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d147      	bne.n	8000ca0 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 8000c1c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000c20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f005 f89f 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000c34:	f7ff fef8 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c38:	4b5f      	ldr	r3, [pc, #380]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c3e:	4a5e      	ldr	r2, [pc, #376]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c44:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c48:	4b5b      	ldr	r3, [pc, #364]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b58      	ldr	r3, [pc, #352]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c5c:	4a56      	ldr	r2, [pc, #344]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c66:	4b54      	ldr	r3, [pc, #336]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_DAC2_SCK_Pin|SPI_DAC2_NSS_Pin|SPI_DAC2_MISO_Pin|SPI_DAC2_MOSI_Pin;
 8000c74:	23d2      	movs	r3, #210	@ 0xd2
 8000c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4848      	ldr	r0, [pc, #288]	@ (8000dbc <HAL_SPI_MspInit+0x1dc>)
 8000c9a:	f001 fc4f 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c9e:	e084      	b.n	8000daa <HAL_SPI_MspInit+0x1ca>
  else if(hspi->Instance==SPI2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a46      	ldr	r2, [pc, #280]	@ (8000dc0 <HAL_SPI_MspInit+0x1e0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d17f      	bne.n	8000daa <HAL_SPI_MspInit+0x1ca>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000caa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_MSIK;
 8000cb6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 f852 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 8000cce:	f7ff feab 	bl	8000a28 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cd2:	4b39      	ldr	r3, [pc, #228]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cd8:	4a37      	ldr	r2, [pc, #220]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cde:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ce2:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf0:	4b31      	ldr	r3, [pc, #196]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf6:	4a30      	ldr	r2, [pc, #192]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d00:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d14:	4a28      	ldr	r2, [pc, #160]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <HAL_SPI_MspInit+0x1d8>)
 8000d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_DAC1_MISO_Pin;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d44:	2305      	movs	r3, #5
 8000d46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481c      	ldr	r0, [pc, #112]	@ (8000dc4 <HAL_SPI_MspInit+0x1e4>)
 8000d52:	f001 fbf3 	bl	800253c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_NSS_Pin|SPI_DAC1_MOSI_Pin;
 8000d56:	2311      	movs	r3, #17
 8000d58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4813      	ldr	r0, [pc, #76]	@ (8000dc8 <HAL_SPI_MspInit+0x1e8>)
 8000d7c:	f001 fbde 	bl	800253c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_SCK_Pin;
 8000d80:	2308      	movs	r3, #8
 8000d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <HAL_SPI_MspInit+0x1e8>)
 8000da6:	f001 fbc9 	bl	800253c <HAL_GPIO_Init>
}
 8000daa:	bf00      	nop
 8000dac:	37f8      	adds	r7, #248	@ 0xf8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40013000 	.word	0x40013000
 8000db8:	46020c00 	.word	0x46020c00
 8000dbc:	42020000 	.word	0x42020000
 8000dc0:	40003800 	.word	0x40003800
 8000dc4:	42020800 	.word	0x42020800
 8000dc8:	42020c00 	.word	0x42020c00

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8000e90 <HAL_TIM_Base_MspInit+0xc4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d153      	bne.n	8000e86 <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000dde:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <HAL_TIM_Base_MspInit+0xc8>)
 8000de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000de4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e94 <HAL_TIM_Base_MspInit+0xc8>)
 8000de6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000dea:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000dee:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <HAL_TIM_Base_MspInit+0xc8>)
 8000df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* GPDMA1_REQUEST_TIM8_UP Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000dfe:	4a27      	ldr	r2, [pc, #156]	@ (8000e9c <HAL_TIM_Base_MspInit+0xd0>)
 8000e00:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM8_UP;
 8000e02:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e04:	2235      	movs	r2, #53	@ 0x35
 8000e06:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000e08:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e0e:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e14:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e1e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e22:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e30:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e38:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 8000e40:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000e46:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8000e58:	480f      	ldr	r0, [pc, #60]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e5a:	f000 fe25 	bl	8001aa8 <HAL_DMA_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_TIM_Base_MspInit+0x9c>
    {
      Error_Handler();
 8000e64:	f7ff fde0 	bl	8000a28 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel12);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e6c:	621a      	str	r2, [r3, #32]
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e74:	2110      	movs	r1, #16
 8000e76:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <HAL_TIM_Base_MspInit+0xcc>)
 8000e78:	f001 f8a3 	bl	8001fc2 <HAL_DMA_ConfigChannelAttributes>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 8000e82:	f7ff fdd1 	bl	8000a28 <Error_Handler>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40013400 	.word	0x40013400
 8000e94:	46020c00 	.word	0x46020c00
 8000e98:	2000040c 	.word	0x2000040c
 8000e9c:	40020650 	.word	0x40020650

08000ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <HAL_TIM_MspPostInit+0x68>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d11e      	bne.n	8000f00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_TIM_MspPostInit+0x6c>)
 8000ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec8:	4a10      	ldr	r2, [pc, #64]	@ (8000f0c <HAL_TIM_MspPostInit+0x6c>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <HAL_TIM_MspPostInit+0x6c>)
 8000ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ADC_CLK_DVC_Pin;
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CLK_DVC_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <HAL_TIM_MspPostInit+0x70>)
 8000efc:	f001 fb1e 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40013400 	.word	0x40013400
 8000f0c:	46020c00 	.word	0x46020c00
 8000f10:	42020800 	.word	0x42020800

08000f14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0bc      	sub	sp, #240	@ 0xf0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	22c0      	movs	r2, #192	@ 0xc0
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00a fd01 	bl	800b93c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8001030 <HAL_PCD_MspInit+0x11c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d171      	bne.n	8001028 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f44:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 ff06 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000f66:	f7ff fd5f 	bl	8000a28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b32      	ldr	r3, [pc, #200]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f70:	4a30      	ldr	r2, [pc, #192]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f88:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fac:	4619      	mov	r1, r3
 8000fae:	4822      	ldr	r0, [pc, #136]	@ (8001038 <HAL_PCD_MspInit+0x124>)
 8000fb0:	f001 fac4 	bl	800253c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fba:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd2:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d119      	bne.n	8001014 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fe6:	4a13      	ldr	r2, [pc, #76]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000ff0:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8000ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000ffe:	f003 fc25 	bl	800484c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 8001004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001008:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <HAL_PCD_MspInit+0x120>)
 800100a:	f023 0304 	bic.w	r3, r3, #4
 800100e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001012:	e001      	b.n	8001018 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001014:	f003 fc1a 	bl	800484c <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2049      	movs	r0, #73	@ 0x49
 800101e:	f000 fc67 	bl	80018f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001022:	2049      	movs	r0, #73	@ 0x49
 8001024:	f000 fc7e 	bl	8001924 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001028:	bf00      	nop
 800102a:	37f0      	adds	r7, #240	@ 0xf0
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	42040000 	.word	0x42040000
 8001034:	46020c00 	.word	0x46020c00
 8001038:	42020000 	.word	0x42020000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <NMI_Handler+0x4>

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <MemManage_Handler+0x4>

08001054 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <UsageFault_Handler+0x4>

08001064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f000 fb31 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <OTG_FS_IRQHandler+0x10>)
 80010a2:	f002 f9f4 	bl	800348e <HAL_PCD_IRQHandler>
  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000e348 	.word	0x2000e348

080010b0 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <GPDMA1_Channel12_IRQHandler+0x10>)
 80010b6:	f000 fe23 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000040c 	.word	0x2000040c

080010c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c8:	4b18      	ldr	r3, [pc, #96]	@ (800112c <SystemInit+0x68>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ce:	4a17      	ldr	r2, [pc, #92]	@ (800112c <SystemInit+0x68>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <SystemInit+0x6c>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <SystemInit+0x6c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <SystemInit+0x6c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <SystemInit+0x6c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <SystemInit+0x6c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001130 <SystemInit+0x6c>)
 80010f6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80010fa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80010fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <SystemInit+0x6c>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <SystemInit+0x6c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <SystemInit+0x6c>)
 800110c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001110:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <SystemInit+0x6c>)
 8001114:	2200      	movs	r2, #0
 8001116:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <SystemInit+0x68>)
 800111a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800111e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	46020c00 	.word	0x46020c00

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800116c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001138:	f7ff ffc4 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800113c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800113e:	e003      	b.n	8001148 <LoopCopyDataInit>

08001140 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001142:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001144:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001146:	3104      	adds	r1, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001148:	480a      	ldr	r0, [pc, #40]	@ (8001174 <LoopForever+0xa>)
	ldr	r3, =_edata
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <LoopForever+0xe>)
	adds	r2, r0, r1
 800114c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800114e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001150:	d3f6      	bcc.n	8001140 <CopyDataInit>
	ldr	r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001154:	e002      	b.n	800115c <LoopFillZerobss>

08001156 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001156:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <LoopForever+0x16>)
	cmp	r2, r3
 800115e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001160:	d3f9      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f00a fbf3 	bl	800b94c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff f887 	bl	8000278 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800116c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001170:	0800bacc 	.word	0x0800bacc
	ldr	r0, =_sdata
 8001174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001178:	200001db 	.word	0x200001db
	ldr	r2, =_sbss
 800117c:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001180:	2000ea4d 	.word	0x2000ea4d

08001184 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_IRQHandler>
	...

08001188 <set_adc_sampling_freq>:
 */

#include "main.h"
#include "device_constants.h"

void set_adc_sampling_freq(uint32_t sample_freq){
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	uint32_t sample_freq_div;
	sample_freq_div = 160000000UL / sample_freq;
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <set_adc_sampling_freq+0x3c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	fbb2 f3f3 	udiv	r3, r2, r3
 8001198:	60fb      	str	r3, [r7, #12]
	TIM8->ARR = sample_freq_div-1;
 800119a:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3b01      	subs	r3, #1
 80011a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM8->CCR1 = TIM8->ARR/2;
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 80011a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a6:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 80011a8:	085b      	lsrs	r3, r3, #1
 80011aa:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM8->CCR2 = TIM8->ARR/2;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <set_adc_sampling_freq+0x40>)
 80011b2:	085b      	lsrs	r3, r3, #1
 80011b4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	09896800 	.word	0x09896800
 80011c8:	40013400 	.word	0x40013400

080011cc <init_register_map>:
 *      Author: User
 */

#include "../Inc/device_registers.h"

void init_register_map(RegisterMap_TypeDef* RegMap){
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e007      	b.n	80011ea <init_register_map+0x1e>
		RegMap->RegisterArray[i].RegData = 0xdeadbeef;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4908      	ldr	r1, [pc, #32]	@ (8001200 <init_register_map+0x34>)
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2bff      	cmp	r3, #255	@ 0xff
 80011ee:	ddf4      	ble.n	80011da <init_register_map+0xe>
	}
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	deadbeef 	.word	0xdeadbeef

08001204 <get_register>:

uint32_t get_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr){
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	return (REG_DATA_MASK & RegMap->RegisterArray[reg_addr].RegData);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <set_register>:

void set_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr, uint32_t data){
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
	RegMap->RegisterArray[reg_addr].RegData = (REG_DATA_MASK & data);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <set_pot_buffer>:
    buffer[5] = (freq_28b >> 14) & 0xFF;
    buffer[6] = 0xC0; buffer[7] = 0x00; // Phase Register 0
    buffer[8] = 0x20; buffer[9] = 0x00; // Exit Reset
}

void set_pot_buffer(uint8_t *buffer, uint32_t cmd, uint32_t value) {
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    buffer[0] = cmd;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	701a      	strb	r2, [r3, #0]
    buffer[1] = value;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3301      	adds	r3, #1
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <config_current_mirror>:
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
	HAL_Delay(100);
	return result;
}

HAL_StatusTypeDef config_current_mirror(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 8001276:	b580      	push	{r7, lr}
 8001278:	b088      	sub	sp, #32
 800127a:	af02      	add	r7, sp, #8
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	460b      	mov	r3, r1
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 8001284:	8979      	ldrh	r1, [r7, #10]
 8001286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2302      	movs	r3, #2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f001 fbdf 	bl	8002a54 <HAL_I2C_Master_Transmit>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 800129a:	2064      	movs	r0, #100	@ 0x64
 800129c:	f000 fa4c 	bl	8001738 <HAL_Delay>
	return result;
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <dvc_exec_msr_dc_resistance_2p>:
uint8_t curr_mrr_i2c_tx_buf[] = {0,100};

extern RegisterMap_TypeDef device_registers;
extern SwitchNetwork_TypeDef device_switch_network;

void dvc_exec_msr_dc_resistance_2p(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
//	set_ad9833_dds_buffer(volt_src_dds1_spi_tx_buf,0x10C7);
//	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,100);
//	set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,110);
	set_pot_buffer(curr_mrr_i2c_tx_buf,DVC_POT_AD5245_WP_WR_CMD,150);
 80012b0:	2296      	movs	r2, #150	@ 0x96
 80012b2:	2100      	movs	r1, #0
 80012b4:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <dvc_exec_msr_dc_resistance_2p+0x1c>)
 80012b6:	f7ff ffc9 	bl	800124c <set_pot_buffer>
//	result = config_volt_src_gain(&hi2c2,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
//	result = config_volt_src_offset(&hi2c2,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
//
//	result = config_dds_freq(&hspi1,volt_src_dds1_spi_tx_buf);

	config_current_mirror(&hi2c2,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
 80012ba:	4a03      	ldr	r2, [pc, #12]	@ (80012c8 <dvc_exec_msr_dc_resistance_2p+0x1c>)
 80012bc:	2158      	movs	r1, #88	@ 0x58
 80012be:	4803      	ldr	r0, [pc, #12]	@ (80012cc <dvc_exec_msr_dc_resistance_2p+0x20>)
 80012c0:	f7ff ffd9 	bl	8001276 <config_current_mirror>
//	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
//	set_switch_network(&device_switch_network);
//	HAL_Delay(1000);
//	clear_switch_network(&device_switch_network);
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000004 	.word	0x20000004
 80012cc:	200001f8 	.word	0x200001f8

080012d0 <dvc_exec_msr_current_voltage>:

void dvc_exec_msr_current_voltage(void){
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <dvc_exec_msr_capacitance_voltage_2p>:

void dvc_exec_msr_capacitance_voltage_2p(void){
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <dvc_exec_msr_impedance_spectroscopy_2p>:

void dvc_exec_msr_impedance_spectroscopy_2p(void){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <dvc_exec_msr_transfer_characteristics>:

void dvc_exec_msr_transfer_characteristics(void){
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <dvc_exec_msr_output_characteristics>:

void dvc_exec_msr_output_characteristics(void){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <dvc_exec_msr_capacitance_voltage_3p>:

void dvc_exec_msr_capacitance_voltage_3p(void){
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <dvc_exec_msr_electrochemical>:

void dvc_exec_msr_electrochemical(void){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <dvc_exec_msr_low_resistance>:

void dvc_exec_msr_low_resistance(void){
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <dvc_exec_msr_dc_resistance_4p>:

void dvc_exec_msr_dc_resistance_4p(void){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <dvc_exec_msr_impedance_spectroscopy_4p>:

void dvc_exec_msr_impedance_spectroscopy_4p(void){
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <run_device>:
uint8_t spi_tx_buf_dac_2_freq[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

RegisterMap_TypeDef device_registers;
SwitchNetwork_TypeDef device_switch_network;

void run_device(){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	MeasurementCfg_Type measurement_type = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	70fb      	strb	r3, [r7, #3]

	init_register_map(&device_registers);
 8001366:	4840      	ldr	r0, [pc, #256]	@ (8001468 <run_device+0x10c>)
 8001368:	f7ff ff30 	bl	80011cc <init_register_map>
	init_switch_network(&device_switch_network);
 800136c:	483f      	ldr	r0, [pc, #252]	@ (800146c <run_device+0x110>)
 800136e:	f000 f887 	bl	8001480 <init_switch_network>
	clear_switch_network(&device_switch_network);
 8001372:	483e      	ldr	r0, [pc, #248]	@ (800146c <run_device+0x110>)
 8001374:	f000 f8dc 	bl	8001530 <clear_switch_network>
	set_adc_sampling_freq(10000000UL);
 8001378:	483d      	ldr	r0, [pc, #244]	@ (8001470 <run_device+0x114>)
 800137a:	f7ff ff05 	bl	8001188 <set_adc_sampling_freq>
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e014      	b.n	80013ae <run_device+0x52>
		adc_samples_1[i] = 0xdead;
 8001384:	4a3b      	ldr	r2, [pc, #236]	@ (8001474 <run_device+0x118>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 800138c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_2[i] = 0xdead;
 8001390:	4a39      	ldr	r2, [pc, #228]	@ (8001478 <run_device+0x11c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 8001398:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_3[i] = 0xdead;
 800139c:	4a37      	ldr	r2, [pc, #220]	@ (800147c <run_device+0x120>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 80013a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3301      	adds	r3, #1
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013b4:	dbe6      	blt.n	8001384 <run_device+0x28>
//			for(int i = 0; i < 500; i++){
//				CDC_Transmit_FS(&dmaValCheck[i],sizeof(dmaValCheck[i]));
//				HAL_Delay(100);
//			}
//		}
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 80013b6:	2101      	movs	r1, #1
 80013b8:	482b      	ldr	r0, [pc, #172]	@ (8001468 <run_device+0x10c>)
 80013ba:	f7ff ff23 	bl	8001204 <get_register>
 80013be:	4603      	mov	r3, r0
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f6      	beq.n	80013b6 <run_device+0x5a>
			measurement_type = (get_register(&device_registers,DVC_MEASUREMENT_CONFIG)>>6) & 0xF;
 80013c8:	2101      	movs	r1, #1
 80013ca:	4827      	ldr	r0, [pc, #156]	@ (8001468 <run_device+0x10c>)
 80013cc:	f7ff ff1a 	bl	8001204 <get_register>
 80013d0:	4603      	mov	r3, r0
 80013d2:	099b      	lsrs	r3, r3, #6
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	70fb      	strb	r3, [r7, #3]
			switch (measurement_type) {
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	3b01      	subs	r3, #1
 80013e0:	2b0a      	cmp	r3, #10
 80013e2:	d83f      	bhi.n	8001464 <run_device+0x108>
 80013e4:	a201      	add	r2, pc, #4	@ (adr r2, 80013ec <run_device+0x90>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	08001419 	.word	0x08001419
 80013f0:	08001429 	.word	0x08001429
 80013f4:	0800142f 	.word	0x0800142f
 80013f8:	08001435 	.word	0x08001435
 80013fc:	0800143b 	.word	0x0800143b
 8001400:	08001441 	.word	0x08001441
 8001404:	08001447 	.word	0x08001447
 8001408:	0800144d 	.word	0x0800144d
 800140c:	08001453 	.word	0x08001453
 8001410:	08001459 	.word	0x08001459
 8001414:	0800145f 	.word	0x0800145f
				case DC_RESISTANCE:
					dvc_exec_msr_dc_resistance_2p();
 8001418:	f7ff ff48 	bl	80012ac <dvc_exec_msr_dc_resistance_2p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 800141c:	2200      	movs	r2, #0
 800141e:	2101      	movs	r1, #1
 8001420:	4811      	ldr	r0, [pc, #68]	@ (8001468 <run_device+0x10c>)
 8001422:	f7ff ff00 	bl	8001226 <set_register>
					break;
 8001426:	e01e      	b.n	8001466 <run_device+0x10a>
				case CURRENT_VOLTAGE:
					dvc_exec_msr_current_voltage();
 8001428:	f7ff ff52 	bl	80012d0 <dvc_exec_msr_current_voltage>
					break;
 800142c:	e01b      	b.n	8001466 <run_device+0x10a>
				case CAPACITANCE_VOLTAGE_2P:
					dvc_exec_msr_capacitance_voltage_2p();
 800142e:	f7ff ff56 	bl	80012de <dvc_exec_msr_capacitance_voltage_2p>
					break;
 8001432:	e018      	b.n	8001466 <run_device+0x10a>
				case IMPEDANCE_SPECTROSCOPY_2P:
					dvc_exec_msr_impedance_spectroscopy_2p();
 8001434:	f7ff ff5a 	bl	80012ec <dvc_exec_msr_impedance_spectroscopy_2p>
					break;
 8001438:	e015      	b.n	8001466 <run_device+0x10a>
				case TRANSFER_CHARACTERISTICS:
					dvc_exec_msr_transfer_characteristics();
 800143a:	f7ff ff5e 	bl	80012fa <dvc_exec_msr_transfer_characteristics>
					break;
 800143e:	e012      	b.n	8001466 <run_device+0x10a>
				case OUTPUT_CHARACTERISTICS:
					dvc_exec_msr_output_characteristics();
 8001440:	f7ff ff62 	bl	8001308 <dvc_exec_msr_output_characteristics>
					break;
 8001444:	e00f      	b.n	8001466 <run_device+0x10a>
				case CAPACITANCE_VOLTAGE_3P:
					dvc_exec_msr_capacitance_voltage_3p();
 8001446:	f7ff ff66 	bl	8001316 <dvc_exec_msr_capacitance_voltage_3p>
					break;
 800144a:	e00c      	b.n	8001466 <run_device+0x10a>
				case ELECTROCHEMICAL:
					dvc_exec_msr_electrochemical();
 800144c:	f7ff ff6a 	bl	8001324 <dvc_exec_msr_electrochemical>
					break;
 8001450:	e009      	b.n	8001466 <run_device+0x10a>
				case LOW_RESISTANCE:
					dvc_exec_msr_low_resistance();
 8001452:	f7ff ff6e 	bl	8001332 <dvc_exec_msr_low_resistance>
					break;
 8001456:	e006      	b.n	8001466 <run_device+0x10a>
				case PROBE_RESISTANCE:
					dvc_exec_msr_dc_resistance_4p();
 8001458:	f7ff ff72 	bl	8001340 <dvc_exec_msr_dc_resistance_4p>
					break;
 800145c:	e003      	b.n	8001466 <run_device+0x10a>
				case IMPEDANCE_SPECTROSCOPY_4P:
					dvc_exec_msr_impedance_spectroscopy_4p();
 800145e:	f7ff ff76 	bl	800134e <dvc_exec_msr_impedance_spectroscopy_4p>
					break;
 8001462:	e000      	b.n	8001466 <run_device+0x10a>
				default:
					break;
 8001464:	bf00      	nop
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 8001466:	e7a6      	b.n	80013b6 <run_device+0x5a>
 8001468:	2000c968 	.word	0x2000c968
 800146c:	2000cd68 	.word	0x2000cd68
 8001470:	00989680 	.word	0x00989680
 8001474:	20000968 	.word	0x20000968
 8001478:	20004968 	.word	0x20004968
 800147c:	20008968 	.word	0x20008968

08001480 <init_switch_network>:
        ,SWNT_CTRL_09_Pin,SWNT_CTRL_10_Pin,SWNT_CTRL_11_Pin,SWNT_CTRL_12_Pin
        ,SWNT_CTRL_13_Pin,SWNT_CTRL_14_Pin,SWNT_CTRL_15_Pin,SWNT_CTRL_16_Pin
		,SWNT_CTRL_17_Pin,SWNT_CTRL_18_Pin,SWNT_CTRL_19_Pin,SWNT_CTRL_20_Pin
		,SWNT_CTRL_21_Pin};

void init_switch_network(SwitchNetwork_TypeDef* switch_network){
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001488:	2301      	movs	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	e040      	b.n	8001510 <init_switch_network+0x90>
		switch_network->Relays[i].RelayId = i;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	b2d8      	uxtb	r0, r3
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	4602      	mov	r2, r0
 80014a2:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].AssociatedProbe = 0;
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	3301      	adds	r3, #1
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	3302      	adds	r3, #2
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].AssociatedGPIOPort = (i < 17) ? GPIOG : GPIOD;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	dc01      	bgt.n	80014d6 <init_switch_network+0x56>
 80014d2:	4914      	ldr	r1, [pc, #80]	@ (8001524 <init_switch_network+0xa4>)
 80014d4:	e000      	b.n	80014d8 <init_switch_network+0x58>
 80014d6:	4914      	ldr	r1, [pc, #80]	@ (8001528 <init_switch_network+0xa8>)
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4403      	add	r3, r0
 80014e6:	3304      	adds	r3, #4
 80014e8:	6019      	str	r1, [r3, #0]
		switch_network->Relays[i].AssociatedGPIO = swnt_pin_list[i-1];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4a0f      	ldr	r2, [pc, #60]	@ (800152c <init_switch_network+0xac>)
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	b298      	uxth	r0, r3
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3308      	adds	r3, #8
 8001506:	4602      	mov	r2, r0
 8001508:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3301      	adds	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b15      	cmp	r3, #21
 8001514:	ddbb      	ble.n	800148e <init_switch_network+0xe>
	}
	return;
 8001516:	bf00      	nop
}
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	42021800 	.word	0x42021800
 8001528:	42020c00 	.word	0x42020c00
 800152c:	20000008 	.word	0x20000008

08001530 <clear_switch_network>:

void clear_switch_network(SwitchNetwork_TypeDef* switch_network){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001538:	2301      	movs	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e02f      	b.n	800159e <clear_switch_network+0x6e>
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3302      	adds	r3, #2
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(switch_network->Relays[i].AssociatedGPIOPort,
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3304      	adds	r3, #4
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3308      	adds	r3, #8
 8001574:	881c      	ldrh	r4, [r3, #0]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3302      	adds	r3, #2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4621      	mov	r1, r4
 800158c:	f001 f9ae 	bl	80028ec <HAL_GPIO_WritePin>
						  switch_network->Relays[i].AssociatedGPIO,
						  switch_network->Relays[i].RelayState);
		HAL_Delay(300);
 8001590:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001594:	f000 f8d0 	bl	8001738 <HAL_Delay>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b15      	cmp	r3, #21
 80015a2:	ddcc      	ble.n	800153e <clear_switch_network+0xe>
	}
	return;
 80015a4:	bf00      	nop
}
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}

080015ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_Init+0x50>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a11      	ldr	r2, [pc, #68]	@ (80015fc <HAL_Init+0x50>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f98c 	bl	80018da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80015c2:	f004 fa31 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_Init+0x54>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	490c      	ldr	r1, [pc, #48]	@ (8001604 <HAL_Init+0x58>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
 80015d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <HAL_Init+0x5c>)
 80015da:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80015dc:	2004      	movs	r0, #4
 80015de:	f000 f9d1 	bl	8001984 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e2:	200f      	movs	r0, #15
 80015e4:	f000 f812 	bl	800160c <HAL_InitTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e002      	b.n	80015f8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015f2:	f7ff fa1f 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40022000 	.word	0x40022000
 8001600:	46020c00 	.word	0x46020c00
 8001604:	0800b9f4 	.word	0x0800b9f4
 8001608:	20000000 	.word	0x20000000

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001618:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <HAL_InitTick+0xdc>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e05c      	b.n	80016de <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001624:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <HAL_InitTick+0xe0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b04      	cmp	r3, #4
 800162e:	d10c      	bne.n	800164a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001630:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <HAL_InitTick+0xe4>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b2c      	ldr	r3, [pc, #176]	@ (80016e8 <HAL_InitTick+0xdc>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e037      	b.n	80016ba <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800164a:	f000 f9f3 	bl	8001a34 <HAL_SYSTICK_GetCLKSourceConfig>
 800164e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d023      	beq.n	800169e <HAL_InitTick+0x92>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d82d      	bhi.n	80016b8 <HAL_InitTick+0xac>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_InitTick+0x5e>
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d00d      	beq.n	8001684 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001668:	e026      	b.n	80016b8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800166a:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <HAL_InitTick+0xe4>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <HAL_InitTick+0xdc>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4619      	mov	r1, r3
 8001674:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001678:	fbb3 f3f1 	udiv	r3, r3, r1
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	60fb      	str	r3, [r7, #12]
        break;
 8001682:	e01a      	b.n	80016ba <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001684:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_InitTick+0xdc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001692:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	60fb      	str	r3, [r7, #12]
        break;
 800169c:	e00d      	b.n	80016ba <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_InitTick+0xdc>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	60fb      	str	r3, [r7, #12]
        break;
 80016b6:	e000      	b.n	80016ba <HAL_InitTick+0xae>
        break;
 80016b8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f940 	bl	8001940 <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e009      	b.n	80016de <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ca:	2200      	movs	r2, #0
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	f04f 30ff 	mov.w	r0, #4294967295
 80016d2:	f000 f90d 	bl	80018f0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80016d6:	4a07      	ldr	r2, [pc, #28]	@ (80016f4 <HAL_InitTick+0xe8>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000060 	.word	0x20000060
 80016ec:	e000e010 	.word	0xe000e010
 80016f0:	20000000 	.word	0x20000000
 80016f4:	2000005c 	.word	0x2000005c

080016f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000060 	.word	0x20000060
 800171c:	2000ce74 	.word	0x2000ce74

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000ce74 	.word	0x2000ce74

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000060 	.word	0x20000060

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	@ (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	@ (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	@ (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	@ 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	@ 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff4c 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018fe:	f7ff ff63 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001902:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	6978      	ldr	r0, [r7, #20]
 800190a:	f7ff ffb3 	bl	8001874 <NVIC_EncodePriority>
 800190e:	4602      	mov	r2, r0
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff82 	bl	8001820 <__NVIC_SetPriority>
}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff56 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001950:	d301      	bcc.n	8001956 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001952:	2301      	movs	r3, #1
 8001954:	e00d      	b.n	8001972 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <HAL_SYSTICK_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800195e:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <HAL_SYSTICK_Config+0x40>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_SYSTICK_Config+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <HAL_SYSTICK_Config+0x40>)
 800196a:	f043 0303 	orr.w	r3, r3, #3
 800196e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b04      	cmp	r3, #4
 8001990:	d844      	bhi.n	8001a1c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001992:	a201      	add	r2, pc, #4	@ (adr r2, 8001998 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001998:	080019bb 	.word	0x080019bb
 800199c:	080019d9 	.word	0x080019d9
 80019a0:	080019fb 	.word	0x080019fb
 80019a4:	08001a1d 	.word	0x08001a1d
 80019a8:	080019ad 	.word	0x080019ad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80019ac:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6013      	str	r3, [r2, #0]
      break;
 80019b8:	e031      	b.n	8001a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1b      	ldr	r2, [pc, #108]	@ (8001a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80019c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019cc:	4a18      	ldr	r2, [pc, #96]	@ (8001a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80019ce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80019d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80019d6:	e022      	b.n	8001a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80019d8:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019de:	f023 0304 	bic.w	r3, r3, #4
 80019e2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80019ee:	4a10      	ldr	r2, [pc, #64]	@ (8001a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80019f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80019f8:	e011      	b.n	8001a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a10:	4a07      	ldr	r2, [pc, #28]	@ (8001a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a1a:	e000      	b.n	8001a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001a1c:	bf00      	nop
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010
 8001a30:	46020c00 	.word	0x46020c00

08001a34 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001a46:	2304      	movs	r3, #4
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	e021      	b.n	8001a90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001a4c:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a52:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001a56:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001a5e:	d011      	beq.n	8001a84 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001a66:	d810      	bhi.n	8001a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a74:	d003      	beq.n	8001a7e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001a76:	e008      	b.n	8001a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
        break;
 8001a7c:	e008      	b.n	8001a90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	607b      	str	r3, [r7, #4]
        break;
 8001a82:	e005      	b.n	8001a90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001a84:	2302      	movs	r3, #2
 8001a86:	607b      	str	r3, [r7, #4]
        break;
 8001a88:	e002      	b.n	8001a90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
        break;
 8001a8e:	bf00      	nop
    }
  }
  return systick_source;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010
 8001aa4:	46020c00 	.word	0x46020c00

08001aa8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff fe36 	bl	8001720 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0db      	b.n	8001c78 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a6e      	ldr	r2, [pc, #440]	@ (8001c80 <HAL_DMA_Init+0x1d8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	f000 809f 	beq.w	8001c0a <HAL_DMA_Init+0x162>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a6c      	ldr	r2, [pc, #432]	@ (8001c84 <HAL_DMA_Init+0x1dc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	f000 8099 	beq.w	8001c0a <HAL_DMA_Init+0x162>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6a      	ldr	r2, [pc, #424]	@ (8001c88 <HAL_DMA_Init+0x1e0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	f000 8093 	beq.w	8001c0a <HAL_DMA_Init+0x162>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a68      	ldr	r2, [pc, #416]	@ (8001c8c <HAL_DMA_Init+0x1e4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	f000 808d 	beq.w	8001c0a <HAL_DMA_Init+0x162>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a66      	ldr	r2, [pc, #408]	@ (8001c90 <HAL_DMA_Init+0x1e8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	f000 8087 	beq.w	8001c0a <HAL_DMA_Init+0x162>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a64      	ldr	r2, [pc, #400]	@ (8001c94 <HAL_DMA_Init+0x1ec>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	f000 8081 	beq.w	8001c0a <HAL_DMA_Init+0x162>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a62      	ldr	r2, [pc, #392]	@ (8001c98 <HAL_DMA_Init+0x1f0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d07b      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a61      	ldr	r2, [pc, #388]	@ (8001c9c <HAL_DMA_Init+0x1f4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d076      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5f      	ldr	r2, [pc, #380]	@ (8001ca0 <HAL_DMA_Init+0x1f8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d071      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ca4 <HAL_DMA_Init+0x1fc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d06c      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca8 <HAL_DMA_Init+0x200>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d067      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cac <HAL_DMA_Init+0x204>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d062      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a59      	ldr	r2, [pc, #356]	@ (8001cb0 <HAL_DMA_Init+0x208>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d05d      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a58      	ldr	r2, [pc, #352]	@ (8001cb4 <HAL_DMA_Init+0x20c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d058      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a56      	ldr	r2, [pc, #344]	@ (8001cb8 <HAL_DMA_Init+0x210>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d053      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a55      	ldr	r2, [pc, #340]	@ (8001cbc <HAL_DMA_Init+0x214>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d04e      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a53      	ldr	r2, [pc, #332]	@ (8001cc0 <HAL_DMA_Init+0x218>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d049      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a52      	ldr	r2, [pc, #328]	@ (8001cc4 <HAL_DMA_Init+0x21c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d044      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a50      	ldr	r2, [pc, #320]	@ (8001cc8 <HAL_DMA_Init+0x220>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d03f      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a4f      	ldr	r2, [pc, #316]	@ (8001ccc <HAL_DMA_Init+0x224>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d03a      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a4d      	ldr	r2, [pc, #308]	@ (8001cd0 <HAL_DMA_Init+0x228>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d035      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd4 <HAL_DMA_Init+0x22c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d030      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a4a      	ldr	r2, [pc, #296]	@ (8001cd8 <HAL_DMA_Init+0x230>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d02b      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a49      	ldr	r2, [pc, #292]	@ (8001cdc <HAL_DMA_Init+0x234>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d026      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a47      	ldr	r2, [pc, #284]	@ (8001ce0 <HAL_DMA_Init+0x238>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d021      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a46      	ldr	r2, [pc, #280]	@ (8001ce4 <HAL_DMA_Init+0x23c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d01c      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a44      	ldr	r2, [pc, #272]	@ (8001ce8 <HAL_DMA_Init+0x240>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d017      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a43      	ldr	r2, [pc, #268]	@ (8001cec <HAL_DMA_Init+0x244>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d012      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a41      	ldr	r2, [pc, #260]	@ (8001cf0 <HAL_DMA_Init+0x248>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a40      	ldr	r2, [pc, #256]	@ (8001cf4 <HAL_DMA_Init+0x24c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d008      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a3e      	ldr	r2, [pc, #248]	@ (8001cf8 <HAL_DMA_Init+0x250>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d003      	beq.n	8001c0a <HAL_DMA_Init+0x162>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a3d      	ldr	r2, [pc, #244]	@ (8001cfc <HAL_DMA_Init+0x254>)
 8001c08:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0206 	orr.w	r2, r2, #6
 8001c28:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001c2a:	e00f      	b.n	8001c4c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001c2c:	f7ff fd78 	bl	8001720 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d908      	bls.n	8001c4c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e015      	b.n	8001c78 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1e8      	bne.n	8001c2c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f9ee 	bl	800203c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40020050 	.word	0x40020050
 8001c84:	50020050 	.word	0x50020050
 8001c88:	400200d0 	.word	0x400200d0
 8001c8c:	500200d0 	.word	0x500200d0
 8001c90:	40020150 	.word	0x40020150
 8001c94:	50020150 	.word	0x50020150
 8001c98:	400201d0 	.word	0x400201d0
 8001c9c:	500201d0 	.word	0x500201d0
 8001ca0:	40020250 	.word	0x40020250
 8001ca4:	50020250 	.word	0x50020250
 8001ca8:	400202d0 	.word	0x400202d0
 8001cac:	500202d0 	.word	0x500202d0
 8001cb0:	40020350 	.word	0x40020350
 8001cb4:	50020350 	.word	0x50020350
 8001cb8:	400203d0 	.word	0x400203d0
 8001cbc:	500203d0 	.word	0x500203d0
 8001cc0:	40020450 	.word	0x40020450
 8001cc4:	50020450 	.word	0x50020450
 8001cc8:	400204d0 	.word	0x400204d0
 8001ccc:	500204d0 	.word	0x500204d0
 8001cd0:	40020550 	.word	0x40020550
 8001cd4:	50020550 	.word	0x50020550
 8001cd8:	400205d0 	.word	0x400205d0
 8001cdc:	500205d0 	.word	0x500205d0
 8001ce0:	40020650 	.word	0x40020650
 8001ce4:	50020650 	.word	0x50020650
 8001ce8:	400206d0 	.word	0x400206d0
 8001cec:	500206d0 	.word	0x500206d0
 8001cf0:	40020750 	.word	0x40020750
 8001cf4:	50020750 	.word	0x50020750
 8001cf8:	400207d0 	.word	0x400207d0
 8001cfc:	500207d0 	.word	0x500207d0

08001d00 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001d10:	f023 030f 	bic.w	r3, r3, #15
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1e:	3b50      	subs	r3, #80	@ 0x50
 8001d20:	09db      	lsrs	r3, r3, #7
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2201      	movs	r2, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 813b 	beq.w	8001fb6 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d011      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00a      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d64:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d011      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d96:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	f043 0202 	orr.w	r2, r3, #2
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d011      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dc8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	f043 0204 	orr.w	r2, r3, #4
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d011      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dfa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	f043 0208 	orr.w	r2, r3, #8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d013      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00c      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e2c:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d04c      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d045      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e62:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d12e      	bne.n	8001ece <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e7e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0202 	orr.w	r2, r2, #2
 8001e8e:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d07a      	beq.n	8001fba <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
        }

        return;
 8001ecc:	e075      	b.n	8001fba <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d039      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d032      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d012      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d116      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d111      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f2e:	2201      	movs	r2, #1
 8001f30:	731a      	strb	r2, [r3, #12]
 8001f32:	e008      	b.n	8001f46 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001f4e:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d025      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0202 	orr.w	r2, r2, #2
 8001f7e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f98:	2201      	movs	r2, #1
 8001f9a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	4798      	blx	r3
 8001fb4:	e002      	b.n	8001fbc <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001fba:	bf00      	nop
    }
  }
}
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e02b      	b.n	800202e <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001fde:	f023 030f 	bic.w	r3, r3, #15
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	3b50      	subs	r3, #80	@ 0x50
 8001fee:	09db      	lsrs	r3, r3, #7
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f003 0311 	and.w	r3, r3, #17
 800200c:	2b11      	cmp	r3, #17
 800200e:	d106      	bne.n	800201e <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	e006      	b.n	800202c <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	430a      	orrs	r2, r1
 800205c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a53      	ldr	r2, [pc, #332]	@ (80021c8 <DMA_Init+0x18c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	f000 80a0 	beq.w	80021c2 <DMA_Init+0x186>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a51      	ldr	r2, [pc, #324]	@ (80021cc <DMA_Init+0x190>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f000 809a 	beq.w	80021c2 <DMA_Init+0x186>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a4f      	ldr	r2, [pc, #316]	@ (80021d0 <DMA_Init+0x194>)
 8002094:	4293      	cmp	r3, r2
 8002096:	f000 8094 	beq.w	80021c2 <DMA_Init+0x186>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a4d      	ldr	r2, [pc, #308]	@ (80021d4 <DMA_Init+0x198>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	f000 808e 	beq.w	80021c2 <DMA_Init+0x186>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a4b      	ldr	r2, [pc, #300]	@ (80021d8 <DMA_Init+0x19c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	f000 8088 	beq.w	80021c2 <DMA_Init+0x186>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a49      	ldr	r2, [pc, #292]	@ (80021dc <DMA_Init+0x1a0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	f000 8082 	beq.w	80021c2 <DMA_Init+0x186>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a47      	ldr	r2, [pc, #284]	@ (80021e0 <DMA_Init+0x1a4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d07c      	beq.n	80021c2 <DMA_Init+0x186>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a45      	ldr	r2, [pc, #276]	@ (80021e4 <DMA_Init+0x1a8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d077      	beq.n	80021c2 <DMA_Init+0x186>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a44      	ldr	r2, [pc, #272]	@ (80021e8 <DMA_Init+0x1ac>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d072      	beq.n	80021c2 <DMA_Init+0x186>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a42      	ldr	r2, [pc, #264]	@ (80021ec <DMA_Init+0x1b0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d06d      	beq.n	80021c2 <DMA_Init+0x186>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a41      	ldr	r2, [pc, #260]	@ (80021f0 <DMA_Init+0x1b4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d068      	beq.n	80021c2 <DMA_Init+0x186>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a3f      	ldr	r2, [pc, #252]	@ (80021f4 <DMA_Init+0x1b8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d063      	beq.n	80021c2 <DMA_Init+0x186>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a3e      	ldr	r2, [pc, #248]	@ (80021f8 <DMA_Init+0x1bc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d05e      	beq.n	80021c2 <DMA_Init+0x186>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a3c      	ldr	r2, [pc, #240]	@ (80021fc <DMA_Init+0x1c0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d059      	beq.n	80021c2 <DMA_Init+0x186>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a3b      	ldr	r2, [pc, #236]	@ (8002200 <DMA_Init+0x1c4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d054      	beq.n	80021c2 <DMA_Init+0x186>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a39      	ldr	r2, [pc, #228]	@ (8002204 <DMA_Init+0x1c8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d04f      	beq.n	80021c2 <DMA_Init+0x186>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a38      	ldr	r2, [pc, #224]	@ (8002208 <DMA_Init+0x1cc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d04a      	beq.n	80021c2 <DMA_Init+0x186>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a36      	ldr	r2, [pc, #216]	@ (800220c <DMA_Init+0x1d0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d045      	beq.n	80021c2 <DMA_Init+0x186>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a35      	ldr	r2, [pc, #212]	@ (8002210 <DMA_Init+0x1d4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d040      	beq.n	80021c2 <DMA_Init+0x186>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a33      	ldr	r2, [pc, #204]	@ (8002214 <DMA_Init+0x1d8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d03b      	beq.n	80021c2 <DMA_Init+0x186>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a32      	ldr	r2, [pc, #200]	@ (8002218 <DMA_Init+0x1dc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d036      	beq.n	80021c2 <DMA_Init+0x186>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a30      	ldr	r2, [pc, #192]	@ (800221c <DMA_Init+0x1e0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d031      	beq.n	80021c2 <DMA_Init+0x186>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2f      	ldr	r2, [pc, #188]	@ (8002220 <DMA_Init+0x1e4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d02c      	beq.n	80021c2 <DMA_Init+0x186>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2d      	ldr	r2, [pc, #180]	@ (8002224 <DMA_Init+0x1e8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d027      	beq.n	80021c2 <DMA_Init+0x186>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2c      	ldr	r2, [pc, #176]	@ (8002228 <DMA_Init+0x1ec>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d022      	beq.n	80021c2 <DMA_Init+0x186>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <DMA_Init+0x1f0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01d      	beq.n	80021c2 <DMA_Init+0x186>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a29      	ldr	r2, [pc, #164]	@ (8002230 <DMA_Init+0x1f4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d018      	beq.n	80021c2 <DMA_Init+0x186>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a27      	ldr	r2, [pc, #156]	@ (8002234 <DMA_Init+0x1f8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <DMA_Init+0x186>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a26      	ldr	r2, [pc, #152]	@ (8002238 <DMA_Init+0x1fc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00e      	beq.n	80021c2 <DMA_Init+0x186>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a24      	ldr	r2, [pc, #144]	@ (800223c <DMA_Init+0x200>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d009      	beq.n	80021c2 <DMA_Init+0x186>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a23      	ldr	r2, [pc, #140]	@ (8002240 <DMA_Init+0x204>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d004      	beq.n	80021c2 <DMA_Init+0x186>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a21      	ldr	r2, [pc, #132]	@ (8002244 <DMA_Init+0x208>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d142      	bne.n	8002248 <DMA_Init+0x20c>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e041      	b.n	800224a <DMA_Init+0x20e>
 80021c6:	bf00      	nop
 80021c8:	40020050 	.word	0x40020050
 80021cc:	50020050 	.word	0x50020050
 80021d0:	400200d0 	.word	0x400200d0
 80021d4:	500200d0 	.word	0x500200d0
 80021d8:	40020150 	.word	0x40020150
 80021dc:	50020150 	.word	0x50020150
 80021e0:	400201d0 	.word	0x400201d0
 80021e4:	500201d0 	.word	0x500201d0
 80021e8:	40020250 	.word	0x40020250
 80021ec:	50020250 	.word	0x50020250
 80021f0:	400202d0 	.word	0x400202d0
 80021f4:	500202d0 	.word	0x500202d0
 80021f8:	40020350 	.word	0x40020350
 80021fc:	50020350 	.word	0x50020350
 8002200:	400203d0 	.word	0x400203d0
 8002204:	500203d0 	.word	0x500203d0
 8002208:	40020450 	.word	0x40020450
 800220c:	50020450 	.word	0x50020450
 8002210:	400204d0 	.word	0x400204d0
 8002214:	500204d0 	.word	0x500204d0
 8002218:	40020550 	.word	0x40020550
 800221c:	50020550 	.word	0x50020550
 8002220:	400205d0 	.word	0x400205d0
 8002224:	500205d0 	.word	0x500205d0
 8002228:	40020650 	.word	0x40020650
 800222c:	50020650 	.word	0x50020650
 8002230:	400206d0 	.word	0x400206d0
 8002234:	500206d0 	.word	0x500206d0
 8002238:	40020750 	.word	0x40020750
 800223c:	50020750 	.word	0x50020750
 8002240:	400207d0 	.word	0x400207d0
 8002244:	500207d0 	.word	0x500207d0
 8002248:	2300      	movs	r3, #0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d012      	beq.n	8002274 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	3b01      	subs	r3, #1
 8002258:	051b      	lsls	r3, r3, #20
 800225a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800225e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	3b01      	subs	r3, #1
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800226c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	430a      	orrs	r2, r1
 8002286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a6:	f040 80b0 	bne.w	800240a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a82      	ldr	r2, [pc, #520]	@ (80024b8 <DMA_Init+0x47c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	f000 80a0 	beq.w	80023f6 <DMA_Init+0x3ba>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a80      	ldr	r2, [pc, #512]	@ (80024bc <DMA_Init+0x480>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	f000 809a 	beq.w	80023f6 <DMA_Init+0x3ba>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7e      	ldr	r2, [pc, #504]	@ (80024c0 <DMA_Init+0x484>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	f000 8094 	beq.w	80023f6 <DMA_Init+0x3ba>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7c      	ldr	r2, [pc, #496]	@ (80024c4 <DMA_Init+0x488>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	f000 808e 	beq.w	80023f6 <DMA_Init+0x3ba>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7a      	ldr	r2, [pc, #488]	@ (80024c8 <DMA_Init+0x48c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	f000 8088 	beq.w	80023f6 <DMA_Init+0x3ba>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a78      	ldr	r2, [pc, #480]	@ (80024cc <DMA_Init+0x490>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	f000 8082 	beq.w	80023f6 <DMA_Init+0x3ba>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a76      	ldr	r2, [pc, #472]	@ (80024d0 <DMA_Init+0x494>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d07c      	beq.n	80023f6 <DMA_Init+0x3ba>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a74      	ldr	r2, [pc, #464]	@ (80024d4 <DMA_Init+0x498>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d077      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a73      	ldr	r2, [pc, #460]	@ (80024d8 <DMA_Init+0x49c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d072      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a71      	ldr	r2, [pc, #452]	@ (80024dc <DMA_Init+0x4a0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d06d      	beq.n	80023f6 <DMA_Init+0x3ba>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a70      	ldr	r2, [pc, #448]	@ (80024e0 <DMA_Init+0x4a4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d068      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6e      	ldr	r2, [pc, #440]	@ (80024e4 <DMA_Init+0x4a8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d063      	beq.n	80023f6 <DMA_Init+0x3ba>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6d      	ldr	r2, [pc, #436]	@ (80024e8 <DMA_Init+0x4ac>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d05e      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6b      	ldr	r2, [pc, #428]	@ (80024ec <DMA_Init+0x4b0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d059      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6a      	ldr	r2, [pc, #424]	@ (80024f0 <DMA_Init+0x4b4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d054      	beq.n	80023f6 <DMA_Init+0x3ba>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a68      	ldr	r2, [pc, #416]	@ (80024f4 <DMA_Init+0x4b8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d04f      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a67      	ldr	r2, [pc, #412]	@ (80024f8 <DMA_Init+0x4bc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04a      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a65      	ldr	r2, [pc, #404]	@ (80024fc <DMA_Init+0x4c0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d045      	beq.n	80023f6 <DMA_Init+0x3ba>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a64      	ldr	r2, [pc, #400]	@ (8002500 <DMA_Init+0x4c4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d040      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a62      	ldr	r2, [pc, #392]	@ (8002504 <DMA_Init+0x4c8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d03b      	beq.n	80023f6 <DMA_Init+0x3ba>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a61      	ldr	r2, [pc, #388]	@ (8002508 <DMA_Init+0x4cc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d036      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5f      	ldr	r2, [pc, #380]	@ (800250c <DMA_Init+0x4d0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d031      	beq.n	80023f6 <DMA_Init+0x3ba>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a5e      	ldr	r2, [pc, #376]	@ (8002510 <DMA_Init+0x4d4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d02c      	beq.n	80023f6 <DMA_Init+0x3ba>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a5c      	ldr	r2, [pc, #368]	@ (8002514 <DMA_Init+0x4d8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d027      	beq.n	80023f6 <DMA_Init+0x3ba>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002518 <DMA_Init+0x4dc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d022      	beq.n	80023f6 <DMA_Init+0x3ba>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a59      	ldr	r2, [pc, #356]	@ (800251c <DMA_Init+0x4e0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01d      	beq.n	80023f6 <DMA_Init+0x3ba>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a58      	ldr	r2, [pc, #352]	@ (8002520 <DMA_Init+0x4e4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d018      	beq.n	80023f6 <DMA_Init+0x3ba>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a56      	ldr	r2, [pc, #344]	@ (8002524 <DMA_Init+0x4e8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <DMA_Init+0x3ba>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a55      	ldr	r2, [pc, #340]	@ (8002528 <DMA_Init+0x4ec>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00e      	beq.n	80023f6 <DMA_Init+0x3ba>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a53      	ldr	r2, [pc, #332]	@ (800252c <DMA_Init+0x4f0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d009      	beq.n	80023f6 <DMA_Init+0x3ba>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a52      	ldr	r2, [pc, #328]	@ (8002530 <DMA_Init+0x4f4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d004      	beq.n	80023f6 <DMA_Init+0x3ba>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a50      	ldr	r2, [pc, #320]	@ (8002534 <DMA_Init+0x4f8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <DMA_Init+0x3be>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <DMA_Init+0x3c0>
 80023fa:	2300      	movs	r3, #0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e008      	b.n	800241c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002412:	d103      	bne.n	800241c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800241a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002422:	4b45      	ldr	r3, [pc, #276]	@ (8002538 <DMA_Init+0x4fc>)
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	430b      	orrs	r3, r1
 800242e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a36      	ldr	r2, [pc, #216]	@ (8002518 <DMA_Init+0x4dc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d022      	beq.n	8002488 <DMA_Init+0x44c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a35      	ldr	r2, [pc, #212]	@ (800251c <DMA_Init+0x4e0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d01d      	beq.n	8002488 <DMA_Init+0x44c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a33      	ldr	r2, [pc, #204]	@ (8002520 <DMA_Init+0x4e4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d018      	beq.n	8002488 <DMA_Init+0x44c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <DMA_Init+0x4e8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <DMA_Init+0x44c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a30      	ldr	r2, [pc, #192]	@ (8002528 <DMA_Init+0x4ec>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00e      	beq.n	8002488 <DMA_Init+0x44c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2f      	ldr	r2, [pc, #188]	@ (800252c <DMA_Init+0x4f0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d009      	beq.n	8002488 <DMA_Init+0x44c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2d      	ldr	r2, [pc, #180]	@ (8002530 <DMA_Init+0x4f4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <DMA_Init+0x44c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2c      	ldr	r2, [pc, #176]	@ (8002534 <DMA_Init+0x4f8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <DMA_Init+0x450>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <DMA_Init+0x452>
 800248c:	2300      	movs	r3, #0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40020050 	.word	0x40020050
 80024bc:	50020050 	.word	0x50020050
 80024c0:	400200d0 	.word	0x400200d0
 80024c4:	500200d0 	.word	0x500200d0
 80024c8:	40020150 	.word	0x40020150
 80024cc:	50020150 	.word	0x50020150
 80024d0:	400201d0 	.word	0x400201d0
 80024d4:	500201d0 	.word	0x500201d0
 80024d8:	40020250 	.word	0x40020250
 80024dc:	50020250 	.word	0x50020250
 80024e0:	400202d0 	.word	0x400202d0
 80024e4:	500202d0 	.word	0x500202d0
 80024e8:	40020350 	.word	0x40020350
 80024ec:	50020350 	.word	0x50020350
 80024f0:	400203d0 	.word	0x400203d0
 80024f4:	500203d0 	.word	0x500203d0
 80024f8:	40020450 	.word	0x40020450
 80024fc:	50020450 	.word	0x50020450
 8002500:	400204d0 	.word	0x400204d0
 8002504:	500204d0 	.word	0x500204d0
 8002508:	40020550 	.word	0x40020550
 800250c:	50020550 	.word	0x50020550
 8002510:	400205d0 	.word	0x400205d0
 8002514:	500205d0 	.word	0x500205d0
 8002518:	40020650 	.word	0x40020650
 800251c:	50020650 	.word	0x50020650
 8002520:	400206d0 	.word	0x400206d0
 8002524:	500206d0 	.word	0x500206d0
 8002528:	40020750 	.word	0x40020750
 800252c:	50020750 	.word	0x50020750
 8002530:	400207d0 	.word	0x400207d0
 8002534:	500207d0 	.word	0x500207d0
 8002538:	3cc03180 	.word	0x3cc03180

0800253c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	@ 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800254e:	e1ba      	b.n	80028c6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 81aa 	beq.w	80028c0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a55      	ldr	r2, [pc, #340]	@ (80026c4 <HAL_GPIO_Init+0x188>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d15d      	bne.n	8002630 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800257a:	2201      	movs	r2, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	4013      	ands	r3, r2
 8002588:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	4313      	orrs	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80025a4:	4a48      	ldr	r2, [pc, #288]	@ (80026c8 <HAL_GPIO_Init+0x18c>)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025ac:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80025ae:	4a46      	ldr	r2, [pc, #280]	@ (80026c8 <HAL_GPIO_Init+0x18c>)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	3208      	adds	r2, #8
 80025c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	4013      	ands	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	220b      	movs	r2, #11
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	3208      	adds	r2, #8
 80025fa:	69f9      	ldr	r1, [r7, #28]
 80025fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	4013      	ands	r3, r2
 8002616:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2202      	movs	r2, #2
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	4313      	orrs	r3, r2
 8002626:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e067      	b.n	8002700 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x104>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b12      	cmp	r3, #18
 800263e:	d145      	bne.n	80026cc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	4013      	ands	r3, r2
 8002662:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f003 020f 	and.w	r2, r3, #15
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	4313      	orrs	r3, r2
 800267c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	08da      	lsrs	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3208      	adds	r2, #8
 8002686:	69f9      	ldr	r1, [r7, #28]
 8002688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0203 	and.w	r2, r3, #3
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e01e      	b.n	8002700 <HAL_GPIO_Init+0x1c4>
 80026c2:	bf00      	nop
 80026c4:	46020000 	.word	0x46020000
 80026c8:	0800ba44 	.word	0x0800ba44
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d00b      	beq.n	8002720 <HAL_GPIO_Init+0x1e4>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d007      	beq.n	8002720 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002714:	2b11      	cmp	r3, #17
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b12      	cmp	r3, #18
 800271e:	d130      	bne.n	8002782 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	4013      	ands	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	4313      	orrs	r3, r2
 8002748:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002756:	2201      	movs	r2, #1
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	4013      	ands	r3, r2
 8002764:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f003 0201 	and.w	r2, r3, #1
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	4313      	orrs	r3, r2
 800277a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d017      	beq.n	80027ba <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	2203      	movs	r2, #3
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	4013      	ands	r3, r2
 80027a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d07c      	beq.n	80028c0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80027c6:	4a47      	ldr	r2, [pc, #284]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	3318      	adds	r3, #24
 80027ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	220f      	movs	r2, #15
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0a9a      	lsrs	r2, r3, #10
 80027ee:	4b3e      	ldr	r3, [pc, #248]	@ (80028e8 <HAL_GPIO_Init+0x3ac>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	f002 0203 	and.w	r2, r2, #3
 80027f8:	00d2      	lsls	r2, r2, #3
 80027fa:	4093      	lsls	r3, r2
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002802:	4938      	ldr	r1, [pc, #224]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3318      	adds	r3, #24
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002810:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43db      	mvns	r3, r3
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	4013      	ands	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002834:	4a2b      	ldr	r2, [pc, #172]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800283a:	4b2a      	ldr	r3, [pc, #168]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	43db      	mvns	r3, r3
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	4013      	ands	r3, r2
 8002848:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800285e:	4a21      	ldr	r2, [pc, #132]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 8002866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800286a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	4013      	ands	r3, r2
 8002874:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800288a:	4a16      	ldr	r2, [pc, #88]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002892:	4b14      	ldr	r3, [pc, #80]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 8002894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002898:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43db      	mvns	r3, r3
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80028b8:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <HAL_GPIO_Init+0x3a8>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3301      	adds	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f47f ae3d 	bne.w	8002550 <HAL_GPIO_Init+0x14>
  }
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	3724      	adds	r7, #36	@ 0x24
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	46022000 	.word	0x46022000
 80028e8:	002f7f7f 	.word	0x002f7f7f

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002908:	e002      	b.n	8002910 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e08d      	b.n	8002a4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe f892 	bl	8000a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	@ 0x24
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800296c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800297c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e006      	b.n	80029a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d108      	bne.n	80029be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	e007      	b.n	80029ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69d9      	ldr	r1, [r3, #28]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1a      	ldr	r2, [r3, #32]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	460b      	mov	r3, r1
 8002a62:	817b      	strh	r3, [r7, #10]
 8002a64:	4613      	mov	r3, r2
 8002a66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	f040 80da 	bne.w	8002c2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2C_Master_Transmit+0x30>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0d3      	b.n	8002c2c <HAL_I2C_Master_Transmit+0x1d8>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fe48 	bl	8001720 <HAL_GetTick>
 8002a90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2319      	movs	r3, #25
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8f0 	bl	8002c84 <I2C_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0be      	b.n	8002c2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2221      	movs	r2, #33	@ 0x21
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	893a      	ldrh	r2, [r7, #8]
 8002ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2bff      	cmp	r3, #255	@ 0xff
 8002ade:	d90e      	bls.n	8002afe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	22ff      	movs	r2, #255	@ 0xff
 8002ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	4b51      	ldr	r3, [pc, #324]	@ (8002c34 <HAL_I2C_Master_Transmit+0x1e0>)
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa88 	bl	800300c <I2C_TransferConfig>
 8002afc:	e06c      	b.n	8002bd8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	8979      	ldrh	r1, [r7, #10]
 8002b10:	4b48      	ldr	r3, [pc, #288]	@ (8002c34 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fa77 	bl	800300c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b1e:	e05b      	b.n	8002bd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	6a39      	ldr	r1, [r7, #32]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f906 	bl	8002d36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e07b      	b.n	8002c2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d034      	beq.n	8002bd8 <HAL_I2C_Master_Transmit+0x184>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d130      	bne.n	8002bd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2180      	movs	r1, #128	@ 0x80
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f87f 	bl	8002c84 <I2C_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e04d      	b.n	8002c2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2bff      	cmp	r3, #255	@ 0xff
 8002b98:	d90e      	bls.n	8002bb8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	22ff      	movs	r2, #255	@ 0xff
 8002b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	8979      	ldrh	r1, [r7, #10]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fa2b 	bl	800300c <I2C_TransferConfig>
 8002bb6:	e00f      	b.n	8002bd8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	8979      	ldrh	r1, [r7, #10]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa1a 	bl	800300c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d19e      	bne.n	8002b20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	6a39      	ldr	r1, [r7, #32]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8ec 	bl	8002dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e01a      	b.n	8002c2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	80002000 	.word	0x80002000
 8002c38:	fe00e800 	.word	0xfe00e800

08002c3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d103      	bne.n	8002c5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2200      	movs	r2, #0
 8002c58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d007      	beq.n	8002c78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	619a      	str	r2, [r3, #24]
  }
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c94:	e03b      	b.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f8d6 	bl	8002e4c <I2C_IsErrorOccurred>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e041      	b.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d02d      	beq.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe fd35 	bl	8001720 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d122      	bne.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d113      	bne.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00f      	b.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d0b4      	beq.n	8002c96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d42:	e033      	b.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f87f 	bl	8002e4c <I2C_IsErrorOccurred>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e031      	b.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d025      	beq.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d60:	f7fe fcde 	bl	8001720 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11a      	bne.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d013      	beq.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e007      	b.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d1c4      	bne.n	8002d44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dd0:	e02f      	b.n	8002e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f838 	bl	8002e4c <I2C_IsErrorOccurred>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e02d      	b.n	8002e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe fc9b 	bl	8001720 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d11a      	bne.n	8002e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d013      	beq.n	8002e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	f043 0220 	orr.w	r2, r3, #32
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e007      	b.n	8002e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d1c8      	bne.n	8002dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	@ 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d068      	beq.n	8002f4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e80:	e049      	b.n	8002f16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d045      	beq.n	8002f16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe fc49 	bl	8001720 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_IsErrorOccurred+0x54>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d13a      	bne.n	8002f16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec2:	d121      	bne.n	8002f08 <I2C_IsErrorOccurred+0xbc>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eca:	d01d      	beq.n	8002f08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d01a      	beq.n	8002f08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ee0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ee2:	f7fe fc1d 	bl	8001720 <HAL_GetTick>
 8002ee6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee8:	e00e      	b.n	8002f08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eea:	f7fe fc19 	bl	8001720 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b19      	cmp	r3, #25
 8002ef6:	d907      	bls.n	8002f08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f043 0320 	orr.w	r3, r3, #32
 8002efe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f06:	e006      	b.n	8002f16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d1e9      	bne.n	8002eea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d003      	beq.n	8002f2c <I2C_IsErrorOccurred+0xe0>
 8002f24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0aa      	beq.n	8002e82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f043 0302 	orr.w	r3, r3, #2
 8002fa6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff fe3b 	bl	8002c3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <I2C_IsErrorOccurred+0x1bc>)
 8002fd2:	400b      	ands	r3, r1
 8002fd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3728      	adds	r7, #40	@ 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	fe00e800 	.word	0xfe00e800

0800300c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	817b      	strh	r3, [r7, #10]
 800301a:	4613      	mov	r3, r2
 800301c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800301e:	897b      	ldrh	r3, [r7, #10]
 8003020:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003024:	7a7b      	ldrb	r3, [r7, #9]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800302c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	4313      	orrs	r3, r2
 8003036:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800303a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	0d5b      	lsrs	r3, r3, #21
 8003046:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800304a:	4b08      	ldr	r3, [pc, #32]	@ (800306c <I2C_TransferConfig+0x60>)
 800304c:	430b      	orrs	r3, r1
 800304e:	43db      	mvns	r3, r3
 8003050:	ea02 0103 	and.w	r1, r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	03ff63ff 	.word	0x03ff63ff

08003070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b20      	cmp	r3, #32
 8003084:	d138      	bne.n	80030f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003090:	2302      	movs	r3, #2
 8003092:	e032      	b.n	80030fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	@ 0x24
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e000      	b.n	80030fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b20      	cmp	r3, #32
 800311a:	d139      	bne.n	8003190 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003126:	2302      	movs	r3, #2
 8003128:	e033      	b.n	8003192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2224      	movs	r2, #36	@ 0x24
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003158:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e007      	b.n	80031ce <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 0204 	bic.w	r2, r3, #4
 80031c6:	4905      	ldr	r1, [pc, #20]	@ (80031dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40030400 	.word	0x40030400

080031e0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80031e4:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_ICACHE_Enable+0x1c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <HAL_ICACHE_Enable+0x1c>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40030400 	.word	0x40030400

08003200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af02      	add	r7, sp, #8
 8003206:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e108      	b.n	8003424 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d106      	bne.n	8003232 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd fe71 	bl	8000f14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2203      	movs	r2, #3
 8003236:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4a7b      	ldr	r2, [pc, #492]	@ (800342c <HAL_PCD_Init+0x22c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d102      	bne.n	8003248 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f004 ffb6 	bl	80081be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7c1a      	ldrb	r2, [r3, #16]
 800325a:	f88d 2000 	strb.w	r2, [sp]
 800325e:	3304      	adds	r3, #4
 8003260:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003262:	f004 fecb 	bl	8007ffc <USB_CoreInit>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0d5      	b.n	8003424 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f004 ffae 	bl	80081e0 <USB_SetCurrentMode>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0c6      	b.n	8003424 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	e04a      	b.n	8003332 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	3315      	adds	r3, #21
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3314      	adds	r3, #20
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	b298      	uxth	r0, r3
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	332e      	adds	r3, #46	@ 0x2e
 80032d8:	4602      	mov	r2, r0
 80032da:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	3318      	adds	r3, #24
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	331c      	adds	r3, #28
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	3320      	adds	r3, #32
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	3324      	adds	r3, #36	@ 0x24
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	3301      	adds	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	791b      	ldrb	r3, [r3, #4]
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	429a      	cmp	r2, r3
 800333a:	d3af      	bcc.n	800329c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	e044      	b.n	80033cc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033b0:	7bfa      	ldrb	r2, [r7, #15]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	3301      	adds	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	791b      	ldrb	r3, [r3, #4]
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d3b5      	bcc.n	8003342 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7c1a      	ldrb	r2, [r3, #16]
 80033de:	f88d 2000 	strb.w	r2, [sp]
 80033e2:	3304      	adds	r3, #4
 80033e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033e6:	f004 ff47 	bl	8008278 <USB_DevInit>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e013      	b.n	8003424 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	7b1b      	ldrb	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f001 f96a 	bl	80046ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f005 ff72 	bl	8009306 <USB_DevDisconnect>

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	42040000 	.word	0x42040000

08003430 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_PCD_Start+0x1c>
 8003448:	2302      	movs	r3, #2
 800344a:	e01c      	b.n	8003486 <HAL_PCD_Start+0x56>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7b5b      	ldrb	r3, [r3, #13]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f004 fe95 	bl	800819c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f005 ff24 	bl	80092c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800348e:	b590      	push	{r4, r7, lr}
 8003490:	b08d      	sub	sp, #52	@ 0x34
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 ffe2 	bl	800946e <USB_GetMode>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 84b9 	bne.w	8003e24 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f005 ff46 	bl	8009348 <USB_ReadInterrupts>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 84af 	beq.w	8003e22 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f005 ff33 	bl	8009348 <USB_ReadInterrupts>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d107      	bne.n	80034fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f002 0202 	and.w	r2, r2, #2
 80034fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f005 ff21 	bl	8009348 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b10      	cmp	r3, #16
 800350e:	d161      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0210 	bic.w	r2, r2, #16
 800351e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	0c5b      	lsrs	r3, r3, #17
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	2b02      	cmp	r3, #2
 800354a:	d124      	bne.n	8003596 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d035      	beq.n	80035c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003566:	b29b      	uxth	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	6a38      	ldr	r0, [r7, #32]
 800356c:	f005 fd58 	bl	8009020 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800357c:	441a      	add	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800358e:	441a      	add	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	615a      	str	r2, [r3, #20]
 8003594:	e016      	b.n	80035c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	0c5b      	lsrs	r3, r3, #17
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d110      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035a8:	2208      	movs	r2, #8
 80035aa:	4619      	mov	r1, r3
 80035ac:	6a38      	ldr	r0, [r7, #32]
 80035ae:	f005 fd37 	bl	8009020 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035be:	441a      	add	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0210 	orr.w	r2, r2, #16
 80035d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f005 feb5 	bl	8009348 <USB_ReadInterrupts>
 80035de:	4603      	mov	r3, r0
 80035e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035e8:	f040 80a7 	bne.w	800373a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f005 feba 	bl	800936e <USB_ReadDevAllOutEpInterrupt>
 80035fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80035fc:	e099      	b.n	8003732 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 808e 	beq.w	8003726 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f005 fede 	bl	80093d6 <USB_ReadDevOutEPInterrupt>
 800361a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003632:	461a      	mov	r2, r3
 8003634:	2301      	movs	r3, #1
 8003636:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fed0 	bl	80043e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003656:	461a      	mov	r2, r3
 8003658:	2308      	movs	r3, #8
 800365a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800365c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 ffa6 	bl	80045b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367a:	461a      	mov	r2, r3
 800367c:	2310      	movs	r3, #16
 800367e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d030      	beq.n	80036ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003692:	2b80      	cmp	r3, #128	@ 0x80
 8003694:	d109      	bne.n	80036aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	78db      	ldrb	r3, [r3, #3]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d108      	bne.n	80036da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2200      	movs	r2, #0
 80036cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f006 fa97 	bl	8009c08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e6:	461a      	mov	r2, r3
 80036e8:	2302      	movs	r3, #2
 80036ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003702:	461a      	mov	r2, r3
 8003704:	2320      	movs	r3, #32
 8003706:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800371e:	461a      	mov	r2, r3
 8003720:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003724:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	3301      	adds	r3, #1
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800372c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	f47f af62 	bne.w	80035fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f005 fe02 	bl	8009348 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800374a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800374e:	f040 80db 	bne.w	8003908 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f005 fe23 	bl	80093a2 <USB_ReadDevAllInEpInterrupt>
 800375c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003762:	e0cd      	b.n	8003900 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80c2 	beq.w	80038f4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f005 fe49 	bl	8009412 <USB_ReadDevInEPInterrupt>
 8003780:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d057      	beq.n	800383c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	2201      	movs	r2, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69f9      	ldr	r1, [r7, #28]
 80037a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037ac:	4013      	ands	r3, r2
 80037ae:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037bc:	461a      	mov	r2, r3
 80037be:	2301      	movs	r3, #1
 80037c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	799b      	ldrb	r3, [r3, #6]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d132      	bne.n	8003830 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3320      	adds	r3, #32
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4403      	add	r3, r0
 80037ea:	331c      	adds	r3, #28
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4419      	add	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4403      	add	r3, r0
 80037fe:	3320      	adds	r3, #32
 8003800:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d113      	bne.n	8003830 <HAL_PCD_IRQHandler+0x3a2>
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	3324      	adds	r3, #36	@ 0x24
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d108      	bne.n	8003830 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003828:	461a      	mov	r2, r3
 800382a:	2101      	movs	r1, #1
 800382c:	f005 fe50 	bl	80094d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f006 f96a 	bl	8009b10 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003852:	461a      	mov	r2, r3
 8003854:	2308      	movs	r3, #8
 8003856:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386e:	461a      	mov	r2, r3
 8003870:	2310      	movs	r3, #16
 8003872:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800388a:	461a      	mov	r2, r3
 800388c:	2340      	movs	r3, #64	@ 0x40
 800388e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d023      	beq.n	80038e2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800389a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800389c:	6a38      	ldr	r0, [r7, #32]
 800389e:	f004 fe37 	bl	8008510 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3310      	adds	r3, #16
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	3304      	adds	r3, #4
 80038b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	78db      	ldrb	r3, [r3, #3]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d108      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	4619      	mov	r1, r3
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f006 f9ae 	bl	8009c2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038dc:	461a      	mov	r2, r3
 80038de:	2302      	movs	r3, #2
 80038e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80038ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fcea 	bl	80042c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	3301      	adds	r3, #1
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80038fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	f47f af2e 	bne.w	8003764 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f005 fd1b 	bl	8009348 <USB_ReadInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800391c:	d122      	bne.n	8003964 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003938:	2b01      	cmp	r3, #1
 800393a:	d108      	bne.n	800394e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003944:	2100      	movs	r1, #0
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f006 fb2e 	bl	8009fa8 <HAL_PCDEx_LPM_Callback>
 800394c:	e002      	b.n	8003954 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f006 f93e 	bl	8009bd0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f005 fced 	bl	8009348 <USB_ReadInterrupts>
 800396e:	4603      	mov	r3, r0
 8003970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003978:	d112      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d102      	bne.n	8003990 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f006 f906 	bl	8009b9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800399e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f005 fccf 	bl	8009348 <USB_ReadInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039b4:	d121      	bne.n	80039fa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80039c4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d111      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80039ea:	2101      	movs	r1, #1
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f006 fadb 	bl	8009fa8 <HAL_PCDEx_LPM_Callback>
 80039f2:	e002      	b.n	80039fa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f006 f8d1 	bl	8009b9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f005 fca2 	bl	8009348 <USB_ReadInterrupts>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a0e:	f040 80b7 	bne.w	8003b80 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2110      	movs	r1, #16
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f004 fd6f 	bl	8008510 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a36:	e046      	b.n	8003ac6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a44:	461a      	mov	r2, r3
 8003a46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a5c:	0151      	lsls	r1, r2, #5
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	440a      	add	r2, r1
 8003a62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab0:	0151      	lsls	r1, r2, #5
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	440a      	add	r2, r1
 8003ab6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003abe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	791b      	ldrb	r3, [r3, #4]
 8003aca:	461a      	mov	r2, r3
 8003acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d3b2      	bcc.n	8003a38 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ae0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ae4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	7bdb      	ldrb	r3, [r3, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003afe:	f043 030b 	orr.w	r3, r3, #11
 8003b02:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b14:	f043 030b 	orr.w	r3, r3, #11
 8003b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b1a:	e015      	b.n	8003b48 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b2e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003b32:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b42:	f043 030b 	orr.w	r3, r3, #11
 8003b46:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b56:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b5a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f005 fcb0 	bl	80094d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f005 fbdf 	bl	8009348 <USB_ReadInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b94:	d123      	bne.n	8003bde <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f005 fc75 	bl	800948a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f004 fd2c 	bl	8008602 <USB_GetDevSpeed>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461a      	mov	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681c      	ldr	r4, [r3, #0]
 8003bb6:	f002 f839 	bl	8005c2c <HAL_RCC_GetHCLKFreq>
 8003bba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f004 fa48 	bl	8008058 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f005 ffc9 	bl	8009b60 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f005 fbb0 	bl	8009348 <USB_ReadInterrupts>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d10a      	bne.n	8003c08 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f005 ffa6 	bl	8009b44 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f002 0208 	and.w	r2, r2, #8
 8003c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f005 fb9b 	bl	8009348 <USB_ReadInterrupts>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c18:	2b80      	cmp	r3, #128	@ 0x80
 8003c1a:	d123      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c28:	2301      	movs	r3, #1
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2c:	e014      	b.n	8003c58 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fb0a 	bl	8004266 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	3301      	adds	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	791b      	ldrb	r3, [r3, #4]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d3e4      	bcc.n	8003c2e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f005 fb6d 	bl	8009348 <USB_ReadInterrupts>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c78:	d13c      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7e:	e02b      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d115      	bne.n	8003cd2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	da12      	bge.n	8003cd2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3317      	adds	r3, #23
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 faca 	bl	8004266 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	791b      	ldrb	r3, [r3, #4]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d3cd      	bcc.n	8003c80 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f005 fb25 	bl	8009348 <USB_ReadInterrupts>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d08:	d156      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0e:	e045      	b.n	8003d9c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d12e      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da2b      	bge.n	8003d96 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	0c1a      	lsrs	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003d48:	4053      	eors	r3, r2
 8003d4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d121      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d92:	6053      	str	r3, [r2, #4]
            break;
 8003d94:	e008      	b.n	8003da8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	3301      	adds	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	791b      	ldrb	r3, [r3, #4]
 8003da0:	461a      	mov	r2, r3
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d3b3      	bcc.n	8003d10 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f005 fac3 	bl	8009348 <USB_ReadInterrupts>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dcc:	d10a      	bne.n	8003de4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f005 ff3e 	bl	8009c50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f005 faad 	bl	8009348 <USB_ReadInterrupts>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d115      	bne.n	8003e24 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f005 ff2e 	bl	8009c6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	e000      	b.n	8003e24 <HAL_PCD_IRQHandler+0x996>
      return;
 8003e22:	bf00      	nop
    }
  }
}
 8003e24:	3734      	adds	r7, #52	@ 0x34
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd90      	pop	{r4, r7, pc}

08003e2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_PCD_SetAddress+0x1a>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e012      	b.n	8003e6a <HAL_PCD_SetAddress+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f005 fa0c 	bl	8009278 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4603      	mov	r3, r0
 8003e82:	70fb      	strb	r3, [r7, #3]
 8003e84:	460b      	mov	r3, r1
 8003e86:	803b      	strh	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	da0f      	bge.n	8003eb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	3310      	adds	r3, #16
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	3304      	adds	r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	705a      	strb	r2, [r3, #1]
 8003eb6:	e00f      	b.n	8003ed8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 020f 	and.w	r2, r3, #15
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003ee4:	883b      	ldrh	r3, [r7, #0]
 8003ee6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	78ba      	ldrb	r2, [r7, #2]
 8003ef2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f06:	78bb      	ldrb	r3, [r7, #2]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d102      	bne.n	8003f12 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_PCD_EP_Open+0xae>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e00e      	b.n	8003f3e <HAL_PCD_EP_Open+0xcc>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f004 fb8c 	bl	800864c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003f3c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da0f      	bge.n	8003f7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	3310      	adds	r3, #16
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3304      	adds	r3, #4
 8003f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	705a      	strb	r2, [r3, #1]
 8003f78:	e00f      	b.n	8003f9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_PCD_EP_Close+0x6e>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e00e      	b.n	8003fd2 <HAL_PCD_EP_Close+0x8c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f004 fbca 	bl	800875c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fea:	7afb      	ldrb	r3, [r7, #11]
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	3304      	adds	r3, #4
 8004002:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2200      	movs	r2, #0
 8004014:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2200      	movs	r2, #0
 800401a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800401c:	7afb      	ldrb	r3, [r7, #11]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	b2da      	uxtb	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	799b      	ldrb	r3, [r3, #6]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d102      	bne.n	8004036 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	799b      	ldrb	r3, [r3, #6]
 800403e:	461a      	mov	r2, r3
 8004040:	6979      	ldr	r1, [r7, #20]
 8004042:	f004 fc67 	bl	8008914 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 020f 	and.w	r2, r3, #15
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	460b      	mov	r3, r1
 800408e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004090:	7afb      	ldrb	r3, [r7, #11]
 8004092:	f003 020f 	and.w	r2, r3, #15
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	3310      	adds	r3, #16
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	3304      	adds	r3, #4
 80040a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2200      	movs	r2, #0
 80040b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2201      	movs	r2, #1
 80040be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c0:	7afb      	ldrb	r3, [r7, #11]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	799b      	ldrb	r3, [r3, #6]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d102      	bne.n	80040da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	799b      	ldrb	r3, [r3, #6]
 80040e2:	461a      	mov	r2, r3
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	f004 fc15 	bl	8008914 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	7912      	ldrb	r2, [r2, #4]
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e04f      	b.n	80041b2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da0f      	bge.n	800413a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 020f 	and.w	r2, r3, #15
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	3310      	adds	r3, #16
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	705a      	strb	r2, [r3, #1]
 8004138:	e00d      	b.n	8004156 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	3304      	adds	r3, #4
 800414e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	b2da      	uxtb	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_PCD_EP_SetStall+0x82>
 8004172:	2302      	movs	r3, #2
 8004174:	e01d      	b.n	80041b2 <HAL_PCD_EP_SetStall+0xbe>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68f9      	ldr	r1, [r7, #12]
 8004184:	4618      	mov	r0, r3
 8004186:	f004 ffa3 	bl	80090d0 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	7999      	ldrb	r1, [r3, #6]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041a2:	461a      	mov	r2, r3
 80041a4:	f005 f994 	bl	80094d0 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	7912      	ldrb	r2, [r2, #4]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e042      	b.n	800425e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	da0f      	bge.n	8004200 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	3310      	adds	r3, #16
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	3304      	adds	r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	705a      	strb	r2, [r3, #1]
 80041fe:	e00f      	b.n	8004220 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	3304      	adds	r3, #4
 8004218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	b2da      	uxtb	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_PCD_EP_ClrStall+0x86>
 800423c:	2302      	movs	r3, #2
 800423e:	e00e      	b.n	800425e <HAL_PCD_EP_ClrStall+0xa4>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68f9      	ldr	r1, [r7, #12]
 800424e:	4618      	mov	r0, r3
 8004250:	f004 ffac 	bl	80091ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da0c      	bge.n	8004294 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	f003 020f 	and.w	r2, r3, #15
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	3310      	adds	r3, #16
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	3304      	adds	r3, #4
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	e00c      	b.n	80042ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4413      	add	r3, r2
 80042aa:	3304      	adds	r3, #4
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f004 fdcb 	bl	8008e50 <USB_EPStopXfer>
 80042ba:	4603      	mov	r3, r0
 80042bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042be:	7afb      	ldrb	r3, [r7, #11]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	@ 0x28
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	3310      	adds	r3, #16
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	3304      	adds	r3, #4
 80042ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d901      	bls.n	8004300 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e06b      	b.n	80043d8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	429a      	cmp	r2, r3
 8004314:	d902      	bls.n	800431c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	3303      	adds	r3, #3
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004324:	e02a      	b.n	800437c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	d902      	bls.n	8004342 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3303      	adds	r3, #3
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68d9      	ldr	r1, [r3, #12]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	4603      	mov	r3, r0
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f004 fe20 	bl	8008fa4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	441a      	add	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	441a      	add	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	429a      	cmp	r2, r3
 8004390:	d809      	bhi.n	80043a6 <PCD_WriteEmptyTxFifo+0xde>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800439a:	429a      	cmp	r2, r3
 800439c:	d203      	bcs.n	80043a6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1bf      	bne.n	8004326 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d811      	bhi.n	80043d6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	2201      	movs	r2, #1
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	6939      	ldr	r1, [r7, #16]
 80043ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043d2:	4013      	ands	r3, r2
 80043d4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	333c      	adds	r3, #60	@ 0x3c
 80043f8:	3304      	adds	r3, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	799b      	ldrb	r3, [r3, #6]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d17b      	bne.n	800450e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4a61      	ldr	r2, [pc, #388]	@ (80045a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	f240 80b9 	bls.w	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80b3 	beq.w	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004442:	461a      	mov	r2, r3
 8004444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004448:	6093      	str	r3, [r2, #8]
 800444a:	e0a7      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004462:	461a      	mov	r2, r3
 8004464:	2320      	movs	r3, #32
 8004466:	6093      	str	r3, [r2, #8]
 8004468:	e098      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 8093 	bne.w	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4a4b      	ldr	r2, [pc, #300]	@ (80045a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d90f      	bls.n	800449e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004494:	461a      	mov	r2, r3
 8004496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800449a:	6093      	str	r3, [r2, #8]
 800449c:	e07e      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	3304      	adds	r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a1a      	ldr	r2, [r3, #32]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	0159      	lsls	r1, r3, #5
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	440b      	add	r3, r1
 80044c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d114      	bne.n	8004500 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044e8:	461a      	mov	r2, r3
 80044ea:	2101      	movs	r1, #1
 80044ec:	f004 fff0 	bl	80094d0 <USB_EP0_OutStart>
 80044f0:	e006      	b.n	8004500 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	441a      	add	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f005 fae7 	bl	8009ada <HAL_PCD_DataOutStageCallback>
 800450c:	e046      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4a26      	ldr	r2, [pc, #152]	@ (80045ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d124      	bne.n	8004560 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800452c:	461a      	mov	r2, r3
 800452e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004532:	6093      	str	r3, [r2, #8]
 8004534:	e032      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800454c:	461a      	mov	r2, r3
 800454e:	2320      	movs	r3, #32
 8004550:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f005 fabe 	bl	8009ada <HAL_PCD_DataOutStageCallback>
 800455e:	e01d      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d114      	bne.n	8004590 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d108      	bne.n	8004590 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004588:	461a      	mov	r2, r3
 800458a:	2100      	movs	r1, #0
 800458c:	f004 ffa0 	bl	80094d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f005 fa9f 	bl	8009ada <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	4f54300a 	.word	0x4f54300a
 80045ac:	4f54310a 	.word	0x4f54310a

080045b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	333c      	adds	r3, #60	@ 0x3c
 80045c8:	3304      	adds	r3, #4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <PCD_EP_OutSetupPacket_int+0x88>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d90e      	bls.n	8004604 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fc:	461a      	mov	r2, r3
 80045fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004602:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f005 fa56 	bl	8009ab6 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a0a      	ldr	r2, [pc, #40]	@ (8004638 <PCD_EP_OutSetupPacket_int+0x88>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d90c      	bls.n	800462c <PCD_EP_OutSetupPacket_int+0x7c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	799b      	ldrb	r3, [r3, #6]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d108      	bne.n	800462c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004624:	461a      	mov	r2, r3
 8004626:	2101      	movs	r1, #1
 8004628:	f004 ff52 	bl	80094d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	4f54300a 	.word	0x4f54300a

0800463c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
 8004648:	4613      	mov	r3, r2
 800464a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800465a:	883b      	ldrh	r3, [r7, #0]
 800465c:	0419      	lsls	r1, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	430a      	orrs	r2, r1
 8004666:	629a      	str	r2, [r3, #40]	@ 0x28
 8004668:	e028      	b.n	80046bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	4413      	add	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e00d      	b.n	800469a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	3340      	adds	r3, #64	@ 0x40
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4413      	add	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	3301      	adds	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	3b01      	subs	r3, #1
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3ec      	bcc.n	800467e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046a4:	883b      	ldrh	r3, [r7, #0]
 80046a6:	0418      	lsls	r0, r3, #16
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	4302      	orrs	r2, r0
 80046b4:	3340      	adds	r3, #64	@ 0x40
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	460b      	mov	r3, r1
 80046d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	887a      	ldrh	r2, [r7, #2]
 80046dc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471e:	f043 0303 	orr.w	r3, r3, #3
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800473c:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800473e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004740:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004744:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d10b      	bne.n	8004766 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004754:	d905      	bls.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004756:	4b33      	ldr	r3, [pc, #204]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	4a32      	ldr	r2, [pc, #200]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800475c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004760:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e057      	b.n	8004816 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476c:	d90a      	bls.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800476e:	4b2d      	ldr	r3, [pc, #180]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4313      	orrs	r3, r2
 800477a:	4a2a      	ldr	r2, [pc, #168]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004780:	60d3      	str	r3, [r2, #12]
 8004782:	e007      	b.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004784:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800478c:	4925      	ldr	r1, [pc, #148]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4313      	orrs	r3, r2
 8004792:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004794:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a24      	ldr	r2, [pc, #144]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	099b      	lsrs	r3, r3, #6
 80047a0:	2232      	movs	r2, #50	@ 0x32
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	4a21      	ldr	r2, [pc, #132]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	099b      	lsrs	r3, r3, #6
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80047b2:	e002      	b.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80047ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <HAL_PWREx_ControlVoltageScaling+0x98>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f3      	bne.n	80047b4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01b      	beq.n	800480a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80047d2:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a15      	ldr	r2, [pc, #84]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	099b      	lsrs	r3, r3, #6
 80047de:	2232      	movs	r2, #50	@ 0x32
 80047e0:	fb02 f303 	mul.w	r3, r2, r3
 80047e4:	4a11      	ldr	r2, [pc, #68]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	3301      	adds	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80047f0:	e002      	b.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80047f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d102      	bne.n	800480a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f3      	bne.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e000      	b.n	8004816 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	46020800 	.word	0x46020800
 8004828:	20000000 	.word	0x20000000
 800482c:	10624dd3 	.word	0x10624dd3

08004830 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004834:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <HAL_PWREx_GetVoltageRange+0x18>)
 8004836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004838:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	46020800 	.word	0x46020800

0800484c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004850:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	4a04      	ldr	r2, [pc, #16]	@ (8004868 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485a:	6113      	str	r3, [r2, #16]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	46020800 	.word	0x46020800

0800486c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004870:	4b05      	ldr	r3, [pc, #20]	@ (8004888 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	4a04      	ldr	r2, [pc, #16]	@ (8004888 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004876:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800487a:	6113      	str	r3, [r2, #16]
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	46020800 	.word	0x46020800

0800488c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	@ 0x38
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d102      	bne.n	80048a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f000 bec8 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a6:	4b99      	ldr	r3, [pc, #612]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048b0:	4b96      	ldr	r3, [pc, #600]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 816c 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <HAL_RCC_OscConfig+0x52>
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	f040 80de 	bne.w	8004a92 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	f040 80da 	bne.w	8004a92 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f000 bea5 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048f0:	4b86      	ldr	r3, [pc, #536]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <HAL_RCC_OscConfig+0x7a>
 80048fc:	4b83      	ldr	r3, [pc, #524]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004904:	e005      	b.n	8004912 <HAL_RCC_OscConfig+0x86>
 8004906:	4b81      	ldr	r3, [pc, #516]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004912:	4293      	cmp	r3, r2
 8004914:	d255      	bcs.n	80049c2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	4618      	mov	r0, r3
 8004922:	f001 f99d 	bl	8005c60 <RCC_SetFlashLatencyFromMSIRange>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f000 be82 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004932:	4b76      	ldr	r3, [pc, #472]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	4a75      	ldr	r2, [pc, #468]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004938:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800493c:	6093      	str	r3, [r2, #8]
 800493e:	4b73      	ldr	r3, [pc, #460]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	4970      	ldr	r1, [pc, #448]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004958:	d309      	bcc.n	800496e <HAL_RCC_OscConfig+0xe2>
 800495a:	4b6c      	ldr	r3, [pc, #432]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f023 021f 	bic.w	r2, r3, #31
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	4969      	ldr	r1, [pc, #420]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004968:	4313      	orrs	r3, r2
 800496a:	60cb      	str	r3, [r1, #12]
 800496c:	e07e      	b.n	8004a6c <HAL_RCC_OscConfig+0x1e0>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	da0a      	bge.n	800498c <HAL_RCC_OscConfig+0x100>
 8004976:	4b65      	ldr	r3, [pc, #404]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	015b      	lsls	r3, r3, #5
 8004984:	4961      	ldr	r1, [pc, #388]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004986:	4313      	orrs	r3, r2
 8004988:	60cb      	str	r3, [r1, #12]
 800498a:	e06f      	b.n	8004a6c <HAL_RCC_OscConfig+0x1e0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004994:	d30a      	bcc.n	80049ac <HAL_RCC_OscConfig+0x120>
 8004996:	4b5d      	ldr	r3, [pc, #372]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	4959      	ldr	r1, [pc, #356]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60cb      	str	r3, [r1, #12]
 80049aa:	e05f      	b.n	8004a6c <HAL_RCC_OscConfig+0x1e0>
 80049ac:	4b57      	ldr	r3, [pc, #348]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	03db      	lsls	r3, r3, #15
 80049ba:	4954      	ldr	r1, [pc, #336]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	60cb      	str	r3, [r1, #12]
 80049c0:	e054      	b.n	8004a6c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049c2:	4b52      	ldr	r3, [pc, #328]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	4a51      	ldr	r2, [pc, #324]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049cc:	6093      	str	r3, [r2, #8]
 80049ce:	4b4f      	ldr	r3, [pc, #316]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	494c      	ldr	r1, [pc, #304]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80049e8:	d309      	bcc.n	80049fe <HAL_RCC_OscConfig+0x172>
 80049ea:	4b48      	ldr	r3, [pc, #288]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f023 021f 	bic.w	r2, r3, #31
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	4945      	ldr	r1, [pc, #276]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60cb      	str	r3, [r1, #12]
 80049fc:	e028      	b.n	8004a50 <HAL_RCC_OscConfig+0x1c4>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da0a      	bge.n	8004a1c <HAL_RCC_OscConfig+0x190>
 8004a06:	4b41      	ldr	r3, [pc, #260]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	015b      	lsls	r3, r3, #5
 8004a14:	493d      	ldr	r1, [pc, #244]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60cb      	str	r3, [r1, #12]
 8004a1a:	e019      	b.n	8004a50 <HAL_RCC_OscConfig+0x1c4>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a24:	d30a      	bcc.n	8004a3c <HAL_RCC_OscConfig+0x1b0>
 8004a26:	4b39      	ldr	r3, [pc, #228]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	4935      	ldr	r1, [pc, #212]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60cb      	str	r3, [r1, #12]
 8004a3a:	e009      	b.n	8004a50 <HAL_RCC_OscConfig+0x1c4>
 8004a3c:	4b33      	ldr	r3, [pc, #204]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	03db      	lsls	r3, r3, #15
 8004a4a:	4930      	ldr	r1, [pc, #192]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f900 	bl	8005c60 <RCC_SetFlashLatencyFromMSIRange>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f000 bde5 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004a6c:	f001 f8de 	bl	8005c2c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a70:	4b27      	ldr	r3, [pc, #156]	@ (8004b10 <HAL_RCC_OscConfig+0x284>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fc fdc9 	bl	800160c <HAL_InitTick>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 808a 	beq.w	8004b9e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a8e:	f000 bdd2 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d066      	beq.n	8004b68 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004aa6:	f7fc fe3b 	bl	8001720 <HAL_GetTick>
 8004aaa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004aac:	e009      	b.n	8004ac2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aae:	f7fc fe37 	bl	8001720 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d902      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	f000 bdba 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ef      	beq.n	8004aae <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004ace:	4b0f      	ldr	r3, [pc, #60]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ad4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ad8:	6093      	str	r3, [r2, #8]
 8004ada:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	4909      	ldr	r1, [pc, #36]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004af4:	d30e      	bcc.n	8004b14 <HAL_RCC_OscConfig+0x288>
 8004af6:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f023 021f 	bic.w	r2, r3, #31
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	4902      	ldr	r1, [pc, #8]	@ (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60cb      	str	r3, [r1, #12]
 8004b08:	e04a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x314>
 8004b0a:	bf00      	nop
 8004b0c:	46020c00 	.word	0x46020c00
 8004b10:	2000005c 	.word	0x2000005c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da0a      	bge.n	8004b32 <HAL_RCC_OscConfig+0x2a6>
 8004b1c:	4b98      	ldr	r3, [pc, #608]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	015b      	lsls	r3, r3, #5
 8004b2a:	4995      	ldr	r1, [pc, #596]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60cb      	str	r3, [r1, #12]
 8004b30:	e036      	b.n	8004ba0 <HAL_RCC_OscConfig+0x314>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3a:	d30a      	bcc.n	8004b52 <HAL_RCC_OscConfig+0x2c6>
 8004b3c:	4b90      	ldr	r3, [pc, #576]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	029b      	lsls	r3, r3, #10
 8004b4a:	498d      	ldr	r1, [pc, #564]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60cb      	str	r3, [r1, #12]
 8004b50:	e026      	b.n	8004ba0 <HAL_RCC_OscConfig+0x314>
 8004b52:	4b8b      	ldr	r3, [pc, #556]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	03db      	lsls	r3, r3, #15
 8004b60:	4987      	ldr	r1, [pc, #540]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60cb      	str	r3, [r1, #12]
 8004b66:	e01b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004b68:	4b85      	ldr	r3, [pc, #532]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a84      	ldr	r2, [pc, #528]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b74:	f7fc fdd4 	bl	8001720 <HAL_GetTick>
 8004b78:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004b7a:	e009      	b.n	8004b90 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b7c:	f7fc fdd0 	bl	8001720 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d902      	bls.n	8004b90 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	f000 bd53 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004b90:	4b7b      	ldr	r3, [pc, #492]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ef      	bne.n	8004b7c <HAL_RCC_OscConfig+0x2f0>
 8004b9c:	e000      	b.n	8004ba0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004b9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 808b 	beq.w	8004cc4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x334>
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d109      	bne.n	8004bce <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d106      	bne.n	8004bce <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d17d      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f000 bd34 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd6:	d106      	bne.n	8004be6 <HAL_RCC_OscConfig+0x35a>
 8004bd8:	4b69      	ldr	r3, [pc, #420]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a68      	ldr	r2, [pc, #416]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e041      	b.n	8004c6a <HAL_RCC_OscConfig+0x3de>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bee:	d112      	bne.n	8004c16 <HAL_RCC_OscConfig+0x38a>
 8004bf0:	4b63      	ldr	r3, [pc, #396]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a62      	ldr	r2, [pc, #392]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004bf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b60      	ldr	r3, [pc, #384]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a5f      	ldr	r2, [pc, #380]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c02:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	4b5d      	ldr	r3, [pc, #372]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a5c      	ldr	r2, [pc, #368]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e029      	b.n	8004c6a <HAL_RCC_OscConfig+0x3de>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004c1e:	d112      	bne.n	8004c46 <HAL_RCC_OscConfig+0x3ba>
 8004c20:	4b57      	ldr	r3, [pc, #348]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a56      	ldr	r2, [pc, #344]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b54      	ldr	r3, [pc, #336]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a53      	ldr	r2, [pc, #332]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b51      	ldr	r3, [pc, #324]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a50      	ldr	r2, [pc, #320]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	e011      	b.n	8004c6a <HAL_RCC_OscConfig+0x3de>
 8004c46:	4b4e      	ldr	r3, [pc, #312]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a4d      	ldr	r2, [pc, #308]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b4b      	ldr	r3, [pc, #300]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a4a      	ldr	r2, [pc, #296]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	4b48      	ldr	r3, [pc, #288]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a47      	ldr	r2, [pc, #284]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d014      	beq.n	8004c9c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004c72:	f7fc fd55 	bl	8001720 <HAL_GetTick>
 8004c76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c78:	e009      	b.n	8004c8e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c7a:	f7fc fd51 	bl	8001720 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b64      	cmp	r3, #100	@ 0x64
 8004c86:	d902      	bls.n	8004c8e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	f000 bcd4 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0ef      	beq.n	8004c7a <HAL_RCC_OscConfig+0x3ee>
 8004c9a:	e013      	b.n	8004cc4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004c9c:	f7fc fd40 	bl	8001720 <HAL_GetTick>
 8004ca0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ca2:	e009      	b.n	8004cb8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fc fd3c 	bl	8001720 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	@ 0x64
 8004cb0:	d902      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	f000 bcbf 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cb8:	4b31      	ldr	r3, [pc, #196]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ef      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05f      	beq.n	8004d90 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d005      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x456>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	2b0c      	cmp	r3, #12
 8004cda:	d114      	bne.n	8004d06 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d111      	bne.n	8004d06 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f000 bca3 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b23      	ldr	r3, [pc, #140]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	4920      	ldr	r1, [pc, #128]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d04:	e044      	b.n	8004d90 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d024      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d1a:	f7fc fd01 	bl	8001720 <HAL_GetTick>
 8004d1e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d20:	e009      	b.n	8004d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d22:	f7fc fcfd 	bl	8001720 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d902      	bls.n	8004d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	f000 bc80 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ef      	beq.n	8004d22 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004d42:	4b0f      	ldr	r3, [pc, #60]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	041b      	lsls	r3, r3, #16
 8004d50:	490b      	ldr	r1, [pc, #44]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	610b      	str	r3, [r1, #16]
 8004d56:	e01b      	b.n	8004d90 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004d58:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a08      	ldr	r2, [pc, #32]	@ (8004d80 <HAL_RCC_OscConfig+0x4f4>)
 8004d5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d64:	f7fc fcdc 	bl	8001720 <HAL_GetTick>
 8004d68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7fc fcd8 	bl	8001720 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d904      	bls.n	8004d84 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	f000 bc5b 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
 8004d80:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d84:	4baf      	ldr	r3, [pc, #700]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ed      	bne.n	8004d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80c8 	beq.w	8004f2e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da4:	4ba7      	ldr	r3, [pc, #668]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d111      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	4ba4      	ldr	r3, [pc, #656]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db8:	4aa2      	ldr	r2, [pc, #648]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004dba:	f043 0304 	orr.w	r3, r3, #4
 8004dbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004dc2:	4ba0      	ldr	r3, [pc, #640]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8005048 <HAL_RCC_OscConfig+0x7bc>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d119      	bne.n	8004e16 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004de2:	4b99      	ldr	r3, [pc, #612]	@ (8005048 <HAL_RCC_OscConfig+0x7bc>)
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	4a98      	ldr	r2, [pc, #608]	@ (8005048 <HAL_RCC_OscConfig+0x7bc>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dee:	f7fc fc97 	bl	8001720 <HAL_GetTick>
 8004df2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004df4:	e009      	b.n	8004e0a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df6:	f7fc fc93 	bl	8001720 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d902      	bls.n	8004e0a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	f000 bc16 	b.w	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8005048 <HAL_RCC_OscConfig+0x7bc>)
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0ef      	beq.n	8004df6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d05f      	beq.n	8004ede <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004e1e:	4b89      	ldr	r3, [pc, #548]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e24:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d037      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e3f4      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d01b      	beq.n	8004e8e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004e56:	4b7b      	ldr	r3, [pc, #492]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e5c:	4a79      	ldr	r2, [pc, #484]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004e5e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004e62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004e66:	f7fc fc5b 	bl	8001720 <HAL_GetTick>
 8004e6a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6e:	f7fc fc57 	bl	8001720 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e3da      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e80:	4b70      	ldr	r3, [pc, #448]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ef      	bne.n	8004e6e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e94:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	4969      	ldr	r1, [pc, #420]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004ea4:	4b67      	ldr	r3, [pc, #412]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eaa:	4a66      	ldr	r2, [pc, #408]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004eac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004eb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004eb4:	f7fc fc34 	bl	8001720 <HAL_GetTick>
 8004eb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebc:	f7fc fc30 	bl	8001720 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b05      	cmp	r3, #5
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e3b3      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004ece:	4b5d      	ldr	r3, [pc, #372]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ef      	beq.n	8004ebc <HAL_RCC_OscConfig+0x630>
 8004edc:	e01b      	b.n	8004f16 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004ede:	4b59      	ldr	r3, [pc, #356]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ee4:	4a57      	ldr	r2, [pc, #348]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004ee6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004eea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004eee:	f7fc fc17 	bl	8001720 <HAL_GetTick>
 8004ef2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef6:	f7fc fc13 	bl	8001720 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b05      	cmp	r3, #5
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e396      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f08:	4b4e      	ldr	r3, [pc, #312]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1ef      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f16:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1e:	4b49      	ldr	r3, [pc, #292]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f24:	4a47      	ldr	r2, [pc, #284]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004f26:	f023 0304 	bic.w	r3, r3, #4
 8004f2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8111 	beq.w	800515e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f42:	4b40      	ldr	r3, [pc, #256]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d111      	bne.n	8004f74 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f50:	4b3c      	ldr	r3, [pc, #240]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f56:	4a3b      	ldr	r2, [pc, #236]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004f58:	f043 0304 	orr.w	r3, r3, #4
 8004f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f60:	4b38      	ldr	r3, [pc, #224]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f74:	4b34      	ldr	r3, [pc, #208]	@ (8005048 <HAL_RCC_OscConfig+0x7bc>)
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d118      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004f80:	4b31      	ldr	r3, [pc, #196]	@ (8005048 <HAL_RCC_OscConfig+0x7bc>)
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	4a30      	ldr	r2, [pc, #192]	@ (8005048 <HAL_RCC_OscConfig+0x7bc>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8c:	f7fc fbc8 	bl	8001720 <HAL_GetTick>
 8004f90:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f94:	f7fc fbc4 	bl	8001720 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e347      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fa6:	4b28      	ldr	r3, [pc, #160]	@ (8005048 <HAL_RCC_OscConfig+0x7bc>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01f      	beq.n	8004ffe <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004fca:	4b1e      	ldr	r3, [pc, #120]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004fd2:	f043 0304 	orr.w	r3, r3, #4
 8004fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fda:	4b1a      	ldr	r3, [pc, #104]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fe0:	4a18      	ldr	r2, [pc, #96]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004fea:	e018      	b.n	800501e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fec:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ff2:	4a14      	ldr	r2, [pc, #80]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ffc:	e00f      	b.n	800501e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ffe:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8005000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005004:	4a0f      	ldr	r2, [pc, #60]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800500e:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8005010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005014:	4a0b      	ldr	r2, [pc, #44]	@ (8005044 <HAL_RCC_OscConfig+0x7b8>)
 8005016:	f023 0304 	bic.w	r3, r3, #4
 800501a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d057      	beq.n	80050d6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005026:	f7fc fb7b 	bl	8001720 <HAL_GetTick>
 800502a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502c:	e00e      	b.n	800504c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fc fb77 	bl	8001720 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d905      	bls.n	800504c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e2f8      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
 8005044:	46020c00 	.word	0x46020c00
 8005048:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504c:	4b9c      	ldr	r3, [pc, #624]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 800504e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0e9      	beq.n	800502e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01b      	beq.n	800509e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005066:	4b96      	ldr	r3, [pc, #600]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800506c:	4a94      	ldr	r2, [pc, #592]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 800506e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005072:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005076:	e00a      	b.n	800508e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005078:	f7fc fb52 	bl	8001720 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e2d3      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800508e:	4b8c      	ldr	r3, [pc, #560]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ed      	beq.n	8005078 <HAL_RCC_OscConfig+0x7ec>
 800509c:	e053      	b.n	8005146 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800509e:	4b88      	ldr	r3, [pc, #544]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80050a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050a4:	4a86      	ldr	r2, [pc, #536]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80050a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b0:	f7fc fb36 	bl	8001720 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e2b7      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80050c6:	4b7e      	ldr	r3, [pc, #504]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80050c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ed      	bne.n	80050b0 <HAL_RCC_OscConfig+0x824>
 80050d4:	e037      	b.n	8005146 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80050d6:	f7fc fb23 	bl	8001720 <HAL_GetTick>
 80050da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fc fb1f 	bl	8001720 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e2a0      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f4:	4b72      	ldr	r3, [pc, #456]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80050f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1ed      	bne.n	80050de <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005102:	4b6f      	ldr	r3, [pc, #444]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01a      	beq.n	8005146 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005110:	4b6b      	ldr	r3, [pc, #428]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005116:	4a6a      	ldr	r2, [pc, #424]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800511c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005120:	e00a      	b.n	8005138 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f7fc fafd 	bl	8001720 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005130:	4293      	cmp	r3, r2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e27e      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005138:	4b61      	ldr	r3, [pc, #388]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 800513a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800513e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1ed      	bne.n	8005122 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005146:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800514a:	2b01      	cmp	r3, #1
 800514c:	d107      	bne.n	800515e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800514e:	4b5c      	ldr	r3, [pc, #368]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005154:	4a5a      	ldr	r2, [pc, #360]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005156:	f023 0304 	bic.w	r3, r3, #4
 800515a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d036      	beq.n	80051d8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d019      	beq.n	80051a6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005172:	4b53      	ldr	r3, [pc, #332]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a52      	ldr	r2, [pc, #328]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005178:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800517c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800517e:	f7fc facf 	bl	8001720 <HAL_GetTick>
 8005182:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005186:	f7fc facb 	bl	8001720 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e24e      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005198:	4b49      	ldr	r3, [pc, #292]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCC_OscConfig+0x8fa>
 80051a4:	e018      	b.n	80051d8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80051a6:	4b46      	ldr	r3, [pc, #280]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a45      	ldr	r2, [pc, #276]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80051ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051b0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051b2:	f7fc fab5 	bl	8001720 <HAL_GetTick>
 80051b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ba:	f7fc fab1 	bl	8001720 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e234      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80051cc:	4b3c      	ldr	r3, [pc, #240]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f0      	bne.n	80051ba <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d036      	beq.n	8005252 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d019      	beq.n	8005220 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80051ec:	4b34      	ldr	r3, [pc, #208]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a33      	ldr	r2, [pc, #204]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80051f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051f8:	f7fc fa92 	bl	8001720 <HAL_GetTick>
 80051fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005200:	f7fc fa8e 	bl	8001720 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e211      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005212:	4b2b      	ldr	r3, [pc, #172]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x974>
 800521e:	e018      	b.n	8005252 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005220:	4b27      	ldr	r3, [pc, #156]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a26      	ldr	r2, [pc, #152]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800522a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800522c:	f7fc fa78 	bl	8001720 <HAL_GetTick>
 8005230:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005234:	f7fc fa74 	bl	8001720 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e1f7      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005246:	4b1e      	ldr	r3, [pc, #120]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d07f      	beq.n	800535e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005262:	2b00      	cmp	r3, #0
 8005264:	d062      	beq.n	800532c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005266:	4b16      	ldr	r3, [pc, #88]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4a15      	ldr	r2, [pc, #84]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 800526c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005270:	6093      	str	r3, [r2, #8]
 8005272:	4b13      	ldr	r3, [pc, #76]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527e:	4910      	ldr	r1, [pc, #64]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800528c:	d309      	bcc.n	80052a2 <HAL_RCC_OscConfig+0xa16>
 800528e:	4b0c      	ldr	r3, [pc, #48]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f023 021f 	bic.w	r2, r3, #31
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	4909      	ldr	r1, [pc, #36]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 800529c:	4313      	orrs	r3, r2
 800529e:	60cb      	str	r3, [r1, #12]
 80052a0:	e02a      	b.n	80052f8 <HAL_RCC_OscConfig+0xa6c>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	da0c      	bge.n	80052c4 <HAL_RCC_OscConfig+0xa38>
 80052aa:	4b05      	ldr	r3, [pc, #20]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	015b      	lsls	r3, r3, #5
 80052b8:	4901      	ldr	r1, [pc, #4]	@ (80052c0 <HAL_RCC_OscConfig+0xa34>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60cb      	str	r3, [r1, #12]
 80052be:	e01b      	b.n	80052f8 <HAL_RCC_OscConfig+0xa6c>
 80052c0:	46020c00 	.word	0x46020c00
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052cc:	d30a      	bcc.n	80052e4 <HAL_RCC_OscConfig+0xa58>
 80052ce:	4ba1      	ldr	r3, [pc, #644]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	029b      	lsls	r3, r3, #10
 80052dc:	499d      	ldr	r1, [pc, #628]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	60cb      	str	r3, [r1, #12]
 80052e2:	e009      	b.n	80052f8 <HAL_RCC_OscConfig+0xa6c>
 80052e4:	4b9b      	ldr	r3, [pc, #620]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	03db      	lsls	r3, r3, #15
 80052f2:	4998      	ldr	r1, [pc, #608]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80052f8:	4b96      	ldr	r3, [pc, #600]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a95      	ldr	r2, [pc, #596]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80052fe:	f043 0310 	orr.w	r3, r3, #16
 8005302:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005304:	f7fc fa0c 	bl	8001720 <HAL_GetTick>
 8005308:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800530c:	f7fc fa08 	bl	8001720 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e18b      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800531e:	4b8d      	ldr	r3, [pc, #564]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0xa80>
 800532a:	e018      	b.n	800535e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800532c:	4b89      	ldr	r3, [pc, #548]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a88      	ldr	r2, [pc, #544]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005332:	f023 0310 	bic.w	r3, r3, #16
 8005336:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005338:	f7fc f9f2 	bl	8001720 <HAL_GetTick>
 800533c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005340:	f7fc f9ee 	bl	8001720 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e171      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005352:	4b80      	ldr	r3, [pc, #512]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8166 	beq.w	8005634 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800536e:	4b79      	ldr	r3, [pc, #484]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b0c      	cmp	r3, #12
 8005378:	f000 80f2 	beq.w	8005560 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	2b02      	cmp	r3, #2
 8005382:	f040 80c5 	bne.w	8005510 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005386:	4b73      	ldr	r3, [pc, #460]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a72      	ldr	r2, [pc, #456]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 800538c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005390:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005392:	f7fc f9c5 	bl	8001720 <HAL_GetTick>
 8005396:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539a:	f7fc f9c1 	bl	8001720 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e144      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80053ac:	4b69      	ldr	r3, [pc, #420]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f0      	bne.n	800539a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b8:	4b66      	ldr	r3, [pc, #408]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80053ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d111      	bne.n	80053ea <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80053c6:	4b63      	ldr	r3, [pc, #396]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80053c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053cc:	4a61      	ldr	r2, [pc, #388]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80053ce:	f043 0304 	orr.w	r3, r3, #4
 80053d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80053d6:	4b5f      	ldr	r3, [pc, #380]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80053d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80053ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005558 <HAL_RCC_OscConfig+0xccc>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053f6:	d102      	bne.n	80053fe <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80053fe:	4b56      	ldr	r3, [pc, #344]	@ (8005558 <HAL_RCC_OscConfig+0xccc>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	4a55      	ldr	r2, [pc, #340]	@ (8005558 <HAL_RCC_OscConfig+0xccc>)
 8005404:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005408:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800540a:	4b52      	ldr	r3, [pc, #328]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800541e:	3a01      	subs	r2, #1
 8005420:	0212      	lsls	r2, r2, #8
 8005422:	4311      	orrs	r1, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005428:	430a      	orrs	r2, r1
 800542a:	494a      	ldr	r1, [pc, #296]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 800542c:	4313      	orrs	r3, r2
 800542e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005430:	4b48      	ldr	r3, [pc, #288]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005434:	4b49      	ldr	r3, [pc, #292]	@ (800555c <HAL_RCC_OscConfig+0xcd0>)
 8005436:	4013      	ands	r3, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800543c:	3a01      	subs	r2, #1
 800543e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005446:	3a01      	subs	r2, #1
 8005448:	0252      	lsls	r2, r2, #9
 800544a:	b292      	uxth	r2, r2
 800544c:	4311      	orrs	r1, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005452:	3a01      	subs	r2, #1
 8005454:	0412      	lsls	r2, r2, #16
 8005456:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800545a:	4311      	orrs	r1, r2
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005460:	3a01      	subs	r2, #1
 8005462:	0612      	lsls	r2, r2, #24
 8005464:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005468:	430a      	orrs	r2, r1
 800546a:	493a      	ldr	r1, [pc, #232]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 800546c:	4313      	orrs	r3, r2
 800546e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005470:	4b38      	ldr	r3, [pc, #224]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	4a37      	ldr	r2, [pc, #220]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005476:	f023 0310 	bic.w	r3, r3, #16
 800547a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005480:	4a34      	ldr	r2, [pc, #208]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005486:	4b33      	ldr	r3, [pc, #204]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548a:	4a32      	ldr	r2, [pc, #200]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 800548c:	f043 0310 	orr.w	r3, r3, #16
 8005490:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005492:	4b30      	ldr	r3, [pc, #192]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	f023 020c 	bic.w	r2, r3, #12
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549e:	492d      	ldr	r1, [pc, #180]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80054a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d105      	bne.n	80054b8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80054ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005558 <HAL_RCC_OscConfig+0xccc>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4a29      	ldr	r2, [pc, #164]	@ (8005558 <HAL_RCC_OscConfig+0xccc>)
 80054b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054b6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80054b8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d107      	bne.n	80054d0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80054c0:	4b24      	ldr	r3, [pc, #144]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80054c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c6:	4a23      	ldr	r2, [pc, #140]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80054c8:	f023 0304 	bic.w	r3, r3, #4
 80054cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80054d0:	4b20      	ldr	r3, [pc, #128]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80054d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80054dc:	f7fc f920 	bl	8001720 <HAL_GetTick>
 80054e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fc f91c 	bl	8001720 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e09f      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054f6:	4b17      	ldr	r3, [pc, #92]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005502:	4b14      	ldr	r3, [pc, #80]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005506:	4a13      	ldr	r2, [pc, #76]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800550c:	6293      	str	r3, [r2, #40]	@ 0x28
 800550e:	e091      	b.n	8005634 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005510:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a0f      	ldr	r2, [pc, #60]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800551a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800551c:	f7fc f900 	bl	8001720 <HAL_GetTick>
 8005520:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005524:	f7fc f8fc 	bl	8001720 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e07f      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005536:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005542:	4b04      	ldr	r3, [pc, #16]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	4a03      	ldr	r2, [pc, #12]	@ (8005554 <HAL_RCC_OscConfig+0xcc8>)
 8005548:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800554c:	f023 0303 	bic.w	r3, r3, #3
 8005550:	6293      	str	r3, [r2, #40]	@ 0x28
 8005552:	e06f      	b.n	8005634 <HAL_RCC_OscConfig+0xda8>
 8005554:	46020c00 	.word	0x46020c00
 8005558:	46020800 	.word	0x46020800
 800555c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005560:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <HAL_RCC_OscConfig+0xdb4>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005566:	4b36      	ldr	r3, [pc, #216]	@ (8005640 <HAL_RCC_OscConfig+0xdb4>)
 8005568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005570:	2b01      	cmp	r3, #1
 8005572:	d039      	beq.n	80055e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0203 	and.w	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d132      	bne.n	80055e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d129      	bne.n	80055e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800559e:	429a      	cmp	r2, r3
 80055a0:	d122      	bne.n	80055e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ac:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d11a      	bne.n	80055e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	0a5b      	lsrs	r3, r3, #9
 80055b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d111      	bne.n	80055e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d108      	bne.n	80055e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	0e1b      	lsrs	r3, r3, #24
 80055da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d001      	beq.n	80055ec <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e024      	b.n	8005636 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80055ec:	4b14      	ldr	r3, [pc, #80]	@ (8005640 <HAL_RCC_OscConfig+0xdb4>)
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d01a      	beq.n	8005634 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80055fe:	4b10      	ldr	r3, [pc, #64]	@ (8005640 <HAL_RCC_OscConfig+0xdb4>)
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	4a0f      	ldr	r2, [pc, #60]	@ (8005640 <HAL_RCC_OscConfig+0xdb4>)
 8005604:	f023 0310 	bic.w	r3, r3, #16
 8005608:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560a:	f7fc f889 	bl	8001720 <HAL_GetTick>
 800560e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005610:	bf00      	nop
 8005612:	f7fc f885 	bl	8001720 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561a:	4293      	cmp	r3, r2
 800561c:	d0f9      	beq.n	8005612 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005622:	4a07      	ldr	r2, [pc, #28]	@ (8005640 <HAL_RCC_OscConfig+0xdb4>)
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005628:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <HAL_RCC_OscConfig+0xdb4>)
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	4a04      	ldr	r2, [pc, #16]	@ (8005640 <HAL_RCC_OscConfig+0xdb4>)
 800562e:	f043 0310 	orr.w	r3, r3, #16
 8005632:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3738      	adds	r7, #56	@ 0x38
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	46020c00 	.word	0x46020c00

08005644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e1d9      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005658:	4b9b      	ldr	r3, [pc, #620]	@ (80058c8 <HAL_RCC_ClockConfig+0x284>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d910      	bls.n	8005688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b98      	ldr	r3, [pc, #608]	@ (80058c8 <HAL_RCC_ClockConfig+0x284>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 020f 	bic.w	r2, r3, #15
 800566e:	4996      	ldr	r1, [pc, #600]	@ (80058c8 <HAL_RCC_ClockConfig+0x284>)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b94      	ldr	r3, [pc, #592]	@ (80058c8 <HAL_RCC_ClockConfig+0x284>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e1c1      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d010      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	4b8c      	ldr	r3, [pc, #560]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d908      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80056a4:	4b89      	ldr	r3, [pc, #548]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	4986      	ldr	r1, [pc, #536]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d012      	beq.n	80056e8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	4b81      	ldr	r3, [pc, #516]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d909      	bls.n	80056e8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80056d4:	4b7d      	ldr	r3, [pc, #500]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	497a      	ldr	r1, [pc, #488]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d010      	beq.n	8005716 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	4b74      	ldr	r3, [pc, #464]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005700:	429a      	cmp	r2, r3
 8005702:	d908      	bls.n	8005716 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005704:	4b71      	ldr	r3, [pc, #452]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	496e      	ldr	r1, [pc, #440]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005712:	4313      	orrs	r3, r2
 8005714:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d010      	beq.n	8005744 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	4b69      	ldr	r3, [pc, #420]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	429a      	cmp	r2, r3
 8005730:	d908      	bls.n	8005744 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005732:	4b66      	ldr	r3, [pc, #408]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 020f 	bic.w	r2, r3, #15
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	4963      	ldr	r1, [pc, #396]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005740:	4313      	orrs	r3, r2
 8005742:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 80d2 	beq.w	80058f6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b03      	cmp	r3, #3
 800575c:	d143      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800575e:	4b5b      	ldr	r3, [pc, #364]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d110      	bne.n	800578e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800576c:	4b57      	ldr	r3, [pc, #348]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 800576e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005772:	4a56      	ldr	r2, [pc, #344]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800577c:	4b53      	ldr	r3, [pc, #332]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 800577e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	60bb      	str	r3, [r7, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800578e:	f7fb ffc7 	bl	8001720 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005794:	4b4e      	ldr	r3, [pc, #312]	@ (80058d0 <HAL_RCC_ClockConfig+0x28c>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00f      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80057a2:	f7fb ffbd 	bl	8001720 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e12b      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80057b4:	4b46      	ldr	r3, [pc, #280]	@ (80058d0 <HAL_RCC_ClockConfig+0x28c>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80057c6:	4b41      	ldr	r3, [pc, #260]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80057c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057cc:	4a3f      	ldr	r2, [pc, #252]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80057ce:	f023 0304 	bic.w	r3, r3, #4
 80057d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80057d6:	4b3d      	ldr	r3, [pc, #244]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d121      	bne.n	8005826 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e112      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d107      	bne.n	80057fe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ee:	4b37      	ldr	r3, [pc, #220]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d115      	bne.n	8005826 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e106      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d107      	bne.n	8005816 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005806:	4b31      	ldr	r3, [pc, #196]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0fa      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005816:	4b2d      	ldr	r3, [pc, #180]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0f2      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005826:	4b29      	ldr	r3, [pc, #164]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f023 0203 	bic.w	r2, r3, #3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	4926      	ldr	r1, [pc, #152]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005834:	4313      	orrs	r3, r2
 8005836:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005838:	f7fb ff72 	bl	8001720 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b03      	cmp	r3, #3
 8005844:	d112      	bne.n	800586c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005846:	e00a      	b.n	800585e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005848:	f7fb ff6a 	bl	8001720 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e0d6      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800585e:	4b1b      	ldr	r3, [pc, #108]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f003 030c 	and.w	r3, r3, #12
 8005866:	2b0c      	cmp	r3, #12
 8005868:	d1ee      	bne.n	8005848 <HAL_RCC_ClockConfig+0x204>
 800586a:	e044      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b02      	cmp	r3, #2
 8005872:	d112      	bne.n	800589a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005874:	e00a      	b.n	800588c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005876:	f7fb ff53 	bl	8001720 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e0bf      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800588c:	4b0f      	ldr	r3, [pc, #60]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f003 030c 	and.w	r3, r3, #12
 8005894:	2b08      	cmp	r3, #8
 8005896:	d1ee      	bne.n	8005876 <HAL_RCC_ClockConfig+0x232>
 8005898:	e02d      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d123      	bne.n	80058ea <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80058a2:	e00a      	b.n	80058ba <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a4:	f7fb ff3c 	bl	8001720 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e0a8      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80058ba:	4b04      	ldr	r3, [pc, #16]	@ (80058cc <HAL_RCC_ClockConfig+0x288>)
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1ee      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x260>
 80058c6:	e016      	b.n	80058f6 <HAL_RCC_ClockConfig+0x2b2>
 80058c8:	40022000 	.word	0x40022000
 80058cc:	46020c00 	.word	0x46020c00
 80058d0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d4:	f7fb ff24 	bl	8001720 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e090      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d1ee      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d010      	beq.n	8005924 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	4b43      	ldr	r3, [pc, #268]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	429a      	cmp	r2, r3
 8005910:	d208      	bcs.n	8005924 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005912:	4b40      	ldr	r3, [pc, #256]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f023 020f 	bic.w	r2, r3, #15
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	493d      	ldr	r1, [pc, #244]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 8005920:	4313      	orrs	r3, r2
 8005922:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005924:	4b3c      	ldr	r3, [pc, #240]	@ (8005a18 <HAL_RCC_ClockConfig+0x3d4>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d210      	bcs.n	8005954 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005932:	4b39      	ldr	r3, [pc, #228]	@ (8005a18 <HAL_RCC_ClockConfig+0x3d4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 020f 	bic.w	r2, r3, #15
 800593a:	4937      	ldr	r1, [pc, #220]	@ (8005a18 <HAL_RCC_ClockConfig+0x3d4>)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	4313      	orrs	r3, r2
 8005940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005942:	4b35      	ldr	r3, [pc, #212]	@ (8005a18 <HAL_RCC_ClockConfig+0x3d4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e05b      	b.n	8005a0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d010      	beq.n	8005982 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	4b2b      	ldr	r3, [pc, #172]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800596c:	429a      	cmp	r2, r3
 800596e:	d208      	bcs.n	8005982 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005970:	4b28      	ldr	r3, [pc, #160]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4925      	ldr	r1, [pc, #148]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 800597e:	4313      	orrs	r3, r2
 8005980:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d012      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	4b20      	ldr	r3, [pc, #128]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800599c:	429a      	cmp	r2, r3
 800599e:	d209      	bcs.n	80059b4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80059a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	4919      	ldr	r1, [pc, #100]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	4b13      	ldr	r3, [pc, #76]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d208      	bcs.n	80059e2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80059d0:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	490d      	ldr	r1, [pc, #52]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80059e2:	f000 f821 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80059e6:	4602      	mov	r2, r0
 80059e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a14 <HAL_RCC_ClockConfig+0x3d0>)
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	490a      	ldr	r1, [pc, #40]	@ (8005a1c <HAL_RCC_ClockConfig+0x3d8>)
 80059f2:	5ccb      	ldrb	r3, [r1, r3]
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
 80059f8:	4a09      	ldr	r2, [pc, #36]	@ (8005a20 <HAL_RCC_ClockConfig+0x3dc>)
 80059fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059fc:	4b09      	ldr	r3, [pc, #36]	@ (8005a24 <HAL_RCC_ClockConfig+0x3e0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fb fe03 	bl	800160c <HAL_InitTick>
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	46020c00 	.word	0x46020c00
 8005a18:	40022000 	.word	0x40022000
 8005a1c:	0800b9f4 	.word	0x0800b9f4
 8005a20:	20000000 	.word	0x20000000
 8005a24:	2000005c 	.word	0x2000005c

08005a28 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b08b      	sub	sp, #44	@ 0x2c
 8005a2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a36:	4b78      	ldr	r3, [pc, #480]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a40:	4b75      	ldr	r3, [pc, #468]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x34>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d121      	bne.n	8005a9a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d11e      	bne.n	8005a9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005a5c:	4b6e      	ldr	r3, [pc, #440]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d107      	bne.n	8005a78 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005a68:	4b6b      	ldr	r3, [pc, #428]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a6e:	0b1b      	lsrs	r3, r3, #12
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a76:	e005      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005a78:	4b67      	ldr	r3, [pc, #412]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	0f1b      	lsrs	r3, r3, #28
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a84:	4a65      	ldr	r2, [pc, #404]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d110      	bne.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a98:	e00d      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d102      	bne.n	8005aac <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005aa6:	4b5e      	ldr	r3, [pc, #376]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005aa8:	623b      	str	r3, [r7, #32]
 8005aaa:	e004      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005ab4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	f040 80a5 	bne.w	8005c08 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005abe:	4b56      	ldr	r3, [pc, #344]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005ac8:	4b53      	ldr	r3, [pc, #332]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005acc:	0a1b      	lsrs	r3, r3, #8
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005ad6:	4b50      	ldr	r3, [pc, #320]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae6:	08db      	lsrs	r3, r3, #3
 8005ae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d003      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0xe4>
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d022      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0x128>
 8005b0a:	e043      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005c24 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b2e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b32:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005c28 <HAL_RCC_GetSysClockFreq+0x200>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b4e:	e046      	b.n	8005bde <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005c24 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b2d      	ldr	r3, [pc, #180]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b72:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b76:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005c28 <HAL_RCC_GetSysClockFreq+0x200>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b92:	e024      	b.n	8005bde <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bac:	4b1a      	ldr	r3, [pc, #104]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb4:	ee07 3a90 	vmov	s15, r3
 8005bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bbc:	ed97 6a01 	vldr	s12, [r7, #4]
 8005bc0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005c28 <HAL_RCC_GetSysClockFreq+0x200>
 8005bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bdc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005bde:	4b0e      	ldr	r3, [pc, #56]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be2:	0e1b      	lsrs	r3, r3, #24
 8005be4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005be8:	3301      	adds	r3, #1
 8005bea:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c02:	ee17 3a90 	vmov	r3, s15
 8005c06:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	372c      	adds	r7, #44	@ 0x2c
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	46020c00 	.word	0x46020c00
 8005c1c:	0800ba04 	.word	0x0800ba04
 8005c20:	00f42400 	.word	0x00f42400
 8005c24:	4b742400 	.word	0x4b742400
 8005c28:	46000000 	.word	0x46000000

08005c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005c30:	f7ff fefa 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b07      	ldr	r3, [pc, #28]	@ (8005c54 <HAL_RCC_GetHCLKFreq+0x28>)
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	4906      	ldr	r1, [pc, #24]	@ (8005c58 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005c40:	5ccb      	ldrb	r3, [r1, r3]
 8005c42:	fa22 f303 	lsr.w	r3, r2, r3
 8005c46:	4a05      	ldr	r2, [pc, #20]	@ (8005c5c <HAL_RCC_GetHCLKFreq+0x30>)
 8005c48:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005c4a:	4b04      	ldr	r3, [pc, #16]	@ (8005c5c <HAL_RCC_GetHCLKFreq+0x30>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	46020c00 	.word	0x46020c00
 8005c58:	0800b9f4 	.word	0x0800b9f4
 8005c5c:	20000000 	.word	0x20000000

08005c60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c68:	4b3e      	ldr	r3, [pc, #248]	@ (8005d64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c76:	f7fe fddb 	bl	8004830 <HAL_PWREx_GetVoltageRange>
 8005c7a:	6178      	str	r0, [r7, #20]
 8005c7c:	e019      	b.n	8005cb2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c7e:	4b39      	ldr	r3, [pc, #228]	@ (8005d64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c84:	4a37      	ldr	r2, [pc, #220]	@ (8005d64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c86:	f043 0304 	orr.w	r3, r3, #4
 8005c8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005c8e:	4b35      	ldr	r3, [pc, #212]	@ (8005d64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c9c:	f7fe fdc8 	bl	8004830 <HAL_PWREx_GetVoltageRange>
 8005ca0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ca2:	4b30      	ldr	r3, [pc, #192]	@ (8005d64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8005d64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005caa:	f023 0304 	bic.w	r3, r3, #4
 8005cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cb8:	d003      	beq.n	8005cc2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cc0:	d109      	bne.n	8005cd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cc8:	d202      	bcs.n	8005cd0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005cca:	2301      	movs	r3, #1
 8005ccc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005cce:	e033      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005cd4:	e030      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cdc:	d208      	bcs.n	8005cf0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce4:	d102      	bne.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	e025      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e035      	b.n	8005d5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cf6:	d90f      	bls.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d04:	d902      	bls.n	8005d0c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	e015      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	e012      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	e00f      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d1e:	d109      	bne.n	8005d34 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d26:	d102      	bne.n	8005d2e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005d28:	2301      	movs	r3, #1
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e004      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005d2e:	2302      	movs	r3, #2
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	e001      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005d34:	2301      	movs	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d38:	4b0b      	ldr	r3, [pc, #44]	@ (8005d68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f023 020f 	bic.w	r2, r3, #15
 8005d40:	4909      	ldr	r1, [pc, #36]	@ (8005d68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005d48:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d001      	beq.n	8005d5a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	46020c00 	.word	0x46020c00
 8005d68:	40022000 	.word	0x40022000

08005d6c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d70:	b0b8      	sub	sp, #224	@ 0xe0
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f002 0401 	and.w	r4, r2, #1
 8005d90:	2500      	movs	r5, #0
 8005d92:	ea54 0305 	orrs.w	r3, r4, r5
 8005d96:	d00b      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005d98:	4bca      	ldr	r3, [pc, #808]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d9e:	f023 0103 	bic.w	r1, r3, #3
 8005da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da8:	4ac6      	ldr	r2, [pc, #792]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005daa:	430b      	orrs	r3, r1
 8005dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f002 0802 	and.w	r8, r2, #2
 8005dbc:	f04f 0900 	mov.w	r9, #0
 8005dc0:	ea58 0309 	orrs.w	r3, r8, r9
 8005dc4:	d00b      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005dc6:	4bbf      	ldr	r3, [pc, #764]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dcc:	f023 010c 	bic.w	r1, r3, #12
 8005dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd6:	4abb      	ldr	r2, [pc, #748]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f002 0a04 	and.w	sl, r2, #4
 8005dea:	f04f 0b00 	mov.w	fp, #0
 8005dee:	ea5a 030b 	orrs.w	r3, sl, fp
 8005df2:	d00b      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005df4:	4bb3      	ldr	r3, [pc, #716]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dfa:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005dfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e04:	4aaf      	ldr	r2, [pc, #700]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e06:	430b      	orrs	r3, r1
 8005e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f002 0308 	and.w	r3, r2, #8
 8005e18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	d00b      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005e2c:	4ba5      	ldr	r3, [pc, #660]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e3c:	4aa1      	ldr	r2, [pc, #644]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f002 0310 	and.w	r3, r2, #16
 8005e50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e54:	2300      	movs	r3, #0
 8005e56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4313      	orrs	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005e64:	4b97      	ldr	r3, [pc, #604]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e74:	4a93      	ldr	r2, [pc, #588]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e76:	430b      	orrs	r3, r1
 8005e78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f002 0320 	and.w	r3, r2, #32
 8005e88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005e9c:	4b89      	ldr	r3, [pc, #548]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ea2:	f023 0107 	bic.w	r1, r3, #7
 8005ea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eac:	4a85      	ldr	r2, [pc, #532]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005eca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005ed4:	4b7b      	ldr	r3, [pc, #492]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eda:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005ede:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ee2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ee4:	4a77      	ldr	r2, [pc, #476]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ef8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f02:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	d00b      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005f0c:	4b6d      	ldr	r3, [pc, #436]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f1c:	4a69      	ldr	r2, [pc, #420]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f34:	2300      	movs	r3, #0
 8005f36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f3a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4313      	orrs	r3, r2
 8005f42:	d00b      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005f44:	4b5f      	ldr	r3, [pc, #380]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f54:	4a5b      	ldr	r2, [pc, #364]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f56:	430b      	orrs	r3, r1
 8005f58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d00b      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005f7c:	4b51      	ldr	r3, [pc, #324]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f82:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005f86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005faa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	d00b      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005fb4:	4b43      	ldr	r3, [pc, #268]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fba:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005fbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fc4:	4a3f      	ldr	r2, [pc, #252]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005fd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fe2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d00b      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005fec:	4b35      	ldr	r3, [pc, #212]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ff2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005ff6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ffc:	4a31      	ldr	r2, [pc, #196]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ffe:	430b      	orrs	r3, r1
 8006000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006010:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006012:	2300      	movs	r3, #0
 8006014:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006016:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d00c      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006020:	4b28      	ldr	r3, [pc, #160]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006026:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800602a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800602e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006032:	4a24      	ldr	r2, [pc, #144]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006034:	430b      	orrs	r3, r1
 8006036:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800603a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006046:	673b      	str	r3, [r7, #112]	@ 0x70
 8006048:	2300      	movs	r3, #0
 800604a:	677b      	str	r3, [r7, #116]	@ 0x74
 800604c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006050:	460b      	mov	r3, r1
 8006052:	4313      	orrs	r3, r2
 8006054:	d04f      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605e:	2b80      	cmp	r3, #128	@ 0x80
 8006060:	d02d      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006062:	2b80      	cmp	r3, #128	@ 0x80
 8006064:	d827      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006066:	2b60      	cmp	r3, #96	@ 0x60
 8006068:	d02e      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800606a:	2b60      	cmp	r3, #96	@ 0x60
 800606c:	d823      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800606e:	2b40      	cmp	r3, #64	@ 0x40
 8006070:	d006      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006072:	2b40      	cmp	r3, #64	@ 0x40
 8006074:	d81f      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800607a:	2b20      	cmp	r3, #32
 800607c:	d011      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800607e:	e01a      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006080:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006084:	4a0f      	ldr	r2, [pc, #60]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800608a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800608c:	e01d      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800608e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006092:	3308      	adds	r3, #8
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fc0d 	bl	80068b4 <RCCEx_PLL2_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80060a0:	e013      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060a6:	332c      	adds	r3, #44	@ 0x2c
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fc9b 	bl	80069e4 <RCCEx_PLL3_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80060b4:	e009      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80060bc:	e005      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80060be:	bf00      	nop
 80060c0:	e003      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80060c2:	bf00      	nop
 80060c4:	46020c00 	.word	0x46020c00
        break;
 80060c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10d      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80060d2:	4bb6      	ldr	r3, [pc, #728]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060d8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80060dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e4:	4ab1      	ldr	r2, [pc, #708]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060e6:	430b      	orrs	r3, r1
 80060e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80060ec:	e003      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80060f2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006102:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006104:	2300      	movs	r3, #0
 8006106:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006108:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800610c:	460b      	mov	r3, r1
 800610e:	4313      	orrs	r3, r2
 8006110:	d053      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800611a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800611e:	d033      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006124:	d82c      	bhi.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800612a:	d02f      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800612c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006130:	d826      	bhi.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006136:	d008      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800613c:	d820      	bhi.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006146:	d011      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006148:	e01a      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800614a:	4b98      	ldr	r3, [pc, #608]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800614c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614e:	4a97      	ldr	r2, [pc, #604]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006154:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006156:	e01a      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800615c:	3308      	adds	r3, #8
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fba8 	bl	80068b4 <RCCEx_PLL2_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800616a:	e010      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800616c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006170:	332c      	adds	r3, #44	@ 0x2c
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fc36 	bl	80069e4 <RCCEx_PLL3_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800617e:	e006      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006186:	e002      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006188:	bf00      	nop
 800618a:	e000      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800618c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10d      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006196:	4b85      	ldr	r3, [pc, #532]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006198:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800619c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80061a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061a8:	4a80      	ldr	r2, [pc, #512]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80061aa:	430b      	orrs	r3, r1
 80061ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80061b0:	e003      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80061b6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80061ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80061c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80061c8:	2300      	movs	r3, #0
 80061ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80061cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80061d0:	460b      	mov	r3, r1
 80061d2:	4313      	orrs	r3, r2
 80061d4:	d046      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80061d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80061e2:	d028      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80061e8:	d821      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80061ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ee:	d022      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061f4:	d81b      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80061f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061fa:	d01c      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006200:	d815      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006206:	d008      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800620c:	d80f      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d011      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006216:	d00e      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006218:	e009      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800621a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800621e:	3308      	adds	r3, #8
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fb47 	bl	80068b4 <RCCEx_PLL2_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800622c:	e004      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006234:	e000      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8006236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006238:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10d      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006240:	4b5a      	ldr	r3, [pc, #360]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006246:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800624a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800624e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006252:	4a56      	ldr	r2, [pc, #344]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006254:	430b      	orrs	r3, r1
 8006256:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800625a:	e003      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006260:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006270:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006272:	2300      	movs	r3, #0
 8006274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006276:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800627a:	460b      	mov	r3, r1
 800627c:	4313      	orrs	r3, r2
 800627e:	d03f      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006288:	2b04      	cmp	r3, #4
 800628a:	d81e      	bhi.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800628c:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062d3 	.word	0x080062d3
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062b7 	.word	0x080062b7
 80062a0:	080062d3 	.word	0x080062d3
 80062a4:	080062d3 	.word	0x080062d3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062a8:	4b40      	ldr	r3, [pc, #256]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ac:	4a3f      	ldr	r2, [pc, #252]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062b2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80062b4:	e00e      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062ba:	332c      	adds	r3, #44	@ 0x2c
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fb91 	bl	80069e4 <RCCEx_PLL3_Config>
 80062c2:	4603      	mov	r3, r0
 80062c4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062c8:	e004      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062d0:	e000      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80062d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062d4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10d      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80062dc:	4b33      	ldr	r3, [pc, #204]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062e2:	f023 0107 	bic.w	r1, r3, #7
 80062e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ee:	4a2f      	ldr	r2, [pc, #188]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062f0:	430b      	orrs	r3, r1
 80062f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062f6:	e003      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062fc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006300:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800630c:	653b      	str	r3, [r7, #80]	@ 0x50
 800630e:	2300      	movs	r3, #0
 8006310:	657b      	str	r3, [r7, #84]	@ 0x54
 8006312:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006316:	460b      	mov	r3, r1
 8006318:	4313      	orrs	r3, r2
 800631a:	d04d      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800631c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006324:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006328:	d028      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x610>
 800632a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800632e:	d821      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006330:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006334:	d024      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006336:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800633a:	d81b      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800633c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006340:	d00e      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006342:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006346:	d815      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006350:	d110      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006352:	4b16      	ldr	r3, [pc, #88]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006356:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800635c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800635e:	e012      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006364:	332c      	adds	r3, #44	@ 0x2c
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fb3c 	bl	80069e4 <RCCEx_PLL3_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006372:	e008      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800637a:	e004      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800637c:	bf00      	nop
 800637e:	e002      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006380:	bf00      	nop
 8006382:	e000      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006384:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006386:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800638a:	2b00      	cmp	r3, #0
 800638c:	d110      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800638e:	4b07      	ldr	r3, [pc, #28]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006394:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800639c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063a0:	4a02      	ldr	r2, [pc, #8]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063a2:	430b      	orrs	r3, r1
 80063a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80063aa:	bf00      	nop
 80063ac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80063b4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063c6:	2300      	movs	r3, #0
 80063c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80063ce:	460b      	mov	r3, r1
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f000 80b5 	beq.w	8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063d6:	2300      	movs	r3, #0
 80063d8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063dc:	4b9d      	ldr	r3, [pc, #628]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d113      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ea:	4b9a      	ldr	r3, [pc, #616]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063f0:	4a98      	ldr	r2, [pc, #608]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063f2:	f043 0304 	orr.w	r3, r3, #4
 80063f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80063fa:	4b96      	ldr	r3, [pc, #600]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006408:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006412:	4b91      	ldr	r3, [pc, #580]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	4a90      	ldr	r2, [pc, #576]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006418:	f043 0301 	orr.w	r3, r3, #1
 800641c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800641e:	f7fb f97f 	bl	8001720 <HAL_GetTick>
 8006422:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006426:	e00b      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006428:	f7fb f97a 	bl	8001720 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d903      	bls.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800643e:	e005      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006440:	4b85      	ldr	r3, [pc, #532]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0ed      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800644c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006450:	2b00      	cmp	r3, #0
 8006452:	d165      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006454:	4b7f      	ldr	r3, [pc, #508]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800645a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800645e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006466:	2b00      	cmp	r3, #0
 8006468:	d023      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800646a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800646e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006476:	4293      	cmp	r3, r2
 8006478:	d01b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800647a:	4b76      	ldr	r3, [pc, #472]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800647c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006484:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006488:	4b72      	ldr	r3, [pc, #456]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800648a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800648e:	4a71      	ldr	r2, [pc, #452]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006494:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006498:	4b6e      	ldr	r3, [pc, #440]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800649a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800649e:	4a6d      	ldr	r2, [pc, #436]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064a8:	4a6a      	ldr	r2, [pc, #424]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d019      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064be:	f7fb f92f 	bl	8001720 <HAL_GetTick>
 80064c2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c6:	e00d      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c8:	f7fb f92a 	bl	8001720 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064d8:	429a      	cmp	r2, r3
 80064da:	d903      	bls.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80064e2:	e006      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0ea      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80064f2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10d      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80064fa:	4b56      	ldr	r3, [pc, #344]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006500:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006504:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006508:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800650c:	4a51      	ldr	r2, [pc, #324]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800650e:	430b      	orrs	r3, r1
 8006510:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006514:	e008      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006516:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800651a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800651e:	e003      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006524:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006528:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800652c:	2b01      	cmp	r3, #1
 800652e:	d107      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006530:	4b48      	ldr	r3, [pc, #288]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006536:	4a47      	ldr	r2, [pc, #284]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006538:	f023 0304 	bic.w	r3, r3, #4
 800653c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800654c:	643b      	str	r3, [r7, #64]	@ 0x40
 800654e:	2300      	movs	r3, #0
 8006550:	647b      	str	r3, [r7, #68]	@ 0x44
 8006552:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006556:	460b      	mov	r3, r1
 8006558:	4313      	orrs	r3, r2
 800655a:	d042      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800655c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006560:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006564:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006568:	d022      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800656a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800656e:	d81b      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006570:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006574:	d011      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800657a:	d815      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d019      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006580:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006584:	d110      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006586:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800658a:	3308      	adds	r3, #8
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f991 	bl	80068b4 <RCCEx_PLL2_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006598:	e00d      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659a:	4b2e      	ldr	r3, [pc, #184]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800659c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659e:	4a2d      	ldr	r2, [pc, #180]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065a4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80065a6:	e006      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80065ae:	e002      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80065b0:	bf00      	nop
 80065b2:	e000      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80065b4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80065b6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10d      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80065be:	4b25      	ldr	r3, [pc, #148]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065c4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80065c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065d0:	4a20      	ldr	r2, [pc, #128]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065d2:	430b      	orrs	r3, r1
 80065d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065d8:	e003      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065da:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80065de:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065f0:	2300      	movs	r3, #0
 80065f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80065f8:	460b      	mov	r3, r1
 80065fa:	4313      	orrs	r3, r2
 80065fc:	d032      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80065fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006602:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800660a:	d00b      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006610:	d804      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d008      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661a:	d007      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006622:	e004      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006624:	bf00      	nop
 8006626:	e002      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800662c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800662e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006632:	2b00      	cmp	r3, #0
 8006634:	d112      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006636:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006638:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800663c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006644:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006648:	4a02      	ldr	r2, [pc, #8]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800664a:	430b      	orrs	r3, r1
 800664c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006650:	e008      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006652:	bf00      	nop
 8006654:	46020c00 	.word	0x46020c00
 8006658:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006660:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006670:	633b      	str	r3, [r7, #48]	@ 0x30
 8006672:	2300      	movs	r3, #0
 8006674:	637b      	str	r3, [r7, #52]	@ 0x34
 8006676:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800667a:	460b      	mov	r3, r1
 800667c:	4313      	orrs	r3, r2
 800667e:	d019      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006684:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800668c:	d105      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800668e:	4b88      	ldr	r3, [pc, #544]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006692:	4a87      	ldr	r2, [pc, #540]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006698:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800669a:	4b85      	ldr	r3, [pc, #532]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800669c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80066a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066ac:	4a80      	ldr	r2, [pc, #512]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066ae:	430b      	orrs	r3, r1
 80066b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80066b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066c2:	2300      	movs	r3, #0
 80066c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066ca:	460b      	mov	r3, r1
 80066cc:	4313      	orrs	r3, r2
 80066ce:	d00c      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80066d0:	4b77      	ldr	r3, [pc, #476]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066e2:	4973      	ldr	r1, [pc, #460]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80066ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80066f6:	623b      	str	r3, [r7, #32]
 80066f8:	2300      	movs	r3, #0
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80066fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006700:	460b      	mov	r3, r1
 8006702:	4313      	orrs	r3, r2
 8006704:	d00c      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006706:	4b6a      	ldr	r3, [pc, #424]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800670c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006714:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006718:	4965      	ldr	r1, [pc, #404]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d00c      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800673c:	4b5c      	ldr	r3, [pc, #368]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800673e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006742:	f023 0218 	bic.w	r2, r3, #24
 8006746:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800674a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800674e:	4958      	ldr	r1, [pc, #352]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006756:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800676c:	460b      	mov	r3, r1
 800676e:	4313      	orrs	r3, r2
 8006770:	d032      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006772:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006776:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800677a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800677e:	d105      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006780:	4b4b      	ldr	r3, [pc, #300]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	4a4a      	ldr	r2, [pc, #296]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800678a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800678c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006790:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006794:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006798:	d108      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800679a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800679e:	3308      	adds	r3, #8
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f887 	bl	80068b4 <RCCEx_PLL2_Config>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80067ac:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10d      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80067b4:	4b3e      	ldr	r3, [pc, #248]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067c6:	493a      	ldr	r1, [pc, #232]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80067ce:	e003      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067d4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80067d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067ee:	460b      	mov	r3, r1
 80067f0:	4313      	orrs	r3, r2
 80067f2:	d03a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80067f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006800:	d00e      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006802:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006806:	d815      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d017      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800680c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006810:	d110      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006812:	4b27      	ldr	r3, [pc, #156]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006816:	4a26      	ldr	r2, [pc, #152]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800681c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800681e:	e00e      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006824:	3308      	adds	r3, #8
 8006826:	4618      	mov	r0, r3
 8006828:	f000 f844 	bl	80068b4 <RCCEx_PLL2_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006832:	e004      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800683a:	e000      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800683c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800683e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10d      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006846:	4b1a      	ldr	r3, [pc, #104]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800684c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006850:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006858:	4915      	ldr	r1, [pc, #84]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006860:	e003      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006862:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006866:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800686a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	2300      	movs	r3, #0
 800687a:	607b      	str	r3, [r7, #4]
 800687c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d00c      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006886:	4b0a      	ldr	r3, [pc, #40]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800688c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006894:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006898:	4905      	ldr	r1, [pc, #20]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800689a:	4313      	orrs	r3, r2
 800689c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80068a0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	37e0      	adds	r7, #224	@ 0xe0
 80068a8:	46bd      	mov	sp, r7
 80068aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ae:	bf00      	nop
 80068b0:	46020c00 	.word	0x46020c00

080068b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80068bc:	4b47      	ldr	r3, [pc, #284]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a46      	ldr	r2, [pc, #280]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 80068c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068c8:	f7fa ff2a 	bl	8001720 <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068ce:	e008      	b.n	80068e2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068d0:	f7fa ff26 	bl	8001720 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e077      	b.n	80069d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068e2:	4b3e      	ldr	r3, [pc, #248]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80068ee:	4b3b      	ldr	r3, [pc, #236]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6811      	ldr	r1, [r2, #0]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6852      	ldr	r2, [r2, #4]
 8006902:	3a01      	subs	r2, #1
 8006904:	0212      	lsls	r2, r2, #8
 8006906:	430a      	orrs	r2, r1
 8006908:	4934      	ldr	r1, [pc, #208]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 800690a:	4313      	orrs	r3, r2
 800690c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800690e:	4b33      	ldr	r3, [pc, #204]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 8006910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006912:	4b33      	ldr	r3, [pc, #204]	@ (80069e0 <RCCEx_PLL2_Config+0x12c>)
 8006914:	4013      	ands	r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6892      	ldr	r2, [r2, #8]
 800691a:	3a01      	subs	r2, #1
 800691c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68d2      	ldr	r2, [r2, #12]
 8006924:	3a01      	subs	r2, #1
 8006926:	0252      	lsls	r2, r2, #9
 8006928:	b292      	uxth	r2, r2
 800692a:	4311      	orrs	r1, r2
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6912      	ldr	r2, [r2, #16]
 8006930:	3a01      	subs	r2, #1
 8006932:	0412      	lsls	r2, r2, #16
 8006934:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006938:	4311      	orrs	r1, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6952      	ldr	r2, [r2, #20]
 800693e:	3a01      	subs	r2, #1
 8006940:	0612      	lsls	r2, r2, #24
 8006942:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006946:	430a      	orrs	r2, r1
 8006948:	4924      	ldr	r1, [pc, #144]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 800694a:	4313      	orrs	r3, r2
 800694c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800694e:	4b23      	ldr	r3, [pc, #140]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	f023 020c 	bic.w	r2, r3, #12
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	4920      	ldr	r1, [pc, #128]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 800695c:	4313      	orrs	r3, r2
 800695e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006960:	4b1e      	ldr	r3, [pc, #120]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 8006962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	491c      	ldr	r1, [pc, #112]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 800696a:	4313      	orrs	r3, r2
 800696c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800696e:	4b1b      	ldr	r3, [pc, #108]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	4a1a      	ldr	r2, [pc, #104]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 8006974:	f023 0310 	bic.w	r3, r3, #16
 8006978:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800697a:	4b18      	ldr	r3, [pc, #96]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006982:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	69d2      	ldr	r2, [r2, #28]
 800698a:	00d2      	lsls	r2, r2, #3
 800698c:	4913      	ldr	r1, [pc, #76]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 800698e:	4313      	orrs	r3, r2
 8006990:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006992:	4b12      	ldr	r3, [pc, #72]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 8006994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006996:	4a11      	ldr	r2, [pc, #68]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 8006998:	f043 0310 	orr.w	r3, r3, #16
 800699c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800699e:	4b0f      	ldr	r3, [pc, #60]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a0e      	ldr	r2, [pc, #56]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 80069a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069aa:	f7fa feb9 	bl	8001720 <HAL_GetTick>
 80069ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069b0:	e008      	b.n	80069c4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069b2:	f7fa feb5 	bl	8001720 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e006      	b.n	80069d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069c4:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <RCCEx_PLL2_Config+0x128>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0

}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	46020c00 	.word	0x46020c00
 80069e0:	80800000 	.word	0x80800000

080069e4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80069ec:	4b47      	ldr	r3, [pc, #284]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a46      	ldr	r2, [pc, #280]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 80069f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069f8:	f7fa fe92 	bl	8001720 <HAL_GetTick>
 80069fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069fe:	e008      	b.n	8006a12 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a00:	f7fa fe8e 	bl	8001720 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e077      	b.n	8006b02 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a12:	4b3e      	ldr	r3, [pc, #248]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6811      	ldr	r1, [r2, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6852      	ldr	r2, [r2, #4]
 8006a32:	3a01      	subs	r2, #1
 8006a34:	0212      	lsls	r2, r2, #8
 8006a36:	430a      	orrs	r2, r1
 8006a38:	4934      	ldr	r1, [pc, #208]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	630b      	str	r3, [r1, #48]	@ 0x30
 8006a3e:	4b33      	ldr	r3, [pc, #204]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a42:	4b33      	ldr	r3, [pc, #204]	@ (8006b10 <RCCEx_PLL3_Config+0x12c>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6892      	ldr	r2, [r2, #8]
 8006a4a:	3a01      	subs	r2, #1
 8006a4c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	68d2      	ldr	r2, [r2, #12]
 8006a54:	3a01      	subs	r2, #1
 8006a56:	0252      	lsls	r2, r2, #9
 8006a58:	b292      	uxth	r2, r2
 8006a5a:	4311      	orrs	r1, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6912      	ldr	r2, [r2, #16]
 8006a60:	3a01      	subs	r2, #1
 8006a62:	0412      	lsls	r2, r2, #16
 8006a64:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006a68:	4311      	orrs	r1, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6952      	ldr	r2, [r2, #20]
 8006a6e:	3a01      	subs	r2, #1
 8006a70:	0612      	lsls	r2, r2, #24
 8006a72:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006a76:	430a      	orrs	r2, r1
 8006a78:	4924      	ldr	r1, [pc, #144]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006a7e:	4b23      	ldr	r3, [pc, #140]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a82:	f023 020c 	bic.w	r2, r3, #12
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	4920      	ldr	r1, [pc, #128]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006a90:	4b1e      	ldr	r3, [pc, #120]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	491c      	ldr	r1, [pc, #112]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006aa4:	f023 0310 	bic.w	r3, r3, #16
 8006aa8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006aaa:	4b18      	ldr	r3, [pc, #96]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ab2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	69d2      	ldr	r2, [r2, #28]
 8006aba:	00d2      	lsls	r2, r2, #3
 8006abc:	4913      	ldr	r1, [pc, #76]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006ac2:	4b12      	ldr	r3, [pc, #72]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac6:	4a11      	ldr	r2, [pc, #68]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006ac8:	f043 0310 	orr.w	r3, r3, #16
 8006acc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006ace:	4b0f      	ldr	r3, [pc, #60]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ad8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ada:	f7fa fe21 	bl	8001720 <HAL_GetTick>
 8006ade:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ae0:	e008      	b.n	8006af4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ae2:	f7fa fe1d 	bl	8001720 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e006      	b.n	8006b02 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006af4:	4b05      	ldr	r3, [pc, #20]	@ (8006b0c <RCCEx_PLL3_Config+0x128>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	46020c00 	.word	0x46020c00
 8006b10:	80800000 	.word	0x80800000

08006b14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e0fb      	b.n	8006d1e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a7f      	ldr	r2, [pc, #508]	@ (8006d28 <HAL_SPI_Init+0x214>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d004      	beq.n	8006b3a <HAL_SPI_Init+0x26>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a7d      	ldr	r2, [pc, #500]	@ (8006d2c <HAL_SPI_Init+0x218>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	e000      	b.n	8006b3c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006b3a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a78      	ldr	r2, [pc, #480]	@ (8006d28 <HAL_SPI_Init+0x214>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <HAL_SPI_Init+0x42>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a76      	ldr	r2, [pc, #472]	@ (8006d2c <HAL_SPI_Init+0x218>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d105      	bne.n	8006b62 <HAL_SPI_Init+0x4e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b0f      	cmp	r3, #15
 8006b5c:	d901      	bls.n	8006b62 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e0dd      	b.n	8006d1e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f8ec 	bl	8006d40 <SPI_GetPacketSize>
 8006b68:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8006d28 <HAL_SPI_Init+0x214>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_SPI_Init+0x6a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6c      	ldr	r2, [pc, #432]	@ (8006d2c <HAL_SPI_Init+0x218>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d102      	bne.n	8006b84 <HAL_SPI_Init+0x70>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d816      	bhi.n	8006bb2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b88:	4a69      	ldr	r2, [pc, #420]	@ (8006d30 <HAL_SPI_Init+0x21c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a68      	ldr	r2, [pc, #416]	@ (8006d34 <HAL_SPI_Init+0x220>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_SPI_Init+0x98>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a66      	ldr	r2, [pc, #408]	@ (8006d38 <HAL_SPI_Init+0x224>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_SPI_Init+0x98>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a65      	ldr	r2, [pc, #404]	@ (8006d3c <HAL_SPI_Init+0x228>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d104      	bne.n	8006bb6 <HAL_SPI_Init+0xa2>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d901      	bls.n	8006bb6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e0b3      	b.n	8006d1e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fa f808 	bl	8000be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0201 	bic.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006bf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bfc:	d119      	bne.n	8006c32 <HAL_SPI_Init+0x11e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c06:	d103      	bne.n	8006c10 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d008      	beq.n	8006c22 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10c      	bne.n	8006c32 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c20:	d107      	bne.n	8006c32 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00f      	beq.n	8006c5e <HAL_SPI_Init+0x14a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	2b06      	cmp	r3, #6
 8006c44:	d90b      	bls.n	8006c5e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	e007      	b.n	8006c6e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c76:	431a      	orrs	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c80:	ea42 0103 	orr.w	r1, r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	431a      	orrs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cda:	ea42 0103 	orr.w	r1, r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	46002000 	.word	0x46002000
 8006d2c:	56002000 	.word	0x56002000
 8006d30:	40013000 	.word	0x40013000
 8006d34:	50013000 	.word	0x50013000
 8006d38:	40003800 	.word	0x40003800
 8006d3c:	50003800 	.word	0x50003800

08006d40 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	3301      	adds	r3, #1
 8006d50:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	3307      	adds	r3, #7
 8006d5e:	08db      	lsrs	r3, r3, #3
 8006d60:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d12e      	bne.n	8006dea <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d101      	bne.n	8006d9a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006d96:	2302      	movs	r3, #2
 8006d98:	e028      	b.n	8006dec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006dc6:	ea42 0103 	orr.w	r1, r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e000      	b.n	8006dec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
  }
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e049      	b.n	8006e9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7f9 ffd4 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f000 fa12 	bl	8007260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e049      	b.n	8006f4c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f841 	bl	8006f54 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	f000 f9bb 	bl	8007260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e066      	b.n	8007054 <HAL_TIM_OC_ConfigChannel+0xec>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b14      	cmp	r3, #20
 8006f92:	d857      	bhi.n	8007044 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006f94:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006ff1 	.word	0x08006ff1
 8006fa0:	08007045 	.word	0x08007045
 8006fa4:	08007045 	.word	0x08007045
 8006fa8:	08007045 	.word	0x08007045
 8006fac:	08006fff 	.word	0x08006fff
 8006fb0:	08007045 	.word	0x08007045
 8006fb4:	08007045 	.word	0x08007045
 8006fb8:	08007045 	.word	0x08007045
 8006fbc:	0800700d 	.word	0x0800700d
 8006fc0:	08007045 	.word	0x08007045
 8006fc4:	08007045 	.word	0x08007045
 8006fc8:	08007045 	.word	0x08007045
 8006fcc:	0800701b 	.word	0x0800701b
 8006fd0:	08007045 	.word	0x08007045
 8006fd4:	08007045 	.word	0x08007045
 8006fd8:	08007045 	.word	0x08007045
 8006fdc:	08007029 	.word	0x08007029
 8006fe0:	08007045 	.word	0x08007045
 8006fe4:	08007045 	.word	0x08007045
 8006fe8:	08007045 	.word	0x08007045
 8006fec:	08007037 	.word	0x08007037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fa32 	bl	8007460 <TIM_OC1_SetConfig>
      break;
 8006ffc:	e025      	b.n	800704a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	4618      	mov	r0, r3
 8007006:	f000 faed 	bl	80075e4 <TIM_OC2_SetConfig>
      break;
 800700a:	e01e      	b.n	800704a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fb96 	bl	8007744 <TIM_OC3_SetConfig>
      break;
 8007018:	e017      	b.n	800704a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fc3d 	bl	80078a0 <TIM_OC4_SetConfig>
      break;
 8007026:	e010      	b.n	800704a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fce6 	bl	8007a00 <TIM_OC5_SetConfig>
      break;
 8007034:	e009      	b.n	800704a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fd61 	bl	8007b04 <TIM_OC6_SetConfig>
      break;
 8007042:	e002      	b.n	800704a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	75fb      	strb	r3, [r7, #23]
      break;
 8007048:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007052:	7dfb      	ldrb	r3, [r7, #23]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_TIM_ConfigClockSource+0x1c>
 8007074:	2302      	movs	r3, #2
 8007076:	e0e6      	b.n	8007246 <HAL_TIM_ConfigClockSource+0x1ea>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007096:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800709a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a67      	ldr	r2, [pc, #412]	@ (8007250 <HAL_TIM_ConfigClockSource+0x1f4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	f000 80b1 	beq.w	800721a <HAL_TIM_ConfigClockSource+0x1be>
 80070b8:	4a65      	ldr	r2, [pc, #404]	@ (8007250 <HAL_TIM_ConfigClockSource+0x1f4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	f200 80b6 	bhi.w	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 80070c0:	4a64      	ldr	r2, [pc, #400]	@ (8007254 <HAL_TIM_ConfigClockSource+0x1f8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	f000 80a9 	beq.w	800721a <HAL_TIM_ConfigClockSource+0x1be>
 80070c8:	4a62      	ldr	r2, [pc, #392]	@ (8007254 <HAL_TIM_ConfigClockSource+0x1f8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	f200 80ae 	bhi.w	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 80070d0:	4a61      	ldr	r2, [pc, #388]	@ (8007258 <HAL_TIM_ConfigClockSource+0x1fc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	f000 80a1 	beq.w	800721a <HAL_TIM_ConfigClockSource+0x1be>
 80070d8:	4a5f      	ldr	r2, [pc, #380]	@ (8007258 <HAL_TIM_ConfigClockSource+0x1fc>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	f200 80a6 	bhi.w	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 80070e0:	4a5e      	ldr	r2, [pc, #376]	@ (800725c <HAL_TIM_ConfigClockSource+0x200>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	f000 8099 	beq.w	800721a <HAL_TIM_ConfigClockSource+0x1be>
 80070e8:	4a5c      	ldr	r2, [pc, #368]	@ (800725c <HAL_TIM_ConfigClockSource+0x200>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	f200 809e 	bhi.w	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 80070f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80070f4:	f000 8091 	beq.w	800721a <HAL_TIM_ConfigClockSource+0x1be>
 80070f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80070fc:	f200 8096 	bhi.w	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 8007100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007104:	f000 8089 	beq.w	800721a <HAL_TIM_ConfigClockSource+0x1be>
 8007108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800710c:	f200 808e 	bhi.w	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 8007110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007114:	d03e      	beq.n	8007194 <HAL_TIM_ConfigClockSource+0x138>
 8007116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800711a:	f200 8087 	bhi.w	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 800711e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007122:	f000 8086 	beq.w	8007232 <HAL_TIM_ConfigClockSource+0x1d6>
 8007126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800712a:	d87f      	bhi.n	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 800712c:	2b70      	cmp	r3, #112	@ 0x70
 800712e:	d01a      	beq.n	8007166 <HAL_TIM_ConfigClockSource+0x10a>
 8007130:	2b70      	cmp	r3, #112	@ 0x70
 8007132:	d87b      	bhi.n	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 8007134:	2b60      	cmp	r3, #96	@ 0x60
 8007136:	d050      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x17e>
 8007138:	2b60      	cmp	r3, #96	@ 0x60
 800713a:	d877      	bhi.n	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 800713c:	2b50      	cmp	r3, #80	@ 0x50
 800713e:	d03c      	beq.n	80071ba <HAL_TIM_ConfigClockSource+0x15e>
 8007140:	2b50      	cmp	r3, #80	@ 0x50
 8007142:	d873      	bhi.n	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 8007144:	2b40      	cmp	r3, #64	@ 0x40
 8007146:	d058      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x19e>
 8007148:	2b40      	cmp	r3, #64	@ 0x40
 800714a:	d86f      	bhi.n	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 800714c:	2b30      	cmp	r3, #48	@ 0x30
 800714e:	d064      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x1be>
 8007150:	2b30      	cmp	r3, #48	@ 0x30
 8007152:	d86b      	bhi.n	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 8007154:	2b20      	cmp	r3, #32
 8007156:	d060      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x1be>
 8007158:	2b20      	cmp	r3, #32
 800715a:	d867      	bhi.n	800722c <HAL_TIM_ConfigClockSource+0x1d0>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d05c      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x1be>
 8007160:	2b10      	cmp	r3, #16
 8007162:	d05a      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x1be>
 8007164:	e062      	b.n	800722c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007176:	f000 fdc5 	bl	8007d04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	609a      	str	r2, [r3, #8]
      break;
 8007192:	e04f      	b.n	8007234 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071a4:	f000 fdae 	bl	8007d04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071b6:	609a      	str	r2, [r3, #8]
      break;
 80071b8:	e03c      	b.n	8007234 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c6:	461a      	mov	r2, r3
 80071c8:	f000 fd20 	bl	8007c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2150      	movs	r1, #80	@ 0x50
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fd79 	bl	8007cca <TIM_ITRx_SetConfig>
      break;
 80071d8:	e02c      	b.n	8007234 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071e6:	461a      	mov	r2, r3
 80071e8:	f000 fd3f 	bl	8007c6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2160      	movs	r1, #96	@ 0x60
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fd69 	bl	8007cca <TIM_ITRx_SetConfig>
      break;
 80071f8:	e01c      	b.n	8007234 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007206:	461a      	mov	r2, r3
 8007208:	f000 fd00 	bl	8007c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2140      	movs	r1, #64	@ 0x40
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fd59 	bl	8007cca <TIM_ITRx_SetConfig>
      break;
 8007218:	e00c      	b.n	8007234 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4619      	mov	r1, r3
 8007224:	4610      	mov	r0, r2
 8007226:	f000 fd50 	bl	8007cca <TIM_ITRx_SetConfig>
      break;
 800722a:	e003      	b.n	8007234 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
      break;
 8007230:	e000      	b.n	8007234 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8007232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	00100070 	.word	0x00100070
 8007254:	00100040 	.word	0x00100040
 8007258:	00100030 	.word	0x00100030
 800725c:	00100020 	.word	0x00100020

08007260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a6b      	ldr	r2, [pc, #428]	@ (8007420 <TIM_Base_SetConfig+0x1c0>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d02b      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a6a      	ldr	r2, [pc, #424]	@ (8007424 <TIM_Base_SetConfig+0x1c4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d027      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007286:	d023      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800728e:	d01f      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a65      	ldr	r2, [pc, #404]	@ (8007428 <TIM_Base_SetConfig+0x1c8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d01b      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a64      	ldr	r2, [pc, #400]	@ (800742c <TIM_Base_SetConfig+0x1cc>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d017      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a63      	ldr	r2, [pc, #396]	@ (8007430 <TIM_Base_SetConfig+0x1d0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d013      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a62      	ldr	r2, [pc, #392]	@ (8007434 <TIM_Base_SetConfig+0x1d4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00f      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a61      	ldr	r2, [pc, #388]	@ (8007438 <TIM_Base_SetConfig+0x1d8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00b      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a60      	ldr	r2, [pc, #384]	@ (800743c <TIM_Base_SetConfig+0x1dc>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d007      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a5f      	ldr	r2, [pc, #380]	@ (8007440 <TIM_Base_SetConfig+0x1e0>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_Base_SetConfig+0x70>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007444 <TIM_Base_SetConfig+0x1e4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d108      	bne.n	80072e2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a4e      	ldr	r2, [pc, #312]	@ (8007420 <TIM_Base_SetConfig+0x1c0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d043      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a4d      	ldr	r2, [pc, #308]	@ (8007424 <TIM_Base_SetConfig+0x1c4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d03f      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f8:	d03b      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007300:	d037      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a48      	ldr	r2, [pc, #288]	@ (8007428 <TIM_Base_SetConfig+0x1c8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d033      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a47      	ldr	r2, [pc, #284]	@ (800742c <TIM_Base_SetConfig+0x1cc>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d02f      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a46      	ldr	r2, [pc, #280]	@ (8007430 <TIM_Base_SetConfig+0x1d0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d02b      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a45      	ldr	r2, [pc, #276]	@ (8007434 <TIM_Base_SetConfig+0x1d4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d027      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a44      	ldr	r2, [pc, #272]	@ (8007438 <TIM_Base_SetConfig+0x1d8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d023      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a43      	ldr	r2, [pc, #268]	@ (800743c <TIM_Base_SetConfig+0x1dc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d01f      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a42      	ldr	r2, [pc, #264]	@ (8007440 <TIM_Base_SetConfig+0x1e0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01b      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a41      	ldr	r2, [pc, #260]	@ (8007444 <TIM_Base_SetConfig+0x1e4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d017      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a40      	ldr	r2, [pc, #256]	@ (8007448 <TIM_Base_SetConfig+0x1e8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a3f      	ldr	r2, [pc, #252]	@ (800744c <TIM_Base_SetConfig+0x1ec>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00f      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a3e      	ldr	r2, [pc, #248]	@ (8007450 <TIM_Base_SetConfig+0x1f0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00b      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a3d      	ldr	r2, [pc, #244]	@ (8007454 <TIM_Base_SetConfig+0x1f4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d007      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a3c      	ldr	r2, [pc, #240]	@ (8007458 <TIM_Base_SetConfig+0x1f8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d003      	beq.n	8007372 <TIM_Base_SetConfig+0x112>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a3b      	ldr	r2, [pc, #236]	@ (800745c <TIM_Base_SetConfig+0x1fc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d108      	bne.n	8007384 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007420 <TIM_Base_SetConfig+0x1c0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d023      	beq.n	80073f2 <TIM_Base_SetConfig+0x192>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007424 <TIM_Base_SetConfig+0x1c4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d01f      	beq.n	80073f2 <TIM_Base_SetConfig+0x192>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a22      	ldr	r2, [pc, #136]	@ (8007440 <TIM_Base_SetConfig+0x1e0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d01b      	beq.n	80073f2 <TIM_Base_SetConfig+0x192>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a21      	ldr	r2, [pc, #132]	@ (8007444 <TIM_Base_SetConfig+0x1e4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d017      	beq.n	80073f2 <TIM_Base_SetConfig+0x192>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a20      	ldr	r2, [pc, #128]	@ (8007448 <TIM_Base_SetConfig+0x1e8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d013      	beq.n	80073f2 <TIM_Base_SetConfig+0x192>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a1f      	ldr	r2, [pc, #124]	@ (800744c <TIM_Base_SetConfig+0x1ec>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00f      	beq.n	80073f2 <TIM_Base_SetConfig+0x192>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007450 <TIM_Base_SetConfig+0x1f0>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00b      	beq.n	80073f2 <TIM_Base_SetConfig+0x192>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007454 <TIM_Base_SetConfig+0x1f4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d007      	beq.n	80073f2 <TIM_Base_SetConfig+0x192>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007458 <TIM_Base_SetConfig+0x1f8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d003      	beq.n	80073f2 <TIM_Base_SetConfig+0x192>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a1b      	ldr	r2, [pc, #108]	@ (800745c <TIM_Base_SetConfig+0x1fc>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d103      	bne.n	80073fa <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	691a      	ldr	r2, [r3, #16]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f043 0204 	orr.w	r2, r3, #4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]
}
 8007412:	bf00      	nop
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	40012c00 	.word	0x40012c00
 8007424:	50012c00 	.word	0x50012c00
 8007428:	40000400 	.word	0x40000400
 800742c:	50000400 	.word	0x50000400
 8007430:	40000800 	.word	0x40000800
 8007434:	50000800 	.word	0x50000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	50000c00 	.word	0x50000c00
 8007440:	40013400 	.word	0x40013400
 8007444:	50013400 	.word	0x50013400
 8007448:	40014000 	.word	0x40014000
 800744c:	50014000 	.word	0x50014000
 8007450:	40014400 	.word	0x40014400
 8007454:	50014400 	.word	0x50014400
 8007458:	40014800 	.word	0x40014800
 800745c:	50014800 	.word	0x50014800

08007460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	f023 0201 	bic.w	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800748e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0303 	bic.w	r3, r3, #3
 800749a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f023 0302 	bic.w	r3, r3, #2
 80074ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a40      	ldr	r2, [pc, #256]	@ (80075bc <TIM_OC1_SetConfig+0x15c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d023      	beq.n	8007508 <TIM_OC1_SetConfig+0xa8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a3f      	ldr	r2, [pc, #252]	@ (80075c0 <TIM_OC1_SetConfig+0x160>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d01f      	beq.n	8007508 <TIM_OC1_SetConfig+0xa8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a3e      	ldr	r2, [pc, #248]	@ (80075c4 <TIM_OC1_SetConfig+0x164>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d01b      	beq.n	8007508 <TIM_OC1_SetConfig+0xa8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a3d      	ldr	r2, [pc, #244]	@ (80075c8 <TIM_OC1_SetConfig+0x168>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d017      	beq.n	8007508 <TIM_OC1_SetConfig+0xa8>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a3c      	ldr	r2, [pc, #240]	@ (80075cc <TIM_OC1_SetConfig+0x16c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d013      	beq.n	8007508 <TIM_OC1_SetConfig+0xa8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a3b      	ldr	r2, [pc, #236]	@ (80075d0 <TIM_OC1_SetConfig+0x170>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00f      	beq.n	8007508 <TIM_OC1_SetConfig+0xa8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a3a      	ldr	r2, [pc, #232]	@ (80075d4 <TIM_OC1_SetConfig+0x174>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00b      	beq.n	8007508 <TIM_OC1_SetConfig+0xa8>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a39      	ldr	r2, [pc, #228]	@ (80075d8 <TIM_OC1_SetConfig+0x178>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d007      	beq.n	8007508 <TIM_OC1_SetConfig+0xa8>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a38      	ldr	r2, [pc, #224]	@ (80075dc <TIM_OC1_SetConfig+0x17c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_OC1_SetConfig+0xa8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a37      	ldr	r2, [pc, #220]	@ (80075e0 <TIM_OC1_SetConfig+0x180>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d10c      	bne.n	8007522 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f023 0308 	bic.w	r3, r3, #8
 800750e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f023 0304 	bic.w	r3, r3, #4
 8007520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a25      	ldr	r2, [pc, #148]	@ (80075bc <TIM_OC1_SetConfig+0x15c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d023      	beq.n	8007572 <TIM_OC1_SetConfig+0x112>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a24      	ldr	r2, [pc, #144]	@ (80075c0 <TIM_OC1_SetConfig+0x160>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01f      	beq.n	8007572 <TIM_OC1_SetConfig+0x112>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a23      	ldr	r2, [pc, #140]	@ (80075c4 <TIM_OC1_SetConfig+0x164>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d01b      	beq.n	8007572 <TIM_OC1_SetConfig+0x112>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a22      	ldr	r2, [pc, #136]	@ (80075c8 <TIM_OC1_SetConfig+0x168>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d017      	beq.n	8007572 <TIM_OC1_SetConfig+0x112>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a21      	ldr	r2, [pc, #132]	@ (80075cc <TIM_OC1_SetConfig+0x16c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d013      	beq.n	8007572 <TIM_OC1_SetConfig+0x112>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a20      	ldr	r2, [pc, #128]	@ (80075d0 <TIM_OC1_SetConfig+0x170>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00f      	beq.n	8007572 <TIM_OC1_SetConfig+0x112>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a1f      	ldr	r2, [pc, #124]	@ (80075d4 <TIM_OC1_SetConfig+0x174>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00b      	beq.n	8007572 <TIM_OC1_SetConfig+0x112>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a1e      	ldr	r2, [pc, #120]	@ (80075d8 <TIM_OC1_SetConfig+0x178>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d007      	beq.n	8007572 <TIM_OC1_SetConfig+0x112>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a1d      	ldr	r2, [pc, #116]	@ (80075dc <TIM_OC1_SetConfig+0x17c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d003      	beq.n	8007572 <TIM_OC1_SetConfig+0x112>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a1c      	ldr	r2, [pc, #112]	@ (80075e0 <TIM_OC1_SetConfig+0x180>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d111      	bne.n	8007596 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	621a      	str	r2, [r3, #32]
}
 80075b0:	bf00      	nop
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	50012c00 	.word	0x50012c00
 80075c4:	40013400 	.word	0x40013400
 80075c8:	50013400 	.word	0x50013400
 80075cc:	40014000 	.word	0x40014000
 80075d0:	50014000 	.word	0x50014000
 80075d4:	40014400 	.word	0x40014400
 80075d8:	50014400 	.word	0x50014400
 80075dc:	40014800 	.word	0x40014800
 80075e0:	50014800 	.word	0x50014800

080075e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	f023 0210 	bic.w	r2, r3, #16
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800761e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f023 0320 	bic.w	r3, r3, #32
 8007632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a36      	ldr	r2, [pc, #216]	@ (800771c <TIM_OC2_SetConfig+0x138>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00b      	beq.n	8007660 <TIM_OC2_SetConfig+0x7c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a35      	ldr	r2, [pc, #212]	@ (8007720 <TIM_OC2_SetConfig+0x13c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d007      	beq.n	8007660 <TIM_OC2_SetConfig+0x7c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a34      	ldr	r2, [pc, #208]	@ (8007724 <TIM_OC2_SetConfig+0x140>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_OC2_SetConfig+0x7c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a33      	ldr	r2, [pc, #204]	@ (8007728 <TIM_OC2_SetConfig+0x144>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d10d      	bne.n	800767c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800767a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a27      	ldr	r2, [pc, #156]	@ (800771c <TIM_OC2_SetConfig+0x138>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d023      	beq.n	80076cc <TIM_OC2_SetConfig+0xe8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a26      	ldr	r2, [pc, #152]	@ (8007720 <TIM_OC2_SetConfig+0x13c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d01f      	beq.n	80076cc <TIM_OC2_SetConfig+0xe8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a25      	ldr	r2, [pc, #148]	@ (8007724 <TIM_OC2_SetConfig+0x140>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d01b      	beq.n	80076cc <TIM_OC2_SetConfig+0xe8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a24      	ldr	r2, [pc, #144]	@ (8007728 <TIM_OC2_SetConfig+0x144>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d017      	beq.n	80076cc <TIM_OC2_SetConfig+0xe8>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a23      	ldr	r2, [pc, #140]	@ (800772c <TIM_OC2_SetConfig+0x148>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d013      	beq.n	80076cc <TIM_OC2_SetConfig+0xe8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a22      	ldr	r2, [pc, #136]	@ (8007730 <TIM_OC2_SetConfig+0x14c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00f      	beq.n	80076cc <TIM_OC2_SetConfig+0xe8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a21      	ldr	r2, [pc, #132]	@ (8007734 <TIM_OC2_SetConfig+0x150>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00b      	beq.n	80076cc <TIM_OC2_SetConfig+0xe8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a20      	ldr	r2, [pc, #128]	@ (8007738 <TIM_OC2_SetConfig+0x154>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d007      	beq.n	80076cc <TIM_OC2_SetConfig+0xe8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a1f      	ldr	r2, [pc, #124]	@ (800773c <TIM_OC2_SetConfig+0x158>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d003      	beq.n	80076cc <TIM_OC2_SetConfig+0xe8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007740 <TIM_OC2_SetConfig+0x15c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d113      	bne.n	80076f4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	621a      	str	r2, [r3, #32]
}
 800770e:	bf00      	nop
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40012c00 	.word	0x40012c00
 8007720:	50012c00 	.word	0x50012c00
 8007724:	40013400 	.word	0x40013400
 8007728:	50013400 	.word	0x50013400
 800772c:	40014000 	.word	0x40014000
 8007730:	50014000 	.word	0x50014000
 8007734:	40014400 	.word	0x40014400
 8007738:	50014400 	.word	0x50014400
 800773c:	40014800 	.word	0x40014800
 8007740:	50014800 	.word	0x50014800

08007744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a35      	ldr	r2, [pc, #212]	@ (8007878 <TIM_OC3_SetConfig+0x134>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00b      	beq.n	80077be <TIM_OC3_SetConfig+0x7a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a34      	ldr	r2, [pc, #208]	@ (800787c <TIM_OC3_SetConfig+0x138>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d007      	beq.n	80077be <TIM_OC3_SetConfig+0x7a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a33      	ldr	r2, [pc, #204]	@ (8007880 <TIM_OC3_SetConfig+0x13c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_OC3_SetConfig+0x7a>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a32      	ldr	r2, [pc, #200]	@ (8007884 <TIM_OC3_SetConfig+0x140>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d10d      	bne.n	80077da <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a26      	ldr	r2, [pc, #152]	@ (8007878 <TIM_OC3_SetConfig+0x134>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d023      	beq.n	800782a <TIM_OC3_SetConfig+0xe6>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a25      	ldr	r2, [pc, #148]	@ (800787c <TIM_OC3_SetConfig+0x138>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d01f      	beq.n	800782a <TIM_OC3_SetConfig+0xe6>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a24      	ldr	r2, [pc, #144]	@ (8007880 <TIM_OC3_SetConfig+0x13c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01b      	beq.n	800782a <TIM_OC3_SetConfig+0xe6>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a23      	ldr	r2, [pc, #140]	@ (8007884 <TIM_OC3_SetConfig+0x140>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d017      	beq.n	800782a <TIM_OC3_SetConfig+0xe6>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a22      	ldr	r2, [pc, #136]	@ (8007888 <TIM_OC3_SetConfig+0x144>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <TIM_OC3_SetConfig+0xe6>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a21      	ldr	r2, [pc, #132]	@ (800788c <TIM_OC3_SetConfig+0x148>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <TIM_OC3_SetConfig+0xe6>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a20      	ldr	r2, [pc, #128]	@ (8007890 <TIM_OC3_SetConfig+0x14c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00b      	beq.n	800782a <TIM_OC3_SetConfig+0xe6>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1f      	ldr	r2, [pc, #124]	@ (8007894 <TIM_OC3_SetConfig+0x150>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_OC3_SetConfig+0xe6>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1e      	ldr	r2, [pc, #120]	@ (8007898 <TIM_OC3_SetConfig+0x154>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC3_SetConfig+0xe6>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a1d      	ldr	r2, [pc, #116]	@ (800789c <TIM_OC3_SetConfig+0x158>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d113      	bne.n	8007852 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	40012c00 	.word	0x40012c00
 800787c:	50012c00 	.word	0x50012c00
 8007880:	40013400 	.word	0x40013400
 8007884:	50013400 	.word	0x50013400
 8007888:	40014000 	.word	0x40014000
 800788c:	50014000 	.word	0x50014000
 8007890:	40014400 	.word	0x40014400
 8007894:	50014400 	.word	0x50014400
 8007898:	40014800 	.word	0x40014800
 800789c:	50014800 	.word	0x50014800

080078a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	031b      	lsls	r3, r3, #12
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a36      	ldr	r2, [pc, #216]	@ (80079d8 <TIM_OC4_SetConfig+0x138>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00b      	beq.n	800791c <TIM_OC4_SetConfig+0x7c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a35      	ldr	r2, [pc, #212]	@ (80079dc <TIM_OC4_SetConfig+0x13c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d007      	beq.n	800791c <TIM_OC4_SetConfig+0x7c>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a34      	ldr	r2, [pc, #208]	@ (80079e0 <TIM_OC4_SetConfig+0x140>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d003      	beq.n	800791c <TIM_OC4_SetConfig+0x7c>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a33      	ldr	r2, [pc, #204]	@ (80079e4 <TIM_OC4_SetConfig+0x144>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d10d      	bne.n	8007938 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	031b      	lsls	r3, r3, #12
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	4313      	orrs	r3, r2
 800792e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007936:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a27      	ldr	r2, [pc, #156]	@ (80079d8 <TIM_OC4_SetConfig+0x138>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d023      	beq.n	8007988 <TIM_OC4_SetConfig+0xe8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a26      	ldr	r2, [pc, #152]	@ (80079dc <TIM_OC4_SetConfig+0x13c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d01f      	beq.n	8007988 <TIM_OC4_SetConfig+0xe8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a25      	ldr	r2, [pc, #148]	@ (80079e0 <TIM_OC4_SetConfig+0x140>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d01b      	beq.n	8007988 <TIM_OC4_SetConfig+0xe8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a24      	ldr	r2, [pc, #144]	@ (80079e4 <TIM_OC4_SetConfig+0x144>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d017      	beq.n	8007988 <TIM_OC4_SetConfig+0xe8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a23      	ldr	r2, [pc, #140]	@ (80079e8 <TIM_OC4_SetConfig+0x148>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d013      	beq.n	8007988 <TIM_OC4_SetConfig+0xe8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a22      	ldr	r2, [pc, #136]	@ (80079ec <TIM_OC4_SetConfig+0x14c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00f      	beq.n	8007988 <TIM_OC4_SetConfig+0xe8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a21      	ldr	r2, [pc, #132]	@ (80079f0 <TIM_OC4_SetConfig+0x150>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00b      	beq.n	8007988 <TIM_OC4_SetConfig+0xe8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a20      	ldr	r2, [pc, #128]	@ (80079f4 <TIM_OC4_SetConfig+0x154>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d007      	beq.n	8007988 <TIM_OC4_SetConfig+0xe8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a1f      	ldr	r2, [pc, #124]	@ (80079f8 <TIM_OC4_SetConfig+0x158>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_OC4_SetConfig+0xe8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a1e      	ldr	r2, [pc, #120]	@ (80079fc <TIM_OC4_SetConfig+0x15c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d113      	bne.n	80079b0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800798e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007996:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	019b      	lsls	r3, r3, #6
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	019b      	lsls	r3, r3, #6
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	621a      	str	r2, [r3, #32]
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	40012c00 	.word	0x40012c00
 80079dc:	50012c00 	.word	0x50012c00
 80079e0:	40013400 	.word	0x40013400
 80079e4:	50013400 	.word	0x50013400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	50014000 	.word	0x50014000
 80079f0:	40014400 	.word	0x40014400
 80079f4:	50014400 	.word	0x50014400
 80079f8:	40014800 	.word	0x40014800
 80079fc:	50014800 	.word	0x50014800

08007a00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007a44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a21      	ldr	r2, [pc, #132]	@ (8007adc <TIM_OC5_SetConfig+0xdc>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d023      	beq.n	8007aa2 <TIM_OC5_SetConfig+0xa2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a20      	ldr	r2, [pc, #128]	@ (8007ae0 <TIM_OC5_SetConfig+0xe0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d01f      	beq.n	8007aa2 <TIM_OC5_SetConfig+0xa2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae4 <TIM_OC5_SetConfig+0xe4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01b      	beq.n	8007aa2 <TIM_OC5_SetConfig+0xa2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae8 <TIM_OC5_SetConfig+0xe8>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d017      	beq.n	8007aa2 <TIM_OC5_SetConfig+0xa2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a1d      	ldr	r2, [pc, #116]	@ (8007aec <TIM_OC5_SetConfig+0xec>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d013      	beq.n	8007aa2 <TIM_OC5_SetConfig+0xa2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007af0 <TIM_OC5_SetConfig+0xf0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d00f      	beq.n	8007aa2 <TIM_OC5_SetConfig+0xa2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a1b      	ldr	r2, [pc, #108]	@ (8007af4 <TIM_OC5_SetConfig+0xf4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00b      	beq.n	8007aa2 <TIM_OC5_SetConfig+0xa2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8007af8 <TIM_OC5_SetConfig+0xf8>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d007      	beq.n	8007aa2 <TIM_OC5_SetConfig+0xa2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a19      	ldr	r2, [pc, #100]	@ (8007afc <TIM_OC5_SetConfig+0xfc>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d003      	beq.n	8007aa2 <TIM_OC5_SetConfig+0xa2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a18      	ldr	r2, [pc, #96]	@ (8007b00 <TIM_OC5_SetConfig+0x100>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d109      	bne.n	8007ab6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	621a      	str	r2, [r3, #32]
}
 8007ad0:	bf00      	nop
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	40012c00 	.word	0x40012c00
 8007ae0:	50012c00 	.word	0x50012c00
 8007ae4:	40013400 	.word	0x40013400
 8007ae8:	50013400 	.word	0x50013400
 8007aec:	40014000 	.word	0x40014000
 8007af0:	50014000 	.word	0x50014000
 8007af4:	40014400 	.word	0x40014400
 8007af8:	50014400 	.word	0x50014400
 8007afc:	40014800 	.word	0x40014800
 8007b00:	50014800 	.word	0x50014800

08007b04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	051b      	lsls	r3, r3, #20
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a22      	ldr	r2, [pc, #136]	@ (8007be4 <TIM_OC6_SetConfig+0xe0>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d023      	beq.n	8007ba8 <TIM_OC6_SetConfig+0xa4>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a21      	ldr	r2, [pc, #132]	@ (8007be8 <TIM_OC6_SetConfig+0xe4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d01f      	beq.n	8007ba8 <TIM_OC6_SetConfig+0xa4>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a20      	ldr	r2, [pc, #128]	@ (8007bec <TIM_OC6_SetConfig+0xe8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d01b      	beq.n	8007ba8 <TIM_OC6_SetConfig+0xa4>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a1f      	ldr	r2, [pc, #124]	@ (8007bf0 <TIM_OC6_SetConfig+0xec>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d017      	beq.n	8007ba8 <TIM_OC6_SetConfig+0xa4>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007bf4 <TIM_OC6_SetConfig+0xf0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d013      	beq.n	8007ba8 <TIM_OC6_SetConfig+0xa4>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf8 <TIM_OC6_SetConfig+0xf4>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00f      	beq.n	8007ba8 <TIM_OC6_SetConfig+0xa4>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8007bfc <TIM_OC6_SetConfig+0xf8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00b      	beq.n	8007ba8 <TIM_OC6_SetConfig+0xa4>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a1b      	ldr	r2, [pc, #108]	@ (8007c00 <TIM_OC6_SetConfig+0xfc>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d007      	beq.n	8007ba8 <TIM_OC6_SetConfig+0xa4>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007c04 <TIM_OC6_SetConfig+0x100>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d003      	beq.n	8007ba8 <TIM_OC6_SetConfig+0xa4>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a19      	ldr	r2, [pc, #100]	@ (8007c08 <TIM_OC6_SetConfig+0x104>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d109      	bne.n	8007bbc <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	029b      	lsls	r3, r3, #10
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	621a      	str	r2, [r3, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	50012c00 	.word	0x50012c00
 8007bec:	40013400 	.word	0x40013400
 8007bf0:	50013400 	.word	0x50013400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	50014000 	.word	0x50014000
 8007bfc:	40014400 	.word	0x40014400
 8007c00:	50014400 	.word	0x50014400
 8007c04:	40014800 	.word	0x40014800
 8007c08:	50014800 	.word	0x50014800

08007c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f023 0201 	bic.w	r2, r3, #1
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f023 030a 	bic.w	r3, r3, #10
 8007c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	621a      	str	r2, [r3, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b087      	sub	sp, #28
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f023 0210 	bic.w	r2, r3, #16
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	031b      	lsls	r3, r3, #12
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	621a      	str	r2, [r3, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f043 0307 	orr.w	r3, r3, #7
 8007cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	609a      	str	r2, [r3, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	021a      	lsls	r2, r3, #8
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	609a      	str	r2, [r3, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e097      	b.n	8007e8c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a45      	ldr	r2, [pc, #276]	@ (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00e      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a44      	ldr	r2, [pc, #272]	@ (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d009      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a42      	ldr	r2, [pc, #264]	@ (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d004      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a41      	ldr	r2, [pc, #260]	@ (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d108      	bne.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007daa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d040      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a2e      	ldr	r2, [pc, #184]	@ (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d03b      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df0:	d036      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dfa:	d031      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a29      	ldr	r2, [pc, #164]	@ (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d02c      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a28      	ldr	r2, [pc, #160]	@ (8007eac <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d027      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a26      	ldr	r2, [pc, #152]	@ (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d022      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a25      	ldr	r2, [pc, #148]	@ (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d01d      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a23      	ldr	r2, [pc, #140]	@ (8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d018      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a22      	ldr	r2, [pc, #136]	@ (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d013      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a18      	ldr	r2, [pc, #96]	@ (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00e      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a17      	ldr	r2, [pc, #92]	@ (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d009      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a1b      	ldr	r2, [pc, #108]	@ (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d10c      	bne.n	8007e7a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	40012c00 	.word	0x40012c00
 8007e9c:	50012c00 	.word	0x50012c00
 8007ea0:	40013400 	.word	0x40013400
 8007ea4:	50013400 	.word	0x50013400
 8007ea8:	40000400 	.word	0x40000400
 8007eac:	50000400 	.word	0x50000400
 8007eb0:	40000800 	.word	0x40000800
 8007eb4:	50000800 	.word	0x50000800
 8007eb8:	40000c00 	.word	0x40000c00
 8007ebc:	50000c00 	.word	0x50000c00
 8007ec0:	40014000 	.word	0x40014000
 8007ec4:	50014000 	.word	0x50014000

08007ec8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e07d      	b.n	8007fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	041b      	lsls	r3, r3, #16
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1e      	ldr	r2, [pc, #120]	@ (8007fec <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00e      	beq.n	8007f94 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d009      	beq.n	8007f94 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d11c      	bne.n	8007fce <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9e:	051b      	lsls	r3, r3, #20
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40012c00 	.word	0x40012c00
 8007ff0:	50012c00 	.word	0x50012c00
 8007ff4:	40013400 	.word	0x40013400
 8007ff8:	50013400 	.word	0x50013400

08007ffc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	f107 001c 	add.w	r0, r7, #28
 800800a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fab6 	bl	800958c <USB_CoreReset>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008024:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008030:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	639a      	str	r2, [r3, #56]	@ 0x38
 8008038:	e005      	b.n	8008046 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8008046:	7bfb      	ldrb	r3, [r7, #15]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008052:	b004      	add	sp, #16
 8008054:	4770      	bx	lr
	...

08008058 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d165      	bne.n	8008138 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4a41      	ldr	r2, [pc, #260]	@ (8008174 <USB_SetTurnaroundTime+0x11c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d906      	bls.n	8008082 <USB_SetTurnaroundTime+0x2a>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4a40      	ldr	r2, [pc, #256]	@ (8008178 <USB_SetTurnaroundTime+0x120>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d202      	bcs.n	8008082 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800807c:	230f      	movs	r3, #15
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	e062      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4a3c      	ldr	r2, [pc, #240]	@ (8008178 <USB_SetTurnaroundTime+0x120>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d306      	bcc.n	8008098 <USB_SetTurnaroundTime+0x40>
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4a3b      	ldr	r2, [pc, #236]	@ (800817c <USB_SetTurnaroundTime+0x124>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d202      	bcs.n	8008098 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008092:	230e      	movs	r3, #14
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e057      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4a38      	ldr	r2, [pc, #224]	@ (800817c <USB_SetTurnaroundTime+0x124>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d306      	bcc.n	80080ae <USB_SetTurnaroundTime+0x56>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4a37      	ldr	r2, [pc, #220]	@ (8008180 <USB_SetTurnaroundTime+0x128>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d202      	bcs.n	80080ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080a8:	230d      	movs	r3, #13
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e04c      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	4a33      	ldr	r2, [pc, #204]	@ (8008180 <USB_SetTurnaroundTime+0x128>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d306      	bcc.n	80080c4 <USB_SetTurnaroundTime+0x6c>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	4a32      	ldr	r2, [pc, #200]	@ (8008184 <USB_SetTurnaroundTime+0x12c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d802      	bhi.n	80080c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080be:	230c      	movs	r3, #12
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	e041      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4a2f      	ldr	r2, [pc, #188]	@ (8008184 <USB_SetTurnaroundTime+0x12c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d906      	bls.n	80080da <USB_SetTurnaroundTime+0x82>
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4a2e      	ldr	r2, [pc, #184]	@ (8008188 <USB_SetTurnaroundTime+0x130>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d802      	bhi.n	80080da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080d4:	230b      	movs	r3, #11
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	e036      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4a2a      	ldr	r2, [pc, #168]	@ (8008188 <USB_SetTurnaroundTime+0x130>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d906      	bls.n	80080f0 <USB_SetTurnaroundTime+0x98>
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4a29      	ldr	r2, [pc, #164]	@ (800818c <USB_SetTurnaroundTime+0x134>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d802      	bhi.n	80080f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80080ea:	230a      	movs	r3, #10
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	e02b      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4a26      	ldr	r2, [pc, #152]	@ (800818c <USB_SetTurnaroundTime+0x134>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d906      	bls.n	8008106 <USB_SetTurnaroundTime+0xae>
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4a25      	ldr	r2, [pc, #148]	@ (8008190 <USB_SetTurnaroundTime+0x138>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d202      	bcs.n	8008106 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008100:	2309      	movs	r3, #9
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	e020      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4a21      	ldr	r2, [pc, #132]	@ (8008190 <USB_SetTurnaroundTime+0x138>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d306      	bcc.n	800811c <USB_SetTurnaroundTime+0xc4>
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	4a20      	ldr	r2, [pc, #128]	@ (8008194 <USB_SetTurnaroundTime+0x13c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d802      	bhi.n	800811c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008116:	2308      	movs	r3, #8
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	e015      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4a1d      	ldr	r2, [pc, #116]	@ (8008194 <USB_SetTurnaroundTime+0x13c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d906      	bls.n	8008132 <USB_SetTurnaroundTime+0xda>
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4a1c      	ldr	r2, [pc, #112]	@ (8008198 <USB_SetTurnaroundTime+0x140>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d202      	bcs.n	8008132 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800812c:	2307      	movs	r3, #7
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	e00a      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008132:	2306      	movs	r3, #6
 8008134:	617b      	str	r3, [r7, #20]
 8008136:	e007      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800813e:	2309      	movs	r3, #9
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e001      	b.n	8008148 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008144:	2309      	movs	r3, #9
 8008146:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	029b      	lsls	r3, r3, #10
 800815c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008160:	431a      	orrs	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	00d8acbf 	.word	0x00d8acbf
 8008178:	00e4e1c0 	.word	0x00e4e1c0
 800817c:	00f42400 	.word	0x00f42400
 8008180:	01067380 	.word	0x01067380
 8008184:	011a499f 	.word	0x011a499f
 8008188:	01312cff 	.word	0x01312cff
 800818c:	014ca43f 	.word	0x014ca43f
 8008190:	016e3600 	.word	0x016e3600
 8008194:	01a6ab1f 	.word	0x01a6ab1f
 8008198:	01e84800 	.word	0x01e84800

0800819c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f043 0201 	orr.w	r2, r3, #1
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f023 0201 	bic.w	r2, r3, #1
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d115      	bne.n	800822e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800820e:	200a      	movs	r0, #10
 8008210:	f7f9 fa92 	bl	8001738 <HAL_Delay>
      ms += 10U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	330a      	adds	r3, #10
 8008218:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 f927 	bl	800946e <USB_GetMode>
 8008220:	4603      	mov	r3, r0
 8008222:	2b01      	cmp	r3, #1
 8008224:	d01e      	beq.n	8008264 <USB_SetCurrentMode+0x84>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2bc7      	cmp	r3, #199	@ 0xc7
 800822a:	d9f0      	bls.n	800820e <USB_SetCurrentMode+0x2e>
 800822c:	e01a      	b.n	8008264 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d115      	bne.n	8008260 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008240:	200a      	movs	r0, #10
 8008242:	f7f9 fa79 	bl	8001738 <HAL_Delay>
      ms += 10U;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	330a      	adds	r3, #10
 800824a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 f90e 	bl	800946e <USB_GetMode>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <USB_SetCurrentMode+0x84>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2bc7      	cmp	r3, #199	@ 0xc7
 800825c:	d9f0      	bls.n	8008240 <USB_SetCurrentMode+0x60>
 800825e:	e001      	b.n	8008264 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e005      	b.n	8008270 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2bc8      	cmp	r3, #200	@ 0xc8
 8008268:	d101      	bne.n	800826e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008278:	b084      	sub	sp, #16
 800827a:	b580      	push	{r7, lr}
 800827c:	b086      	sub	sp, #24
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	e009      	b.n	80082ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3340      	adds	r3, #64	@ 0x40
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	2200      	movs	r2, #0
 80082a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	3301      	adds	r3, #1
 80082aa:	613b      	str	r3, [r7, #16]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2b0e      	cmp	r3, #14
 80082b0:	d9f2      	bls.n	8008298 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d11c      	bne.n	80082f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082c8:	f043 0302 	orr.w	r3, r3, #2
 80082cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	e005      	b.n	8008300 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008306:	461a      	mov	r2, r3
 8008308:	2300      	movs	r3, #0
 800830a:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800830c:	2103      	movs	r1, #3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f95e 	bl	80085d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008314:	2110      	movs	r1, #16
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f8fa 	bl	8008510 <USB_FlushTxFifo>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f924 	bl	8008574 <USB_FlushRxFifo>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800833c:	461a      	mov	r2, r3
 800833e:	2300      	movs	r3, #0
 8008340:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008348:	461a      	mov	r2, r3
 800834a:	2300      	movs	r3, #0
 800834c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008354:	461a      	mov	r2, r3
 8008356:	2300      	movs	r3, #0
 8008358:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	e043      	b.n	80083e8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008372:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008376:	d118      	bne.n	80083aa <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10a      	bne.n	8008394 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800838a:	461a      	mov	r2, r3
 800838c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	e013      	b.n	80083bc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a0:	461a      	mov	r2, r3
 80083a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	e008      	b.n	80083bc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b6:	461a      	mov	r2, r3
 80083b8:	2300      	movs	r3, #0
 80083ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c8:	461a      	mov	r2, r3
 80083ca:	2300      	movs	r3, #0
 80083cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083da:	461a      	mov	r2, r3
 80083dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80083e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	3301      	adds	r3, #1
 80083e6:	613b      	str	r3, [r7, #16]
 80083e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80083ec:	461a      	mov	r2, r3
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d3b5      	bcc.n	8008360 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083f4:	2300      	movs	r3, #0
 80083f6:	613b      	str	r3, [r7, #16]
 80083f8:	e043      	b.n	8008482 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800840c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008410:	d118      	bne.n	8008444 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008424:	461a      	mov	r2, r3
 8008426:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e013      	b.n	8008456 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843a:	461a      	mov	r2, r3
 800843c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	e008      	b.n	8008456 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008450:	461a      	mov	r2, r3
 8008452:	2300      	movs	r3, #0
 8008454:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008462:	461a      	mov	r2, r3
 8008464:	2300      	movs	r3, #0
 8008466:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008474:	461a      	mov	r2, r3
 8008476:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800847a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	3301      	adds	r3, #1
 8008480:	613b      	str	r3, [r7, #16]
 8008482:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008486:	461a      	mov	r2, r3
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4293      	cmp	r3, r2
 800848c:	d3b5      	bcc.n	80083fa <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800849c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80084ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d105      	bne.n	80084c4 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	f043 0210 	orr.w	r2, r3, #16
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699a      	ldr	r2, [r3, #24]
 80084c8:	4b10      	ldr	r3, [pc, #64]	@ (800850c <USB_DevInit+0x294>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f043 0208 	orr.w	r2, r3, #8
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80084e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d107      	bne.n	80084fc <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084f4:	f043 0304 	orr.w	r3, r3, #4
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008508:	b004      	add	sp, #16
 800850a:	4770      	bx	lr
 800850c:	803c3800 	.word	0x803c3800

08008510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3301      	adds	r3, #1
 8008522:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800852a:	d901      	bls.n	8008530 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e01b      	b.n	8008568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	daf2      	bge.n	800851e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	019b      	lsls	r3, r3, #6
 8008540:	f043 0220 	orr.w	r2, r3, #32
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3301      	adds	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008554:	d901      	bls.n	800855a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e006      	b.n	8008568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b20      	cmp	r3, #32
 8008564:	d0f0      	beq.n	8008548 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3301      	adds	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800858c:	d901      	bls.n	8008592 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e018      	b.n	80085c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	daf2      	bge.n	8008580 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2210      	movs	r2, #16
 80085a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3301      	adds	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085b0:	d901      	bls.n	80085b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e006      	b.n	80085c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0310 	and.w	r3, r3, #16
 80085be:	2b10      	cmp	r3, #16
 80085c0:	d0f0      	beq.n	80085a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	68f9      	ldr	r1, [r7, #12]
 80085ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085f0:	4313      	orrs	r3, r2
 80085f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008602:	b480      	push	{r7}
 8008604:	b087      	sub	sp, #28
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f003 0306 	and.w	r3, r3, #6
 800861a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d102      	bne.n	8008628 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008622:	2300      	movs	r3, #0
 8008624:	75fb      	strb	r3, [r7, #23]
 8008626:	e00a      	b.n	800863e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d002      	beq.n	8008634 <USB_GetDevSpeed+0x32>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b06      	cmp	r3, #6
 8008632:	d102      	bne.n	800863a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008634:	2302      	movs	r3, #2
 8008636:	75fb      	strb	r3, [r7, #23]
 8008638:	e001      	b.n	800863e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800863a:	230f      	movs	r3, #15
 800863c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800863e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008640:	4618      	mov	r0, r3
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d13a      	bne.n	80086de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800866e:	69da      	ldr	r2, [r3, #28]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	2101      	movs	r1, #1
 800867a:	fa01 f303 	lsl.w	r3, r1, r3
 800867e:	b29b      	uxth	r3, r3
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008686:	4313      	orrs	r3, r2
 8008688:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d155      	bne.n	800874c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	791b      	ldrb	r3, [r3, #4]
 80086ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	059b      	lsls	r3, r3, #22
 80086c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086c4:	4313      	orrs	r3, r2
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	e036      	b.n	800874c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e4:	69da      	ldr	r2, [r3, #28]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f003 030f 	and.w	r3, r3, #15
 80086ee:	2101      	movs	r1, #1
 80086f0:	fa01 f303 	lsl.w	r3, r1, r3
 80086f4:	041b      	lsls	r3, r3, #16
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086fc:	4313      	orrs	r3, r2
 80086fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d11a      	bne.n	800874c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	791b      	ldrb	r3, [r3, #4]
 8008730:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008732:	430b      	orrs	r3, r1
 8008734:	4313      	orrs	r3, r2
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	440a      	add	r2, r1
 800873e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800874a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
	...

0800875c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d161      	bne.n	800883c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800878a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800878e:	d11f      	bne.n	80087d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	0151      	lsls	r1, r2, #5
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	440a      	add	r2, r1
 80087c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	2101      	movs	r1, #1
 80087e2:	fa01 f303 	lsl.w	r3, r1, r3
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	43db      	mvns	r3, r3
 80087ea:	68f9      	ldr	r1, [r7, #12]
 80087ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087f0:	4013      	ands	r3, r2
 80087f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087fa:	69da      	ldr	r2, [r3, #28]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 030f 	and.w	r3, r3, #15
 8008804:	2101      	movs	r1, #1
 8008806:	fa01 f303 	lsl.w	r3, r1, r3
 800880a:	b29b      	uxth	r3, r3
 800880c:	43db      	mvns	r3, r3
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008814:	4013      	ands	r3, r2
 8008816:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	0159      	lsls	r1, r3, #5
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	440b      	add	r3, r1
 800882e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008832:	4619      	mov	r1, r3
 8008834:	4b35      	ldr	r3, [pc, #212]	@ (800890c <USB_DeactivateEndpoint+0x1b0>)
 8008836:	4013      	ands	r3, r2
 8008838:	600b      	str	r3, [r1, #0]
 800883a:	e060      	b.n	80088fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800884e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008852:	d11f      	bne.n	8008894 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	0151      	lsls	r1, r2, #5
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	440a      	add	r2, r1
 800886a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800886e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008872:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	0151      	lsls	r1, r2, #5
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	440a      	add	r2, r1
 800888a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800888e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008892:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800889a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	2101      	movs	r1, #1
 80088a6:	fa01 f303 	lsl.w	r3, r1, r3
 80088aa:	041b      	lsls	r3, r3, #16
 80088ac:	43db      	mvns	r3, r3
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088b4:	4013      	ands	r3, r2
 80088b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088be:	69da      	ldr	r2, [r3, #28]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	f003 030f 	and.w	r3, r3, #15
 80088c8:	2101      	movs	r1, #1
 80088ca:	fa01 f303 	lsl.w	r3, r1, r3
 80088ce:	041b      	lsls	r3, r3, #16
 80088d0:	43db      	mvns	r3, r3
 80088d2:	68f9      	ldr	r1, [r7, #12]
 80088d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088d8:	4013      	ands	r3, r2
 80088da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	0159      	lsls	r1, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	440b      	add	r3, r1
 80088f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f6:	4619      	mov	r1, r3
 80088f8:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <USB_DeactivateEndpoint+0x1b4>)
 80088fa:	4013      	ands	r3, r2
 80088fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	ec337800 	.word	0xec337800
 8008910:	eff37800 	.word	0xeff37800

08008914 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	@ 0x28
 8008918:	af02      	add	r7, sp, #8
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	785b      	ldrb	r3, [r3, #1]
 8008930:	2b01      	cmp	r3, #1
 8008932:	f040 817f 	bne.w	8008c34 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d132      	bne.n	80089a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	440a      	add	r2, r1
 8008954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008958:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800895c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008960:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	0151      	lsls	r1, r2, #5
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	440a      	add	r2, r1
 8008978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800897c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008980:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	0151      	lsls	r1, r2, #5
 8008994:	69fa      	ldr	r2, [r7, #28]
 8008996:	440a      	add	r2, r1
 8008998:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800899c:	0cdb      	lsrs	r3, r3, #19
 800899e:	04db      	lsls	r3, r3, #19
 80089a0:	6113      	str	r3, [r2, #16]
 80089a2:	e097      	b.n	8008ad4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	0151      	lsls	r1, r2, #5
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	440a      	add	r2, r1
 80089ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089be:	0cdb      	lsrs	r3, r3, #19
 80089c0:	04db      	lsls	r3, r3, #19
 80089c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	0151      	lsls	r1, r2, #5
 80089d6:	69fa      	ldr	r2, [r7, #28]
 80089d8:	440a      	add	r2, r1
 80089da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80089e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80089e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d11a      	bne.n	8008a24 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	691a      	ldr	r2, [r3, #16]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d903      	bls.n	8008a02 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	0151      	lsls	r1, r2, #5
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	440a      	add	r2, r1
 8008a18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a20:	6113      	str	r3, [r2, #16]
 8008a22:	e044      	b.n	8008aae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	1e5a      	subs	r2, r3, #1
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a38:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a46:	691a      	ldr	r2, [r3, #16]
 8008a48:	8afb      	ldrh	r3, [r7, #22]
 8008a4a:	04d9      	lsls	r1, r3, #19
 8008a4c:	4ba4      	ldr	r3, [pc, #656]	@ (8008ce0 <USB_EPStartXfer+0x3cc>)
 8008a4e:	400b      	ands	r3, r1
 8008a50:	69b9      	ldr	r1, [r7, #24]
 8008a52:	0148      	lsls	r0, r1, #5
 8008a54:	69f9      	ldr	r1, [r7, #28]
 8008a56:	4401      	add	r1, r0
 8008a58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	791b      	ldrb	r3, [r3, #4]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d122      	bne.n	8008aae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	0151      	lsls	r1, r2, #5
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	440a      	add	r2, r1
 8008a7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a82:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008a86:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a94:	691a      	ldr	r2, [r3, #16]
 8008a96:	8afb      	ldrh	r3, [r7, #22]
 8008a98:	075b      	lsls	r3, r3, #29
 8008a9a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008a9e:	69b9      	ldr	r1, [r7, #24]
 8008aa0:	0148      	lsls	r0, r1, #5
 8008aa2:	69f9      	ldr	r1, [r7, #28]
 8008aa4:	4401      	add	r1, r0
 8008aa6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ac4:	69b9      	ldr	r1, [r7, #24]
 8008ac6:	0148      	lsls	r0, r1, #5
 8008ac8:	69f9      	ldr	r1, [r7, #28]
 8008aca:	4401      	add	r1, r0
 8008acc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d14b      	bne.n	8008b72 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d009      	beq.n	8008af6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aee:	461a      	mov	r2, r3
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	791b      	ldrb	r3, [r3, #4]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d128      	bne.n	8008b50 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d110      	bne.n	8008b30 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	e00f      	b.n	8008b50 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	69fa      	ldr	r2, [r7, #28]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b4e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	0151      	lsls	r1, r2, #5
 8008b62:	69fa      	ldr	r2, [r7, #28]
 8008b64:	440a      	add	r2, r1
 8008b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	e166      	b.n	8008e40 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b8c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b90:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	791b      	ldrb	r3, [r3, #4]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d015      	beq.n	8008bc6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 814e 	beq.w	8008e40 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008baa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bba:	69f9      	ldr	r1, [r7, #28]
 8008bbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	634b      	str	r3, [r1, #52]	@ 0x34
 8008bc4:	e13c      	b.n	8008e40 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d110      	bne.n	8008bf8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	69fa      	ldr	r2, [r7, #28]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bf0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	e00f      	b.n	8008c18 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c16:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	68d9      	ldr	r1, [r3, #12]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	781a      	ldrb	r2, [r3, #0]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	b298      	uxth	r0, r3
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f9b9 	bl	8008fa4 <USB_WritePacket>
 8008c32:	e105      	b.n	8008e40 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	0151      	lsls	r1, r2, #5
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	440a      	add	r2, r1
 8008c4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c4e:	0cdb      	lsrs	r3, r3, #19
 8008c50:	04db      	lsls	r3, r3, #19
 8008c52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	0151      	lsls	r1, r2, #5
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	440a      	add	r2, r1
 8008c6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c6e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c72:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c76:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d132      	bne.n	8008ce4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	689a      	ldr	r2, [r3, #8]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cac:	69b9      	ldr	r1, [r7, #24]
 8008cae:	0148      	lsls	r0, r1, #5
 8008cb0:	69f9      	ldr	r1, [r7, #28]
 8008cb2:	4401      	add	r1, r0
 8008cb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	0151      	lsls	r1, r2, #5
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	440a      	add	r2, r1
 8008cd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008cda:	6113      	str	r3, [r2, #16]
 8008cdc:	e062      	b.n	8008da4 <USB_EPStartXfer+0x490>
 8008cde:	bf00      	nop
 8008ce0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d123      	bne.n	8008d34 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf8:	691a      	ldr	r2, [r3, #16]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d02:	69b9      	ldr	r1, [r7, #24]
 8008d04:	0148      	lsls	r0, r1, #5
 8008d06:	69f9      	ldr	r1, [r7, #28]
 8008d08:	4401      	add	r1, r0
 8008d0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	0151      	lsls	r1, r2, #5
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	440a      	add	r2, r1
 8008d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d30:	6113      	str	r3, [r2, #16]
 8008d32:	e037      	b.n	8008da4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	1e5a      	subs	r2, r3, #1
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d48:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	8afa      	ldrh	r2, [r7, #22]
 8008d50:	fb03 f202 	mul.w	r2, r3, r2
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d64:	691a      	ldr	r2, [r3, #16]
 8008d66:	8afb      	ldrh	r3, [r7, #22]
 8008d68:	04d9      	lsls	r1, r3, #19
 8008d6a:	4b38      	ldr	r3, [pc, #224]	@ (8008e4c <USB_EPStartXfer+0x538>)
 8008d6c:	400b      	ands	r3, r1
 8008d6e:	69b9      	ldr	r1, [r7, #24]
 8008d70:	0148      	lsls	r0, r1, #5
 8008d72:	69f9      	ldr	r1, [r7, #28]
 8008d74:	4401      	add	r1, r0
 8008d76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d8a:	691a      	ldr	r2, [r3, #16]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d94:	69b9      	ldr	r1, [r7, #24]
 8008d96:	0148      	lsls	r0, r1, #5
 8008d98:	69f9      	ldr	r1, [r7, #28]
 8008d9a:	4401      	add	r1, r0
 8008d9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008da0:	4313      	orrs	r3, r2
 8008da2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d10d      	bne.n	8008dc6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	68d9      	ldr	r1, [r3, #12]
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc2:	460a      	mov	r2, r1
 8008dc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	791b      	ldrb	r3, [r3, #4]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d128      	bne.n	8008e20 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d110      	bne.n	8008e00 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	0151      	lsls	r1, r2, #5
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	440a      	add	r2, r1
 8008df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	e00f      	b.n	8008e20 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	0151      	lsls	r1, r2, #5
 8008e32:	69fa      	ldr	r2, [r7, #28]
 8008e34:	440a      	add	r2, r1
 8008e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	1ff80000 	.word	0x1ff80000

08008e50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d14a      	bne.n	8008f04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e86:	f040 8086 	bne.w	8008f96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	7812      	ldrb	r2, [r2, #0]
 8008e9e:	0151      	lsls	r1, r2, #5
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	7812      	ldrb	r2, [r2, #0]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ecc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d902      	bls.n	8008ee8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ee6:	e056      	b.n	8008f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f00:	d0e7      	beq.n	8008ed2 <USB_EPStopXfer+0x82>
 8008f02:	e048      	b.n	8008f96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f1c:	d13b      	bne.n	8008f96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	0151      	lsls	r1, r2, #5
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	440a      	add	r2, r1
 8008f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	7812      	ldrb	r2, [r2, #0]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d902      	bls.n	8008f7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	75fb      	strb	r3, [r7, #23]
          break;
 8008f7a:	e00c      	b.n	8008f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f94:	d0e7      	beq.n	8008f66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	371c      	adds	r7, #28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b089      	sub	sp, #36	@ 0x24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4611      	mov	r1, r2
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	71fb      	strb	r3, [r7, #7]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d123      	bne.n	8009012 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008fca:	88bb      	ldrh	r3, [r7, #4]
 8008fcc:	3303      	adds	r3, #3
 8008fce:	089b      	lsrs	r3, r3, #2
 8008fd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	e018      	b.n	800900a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	031a      	lsls	r2, r3, #12
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	3301      	adds	r3, #1
 8009002:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	3301      	adds	r3, #1
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	429a      	cmp	r2, r3
 8009010:	d3e2      	bcc.n	8008fd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3724      	adds	r7, #36	@ 0x24
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009020:	b480      	push	{r7}
 8009022:	b08b      	sub	sp, #44	@ 0x2c
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	089b      	lsrs	r3, r3, #2
 800903a:	b29b      	uxth	r3, r3
 800903c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800903e:	88fb      	ldrh	r3, [r7, #6]
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009046:	2300      	movs	r3, #0
 8009048:	623b      	str	r3, [r7, #32]
 800904a:	e014      	b.n	8009076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	601a      	str	r2, [r3, #0]
    pDest++;
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905a:	3301      	adds	r3, #1
 800905c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	3301      	adds	r3, #1
 8009062:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009066:	3301      	adds	r3, #1
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	3301      	adds	r3, #1
 800906e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	3301      	adds	r3, #1
 8009074:	623b      	str	r3, [r7, #32]
 8009076:	6a3a      	ldr	r2, [r7, #32]
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	429a      	cmp	r2, r3
 800907c:	d3e6      	bcc.n	800904c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800907e:	8bfb      	ldrh	r3, [r7, #30]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01e      	beq.n	80090c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800908e:	461a      	mov	r2, r3
 8009090:	f107 0310 	add.w	r3, r7, #16
 8009094:	6812      	ldr	r2, [r2, #0]
 8009096:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	701a      	strb	r2, [r3, #0]
      i++;
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	3301      	adds	r3, #1
 80090ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b2:	3301      	adds	r3, #1
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80090b6:	8bfb      	ldrh	r3, [r7, #30]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80090bc:	8bfb      	ldrh	r3, [r7, #30]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1ea      	bne.n	8009098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	372c      	adds	r7, #44	@ 0x2c
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d12c      	bne.n	8009146 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	db12      	blt.n	8009124 <USB_EPSetStall+0x54>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00f      	beq.n	8009124 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800911e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009122:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4413      	add	r3, r2
 800912c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	0151      	lsls	r1, r2, #5
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	440a      	add	r2, r1
 800913a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800913e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	e02b      	b.n	800919e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	db12      	blt.n	800917e <USB_EPSetStall+0xae>
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00f      	beq.n	800917e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	0151      	lsls	r1, r2, #5
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	440a      	add	r2, r1
 8009174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009178:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800917c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	0151      	lsls	r1, r2, #5
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	440a      	add	r2, r1
 8009194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009198:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800919c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d128      	bne.n	800921a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	0151      	lsls	r1, r2, #5
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	440a      	add	r2, r1
 80091de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	791b      	ldrb	r3, [r3, #4]
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d003      	beq.n	80091f8 <USB_EPClearStall+0x4c>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	791b      	ldrb	r3, [r3, #4]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d138      	bne.n	800926a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	0151      	lsls	r1, r2, #5
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	440a      	add	r2, r1
 800920e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	e027      	b.n	800926a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	0151      	lsls	r1, r2, #5
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	440a      	add	r2, r1
 8009230:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009234:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009238:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	791b      	ldrb	r3, [r3, #4]
 800923e:	2b03      	cmp	r3, #3
 8009240:	d003      	beq.n	800924a <USB_EPClearStall+0x9e>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	791b      	ldrb	r3, [r3, #4]
 8009246:	2b02      	cmp	r3, #2
 8009248:	d10f      	bne.n	800926a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	440a      	add	r2, r1
 8009260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009268:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009296:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800929a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80092ac:	68f9      	ldr	r1, [r7, #12]
 80092ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092b2:	4313      	orrs	r3, r2
 80092b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092de:	f023 0303 	bic.w	r3, r3, #3
 80092e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092f2:	f023 0302 	bic.w	r3, r3, #2
 80092f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009306:	b480      	push	{r7}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009320:	f023 0303 	bic.w	r3, r3, #3
 8009324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009334:	f043 0302 	orr.w	r3, r3, #2
 8009338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4013      	ands	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009360:	68fb      	ldr	r3, [r7, #12]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	4013      	ands	r3, r2
 8009390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	0c1b      	lsrs	r3, r3, #16
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	4013      	ands	r3, r2
 80093c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	b29b      	uxth	r3, r3
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	4013      	ands	r3, r2
 8009402:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009404:	68bb      	ldr	r3, [r7, #8]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009412:	b480      	push	{r7}
 8009414:	b087      	sub	sp, #28
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	460b      	mov	r3, r1
 800941c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009434:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	f003 030f 	and.w	r3, r3, #15
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	fa22 f303 	lsr.w	r3, r2, r3
 8009442:	01db      	lsls	r3, r3, #7
 8009444:	b2db      	uxtb	r3, r3
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	4413      	add	r3, r2
 8009454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	4013      	ands	r3, r2
 800945e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009460:	68bb      	ldr	r3, [r7, #8]
}
 8009462:	4618      	mov	r0, r3
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	f003 0301 	and.w	r3, r3, #1
}
 800947e:	4618      	mov	r0, r3
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800948a:	b480      	push	{r7}
 800948c:	b085      	sub	sp, #20
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80094a8:	f023 0307 	bic.w	r3, r3, #7
 80094ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	460b      	mov	r3, r1
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	333c      	adds	r3, #60	@ 0x3c
 80094e6:	3304      	adds	r3, #4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	4a26      	ldr	r2, [pc, #152]	@ (8009588 <USB_EP0_OutStart+0xb8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d90a      	bls.n	800950a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009504:	d101      	bne.n	800950a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	e037      	b.n	800957a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009510:	461a      	mov	r2, r3
 8009512:	2300      	movs	r3, #0
 8009514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009528:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009538:	f043 0318 	orr.w	r3, r3, #24
 800953c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800954c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009550:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009552:	7afb      	ldrb	r3, [r7, #11]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d10f      	bne.n	8009578 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800955e:	461a      	mov	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009572:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009576:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	4f54300a 	.word	0x4f54300a

0800958c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3301      	adds	r3, #1
 800959c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095a4:	d901      	bls.n	80095aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e01b      	b.n	80095e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	daf2      	bge.n	8009598 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f043 0201 	orr.w	r2, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3301      	adds	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095ce:	d901      	bls.n	80095d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e006      	b.n	80095e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d0f0      	beq.n	80095c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
	...

080095f0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80095f4:	2200      	movs	r2, #0
 80095f6:	4912      	ldr	r1, [pc, #72]	@ (8009640 <MX_USB_Device_Init+0x50>)
 80095f8:	4812      	ldr	r0, [pc, #72]	@ (8009644 <MX_USB_Device_Init+0x54>)
 80095fa:	f001 f85f 	bl	800a6bc <USBD_Init>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009604:	f7f7 fa10 	bl	8000a28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009608:	490f      	ldr	r1, [pc, #60]	@ (8009648 <MX_USB_Device_Init+0x58>)
 800960a:	480e      	ldr	r0, [pc, #56]	@ (8009644 <MX_USB_Device_Init+0x54>)
 800960c:	f001 f886 	bl	800a71c <USBD_RegisterClass>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009616:	f7f7 fa07 	bl	8000a28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800961a:	490c      	ldr	r1, [pc, #48]	@ (800964c <MX_USB_Device_Init+0x5c>)
 800961c:	4809      	ldr	r0, [pc, #36]	@ (8009644 <MX_USB_Device_Init+0x54>)
 800961e:	f000 ffb1 	bl	800a584 <USBD_CDC_RegisterInterface>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009628:	f7f7 f9fe 	bl	8000a28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800962c:	4805      	ldr	r0, [pc, #20]	@ (8009644 <MX_USB_Device_Init+0x54>)
 800962e:	f001 f89c 	bl	800a76a <USBD_Start>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009638:	f7f7 f9f6 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800963c:	bf00      	nop
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20000078 	.word	0x20000078
 8009644:	2000ce78 	.word	0x2000ce78
 8009648:	200000d8 	.word	0x200000d8
 800964c:	20000064 	.word	0x20000064

08009650 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009654:	2200      	movs	r2, #0
 8009656:	4905      	ldr	r1, [pc, #20]	@ (800966c <CDC_Init_FS+0x1c>)
 8009658:	4805      	ldr	r0, [pc, #20]	@ (8009670 <CDC_Init_FS+0x20>)
 800965a:	f000 ffa8 	bl	800a5ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800965e:	4905      	ldr	r1, [pc, #20]	@ (8009674 <CDC_Init_FS+0x24>)
 8009660:	4803      	ldr	r0, [pc, #12]	@ (8009670 <CDC_Init_FS+0x20>)
 8009662:	f000 ffbd 	bl	800a5e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009666:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009668:	4618      	mov	r0, r3
 800966a:	bd80      	pop	{r7, pc}
 800966c:	2000d948 	.word	0x2000d948
 8009670:	2000ce78 	.word	0x2000ce78
 8009674:	2000d148 	.word	0x2000d148

08009678 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800967c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800967e:	4618      	mov	r0, r3
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	6039      	str	r1, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
 8009694:	4613      	mov	r3, r2
 8009696:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009698:	79fb      	ldrb	r3, [r7, #7]
 800969a:	2b23      	cmp	r3, #35	@ 0x23
 800969c:	d84a      	bhi.n	8009734 <CDC_Control_FS+0xac>
 800969e:	a201      	add	r2, pc, #4	@ (adr r2, 80096a4 <CDC_Control_FS+0x1c>)
 80096a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a4:	08009735 	.word	0x08009735
 80096a8:	08009735 	.word	0x08009735
 80096ac:	08009735 	.word	0x08009735
 80096b0:	08009735 	.word	0x08009735
 80096b4:	08009735 	.word	0x08009735
 80096b8:	08009735 	.word	0x08009735
 80096bc:	08009735 	.word	0x08009735
 80096c0:	08009735 	.word	0x08009735
 80096c4:	08009735 	.word	0x08009735
 80096c8:	08009735 	.word	0x08009735
 80096cc:	08009735 	.word	0x08009735
 80096d0:	08009735 	.word	0x08009735
 80096d4:	08009735 	.word	0x08009735
 80096d8:	08009735 	.word	0x08009735
 80096dc:	08009735 	.word	0x08009735
 80096e0:	08009735 	.word	0x08009735
 80096e4:	08009735 	.word	0x08009735
 80096e8:	08009735 	.word	0x08009735
 80096ec:	08009735 	.word	0x08009735
 80096f0:	08009735 	.word	0x08009735
 80096f4:	08009735 	.word	0x08009735
 80096f8:	08009735 	.word	0x08009735
 80096fc:	08009735 	.word	0x08009735
 8009700:	08009735 	.word	0x08009735
 8009704:	08009735 	.word	0x08009735
 8009708:	08009735 	.word	0x08009735
 800970c:	08009735 	.word	0x08009735
 8009710:	08009735 	.word	0x08009735
 8009714:	08009735 	.word	0x08009735
 8009718:	08009735 	.word	0x08009735
 800971c:	08009735 	.word	0x08009735
 8009720:	08009735 	.word	0x08009735
 8009724:	08009735 	.word	0x08009735
 8009728:	08009735 	.word	0x08009735
 800972c:	08009735 	.word	0x08009735
 8009730:	08009735 	.word	0x08009735
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009734:	bf00      	nop
  }

  return (USBD_OK);
 8009736:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	482f      	ldr	r0, [pc, #188]	@ (8009810 <CDC_Receive_FS+0xcc>)
 8009752:	f000 ff45 	bl	800a5e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009756:	482e      	ldr	r0, [pc, #184]	@ (8009810 <CDC_Receive_FS+0xcc>)
 8009758:	f000 ff86 	bl	800a668 <USBD_CDC_ReceivePacket>

  uint32_t msg_rx = (Buf[3]<<24)|(Buf[2]<<16)|(Buf[1]<<8)|(Buf[0]);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	3303      	adds	r3, #3
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	061a      	lsls	r2, r3, #24
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3302      	adds	r3, #2
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	041b      	lsls	r3, r3, #16
 800976c:	431a      	orrs	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3301      	adds	r3, #1
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	021b      	lsls	r3, r3, #8
 8009776:	4313      	orrs	r3, r2
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	7812      	ldrb	r2, [r2, #0]
 800977c:	4313      	orrs	r3, r2
 800977e:	617b      	str	r3, [r7, #20]

  uint32_t addr = (msg_rx&0x7F000000)>>24;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	0e1b      	lsrs	r3, r3, #24
 8009784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009788:	613b      	str	r3, [r7, #16]
  uint32_t data = (msg_rx&0x00FFFFFF);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009790:	60fb      	str	r3, [r7, #12]
  uint32_t msg_tx = 0xdeadbeef;
 8009792:	4b20      	ldr	r3, [pc, #128]	@ (8009814 <CDC_Receive_FS+0xd0>)
 8009794:	60bb      	str	r3, [r7, #8]

  if(msg_rx&0x80000000){
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2b00      	cmp	r3, #0
 800979a:	da05      	bge.n	80097a8 <CDC_Receive_FS+0x64>
	  set_register(&device_registers,addr,data);
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	6939      	ldr	r1, [r7, #16]
 80097a0:	481d      	ldr	r0, [pc, #116]	@ (8009818 <CDC_Receive_FS+0xd4>)
 80097a2:	f7f7 fd40 	bl	8001226 <set_register>
 80097a6:	e02e      	b.n	8009806 <CDC_Receive_FS+0xc2>
  }
  else{
	  if(addr == DVC_FLUSH_SAMPLE_DATA_1){
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b64      	cmp	r3, #100	@ 0x64
 80097ac:	d105      	bne.n	80097ba <CDC_Receive_FS+0x76>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_1, sizeof(adc_samples_1));
 80097ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80097b2:	481a      	ldr	r0, [pc, #104]	@ (800981c <CDC_Receive_FS+0xd8>)
 80097b4:	f000 f838 	bl	8009828 <CDC_Transmit_FS>
 80097b8:	e025      	b.n	8009806 <CDC_Receive_FS+0xc2>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_2){
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b65      	cmp	r3, #101	@ 0x65
 80097be:	d105      	bne.n	80097cc <CDC_Receive_FS+0x88>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_2, sizeof(adc_samples_2));
 80097c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80097c4:	4816      	ldr	r0, [pc, #88]	@ (8009820 <CDC_Receive_FS+0xdc>)
 80097c6:	f000 f82f 	bl	8009828 <CDC_Transmit_FS>
 80097ca:	e01c      	b.n	8009806 <CDC_Receive_FS+0xc2>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_3){
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2b66      	cmp	r3, #102	@ 0x66
 80097d0:	d105      	bne.n	80097de <CDC_Receive_FS+0x9a>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_3, sizeof(adc_samples_3));
 80097d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80097d6:	4813      	ldr	r0, [pc, #76]	@ (8009824 <CDC_Receive_FS+0xe0>)
 80097d8:	f000 f826 	bl	8009828 <CDC_Transmit_FS>
 80097dc:	e013      	b.n	8009806 <CDC_Receive_FS+0xc2>
	  }
	  else{
		  data = get_register(&device_registers,addr);
 80097de:	6939      	ldr	r1, [r7, #16]
 80097e0:	480d      	ldr	r0, [pc, #52]	@ (8009818 <CDC_Receive_FS+0xd4>)
 80097e2:	f7f7 fd0f 	bl	8001204 <get_register>
 80097e6:	60f8      	str	r0, [r7, #12]
		  msg_tx = ((addr << 24)&0x7F000000) | (data&0x00FFFFFF);
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	061b      	lsls	r3, r3, #24
 80097ec:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60bb      	str	r3, [r7, #8]
		  CDC_Transmit_FS((uint8_t*)&msg_tx, sizeof(msg_tx));
 80097fa:	f107 0308 	add.w	r3, r7, #8
 80097fe:	2104      	movs	r1, #4
 8009800:	4618      	mov	r0, r3
 8009802:	f000 f811 	bl	8009828 <CDC_Transmit_FS>
	  }
  }

  return (USBD_OK);
 8009806:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009808:	4618      	mov	r0, r3
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	2000ce78 	.word	0x2000ce78
 8009814:	deadbeef 	.word	0xdeadbeef
 8009818:	2000c968 	.word	0x2000c968
 800981c:	20000968 	.word	0x20000968
 8009820:	20004968 	.word	0x20004968
 8009824:	20008968 	.word	0x20008968

08009828 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009838:	4b0d      	ldr	r3, [pc, #52]	@ (8009870 <CDC_Transmit_FS+0x48>)
 800983a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800983e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800984a:	2301      	movs	r3, #1
 800984c:	e00b      	b.n	8009866 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800984e:	887b      	ldrh	r3, [r7, #2]
 8009850:	461a      	mov	r2, r3
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4806      	ldr	r0, [pc, #24]	@ (8009870 <CDC_Transmit_FS+0x48>)
 8009856:	f000 feaa 	bl	800a5ae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800985a:	4805      	ldr	r0, [pc, #20]	@ (8009870 <CDC_Transmit_FS+0x48>)
 800985c:	f000 fed4 	bl	800a608 <USBD_CDC_TransmitPacket>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009864:	7bfb      	ldrb	r3, [r7, #15]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	2000ce78 	.word	0x2000ce78

08009874 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800988a:	4618      	mov	r0, r3
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
	...

08009898 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	6039      	str	r1, [r7, #0]
 80098a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2212      	movs	r2, #18
 80098a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80098aa:	4b03      	ldr	r3, [pc, #12]	@ (80098b8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	20000098 	.word	0x20000098

080098bc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2204      	movs	r2, #4
 80098cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098ce:	4b03      	ldr	r3, [pc, #12]	@ (80098dc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	200000ac 	.word	0x200000ac

080098e0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d105      	bne.n	80098fe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	4907      	ldr	r1, [pc, #28]	@ (8009914 <USBD_CDC_ProductStrDescriptor+0x34>)
 80098f6:	4808      	ldr	r0, [pc, #32]	@ (8009918 <USBD_CDC_ProductStrDescriptor+0x38>)
 80098f8:	f001 ff40 	bl	800b77c <USBD_GetString>
 80098fc:	e004      	b.n	8009908 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	4904      	ldr	r1, [pc, #16]	@ (8009914 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009902:	4805      	ldr	r0, [pc, #20]	@ (8009918 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009904:	f001 ff3a 	bl	800b77c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009908:	4b02      	ldr	r3, [pc, #8]	@ (8009914 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	2000e148 	.word	0x2000e148
 8009918:	0800b9ac 	.word	0x0800b9ac

0800991c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	6039      	str	r1, [r7, #0]
 8009926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	4904      	ldr	r1, [pc, #16]	@ (800993c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800992c:	4804      	ldr	r0, [pc, #16]	@ (8009940 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800992e:	f001 ff25 	bl	800b77c <USBD_GetString>
  return USBD_StrDesc;
 8009932:	4b02      	ldr	r3, [pc, #8]	@ (800993c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	2000e148 	.word	0x2000e148
 8009940:	0800b9c4 	.word	0x0800b9c4

08009944 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	221a      	movs	r2, #26
 8009954:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009956:	f000 f843 	bl	80099e0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800995a:	4b02      	ldr	r3, [pc, #8]	@ (8009964 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	200000b0 	.word	0x200000b0

08009968 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4907      	ldr	r1, [pc, #28]	@ (800999c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800997e:	4808      	ldr	r0, [pc, #32]	@ (80099a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009980:	f001 fefc 	bl	800b77c <USBD_GetString>
 8009984:	e004      	b.n	8009990 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4904      	ldr	r1, [pc, #16]	@ (800999c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800998a:	4805      	ldr	r0, [pc, #20]	@ (80099a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800998c:	f001 fef6 	bl	800b77c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009990:	4b02      	ldr	r3, [pc, #8]	@ (800999c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	2000e148 	.word	0x2000e148
 80099a0:	0800b9d8 	.word	0x0800b9d8

080099a4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d105      	bne.n	80099c2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	4907      	ldr	r1, [pc, #28]	@ (80099d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80099ba:	4808      	ldr	r0, [pc, #32]	@ (80099dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80099bc:	f001 fede 	bl	800b77c <USBD_GetString>
 80099c0:	e004      	b.n	80099cc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	4904      	ldr	r1, [pc, #16]	@ (80099d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80099c6:	4805      	ldr	r0, [pc, #20]	@ (80099dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80099c8:	f001 fed8 	bl	800b77c <USBD_GetString>
  }
  return USBD_StrDesc;
 80099cc:	4b02      	ldr	r3, [pc, #8]	@ (80099d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	2000e148 	.word	0x2000e148
 80099dc:	0800b9e4 	.word	0x0800b9e4

080099e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009a24 <Get_SerialNum+0x44>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009a28 <Get_SerialNum+0x48>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099f2:	4b0e      	ldr	r3, [pc, #56]	@ (8009a2c <Get_SerialNum+0x4c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d009      	beq.n	8009a1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a06:	2208      	movs	r2, #8
 8009a08:	4909      	ldr	r1, [pc, #36]	@ (8009a30 <Get_SerialNum+0x50>)
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 f814 	bl	8009a38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a10:	2204      	movs	r2, #4
 8009a12:	4908      	ldr	r1, [pc, #32]	@ (8009a34 <Get_SerialNum+0x54>)
 8009a14:	68b8      	ldr	r0, [r7, #8]
 8009a16:	f000 f80f 	bl	8009a38 <IntToUnicode>
  }
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	0bfa0700 	.word	0x0bfa0700
 8009a28:	0bfa0704 	.word	0x0bfa0704
 8009a2c:	0bfa0708 	.word	0x0bfa0708
 8009a30:	200000b2 	.word	0x200000b2
 8009a34:	200000c2 	.word	0x200000c2

08009a38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	75fb      	strb	r3, [r7, #23]
 8009a4e:	e027      	b.n	8009aa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	0f1b      	lsrs	r3, r3, #28
 8009a54:	2b09      	cmp	r3, #9
 8009a56:	d80b      	bhi.n	8009a70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	0f1b      	lsrs	r3, r3, #28
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	4619      	mov	r1, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	440b      	add	r3, r1
 8009a68:	3230      	adds	r2, #48	@ 0x30
 8009a6a:	b2d2      	uxtb	r2, r2
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	e00a      	b.n	8009a86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	0f1b      	lsrs	r3, r3, #28
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	440b      	add	r3, r1
 8009a80:	3237      	adds	r2, #55	@ 0x37
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	3301      	adds	r3, #1
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	4413      	add	r3, r2
 8009a96:	2200      	movs	r2, #0
 8009a98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	75fb      	strb	r3, [r7, #23]
 8009aa0:	7dfa      	ldrb	r2, [r7, #23]
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d3d3      	bcc.n	8009a50 <IntToUnicode+0x18>
  }
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	371c      	adds	r7, #28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009aca:	4619      	mov	r1, r3
 8009acc:	4610      	mov	r0, r2
 8009ace:	f000 fe97 	bl	800a800 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009ad2:	bf00      	nop
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	4413      	add	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	440b      	add	r3, r1
 8009afa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	4619      	mov	r1, r3
 8009b04:	f000 fed1 	bl	800a8aa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009b22:	78fa      	ldrb	r2, [r7, #3]
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	4613      	mov	r3, r2
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	3320      	adds	r3, #32
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	4619      	mov	r1, r3
 8009b38:	f000 ff1a 	bl	800a970 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 f81e 	bl	800ab94 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	79db      	ldrb	r3, [r3, #7]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d001      	beq.n	8009b78 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b74:	f7f6 ff58 	bl	8000a28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b7e:	7bfa      	ldrb	r2, [r7, #15]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 ffcb 	bl	800ab1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 ff84 	bl	800aa9c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009b94:	bf00      	nop
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 ffc7 	bl	800ab3e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	7adb      	ldrb	r3, [r3, #11]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bb8:	4b04      	ldr	r3, [pc, #16]	@ (8009bcc <HAL_PCD_SuspendCallback+0x30>)
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	4a03      	ldr	r2, [pc, #12]	@ (8009bcc <HAL_PCD_SuspendCallback+0x30>)
 8009bbe:	f043 0306 	orr.w	r3, r3, #6
 8009bc2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	e000ed00 	.word	0xe000ed00

08009bd0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	7adb      	ldrb	r3, [r3, #11]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009be0:	4b08      	ldr	r3, [pc, #32]	@ (8009c04 <HAL_PCD_ResumeCallback+0x34>)
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	4a07      	ldr	r2, [pc, #28]	@ (8009c04 <HAL_PCD_ResumeCallback+0x34>)
 8009be6:	f023 0306 	bic.w	r3, r3, #6
 8009bea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009bec:	f000 fa2a 	bl	800a044 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 ffb6 	bl	800ab68 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	e000ed00 	.word	0xe000ed00

08009c08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	460b      	mov	r3, r1
 8009c12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c1a:	78fa      	ldrb	r2, [r7, #3]
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 ffdf 	bl	800abe2 <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c3e:	78fa      	ldrb	r2, [r7, #3]
 8009c40:	4611      	mov	r1, r2
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 ffc0 	bl	800abc8 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 ffcc 	bl	800abfc <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 ffc9 	bl	800ac12 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009c90:	4a24      	ldr	r2, [pc, #144]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a22      	ldr	r2, [pc, #136]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009c9c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009ca0:	f7fa fdd4 	bl	800484c <HAL_PWREx_EnableVddUSB>
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler( );
  }
#else
  hpcd_USB_FS.Instance = USB_OTG_FS;
 8009ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009ca6:	4a20      	ldr	r2, [pc, #128]	@ (8009d28 <USBD_LL_Init+0xa0>)
 8009ca8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 6;
 8009caa:	4b1e      	ldr	r3, [pc, #120]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009cac:	2206      	movs	r2, #6
 8009cae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009cbc:	4b19      	ldr	r3, [pc, #100]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009cc2:	4b18      	ldr	r3, [pc, #96]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009cc8:	4b16      	ldr	r3, [pc, #88]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_FS.Init.use_dedicated_ep1 = DISABLE;
 8009cce:	4b15      	ldr	r3, [pc, #84]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_FS.Init.vbus_sensing_enable = DISABLE;
 8009cd4:	4b13      	ldr	r3, [pc, #76]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009cda:	4812      	ldr	r0, [pc, #72]	@ (8009d24 <USBD_LL_Init+0x9c>)
 8009cdc:	f7f9 fa90 	bl	8003200 <HAL_PCD_Init>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <USBD_LL_Init+0x62>
  {
    Error_Handler();
 8009ce6:	f7f6 fe9f 	bl	8000a28 <Error_Handler>
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , 0, 0xC0);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , 0, 0x110);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , 0, 0x100);
#else
  HAL_PCDEx_SetRxFiFo((PCD_HandleTypeDef*)pdev->pData, 0x80);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009cf0:	2180      	movs	r1, #128	@ 0x80
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fa fce9 	bl	80046ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 0, 0x40);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009cfe:	2240      	movs	r2, #64	@ 0x40
 8009d00:	2100      	movs	r1, #0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fa fc9a 	bl	800463c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 1, 0x80);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d0e:	2280      	movs	r2, #128	@ 0x80
 8009d10:	2101      	movs	r1, #1
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fa fc92 	bl	800463c <HAL_PCDEx_SetTxFiFo>
#endif
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	2000e348 	.word	0x2000e348
 8009d28:	42040000 	.word	0x42040000

08009d2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f9 fb74 	bl	8003430 <HAL_PCD_Start>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f97e 	bl	800a050 <USBD_Get_USB_Status>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	4608      	mov	r0, r1
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	461a      	mov	r2, r3
 8009d70:	4603      	mov	r3, r0
 8009d72:	70fb      	strb	r3, [r7, #3]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70bb      	strb	r3, [r7, #2]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009d8a:	78bb      	ldrb	r3, [r7, #2]
 8009d8c:	883a      	ldrh	r2, [r7, #0]
 8009d8e:	78f9      	ldrb	r1, [r7, #3]
 8009d90:	f7fa f86f 	bl	8003e72 <HAL_PCD_EP_Open>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f958 	bl	800a050 <USBD_Get_USB_Status>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fa f8ba 	bl	8003f46 <HAL_PCD_EP_Close>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 f939 	bl	800a050 <USBD_Get_USB_Status>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fa f972 	bl	80040f4 <HAL_PCD_EP_SetStall>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 f91a 	bl	800a050 <USBD_Get_USB_Status>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009e44:	78fa      	ldrb	r2, [r7, #3]
 8009e46:	4611      	mov	r1, r2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fa f9b6 	bl	80041ba <HAL_PCD_EP_ClrStall>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 f8fb 	bl	800a050 <USBD_Get_USB_Status>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009e7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	da0b      	bge.n	8009e9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e84:	78fb      	ldrb	r3, [r7, #3]
 8009e86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e8a:	68f9      	ldr	r1, [r7, #12]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	440b      	add	r3, r1
 8009e96:	3316      	adds	r3, #22
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	e00b      	b.n	8009eb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e9c:	78fb      	ldrb	r3, [r7, #3]
 8009e9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ea2:	68f9      	ldr	r1, [r7, #12]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009eb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009eda:	78fa      	ldrb	r2, [r7, #3]
 8009edc:	4611      	mov	r1, r2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f9 ffa3 	bl	8003e2a <HAL_PCD_SetAddress>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f8b0 	bl	800a050 <USBD_Get_USB_Status>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b086      	sub	sp, #24
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f1c:	7af9      	ldrb	r1, [r7, #11]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	f7fa f8ad 	bl	8004080 <HAL_PCD_EP_Transmit>
 8009f26:	4603      	mov	r3, r0
 8009f28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 f88f 	bl	800a050 <USBD_Get_USB_Status>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f36:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	607a      	str	r2, [r7, #4]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f5e:	7af9      	ldrb	r1, [r7, #11]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	f7fa f839 	bl	8003fda <HAL_PCD_EP_Receive>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f86e 	bl	800a050 <USBD_Get_USB_Status>
 8009f74:	4603      	mov	r3, r0
 8009f76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f78:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009f94:	78fa      	ldrb	r2, [r7, #3]
 8009f96:	4611      	mov	r1, r2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fa f859 	bl	8004050 <HAL_PCD_EP_GetRxCount>
 8009f9e:	4603      	mov	r3, r0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d002      	beq.n	8009fc0 <HAL_PCDEx_LPM_Callback+0x18>
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d013      	beq.n	8009fe6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009fbe:	e023      	b.n	800a008 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	7adb      	ldrb	r3, [r3, #11]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d007      	beq.n	8009fd8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009fc8:	f000 f83c 	bl	800a044 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009fcc:	4b10      	ldr	r3, [pc, #64]	@ (800a010 <HAL_PCDEx_LPM_Callback+0x68>)
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	4a0f      	ldr	r2, [pc, #60]	@ (800a010 <HAL_PCDEx_LPM_Callback+0x68>)
 8009fd2:	f023 0306 	bic.w	r3, r3, #6
 8009fd6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fdc2 	bl	800ab68 <USBD_LL_Resume>
    break;
 8009fe4:	e010      	b.n	800a008 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fda6 	bl	800ab3e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	7adb      	ldrb	r3, [r3, #11]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d005      	beq.n	800a006 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ffa:	4b05      	ldr	r3, [pc, #20]	@ (800a010 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	4a04      	ldr	r2, [pc, #16]	@ (800a010 <HAL_PCDEx_LPM_Callback+0x68>)
 800a000:	f043 0306 	orr.w	r3, r3, #6
 800a004:	6113      	str	r3, [r2, #16]
    break;
 800a006:	bf00      	nop
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	e000ed00 	.word	0xe000ed00

0800a014 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a01c:	4b03      	ldr	r3, [pc, #12]	@ (800a02c <USBD_static_malloc+0x18>)
}
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	2000e82c 	.word	0x2000e82c

0800a030 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]

}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a048:	f7f6 f938 	bl	80002bc <SystemClock_Config>
}
 800a04c:	bf00      	nop
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	4603      	mov	r3, r0
 800a058:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	2b03      	cmp	r3, #3
 800a062:	d817      	bhi.n	800a094 <USBD_Get_USB_Status+0x44>
 800a064:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <USBD_Get_USB_Status+0x1c>)
 800a066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06a:	bf00      	nop
 800a06c:	0800a07d 	.word	0x0800a07d
 800a070:	0800a083 	.word	0x0800a083
 800a074:	0800a089 	.word	0x0800a089
 800a078:	0800a08f 	.word	0x0800a08f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]
    break;
 800a080:	e00b      	b.n	800a09a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a082:	2303      	movs	r3, #3
 800a084:	73fb      	strb	r3, [r7, #15]
    break;
 800a086:	e008      	b.n	800a09a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a088:	2301      	movs	r3, #1
 800a08a:	73fb      	strb	r3, [r7, #15]
    break;
 800a08c:	e005      	b.n	800a09a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a08e:	2303      	movs	r3, #3
 800a090:	73fb      	strb	r3, [r7, #15]
    break;
 800a092:	e002      	b.n	800a09a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a094:	2303      	movs	r3, #3
 800a096:	73fb      	strb	r3, [r7, #15]
    break;
 800a098:	bf00      	nop
  }
  return usb_status;
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0b4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a0b8:	f7ff ffac 	bl	800a014 <USBD_static_malloc>
 800a0bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d105      	bne.n	800a0d0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e066      	b.n	800a19e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	7c1b      	ldrb	r3, [r3, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d119      	bne.n	800a114 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	2181      	movs	r1, #129	@ 0x81
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff fe3a 	bl	8009d62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff fe30 	bl	8009d62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2210      	movs	r2, #16
 800a10e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a112:	e016      	b.n	800a142 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a114:	2340      	movs	r3, #64	@ 0x40
 800a116:	2202      	movs	r2, #2
 800a118:	2181      	movs	r1, #129	@ 0x81
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff fe21 	bl	8009d62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a126:	2340      	movs	r3, #64	@ 0x40
 800a128:	2202      	movs	r2, #2
 800a12a:	2101      	movs	r1, #1
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff fe18 	bl	8009d62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2210      	movs	r2, #16
 800a13e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a142:	2308      	movs	r3, #8
 800a144:	2203      	movs	r2, #3
 800a146:	2182      	movs	r1, #130	@ 0x82
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff fe0a 	bl	8009d62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	7c1b      	ldrb	r3, [r3, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d109      	bne.n	800a18c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a17e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a182:	2101      	movs	r1, #1
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff fedb 	bl	8009f40 <USBD_LL_PrepareReceive>
 800a18a:	e007      	b.n	800a19c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a192:	2340      	movs	r3, #64	@ 0x40
 800a194:	2101      	movs	r1, #1
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff fed2 	bl	8009f40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a1b2:	2181      	movs	r1, #129	@ 0x81
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7ff fdfa 	bl	8009dae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff fdf3 	bl	8009dae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a1d0:	2182      	movs	r1, #130	@ 0x82
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff fdeb 	bl	8009dae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00e      	beq.n	800a210 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff ff14 	bl	800a030 <USBD_static_free>
    pdev->pClassData = NULL;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a22c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a232:	2300      	movs	r3, #0
 800a234:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a242:	2b00      	cmp	r3, #0
 800a244:	d03a      	beq.n	800a2bc <USBD_CDC_Setup+0xa0>
 800a246:	2b20      	cmp	r3, #32
 800a248:	f040 8097 	bne.w	800a37a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	88db      	ldrh	r3, [r3, #6]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d029      	beq.n	800a2a8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	b25b      	sxtb	r3, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	da11      	bge.n	800a282 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a26a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	88d2      	ldrh	r2, [r2, #6]
 800a270:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a272:	6939      	ldr	r1, [r7, #16]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	88db      	ldrh	r3, [r3, #6]
 800a278:	461a      	mov	r2, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 fade 	bl	800b83c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a280:	e082      	b.n	800a388 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	785a      	ldrb	r2, [r3, #1]
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	88db      	ldrh	r3, [r3, #6]
 800a290:	b2da      	uxtb	r2, r3
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a298:	6939      	ldr	r1, [r7, #16]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	88db      	ldrh	r3, [r3, #6]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f001 faf7 	bl	800b894 <USBD_CtlPrepareRx>
      break;
 800a2a6:	e06f      	b.n	800a388 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	683a      	ldr	r2, [r7, #0]
 800a2b2:	7850      	ldrb	r0, [r2, #1]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	4798      	blx	r3
      break;
 800a2ba:	e065      	b.n	800a388 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	785b      	ldrb	r3, [r3, #1]
 800a2c0:	2b0b      	cmp	r3, #11
 800a2c2:	d84f      	bhi.n	800a364 <USBD_CDC_Setup+0x148>
 800a2c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2cc <USBD_CDC_Setup+0xb0>)
 800a2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ca:	bf00      	nop
 800a2cc:	0800a2fd 	.word	0x0800a2fd
 800a2d0:	0800a373 	.word	0x0800a373
 800a2d4:	0800a365 	.word	0x0800a365
 800a2d8:	0800a365 	.word	0x0800a365
 800a2dc:	0800a365 	.word	0x0800a365
 800a2e0:	0800a365 	.word	0x0800a365
 800a2e4:	0800a365 	.word	0x0800a365
 800a2e8:	0800a365 	.word	0x0800a365
 800a2ec:	0800a365 	.word	0x0800a365
 800a2f0:	0800a365 	.word	0x0800a365
 800a2f4:	0800a325 	.word	0x0800a325
 800a2f8:	0800a34d 	.word	0x0800a34d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a302:	2b03      	cmp	r3, #3
 800a304:	d107      	bne.n	800a316 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a306:	f107 030c 	add.w	r3, r7, #12
 800a30a:	2202      	movs	r2, #2
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f001 fa94 	bl	800b83c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a314:	e030      	b.n	800a378 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 fa1e 	bl	800b75a <USBD_CtlError>
            ret = USBD_FAIL;
 800a31e:	2303      	movs	r3, #3
 800a320:	75fb      	strb	r3, [r7, #23]
          break;
 800a322:	e029      	b.n	800a378 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d107      	bne.n	800a33e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a32e:	f107 030f 	add.w	r3, r7, #15
 800a332:	2201      	movs	r2, #1
 800a334:	4619      	mov	r1, r3
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 fa80 	bl	800b83c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a33c:	e01c      	b.n	800a378 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f001 fa0a 	bl	800b75a <USBD_CtlError>
            ret = USBD_FAIL;
 800a346:	2303      	movs	r3, #3
 800a348:	75fb      	strb	r3, [r7, #23]
          break;
 800a34a:	e015      	b.n	800a378 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a352:	2b03      	cmp	r3, #3
 800a354:	d00f      	beq.n	800a376 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f001 f9fe 	bl	800b75a <USBD_CtlError>
            ret = USBD_FAIL;
 800a35e:	2303      	movs	r3, #3
 800a360:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a362:	e008      	b.n	800a376 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 f9f7 	bl	800b75a <USBD_CtlError>
          ret = USBD_FAIL;
 800a36c:	2303      	movs	r3, #3
 800a36e:	75fb      	strb	r3, [r7, #23]
          break;
 800a370:	e002      	b.n	800a378 <USBD_CDC_Setup+0x15c>
          break;
 800a372:	bf00      	nop
 800a374:	e008      	b.n	800a388 <USBD_CDC_Setup+0x16c>
          break;
 800a376:	bf00      	nop
      }
      break;
 800a378:	e006      	b.n	800a388 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f001 f9ec 	bl	800b75a <USBD_CtlError>
      ret = USBD_FAIL;
 800a382:	2303      	movs	r3, #3
 800a384:	75fb      	strb	r3, [r7, #23]
      break;
 800a386:	bf00      	nop
  }

  return (uint8_t)ret;
 800a388:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop

0800a394 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e04f      	b.n	800a456 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3be:	78fa      	ldrb	r2, [r7, #3]
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	440b      	add	r3, r1
 800a3cc:	3318      	adds	r3, #24
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d029      	beq.n	800a428 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	440b      	add	r3, r1
 800a3e2:	3318      	adds	r3, #24
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	78f9      	ldrb	r1, [r7, #3]
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	440b      	add	r3, r1
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4403      	add	r3, r0
 800a3f4:	331c      	adds	r3, #28
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3fc:	fb01 f303 	mul.w	r3, r1, r3
 800a400:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a402:	2b00      	cmp	r3, #0
 800a404:	d110      	bne.n	800a428 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a406:	78fa      	ldrb	r2, [r7, #3]
 800a408:	6879      	ldr	r1, [r7, #4]
 800a40a:	4613      	mov	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	440b      	add	r3, r1
 800a414:	3318      	adds	r3, #24
 800a416:	2200      	movs	r2, #0
 800a418:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a41a:	78f9      	ldrb	r1, [r7, #3]
 800a41c:	2300      	movs	r3, #0
 800a41e:	2200      	movs	r2, #0
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7ff fd6c 	bl	8009efe <USBD_LL_Transmit>
 800a426:	e015      	b.n	800a454 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00b      	beq.n	800a454 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a450:	78fa      	ldrb	r2, [r7, #3]
 800a452:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b084      	sub	sp, #16
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	460b      	mov	r3, r1
 800a468:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a470:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e015      	b.n	800a4ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff fd7c 	bl	8009f82 <USBD_LL_GetRxDataSize>
 800a48a:	4602      	mov	r2, r0
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4c2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d014      	beq.n	800a4f8 <USBD_CDC_EP0_RxReady+0x44>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a4d4:	2bff      	cmp	r3, #255	@ 0xff
 800a4d6:	d00f      	beq.n	800a4f8 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a4e6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	22ff      	movs	r2, #255	@ 0xff
 800a4f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
	...

0800a504 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2243      	movs	r2, #67	@ 0x43
 800a510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a512:	4b03      	ldr	r3, [pc, #12]	@ (800a520 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	20000154 	.word	0x20000154

0800a524 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2243      	movs	r2, #67	@ 0x43
 800a530:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a532:	4b03      	ldr	r3, [pc, #12]	@ (800a540 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	20000110 	.word	0x20000110

0800a544 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2243      	movs	r2, #67	@ 0x43
 800a550:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a552:	4b03      	ldr	r3, [pc, #12]	@ (800a560 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	20000198 	.word	0x20000198

0800a564 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	220a      	movs	r2, #10
 800a570:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a572:	4b03      	ldr	r3, [pc, #12]	@ (800a580 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a574:	4618      	mov	r0, r3
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr
 800a580:	200000cc 	.word	0x200000cc

0800a584 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a594:	2303      	movs	r3, #3
 800a596:	e004      	b.n	800a5a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b087      	sub	sp, #28
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	371c      	adds	r7, #28
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5f0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a616:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a618:	2301      	movs	r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a626:	2303      	movs	r3, #3
 800a628:	e01a      	b.n	800a660 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a630:	2b00      	cmp	r3, #0
 800a632:	d114      	bne.n	800a65e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2201      	movs	r2, #1
 800a638:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a652:	2181      	movs	r1, #129	@ 0x81
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff fc52 	bl	8009efe <USBD_LL_Transmit>

    ret = USBD_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a676:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a682:	2303      	movs	r3, #3
 800a684:	e016      	b.n	800a6b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	7c1b      	ldrb	r3, [r3, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d109      	bne.n	800a6a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a694:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a698:	2101      	movs	r1, #1
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff fc50 	bl	8009f40 <USBD_LL_PrepareReceive>
 800a6a0:	e007      	b.n	800a6b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a6a8:	2340      	movs	r3, #64	@ 0x40
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff fc47 	bl	8009f40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e01f      	b.n	800a714 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	79fa      	ldrb	r2, [r7, #7]
 800a706:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff fabd 	bl	8009c88 <USBD_LL_Init>
 800a70e:	4603      	mov	r3, r0
 800a710:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a712:	7dfb      	ldrb	r3, [r7, #23]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a726:	2300      	movs	r3, #0
 800a728:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a730:	2303      	movs	r3, #3
 800a732:	e016      	b.n	800a762 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00b      	beq.n	800a760 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a750:	f107 020e 	add.w	r2, r7, #14
 800a754:	4610      	mov	r0, r2
 800a756:	4798      	blx	r3
 800a758:	4602      	mov	r2, r0
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fada 	bl	8009d2c <USBD_LL_Start>
 800a778:	4603      	mov	r3, r0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d009      	beq.n	800a7c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	78fa      	ldrb	r2, [r7, #3]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d007      	beq.n	800a7f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	78fa      	ldrb	r2, [r7, #3]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	4798      	blx	r3
  }

  return USBD_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 ff67 	bl	800b6e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a826:	461a      	mov	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a834:	f003 031f 	and.w	r3, r3, #31
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d01a      	beq.n	800a872 <USBD_LL_SetupStage+0x72>
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d822      	bhi.n	800a886 <USBD_LL_SetupStage+0x86>
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <USBD_LL_SetupStage+0x4a>
 800a844:	2b01      	cmp	r3, #1
 800a846:	d00a      	beq.n	800a85e <USBD_LL_SetupStage+0x5e>
 800a848:	e01d      	b.n	800a886 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fa18 	bl	800ac88 <USBD_StdDevReq>
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]
      break;
 800a85c:	e020      	b.n	800a8a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fa7c 	bl	800ad64 <USBD_StdItfReq>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73fb      	strb	r3, [r7, #15]
      break;
 800a870:	e016      	b.n	800a8a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a878:	4619      	mov	r1, r3
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 faba 	bl	800adf4 <USBD_StdEPReq>
 800a880:	4603      	mov	r3, r0
 800a882:	73fb      	strb	r3, [r7, #15]
      break;
 800a884:	e00c      	b.n	800a8a0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a88c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a890:	b2db      	uxtb	r3, r3
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff faa9 	bl	8009dec <USBD_LL_StallEP>
 800a89a:	4603      	mov	r3, r0
 800a89c:	73fb      	strb	r3, [r7, #15]
      break;
 800a89e:	bf00      	nop
  }

  return ret;
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	607a      	str	r2, [r7, #4]
 800a8b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a8b8:	7afb      	ldrb	r3, [r7, #11]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d137      	bne.n	800a92e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a8c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d14a      	bne.n	800a966 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d913      	bls.n	800a904 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	1ad2      	subs	r2, r2, r3
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	bf28      	it	cs
 800a8f6:	4613      	movcs	r3, r2
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	6879      	ldr	r1, [r7, #4]
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 ffe6 	bl	800b8ce <USBD_CtlContinueRx>
 800a902:	e030      	b.n	800a966 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00a      	beq.n	800a926 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a916:	2b03      	cmp	r3, #3
 800a918:	d105      	bne.n	800a926 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f000 ffe2 	bl	800b8f0 <USBD_CtlSendStatus>
 800a92c:	e01b      	b.n	800a966 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d013      	beq.n	800a962 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a940:	2b03      	cmp	r3, #3
 800a942:	d10e      	bne.n	800a962 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	7afa      	ldrb	r2, [r7, #11]
 800a94e:	4611      	mov	r1, r2
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	4798      	blx	r3
 800a954:	4603      	mov	r3, r0
 800a956:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a958:	7dfb      	ldrb	r3, [r7, #23]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	e002      	b.n	800a968 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a962:	2303      	movs	r3, #3
 800a964:	e000      	b.n	800a968 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	460b      	mov	r3, r1
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a97e:	7afb      	ldrb	r3, [r7, #11]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d16a      	bne.n	800aa5a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3314      	adds	r3, #20
 800a988:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a990:	2b02      	cmp	r3, #2
 800a992:	d155      	bne.n	800aa40 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d914      	bls.n	800a9ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	1ad2      	subs	r2, r2, r3
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	6879      	ldr	r1, [r7, #4]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 ff5b 	bl	800b872 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9bc:	2300      	movs	r3, #0
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7ff fabc 	bl	8009f40 <USBD_LL_PrepareReceive>
 800a9c8:	e03a      	b.n	800aa40 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	68da      	ldr	r2, [r3, #12]
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d11c      	bne.n	800aa10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	685a      	ldr	r2, [r3, #4]
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d316      	bcc.n	800aa10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d20f      	bcs.n	800aa10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 ff3c 	bl	800b872 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa02:	2300      	movs	r3, #0
 800aa04:	2200      	movs	r2, #0
 800aa06:	2100      	movs	r1, #0
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f7ff fa99 	bl	8009f40 <USBD_LL_PrepareReceive>
 800aa0e:	e017      	b.n	800aa40 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00a      	beq.n	800aa32 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d105      	bne.n	800aa32 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa32:	2180      	movs	r1, #128	@ 0x80
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f7ff f9d9 	bl	8009dec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 ff6b 	bl	800b916 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d123      	bne.n	800aa92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff fe99 	bl	800a782 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aa58:	e01b      	b.n	800aa92 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d013      	beq.n	800aa8e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d10e      	bne.n	800aa8e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	7afa      	ldrb	r2, [r7, #11]
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	4798      	blx	r3
 800aa80:	4603      	mov	r3, r0
 800aa82:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	e002      	b.n	800aa94 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e000      	b.n	800aa94 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d009      	beq.n	800aae0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	6852      	ldr	r2, [r2, #4]
 800aad8:	b2d2      	uxtb	r2, r2
 800aada:	4611      	mov	r1, r2
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aae0:	2340      	movs	r3, #64	@ 0x40
 800aae2:	2200      	movs	r2, #0
 800aae4:	2100      	movs	r1, #0
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff f93b 	bl	8009d62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2240      	movs	r2, #64	@ 0x40
 800aaf8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aafc:	2340      	movs	r3, #64	@ 0x40
 800aafe:	2200      	movs	r2, #0
 800ab00:	2180      	movs	r1, #128	@ 0x80
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff f92d 	bl	8009d62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2240      	movs	r2, #64	@ 0x40
 800ab12:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b083      	sub	sp, #12
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	460b      	mov	r3, r1
 800ab28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	78fa      	ldrb	r2, [r7, #3]
 800ab2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b083      	sub	sp, #12
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2204      	movs	r2, #4
 800ab56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab76:	2b04      	cmp	r3, #4
 800ab78:	d105      	bne.n	800ab86 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d10b      	bne.n	800abbe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d005      	beq.n	800abbe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b083      	sub	sp, #12
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d009      	beq.n	800ac40 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6852      	ldr	r2, [r2, #4]
 800ac38:	b2d2      	uxtb	r2, r2
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	4798      	blx	r3
  }

  return USBD_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b087      	sub	sp, #28
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac68:	8a3b      	ldrh	r3, [r7, #16]
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	b21a      	sxth	r2, r3
 800ac6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	b21b      	sxth	r3, r3
 800ac76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac78:	89fb      	ldrh	r3, [r7, #14]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac9e:	2b40      	cmp	r3, #64	@ 0x40
 800aca0:	d005      	beq.n	800acae <USBD_StdDevReq+0x26>
 800aca2:	2b40      	cmp	r3, #64	@ 0x40
 800aca4:	d853      	bhi.n	800ad4e <USBD_StdDevReq+0xc6>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00b      	beq.n	800acc2 <USBD_StdDevReq+0x3a>
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d14f      	bne.n	800ad4e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	4798      	blx	r3
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
    break;
 800acc0:	e04a      	b.n	800ad58 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	785b      	ldrb	r3, [r3, #1]
 800acc6:	2b09      	cmp	r3, #9
 800acc8:	d83b      	bhi.n	800ad42 <USBD_StdDevReq+0xba>
 800acca:	a201      	add	r2, pc, #4	@ (adr r2, 800acd0 <USBD_StdDevReq+0x48>)
 800accc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd0:	0800ad25 	.word	0x0800ad25
 800acd4:	0800ad39 	.word	0x0800ad39
 800acd8:	0800ad43 	.word	0x0800ad43
 800acdc:	0800ad2f 	.word	0x0800ad2f
 800ace0:	0800ad43 	.word	0x0800ad43
 800ace4:	0800ad03 	.word	0x0800ad03
 800ace8:	0800acf9 	.word	0x0800acf9
 800acec:	0800ad43 	.word	0x0800ad43
 800acf0:	0800ad1b 	.word	0x0800ad1b
 800acf4:	0800ad0d 	.word	0x0800ad0d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f9da 	bl	800b0b4 <USBD_GetDescriptor>
      break;
 800ad00:	e024      	b.n	800ad4c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fb69 	bl	800b3dc <USBD_SetAddress>
      break;
 800ad0a:	e01f      	b.n	800ad4c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fba8 	bl	800b464 <USBD_SetConfig>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73fb      	strb	r3, [r7, #15]
      break;
 800ad18:	e018      	b.n	800ad4c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fc45 	bl	800b5ac <USBD_GetConfig>
      break;
 800ad22:	e013      	b.n	800ad4c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fc75 	bl	800b616 <USBD_GetStatus>
      break;
 800ad2c:	e00e      	b.n	800ad4c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fca3 	bl	800b67c <USBD_SetFeature>
      break;
 800ad36:	e009      	b.n	800ad4c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fcb2 	bl	800b6a4 <USBD_ClrFeature>
      break;
 800ad40:	e004      	b.n	800ad4c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fd08 	bl	800b75a <USBD_CtlError>
      break;
 800ad4a:	bf00      	nop
    }
    break;
 800ad4c:	e004      	b.n	800ad58 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fd02 	bl	800b75a <USBD_CtlError>
    break;
 800ad56:	bf00      	nop
  }

  return ret;
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop

0800ad64 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad7a:	2b40      	cmp	r3, #64	@ 0x40
 800ad7c:	d005      	beq.n	800ad8a <USBD_StdItfReq+0x26>
 800ad7e:	2b40      	cmp	r3, #64	@ 0x40
 800ad80:	d82e      	bhi.n	800ade0 <USBD_StdItfReq+0x7c>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <USBD_StdItfReq+0x26>
 800ad86:	2b20      	cmp	r3, #32
 800ad88:	d12a      	bne.n	800ade0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad90:	3b01      	subs	r3, #1
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d81d      	bhi.n	800add2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	889b      	ldrh	r3, [r3, #4]
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d813      	bhi.n	800adc8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	4798      	blx	r3
 800adae:	4603      	mov	r3, r0
 800adb0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	88db      	ldrh	r3, [r3, #6]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d110      	bne.n	800addc <USBD_StdItfReq+0x78>
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10d      	bne.n	800addc <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fd95 	bl	800b8f0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800adc6:	e009      	b.n	800addc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fcc5 	bl	800b75a <USBD_CtlError>
      break;
 800add0:	e004      	b.n	800addc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fcc0 	bl	800b75a <USBD_CtlError>
      break;
 800adda:	e000      	b.n	800adde <USBD_StdItfReq+0x7a>
      break;
 800addc:	bf00      	nop
    }
    break;
 800adde:	e004      	b.n	800adea <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fcb9 	bl	800b75a <USBD_CtlError>
    break;
 800ade8:	bf00      	nop
  }

  return ret;
 800adea:	7bfb      	ldrb	r3, [r7, #15]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	889b      	ldrh	r3, [r3, #4]
 800ae06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae10:	2b40      	cmp	r3, #64	@ 0x40
 800ae12:	d007      	beq.n	800ae24 <USBD_StdEPReq+0x30>
 800ae14:	2b40      	cmp	r3, #64	@ 0x40
 800ae16:	f200 8142 	bhi.w	800b09e <USBD_StdEPReq+0x2aa>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00c      	beq.n	800ae38 <USBD_StdEPReq+0x44>
 800ae1e:	2b20      	cmp	r3, #32
 800ae20:	f040 813d 	bne.w	800b09e <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	4798      	blx	r3
 800ae32:	4603      	mov	r3, r0
 800ae34:	73fb      	strb	r3, [r7, #15]
    break;
 800ae36:	e137      	b.n	800b0a8 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	785b      	ldrb	r3, [r3, #1]
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	d007      	beq.n	800ae50 <USBD_StdEPReq+0x5c>
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	f300 8126 	bgt.w	800b092 <USBD_StdEPReq+0x29e>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d07d      	beq.n	800af46 <USBD_StdEPReq+0x152>
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d03b      	beq.n	800aec6 <USBD_StdEPReq+0xd2>
 800ae4e:	e120      	b.n	800b092 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d002      	beq.n	800ae60 <USBD_StdEPReq+0x6c>
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d016      	beq.n	800ae8c <USBD_StdEPReq+0x98>
 800ae5e:	e02c      	b.n	800aeba <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00d      	beq.n	800ae82 <USBD_StdEPReq+0x8e>
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	2b80      	cmp	r3, #128	@ 0x80
 800ae6a:	d00a      	beq.n	800ae82 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7fe ffbb 	bl	8009dec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae76:	2180      	movs	r1, #128	@ 0x80
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7fe ffb7 	bl	8009dec <USBD_LL_StallEP>
 800ae7e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ae80:	e020      	b.n	800aec4 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fc68 	bl	800b75a <USBD_CtlError>
        break;
 800ae8a:	e01b      	b.n	800aec4 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	885b      	ldrh	r3, [r3, #2]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10e      	bne.n	800aeb2 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00b      	beq.n	800aeb2 <USBD_StdEPReq+0xbe>
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	2b80      	cmp	r3, #128	@ 0x80
 800ae9e:	d008      	beq.n	800aeb2 <USBD_StdEPReq+0xbe>
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	88db      	ldrh	r3, [r3, #6]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d104      	bne.n	800aeb2 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7fe ff9d 	bl	8009dec <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fd1c 	bl	800b8f0 <USBD_CtlSendStatus>

        break;
 800aeb8:	e004      	b.n	800aec4 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fc4c 	bl	800b75a <USBD_CtlError>
        break;
 800aec2:	bf00      	nop
      }
      break;
 800aec4:	e0ea      	b.n	800b09c <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d002      	beq.n	800aed6 <USBD_StdEPReq+0xe2>
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d016      	beq.n	800af02 <USBD_StdEPReq+0x10e>
 800aed4:	e030      	b.n	800af38 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aed6:	7bbb      	ldrb	r3, [r7, #14]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00d      	beq.n	800aef8 <USBD_StdEPReq+0x104>
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
 800aede:	2b80      	cmp	r3, #128	@ 0x80
 800aee0:	d00a      	beq.n	800aef8 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7fe ff80 	bl	8009dec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeec:	2180      	movs	r1, #128	@ 0x80
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7fe ff7c 	bl	8009dec <USBD_LL_StallEP>
 800aef4:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800aef6:	e025      	b.n	800af44 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800aef8:	6839      	ldr	r1, [r7, #0]
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fc2d 	bl	800b75a <USBD_CtlError>
        break;
 800af00:	e020      	b.n	800af44 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	885b      	ldrh	r3, [r3, #2]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d11b      	bne.n	800af42 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800af0a:	7bbb      	ldrb	r3, [r7, #14]
 800af0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af10:	2b00      	cmp	r3, #0
 800af12:	d004      	beq.n	800af1e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af14:	7bbb      	ldrb	r3, [r7, #14]
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7fe ff86 	bl	8009e2a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fce6 	bl	800b8f0 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	4798      	blx	r3
 800af32:	4603      	mov	r3, r0
 800af34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800af36:	e004      	b.n	800af42 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fc0d 	bl	800b75a <USBD_CtlError>
        break;
 800af40:	e000      	b.n	800af44 <USBD_StdEPReq+0x150>
        break;
 800af42:	bf00      	nop
      }
      break;
 800af44:	e0aa      	b.n	800b09c <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d002      	beq.n	800af56 <USBD_StdEPReq+0x162>
 800af50:	2b03      	cmp	r3, #3
 800af52:	d032      	beq.n	800afba <USBD_StdEPReq+0x1c6>
 800af54:	e097      	b.n	800b086 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af56:	7bbb      	ldrb	r3, [r7, #14]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d007      	beq.n	800af6c <USBD_StdEPReq+0x178>
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	2b80      	cmp	r3, #128	@ 0x80
 800af60:	d004      	beq.n	800af6c <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fbf8 	bl	800b75a <USBD_CtlError>
          break;
 800af6a:	e091      	b.n	800b090 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af70:	2b00      	cmp	r3, #0
 800af72:	da0b      	bge.n	800af8c <USBD_StdEPReq+0x198>
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af7a:	4613      	mov	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	3310      	adds	r3, #16
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	4413      	add	r3, r2
 800af88:	3304      	adds	r3, #4
 800af8a:	e00b      	b.n	800afa4 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800af8c:	7bbb      	ldrb	r3, [r7, #14]
 800af8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	4413      	add	r3, r2
 800afa2:	3304      	adds	r3, #4
 800afa4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2200      	movs	r2, #0
 800afaa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2202      	movs	r2, #2
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fc42 	bl	800b83c <USBD_CtlSendData>
        break;
 800afb8:	e06a      	b.n	800b090 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800afba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	da11      	bge.n	800afe6 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800afc2:	7bbb      	ldrb	r3, [r7, #14]
 800afc4:	f003 020f 	and.w	r2, r3, #15
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	440b      	add	r3, r1
 800afd4:	3324      	adds	r3, #36	@ 0x24
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d117      	bne.n	800b00c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fbbb 	bl	800b75a <USBD_CtlError>
            break;
 800afe4:	e054      	b.n	800b090 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	f003 020f 	and.w	r2, r3, #15
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	4613      	mov	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	440b      	add	r3, r1
 800aff8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d104      	bne.n	800b00c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fba8 	bl	800b75a <USBD_CtlError>
            break;
 800b00a:	e041      	b.n	800b090 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b00c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b010:	2b00      	cmp	r3, #0
 800b012:	da0b      	bge.n	800b02c <USBD_StdEPReq+0x238>
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	3310      	adds	r3, #16
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	4413      	add	r3, r2
 800b028:	3304      	adds	r3, #4
 800b02a:	e00b      	b.n	800b044 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	4413      	add	r3, r2
 800b042:	3304      	adds	r3, #4
 800b044:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <USBD_StdEPReq+0x25e>
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	2b80      	cmp	r3, #128	@ 0x80
 800b050:	d103      	bne.n	800b05a <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]
 800b058:	e00e      	b.n	800b078 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b05a:	7bbb      	ldrb	r3, [r7, #14]
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7fe ff02 	bl	8009e68 <USBD_LL_IsStallEP>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2201      	movs	r2, #1
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	e002      	b.n	800b078 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2200      	movs	r2, #0
 800b076:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2202      	movs	r2, #2
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fbdc 	bl	800b83c <USBD_CtlSendData>
          break;
 800b084:	e004      	b.n	800b090 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fb66 	bl	800b75a <USBD_CtlError>
        break;
 800b08e:	bf00      	nop
      }
      break;
 800b090:	e004      	b.n	800b09c <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fb60 	bl	800b75a <USBD_CtlError>
      break;
 800b09a:	bf00      	nop
    }
    break;
 800b09c:	e004      	b.n	800b0a8 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fb5a 	bl	800b75a <USBD_CtlError>
    break;
 800b0a6:	bf00      	nop
  }

  return ret;
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	885b      	ldrh	r3, [r3, #2]
 800b0ce:	0a1b      	lsrs	r3, r3, #8
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	2b0e      	cmp	r3, #14
 800b0d6:	f200 8152 	bhi.w	800b37e <USBD_GetDescriptor+0x2ca>
 800b0da:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e0 <USBD_GetDescriptor+0x2c>)
 800b0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e0:	0800b151 	.word	0x0800b151
 800b0e4:	0800b169 	.word	0x0800b169
 800b0e8:	0800b1a9 	.word	0x0800b1a9
 800b0ec:	0800b37f 	.word	0x0800b37f
 800b0f0:	0800b37f 	.word	0x0800b37f
 800b0f4:	0800b31f 	.word	0x0800b31f
 800b0f8:	0800b34b 	.word	0x0800b34b
 800b0fc:	0800b37f 	.word	0x0800b37f
 800b100:	0800b37f 	.word	0x0800b37f
 800b104:	0800b37f 	.word	0x0800b37f
 800b108:	0800b37f 	.word	0x0800b37f
 800b10c:	0800b37f 	.word	0x0800b37f
 800b110:	0800b37f 	.word	0x0800b37f
 800b114:	0800b37f 	.word	0x0800b37f
 800b118:	0800b11d 	.word	0x0800b11d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00b      	beq.n	800b140 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b12e:	69db      	ldr	r3, [r3, #28]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	7c12      	ldrb	r2, [r2, #16]
 800b134:	f107 0108 	add.w	r1, r7, #8
 800b138:	4610      	mov	r0, r2
 800b13a:	4798      	blx	r3
 800b13c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b13e:	e126      	b.n	800b38e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fb09 	bl	800b75a <USBD_CtlError>
      err++;
 800b148:	7afb      	ldrb	r3, [r7, #11]
 800b14a:	3301      	adds	r3, #1
 800b14c:	72fb      	strb	r3, [r7, #11]
    break;
 800b14e:	e11e      	b.n	800b38e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	7c12      	ldrb	r2, [r2, #16]
 800b15c:	f107 0108 	add.w	r1, r7, #8
 800b160:	4610      	mov	r0, r2
 800b162:	4798      	blx	r3
 800b164:	60f8      	str	r0, [r7, #12]
    break;
 800b166:	e112      	b.n	800b38e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	7c1b      	ldrb	r3, [r3, #16]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10d      	bne.n	800b18c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b178:	f107 0208 	add.w	r2, r7, #8
 800b17c:	4610      	mov	r0, r2
 800b17e:	4798      	blx	r3
 800b180:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	2202      	movs	r2, #2
 800b188:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b18a:	e100      	b.n	800b38e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b194:	f107 0208 	add.w	r2, r7, #8
 800b198:	4610      	mov	r0, r2
 800b19a:	4798      	blx	r3
 800b19c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	701a      	strb	r2, [r3, #0]
    break;
 800b1a6:	e0f2      	b.n	800b38e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	885b      	ldrh	r3, [r3, #2]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b05      	cmp	r3, #5
 800b1b0:	f200 80ac 	bhi.w	800b30c <USBD_GetDescriptor+0x258>
 800b1b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1bc <USBD_GetDescriptor+0x108>)
 800b1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ba:	bf00      	nop
 800b1bc:	0800b1d5 	.word	0x0800b1d5
 800b1c0:	0800b209 	.word	0x0800b209
 800b1c4:	0800b23d 	.word	0x0800b23d
 800b1c8:	0800b271 	.word	0x0800b271
 800b1cc:	0800b2a5 	.word	0x0800b2a5
 800b1d0:	0800b2d9 	.word	0x0800b2d9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00b      	beq.n	800b1f8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	7c12      	ldrb	r2, [r2, #16]
 800b1ec:	f107 0108 	add.w	r1, r7, #8
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	4798      	blx	r3
 800b1f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1f6:	e091      	b.n	800b31c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 faad 	bl	800b75a <USBD_CtlError>
        err++;
 800b200:	7afb      	ldrb	r3, [r7, #11]
 800b202:	3301      	adds	r3, #1
 800b204:	72fb      	strb	r3, [r7, #11]
      break;
 800b206:	e089      	b.n	800b31c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00b      	beq.n	800b22c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	7c12      	ldrb	r2, [r2, #16]
 800b220:	f107 0108 	add.w	r1, r7, #8
 800b224:	4610      	mov	r0, r2
 800b226:	4798      	blx	r3
 800b228:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b22a:	e077      	b.n	800b31c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fa93 	bl	800b75a <USBD_CtlError>
        err++;
 800b234:	7afb      	ldrb	r3, [r7, #11]
 800b236:	3301      	adds	r3, #1
 800b238:	72fb      	strb	r3, [r7, #11]
      break;
 800b23a:	e06f      	b.n	800b31c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00b      	beq.n	800b260 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	7c12      	ldrb	r2, [r2, #16]
 800b254:	f107 0108 	add.w	r1, r7, #8
 800b258:	4610      	mov	r0, r2
 800b25a:	4798      	blx	r3
 800b25c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b25e:	e05d      	b.n	800b31c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa79 	bl	800b75a <USBD_CtlError>
        err++;
 800b268:	7afb      	ldrb	r3, [r7, #11]
 800b26a:	3301      	adds	r3, #1
 800b26c:	72fb      	strb	r3, [r7, #11]
      break;
 800b26e:	e055      	b.n	800b31c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00b      	beq.n	800b294 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	7c12      	ldrb	r2, [r2, #16]
 800b288:	f107 0108 	add.w	r1, r7, #8
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
 800b290:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b292:	e043      	b.n	800b31c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fa5f 	bl	800b75a <USBD_CtlError>
        err++;
 800b29c:	7afb      	ldrb	r3, [r7, #11]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	72fb      	strb	r3, [r7, #11]
      break;
 800b2a2:	e03b      	b.n	800b31c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00b      	beq.n	800b2c8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	7c12      	ldrb	r2, [r2, #16]
 800b2bc:	f107 0108 	add.w	r1, r7, #8
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	4798      	blx	r3
 800b2c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2c6:	e029      	b.n	800b31c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fa45 	bl	800b75a <USBD_CtlError>
        err++;
 800b2d0:	7afb      	ldrb	r3, [r7, #11]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	72fb      	strb	r3, [r7, #11]
      break;
 800b2d6:	e021      	b.n	800b31c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00b      	beq.n	800b2fc <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	7c12      	ldrb	r2, [r2, #16]
 800b2f0:	f107 0108 	add.w	r1, r7, #8
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4798      	blx	r3
 800b2f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2fa:	e00f      	b.n	800b31c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fa2b 	bl	800b75a <USBD_CtlError>
        err++;
 800b304:	7afb      	ldrb	r3, [r7, #11]
 800b306:	3301      	adds	r3, #1
 800b308:	72fb      	strb	r3, [r7, #11]
      break;
 800b30a:	e007      	b.n	800b31c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa23 	bl	800b75a <USBD_CtlError>
      err++;
 800b314:	7afb      	ldrb	r3, [r7, #11]
 800b316:	3301      	adds	r3, #1
 800b318:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b31a:	bf00      	nop
    }
    break;
 800b31c:	e037      	b.n	800b38e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	7c1b      	ldrb	r3, [r3, #16]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d109      	bne.n	800b33a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b32c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b32e:	f107 0208 	add.w	r2, r7, #8
 800b332:	4610      	mov	r0, r2
 800b334:	4798      	blx	r3
 800b336:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b338:	e029      	b.n	800b38e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fa0c 	bl	800b75a <USBD_CtlError>
      err++;
 800b342:	7afb      	ldrb	r3, [r7, #11]
 800b344:	3301      	adds	r3, #1
 800b346:	72fb      	strb	r3, [r7, #11]
    break;
 800b348:	e021      	b.n	800b38e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	7c1b      	ldrb	r3, [r3, #16]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10d      	bne.n	800b36e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b35a:	f107 0208 	add.w	r2, r7, #8
 800b35e:	4610      	mov	r0, r2
 800b360:	4798      	blx	r3
 800b362:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3301      	adds	r3, #1
 800b368:	2207      	movs	r2, #7
 800b36a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b36c:	e00f      	b.n	800b38e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f9f2 	bl	800b75a <USBD_CtlError>
      err++;
 800b376:	7afb      	ldrb	r3, [r7, #11]
 800b378:	3301      	adds	r3, #1
 800b37a:	72fb      	strb	r3, [r7, #11]
    break;
 800b37c:	e007      	b.n	800b38e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f9ea 	bl	800b75a <USBD_CtlError>
    err++;
 800b386:	7afb      	ldrb	r3, [r7, #11]
 800b388:	3301      	adds	r3, #1
 800b38a:	72fb      	strb	r3, [r7, #11]
    break;
 800b38c:	bf00      	nop
  }

  if (err != 0U)
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d11e      	bne.n	800b3d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	88db      	ldrh	r3, [r3, #6]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d016      	beq.n	800b3ca <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800b39c:	893b      	ldrh	r3, [r7, #8]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00e      	beq.n	800b3c0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	88da      	ldrh	r2, [r3, #6]
 800b3a6:	893b      	ldrh	r3, [r7, #8]
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	bf28      	it	cs
 800b3ac:	4613      	movcs	r3, r2
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3b2:	893b      	ldrh	r3, [r7, #8]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	68f9      	ldr	r1, [r7, #12]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fa3f 	bl	800b83c <USBD_CtlSendData>
 800b3be:	e009      	b.n	800b3d4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f9c9 	bl	800b75a <USBD_CtlError>
 800b3c8:	e004      	b.n	800b3d4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fa90 	bl	800b8f0 <USBD_CtlSendStatus>
 800b3d0:	e000      	b.n	800b3d4 <USBD_GetDescriptor+0x320>
    return;
 800b3d2:	bf00      	nop
    }
  }
}
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop

0800b3dc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	889b      	ldrh	r3, [r3, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d130      	bne.n	800b450 <USBD_SetAddress+0x74>
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	88db      	ldrh	r3, [r3, #6]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d12c      	bne.n	800b450 <USBD_SetAddress+0x74>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	885b      	ldrh	r3, [r3, #2]
 800b3fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3fc:	d828      	bhi.n	800b450 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	885b      	ldrh	r3, [r3, #2]
 800b402:	b2db      	uxtb	r3, r3
 800b404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b408:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b410:	2b03      	cmp	r3, #3
 800b412:	d104      	bne.n	800b41e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 f99f 	bl	800b75a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41c:	e01d      	b.n	800b45a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	7bfa      	ldrb	r2, [r7, #15]
 800b422:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b426:	7bfb      	ldrb	r3, [r7, #15]
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7fe fd48 	bl	8009ec0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa5d 	bl	800b8f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d004      	beq.n	800b446 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2202      	movs	r2, #2
 800b440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b444:	e009      	b.n	800b45a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44e:	e004      	b.n	800b45a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f981 	bl	800b75a <USBD_CtlError>
  }
}
 800b458:	bf00      	nop
 800b45a:	bf00      	nop
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
	...

0800b464 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	885b      	ldrh	r3, [r3, #2]
 800b476:	b2da      	uxtb	r2, r3
 800b478:	4b4b      	ldr	r3, [pc, #300]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b47a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b47c:	4b4a      	ldr	r3, [pc, #296]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d905      	bls.n	800b490 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f967 	bl	800b75a <USBD_CtlError>
    return USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e087      	b.n	800b5a0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b496:	2b02      	cmp	r3, #2
 800b498:	d002      	beq.n	800b4a0 <USBD_SetConfig+0x3c>
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d025      	beq.n	800b4ea <USBD_SetConfig+0x86>
 800b49e:	e071      	b.n	800b584 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b4a0:	4b41      	ldr	r3, [pc, #260]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01c      	beq.n	800b4e2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b4a8:	4b3f      	ldr	r3, [pc, #252]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4b2:	4b3d      	ldr	r3, [pc, #244]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff f96d 	bl	800a798 <USBD_SetClassConfig>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d004      	beq.n	800b4d2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f945 	bl	800b75a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b4d0:	e065      	b.n	800b59e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fa0c 	bl	800b8f0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2203      	movs	r2, #3
 800b4dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800b4e0:	e05d      	b.n	800b59e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fa04 	bl	800b8f0 <USBD_CtlSendStatus>
    break;
 800b4e8:	e059      	b.n	800b59e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d112      	bne.n	800b518 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800b4fa:	4b2b      	ldr	r3, [pc, #172]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	461a      	mov	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b504:	4b28      	ldr	r3, [pc, #160]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	4619      	mov	r1, r3
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7ff f960 	bl	800a7d0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f9ed 	bl	800b8f0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b516:	e042      	b.n	800b59e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b518:	4b23      	ldr	r3, [pc, #140]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	461a      	mov	r2, r3
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	429a      	cmp	r2, r3
 800b524:	d02a      	beq.n	800b57c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff f94e 	bl	800a7d0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b534:	4b1c      	ldr	r3, [pc, #112]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	461a      	mov	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b53e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff f927 	bl	800a798 <USBD_SetClassConfig>
 800b54a:	4603      	mov	r3, r0
 800b54c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00f      	beq.n	800b574 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f8ff 	bl	800b75a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	b2db      	uxtb	r3, r3
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff f933 	bl	800a7d0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2202      	movs	r2, #2
 800b56e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800b572:	e014      	b.n	800b59e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f9bb 	bl	800b8f0 <USBD_CtlSendStatus>
    break;
 800b57a:	e010      	b.n	800b59e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f9b7 	bl	800b8f0 <USBD_CtlSendStatus>
    break;
 800b582:	e00c      	b.n	800b59e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f8e7 	bl	800b75a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b58c:	4b06      	ldr	r3, [pc, #24]	@ (800b5a8 <USBD_SetConfig+0x144>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7ff f91c 	bl	800a7d0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b598:	2303      	movs	r3, #3
 800b59a:	73fb      	strb	r3, [r7, #15]
    break;
 800b59c:	bf00      	nop
  }

  return ret;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	2000ea4c 	.word	0x2000ea4c

0800b5ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	88db      	ldrh	r3, [r3, #6]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d004      	beq.n	800b5c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f8ca 	bl	800b75a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b5c6:	e022      	b.n	800b60e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	dc02      	bgt.n	800b5d8 <USBD_GetConfig+0x2c>
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	dc03      	bgt.n	800b5de <USBD_GetConfig+0x32>
 800b5d6:	e015      	b.n	800b604 <USBD_GetConfig+0x58>
 800b5d8:	2b03      	cmp	r3, #3
 800b5da:	d00b      	beq.n	800b5f4 <USBD_GetConfig+0x48>
 800b5dc:	e012      	b.n	800b604 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f925 	bl	800b83c <USBD_CtlSendData>
      break;
 800b5f2:	e00c      	b.n	800b60e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f91d 	bl	800b83c <USBD_CtlSendData>
      break;
 800b602:	e004      	b.n	800b60e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f8a7 	bl	800b75a <USBD_CtlError>
      break;
 800b60c:	bf00      	nop
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b626:	3b01      	subs	r3, #1
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d81e      	bhi.n	800b66a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	88db      	ldrh	r3, [r3, #6]
 800b630:	2b02      	cmp	r3, #2
 800b632:	d004      	beq.n	800b63e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f88f 	bl	800b75a <USBD_CtlError>
      break;
 800b63c:	e01a      	b.n	800b674 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d005      	beq.n	800b65a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	f043 0202 	orr.w	r2, r3, #2
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	330c      	adds	r3, #12
 800b65e:	2202      	movs	r2, #2
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f8ea 	bl	800b83c <USBD_CtlSendData>
    break;
 800b668:	e004      	b.n	800b674 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f874 	bl	800b75a <USBD_CtlError>
    break;
 800b672:	bf00      	nop
  }
}
 800b674:	bf00      	nop
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	885b      	ldrh	r3, [r3, #2]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d106      	bne.n	800b69c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f92a 	bl	800b8f0 <USBD_CtlSendStatus>
  }
}
 800b69c:	bf00      	nop
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d80b      	bhi.n	800b6d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	885b      	ldrh	r3, [r3, #2]
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d10c      	bne.n	800b6dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f910 	bl	800b8f0 <USBD_CtlSendStatus>
      }
      break;
 800b6d0:	e004      	b.n	800b6dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f840 	bl	800b75a <USBD_CtlError>
      break;
 800b6da:	e000      	b.n	800b6de <USBD_ClrFeature+0x3a>
      break;
 800b6dc:	bf00      	nop
  }
}
 800b6de:	bf00      	nop
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b084      	sub	sp, #16
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	781a      	ldrb	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	3301      	adds	r3, #1
 800b700:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	781a      	ldrb	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3301      	adds	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f7ff fa9a 	bl	800ac4a <SWAPBYTE>
 800b716:	4603      	mov	r3, r0
 800b718:	461a      	mov	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	3301      	adds	r3, #1
 800b722:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3301      	adds	r3, #1
 800b728:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7ff fa8d 	bl	800ac4a <SWAPBYTE>
 800b730:	4603      	mov	r3, r0
 800b732:	461a      	mov	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	3301      	adds	r3, #1
 800b73c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3301      	adds	r3, #1
 800b742:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7ff fa80 	bl	800ac4a <SWAPBYTE>
 800b74a:	4603      	mov	r3, r0
 800b74c:	461a      	mov	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	80da      	strh	r2, [r3, #6]
}
 800b752:	bf00      	nop
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b082      	sub	sp, #8
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b764:	2180      	movs	r1, #128	@ 0x80
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7fe fb40 	bl	8009dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b76c:	2100      	movs	r1, #0
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7fe fb3c 	bl	8009dec <USBD_LL_StallEP>
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b788:	2300      	movs	r3, #0
 800b78a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d036      	beq.n	800b800 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b796:	6938      	ldr	r0, [r7, #16]
 800b798:	f000 f836 	bl	800b808 <USBD_GetLen>
 800b79c:	4603      	mov	r3, r0
 800b79e:	3301      	adds	r3, #1
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	7812      	ldrb	r2, [r2, #0]
 800b7b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	2203      	movs	r2, #3
 800b7c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b7cc:	e013      	b.n	800b7f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b7ce:	7dfb      	ldrb	r3, [r7, #23]
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	613b      	str	r3, [r7, #16]
    idx++;
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b7e6:	7dfb      	ldrb	r3, [r7, #23]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1e7      	bne.n	800b7ce <USBD_GetString+0x52>
 800b7fe:	e000      	b.n	800b802 <USBD_GetString+0x86>
    return;
 800b800:	bf00      	nop
  }
}
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b810:	2300      	movs	r3, #0
 800b812:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b818:	e005      	b.n	800b826 <USBD_GetLen+0x1e>
  {
    len++;
 800b81a:	7bfb      	ldrb	r3, [r7, #15]
 800b81c:	3301      	adds	r3, #1
 800b81e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	3301      	adds	r3, #1
 800b824:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1f5      	bne.n	800b81a <USBD_GetLen+0x12>
  }

  return len;
 800b82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2202      	movs	r2, #2
 800b84c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	2100      	movs	r1, #0
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7fe fb4b 	bl	8009efe <USBD_LL_Transmit>

  return USBD_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b084      	sub	sp, #16
 800b876:	af00      	add	r7, sp, #0
 800b878:	60f8      	str	r0, [r7, #12]
 800b87a:	60b9      	str	r1, [r7, #8]
 800b87c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	2100      	movs	r1, #0
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f7fe fb3a 	bl	8009efe <USBD_LL_Transmit>

  return USBD_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2203      	movs	r2, #3
 800b8a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	2100      	movs	r1, #0
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7fe fb3e 	bl	8009f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	60f8      	str	r0, [r7, #12]
 800b8d6:	60b9      	str	r1, [r7, #8]
 800b8d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	2100      	movs	r1, #0
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f7fe fb2d 	bl	8009f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2204      	movs	r2, #4
 800b8fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b900:	2300      	movs	r3, #0
 800b902:	2200      	movs	r2, #0
 800b904:	2100      	movs	r1, #0
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7fe faf9 	bl	8009efe <USBD_LL_Transmit>

  return USBD_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b082      	sub	sp, #8
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2205      	movs	r2, #5
 800b922:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b926:	2300      	movs	r3, #0
 800b928:	2200      	movs	r2, #0
 800b92a:	2100      	movs	r1, #0
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7fe fb07 	bl	8009f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <memset>:
 800b93c:	4402      	add	r2, r0
 800b93e:	4603      	mov	r3, r0
 800b940:	4293      	cmp	r3, r2
 800b942:	d100      	bne.n	800b946 <memset+0xa>
 800b944:	4770      	bx	lr
 800b946:	f803 1b01 	strb.w	r1, [r3], #1
 800b94a:	e7f9      	b.n	800b940 <memset+0x4>

0800b94c <__libc_init_array>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	4d0d      	ldr	r5, [pc, #52]	@ (800b984 <__libc_init_array+0x38>)
 800b950:	2600      	movs	r6, #0
 800b952:	4c0d      	ldr	r4, [pc, #52]	@ (800b988 <__libc_init_array+0x3c>)
 800b954:	1b64      	subs	r4, r4, r5
 800b956:	10a4      	asrs	r4, r4, #2
 800b958:	42a6      	cmp	r6, r4
 800b95a:	d109      	bne.n	800b970 <__libc_init_array+0x24>
 800b95c:	4d0b      	ldr	r5, [pc, #44]	@ (800b98c <__libc_init_array+0x40>)
 800b95e:	2600      	movs	r6, #0
 800b960:	4c0b      	ldr	r4, [pc, #44]	@ (800b990 <__libc_init_array+0x44>)
 800b962:	f000 f817 	bl	800b994 <_init>
 800b966:	1b64      	subs	r4, r4, r5
 800b968:	10a4      	asrs	r4, r4, #2
 800b96a:	42a6      	cmp	r6, r4
 800b96c:	d105      	bne.n	800b97a <__libc_init_array+0x2e>
 800b96e:	bd70      	pop	{r4, r5, r6, pc}
 800b970:	f855 3b04 	ldr.w	r3, [r5], #4
 800b974:	3601      	adds	r6, #1
 800b976:	4798      	blx	r3
 800b978:	e7ee      	b.n	800b958 <__libc_init_array+0xc>
 800b97a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b97e:	3601      	adds	r6, #1
 800b980:	4798      	blx	r3
 800b982:	e7f2      	b.n	800b96a <__libc_init_array+0x1e>
 800b984:	0800bac4 	.word	0x0800bac4
 800b988:	0800bac4 	.word	0x0800bac4
 800b98c:	0800bac4 	.word	0x0800bac4
 800b990:	0800bac8 	.word	0x0800bac8

0800b994 <_init>:
 800b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b996:	bf00      	nop
 800b998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99a:	bc08      	pop	{r3}
 800b99c:	469e      	mov	lr, r3
 800b99e:	4770      	bx	lr

0800b9a0 <_fini>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	bf00      	nop
 800b9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a6:	bc08      	pop	{r3}
 800b9a8:	469e      	mov	lr, r3
 800b9aa:	4770      	bx	lr
