
DeviceProcessor03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e614  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800e850  0800e850  0000f850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e998  0800e998  0000f998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800e99c  0800e99c  0000f99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000250  20000000  0800e9a0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000eaa4  20000250  0800ebf0  00010250  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000ecf4  0800ebf0  00010cf4  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00010250  2**0
                  CONTENTS, READONLY
  9 .debug_info   000245c4  00000000  00000000  00010286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000515c  00000000  00000000  0003484a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001e00  00000000  00000000  000399a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000016fa  00000000  00000000  0003b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037d9c  00000000  00000000  0003cea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002a01b  00000000  00000000  00074c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014be49  00000000  00000000  0009ec59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001eaaa2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000084c8  00000000  00000000  001eaae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001f2fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000250 	.word	0x20000250
 8000254:	00000000 	.word	0x00000000
 8000258:	0800e834 	.word	0x0800e834

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000254 	.word	0x20000254
 8000274:	0800e834 	.word	0x0800e834

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	@ 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f001 fed0 	bl	80029e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f81c 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f000 fb72 	bl	8001334 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000c50:	f000 f87c 	bl	8000d4c <MX_GPDMA1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c54:	f000 fb3c 	bl	80012d0 <MX_USB_OTG_FS_PCD_Init>
  MX_ICACHE_Init();
 8000c58:	f000 f996 	bl	8000f88 <MX_ICACHE_Init>
  MX_TIM8_Init();
 8000c5c:	f000 fa88 	bl	8001170 <MX_TIM8_Init>
  MX_I2C2_Init();
 8000c60:	f000 f916 	bl	8000e90 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000c64:	f000 f952 	bl	8000f0c <MX_I2C3_Init>
  MX_SPI2_Init();
 8000c68:	f000 fa12 	bl	8001090 <MX_SPI2_Init>
  MX_SPI1_Init();
 8000c6c:	f000 f9a0 	bl	8000fb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8000c70:	f00a fc54 	bl	800b51c <MX_USB_Device_Init>
  HAL_Delay(2000);
 8000c74:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c78:	f001 ff7c 	bl	8002b74 <HAL_Delay>
  run_device();
 8000c7c:	f001 fba0 	bl	80023c0 <run_device>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <main+0x40>

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09e      	sub	sp, #120	@ 0x78
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2260      	movs	r2, #96	@ 0x60
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00c fdf8 	bl	800d888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
 8000ca6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ca8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000cac:	f004 ffe4 	bl	8005c78 <HAL_PWREx_ControlVoltageScaling>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000cb6:	f000 fc1d 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 8000cba:	2370      	movs	r3, #112	@ 0x70
 8000cbc:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 8000cd0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cec:	230a      	movs	r3, #10
 8000cee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f005 f861 	bl	8005dd0 <HAL_RCC_OscConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d14:	f000 fbee 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	231f      	movs	r3, #31
 8000d1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	2104      	movs	r1, #4
 8000d34:	4618      	mov	r0, r3
 8000d36:	f005 ff27 	bl	8006b88 <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d40:	f000 fbd8 	bl	80014f4 <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3778      	adds	r7, #120	@ 0x78
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d52:	4b4a      	ldr	r3, [pc, #296]	@ (8000e7c <MX_GPDMA1_Init+0x130>)
 8000d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d58:	4a48      	ldr	r2, [pc, #288]	@ (8000e7c <MX_GPDMA1_Init+0x130>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d62:	4b46      	ldr	r3, [pc, #280]	@ (8000e7c <MX_GPDMA1_Init+0x130>)
 8000d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2054      	movs	r0, #84	@ 0x54
 8000d76:	f001 ffd9 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8000d7a:	2054      	movs	r0, #84	@ 0x54
 8000d7c:	f001 fff0 	bl	8002d60 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel14.Instance = GPDMA1_Channel14;
 8000d80:	4b3f      	ldr	r3, [pc, #252]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000d82:	4a40      	ldr	r2, [pc, #256]	@ (8000e84 <MX_GPDMA1_Init+0x138>)
 8000d84:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel14.Init.Request = DMA_REQUEST_SW;
 8000d86:	4b3e      	ldr	r3, [pc, #248]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8c:	605a      	str	r2, [r3, #4]
  handle_GPDMA1_Channel14.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  handle_GPDMA1_Channel14.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000d94:	4b3a      	ldr	r3, [pc, #232]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d9a:	60da      	str	r2, [r3, #12]
  handle_GPDMA1_Channel14.Init.SrcInc = DMA_SINC_FIXED;
 8000d9c:	4b38      	ldr	r3, [pc, #224]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  handle_GPDMA1_Channel14.Init.DestInc = DMA_DINC_FIXED;
 8000da2:	4b37      	ldr	r3, [pc, #220]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  handle_GPDMA1_Channel14.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000da8:	4b35      	ldr	r3, [pc, #212]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  handle_GPDMA1_Channel14.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000dae:	4b34      	ldr	r3, [pc, #208]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  handle_GPDMA1_Channel14.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000db4:	4b32      	ldr	r3, [pc, #200]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  handle_GPDMA1_Channel14.Init.SrcBurstLength = 1;
 8000dba:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA1_Channel14.Init.DestBurstLength = 1;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA1_Channel14.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA1_Channel14.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA1_Channel14.Init.Mode = DMA_NORMAL;
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA1_Channel14) != HAL_OK)
 8000dd8:	4829      	ldr	r0, [pc, #164]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000dda:	f002 f883 	bl	8002ee4 <HAL_DMA_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_GPDMA1_Init+0x9c>
  {
    Error_Handler();
 8000de4:	f000 fb86 	bl	80014f4 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel14, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000de8:	2110      	movs	r1, #16
 8000dea:	4825      	ldr	r0, [pc, #148]	@ (8000e80 <MX_GPDMA1_Init+0x134>)
 8000dec:	f002 fb67 	bl	80034be <HAL_DMA_ConfigChannelAttributes>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_GPDMA1_Init+0xae>
  {
    Error_Handler();
 8000df6:	f000 fb7d 	bl	80014f4 <Error_Handler>
  }
  handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 8000dfa:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000dfc:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <MX_GPDMA1_Init+0x140>)
 8000dfe:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel13.Init.Request = DMA_REQUEST_SW;
 8000e00:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e06:	605a      	str	r2, [r3, #4]
  handle_GPDMA1_Channel13.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  handle_GPDMA1_Channel13.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e14:	60da      	str	r2, [r3, #12]
  handle_GPDMA1_Channel13.Init.SrcInc = DMA_SINC_FIXED;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  handle_GPDMA1_Channel13.Init.DestInc = DMA_DINC_FIXED;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  handle_GPDMA1_Channel13.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  handle_GPDMA1_Channel13.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  handle_GPDMA1_Channel13.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  handle_GPDMA1_Channel13.Init.SrcBurstLength = 1;
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA1_Channel13.Init.DestBurstLength = 1;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA1_Channel13.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA1_Channel13.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA1_Channel13.Init.Mode = DMA_NORMAL;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e54:	f002 f846 	bl	8002ee4 <HAL_DMA_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_GPDMA1_Init+0x116>
  {
    Error_Handler();
 8000e5e:	f000 fb49 	bl	80014f4 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e62:	2110      	movs	r1, #16
 8000e64:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <MX_GPDMA1_Init+0x13c>)
 8000e66:	f002 fb2a 	bl	80034be <HAL_DMA_ConfigChannelAttributes>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_GPDMA1_Init+0x128>
  {
    Error_Handler();
 8000e70:	f000 fb40 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	46020c00 	.word	0x46020c00
 8000e80:	2000026c 	.word	0x2000026c
 8000e84:	40020750 	.word	0x40020750
 8000e88:	200002e4 	.word	0x200002e4
 8000e8c:	400206d0 	.word	0x400206d0

08000e90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	@ (8000f08 <MX_I2C2_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000e9c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000ea0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ecc:	480d      	ldr	r0, [pc, #52]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ece:	f002 ffc7 	bl	8003e60 <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 fb0c 	bl	80014f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ee0:	f003 fb68 	bl	80045b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000eea:	f000 fb03 	bl	80014f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ef2:	f003 fbaa 	bl	800464a <HAL_I2CEx_ConfigDigitalFilter>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 fafa 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000035c 	.word	0x2000035c
 8000f08:	40005800 	.word	0x40005800

08000f0c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	@ (8000f84 <MX_I2C3_Init+0x78>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f18:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000f1c:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f48:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f4a:	f002 ff89 	bl	8003e60 <HAL_I2C_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 face 	bl	80014f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f5c:	f003 fb2a 	bl	80045b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000f66:	f000 fac5 	bl	80014f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_I2C3_Init+0x74>)
 8000f6e:	f003 fb6c 	bl	800464a <HAL_I2CEx_ConfigDigitalFilter>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000f78:	f000 fabc 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200003b0 	.word	0x200003b0
 8000f84:	46002800 	.word	0x46002800

08000f88 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f003 fba9 	bl	80046e4 <HAL_ICACHE_ConfigAssociativityMode>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000f98:	f000 faac 	bl	80014f4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f9c:	f003 fbc2 	bl	8004724 <HAL_ICACHE_Enable>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000fa6:	f000 faa5 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc0:	4b31      	ldr	r3, [pc, #196]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000fc2:	4a32      	ldr	r2, [pc, #200]	@ (800108c <MX_SPI1_Init+0xdc>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc6:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000fc8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000fdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fe0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe2:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fe8:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000fea:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff0:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001002:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <MX_SPI1_Init+0xd8>)
 800100a:	2207      	movs	r2, #7
 800100c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800100e:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8001010:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001014:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001016:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8001018:	2200      	movs	r2, #0
 800101a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800101c:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <MX_SPI1_Init+0xd8>)
 800101e:	2200      	movs	r2, #0
 8001020:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8001024:	2200      	movs	r2, #0
 8001026:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_SPI1_Init+0xd8>)
 800102a:	2200      	movs	r2, #0
 800102c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8001030:	2200      	movs	r2, #0
 8001032:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8001036:	2200      	movs	r2, #0
 8001038:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_SPI1_Init+0xd8>)
 800103c:	2200      	movs	r2, #0
 800103e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8001042:	2200      	movs	r2, #0
 8001044:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8001048:	2200      	movs	r2, #0
 800104a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800104c:	480e      	ldr	r0, [pc, #56]	@ (8001088 <MX_SPI1_Init+0xd8>)
 800104e:	f007 f803 	bl	8008058 <HAL_SPI_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8001058:	f000 fa4c 	bl	80014f4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001060:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <MX_SPI1_Init+0xd8>)
 8001070:	f007 fc05 	bl	800887e <HAL_SPIEx_SetConfigAutonomousMode>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 800107a:	f000 fa3b 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000404 	.word	0x20000404
 800108c:	40013000 	.word	0x40013000

08001090 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010a0:	4b31      	ldr	r3, [pc, #196]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010a2:	4a32      	ldr	r2, [pc, #200]	@ (800116c <MX_SPI2_Init+0xdc>)
 80010a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010a6:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010b6:	2207      	movs	r2, #7
 80010b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c2:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010c8:	4b27      	ldr	r3, [pc, #156]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010ca:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010d0:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d6:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010ea:	2207      	movs	r2, #7
 80010ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_SPI2_Init+0xd8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_SPI2_Init+0xd8>)
 8001104:	2200      	movs	r2, #0
 8001106:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <MX_SPI2_Init+0xd8>)
 800110a:	2200      	movs	r2, #0
 800110c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800110e:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <MX_SPI2_Init+0xd8>)
 8001110:	2200      	movs	r2, #0
 8001112:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_SPI2_Init+0xd8>)
 8001116:	2200      	movs	r2, #0
 8001118:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <MX_SPI2_Init+0xd8>)
 800111c:	2200      	movs	r2, #0
 800111e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_SPI2_Init+0xd8>)
 8001122:	2200      	movs	r2, #0
 8001124:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_SPI2_Init+0xd8>)
 8001128:	2200      	movs	r2, #0
 800112a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800112c:	480e      	ldr	r0, [pc, #56]	@ (8001168 <MX_SPI2_Init+0xd8>)
 800112e:	f006 ff93 	bl	8008058 <HAL_SPI_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8001138:	f000 f9dc 	bl	80014f4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001140:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <MX_SPI2_Init+0xd8>)
 8001150:	f007 fb95 	bl	800887e <HAL_SPIEx_SetConfigAutonomousMode>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 800115a:	f000 f9cb 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000494 	.word	0x20000494
 800116c:	40003800 	.word	0x40003800

08001170 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09c      	sub	sp, #112	@ 0x70
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001190:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2234      	movs	r2, #52	@ 0x34
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00c fb6c 	bl	800d888 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011b0:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011b2:	4a46      	ldr	r2, [pc, #280]	@ (80012cc <MX_TIM8_Init+0x15c>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b42      	ldr	r3, [pc, #264]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011c2:	4b41      	ldr	r3, [pc, #260]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011d0:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011d8:	2280      	movs	r2, #128	@ 0x80
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011dc:	483a      	ldr	r0, [pc, #232]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011de:	f007 fb8f 	bl	8008900 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f000 f984 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011f6:	4619      	mov	r1, r3
 80011f8:	4833      	ldr	r0, [pc, #204]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011fa:	f007 fe9f 	bl	8008f3c <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001204:	f000 f976 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001208:	482f      	ldr	r0, [pc, #188]	@ (80012c8 <MX_TIM8_Init+0x158>)
 800120a:	f007 fbd0 	bl	80089ae <HAL_TIM_PWM_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001214:	f000 f96e 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001224:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001228:	4619      	mov	r1, r3
 800122a:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <MX_TIM8_Init+0x158>)
 800122c:	f008 fd20 	bl	8009c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001236:	f000 f95d 	bl	80014f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	@ 0x60
 800123c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001256:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800125a:	2204      	movs	r2, #4
 800125c:	4619      	mov	r1, r3
 800125e:	481a      	ldr	r0, [pc, #104]	@ (80012c8 <MX_TIM8_Init+0x158>)
 8001260:	f007 fd58 	bl	8008d14 <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800126a:	f000 f943 	bl	80014f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001282:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001286:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001294:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80012ac:	f008 fda2 	bl	8009df4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80012b6:	f000 f91d 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012ba:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80012bc:	f000 fb54 	bl	8001968 <HAL_TIM_MspPostInit>

}
 80012c0:	bf00      	nop
 80012c2:	3770      	adds	r7, #112	@ 0x70
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000524 	.word	0x20000524
 80012cc:	40013400 	.word	0x40013400

080012d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012d4:	4b15      	ldr	r3, [pc, #84]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d6:	4a16      	ldr	r2, [pc, #88]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80012d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012dc:	2206      	movs	r2, #6
 80012de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001300:	2200      	movs	r2, #0
 8001302:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001306:	2200      	movs	r2, #0
 8001308:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800130c:	2200      	movs	r2, #0
 800130e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001312:	2200      	movs	r2, #0
 8001314:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001318:	f003 fa14 	bl	8004744 <HAL_PCD_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001322:	f000 f8e7 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200005e8 	.word	0x200005e8
 8001330:	42040000 	.word	0x42040000

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	@ 0x30
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800134a:	4b65      	ldr	r3, [pc, #404]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 800134c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001350:	4a63      	ldr	r2, [pc, #396]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 8001352:	f043 0310 	orr.w	r3, r3, #16
 8001356:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800135a:	4b61      	ldr	r3, [pc, #388]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 800135c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001368:	4b5d      	ldr	r3, [pc, #372]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 800136a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136e:	4a5c      	ldr	r2, [pc, #368]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 8001370:	f043 0320 	orr.w	r3, r3, #32
 8001374:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001378:	4b59      	ldr	r3, [pc, #356]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 800137a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b56      	ldr	r3, [pc, #344]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 8001388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800138c:	4a54      	ldr	r2, [pc, #336]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001396:	4b52      	ldr	r3, [pc, #328]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 8001398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b4e      	ldr	r3, [pc, #312]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 80013a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013aa:	4a4d      	ldr	r2, [pc, #308]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013b4:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 80013b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c2:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c8:	4a45      	ldr	r2, [pc, #276]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 80013ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013d2:	4b43      	ldr	r3, [pc, #268]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 80013d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b3f      	ldr	r3, [pc, #252]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 80013e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e6:	4a3e      	ldr	r2, [pc, #248]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f0:	4b3b      	ldr	r3, [pc, #236]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 80013f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 8001400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001404:	4a36      	ldr	r2, [pc, #216]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800140e:	4b34      	ldr	r3, [pc, #208]	@ (80014e0 <MX_GPIO_Init+0x1ac>)
 8001410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 800141c:	2200      	movs	r2, #0
 800141e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001422:	4830      	ldr	r0, [pc, #192]	@ (80014e4 <MX_GPIO_Init+0x1b0>)
 8001424:	f002 fd04 	bl	8003e30 <HAL_GPIO_WritePin>
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 800142e:	482e      	ldr	r0, [pc, #184]	@ (80014e8 <MX_GPIO_Init+0x1b4>)
 8001430:	f002 fcfe 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADCV1_D13_Pin ADCV1_D12_Pin ADCV1_D11_Pin ADCV1_D10_Pin
                           ADCV1_D09_Pin ADCV1_D08_Pin ADCV1_D07_Pin ADCV1_D06_Pin
                           ADCV1_D05_Pin ADCV1_D04_Pin ADCV1_D03_Pin ADCV1_D02_Pin
                           ADCV1_D01_Pin ADCV1_D00_Pin ADCV1_D15_Pin ADCV1_D14_Pin */
  GPIO_InitStruct.Pin = ADCV1_D13_Pin|ADCV1_D12_Pin|ADCV1_D11_Pin|ADCV1_D10_Pin
 8001434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001438:	61fb      	str	r3, [r7, #28]
                          |ADCV1_D09_Pin|ADCV1_D08_Pin|ADCV1_D07_Pin|ADCV1_D06_Pin
                          |ADCV1_D05_Pin|ADCV1_D04_Pin|ADCV1_D03_Pin|ADCV1_D02_Pin
                          |ADCV1_D01_Pin|ADCV1_D00_Pin|ADCV1_D15_Pin|ADCV1_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4828      	ldr	r0, [pc, #160]	@ (80014ec <MX_GPIO_Init+0x1b8>)
 800144a:	f002 fb19 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D00_Pin ADCV2_D01_Pin ADCV2_D02_Pin ADCV2_D03_Pin
                           ADCV2_D04_Pin ADCV2_D05_Pin ADCV2_D06_Pin ADCV2_D07_Pin
                           ADCV2_D08_Pin ADCV2_D09_Pin ADCV2_D10_Pin ADCV2_D11_Pin */
  GPIO_InitStruct.Pin = ADCV2_D00_Pin|ADCV2_D01_Pin|ADCV2_D02_Pin|ADCV2_D03_Pin
 800144e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001452:	61fb      	str	r3, [r7, #28]
                          |ADCV2_D04_Pin|ADCV2_D05_Pin|ADCV2_D06_Pin|ADCV2_D07_Pin
                          |ADCV2_D08_Pin|ADCV2_D09_Pin|ADCV2_D10_Pin|ADCV2_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4823      	ldr	r0, [pc, #140]	@ (80014f0 <MX_GPIO_Init+0x1bc>)
 8001464:	f002 fb0c 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D12_Pin ADCV2_D13_Pin ADCV2_D14_Pin ADCV2_D15_Pin */
  GPIO_InitStruct.Pin = ADCV2_D12_Pin|ADCV2_D13_Pin|ADCV2_D14_Pin|ADCV2_D15_Pin;
 8001468:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001472:	2302      	movs	r3, #2
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	481c      	ldr	r0, [pc, #112]	@ (80014f0 <MX_GPIO_Init+0x1bc>)
 800147e:	f002 faff 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_01_Pin SWNT_CTRL_02_Pin SWNT_CTRL_03_Pin SWNT_CTRL_04_Pin
                           SWNT_CTRL_05_Pin SWNT_CTRL_06_Pin SWNT_CTRL_07_Pin SWNT_CTRL_08_Pin
                           SWNT_CTRL_09_Pin SWNT_CTRL_10_Pin SWNT_CTRL_11_Pin SWNT_CTRL_12_Pin
                           SWNT_CTRL_13_Pin SWNT_CTRL_14_Pin SWNT_CTRL_15_Pin SWNT_CTRL_16_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8001482:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001486:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4812      	ldr	r0, [pc, #72]	@ (80014e4 <MX_GPIO_Init+0x1b0>)
 800149c:	f002 faf0 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_20_Pin SWNT_CTRL_21_Pin SWNT_CTRL_17_Pin SWNT_CTRL_18_Pin
                           SWNT_CTRL_19_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 80014a0:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80014a4:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <MX_GPIO_Init+0x1b4>)
 80014ba:	f002 fae1 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV1_OTR_Pin ADCV2_OTR_Pin */
  GPIO_InitStruct.Pin = ADCV1_OTR_Pin|ADCV2_OTR_Pin;
 80014be:	2306      	movs	r3, #6
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_GPIO_Init+0x1b4>)
 80014d2:	f002 fad5 	bl	8003a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d6:	bf00      	nop
 80014d8:	3730      	adds	r7, #48	@ 0x30
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	46020c00 	.word	0x46020c00
 80014e4:	42021800 	.word	0x42021800
 80014e8:	42020c00 	.word	0x42020c00
 80014ec:	42021000 	.word	0x42021000
 80014f0:	42021400 	.word	0x42021400

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <Error_Handler+0x8>

08001500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_MspInit+0x34>)
 8001508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800150c:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <HAL_MspInit+0x34>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <HAL_MspInit+0x34>)
 8001518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001524:	f004 fc34 	bl	8005d90 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8001528:	f004 fc42 	bl	8005db0 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	46020c00 	.word	0x46020c00

08001538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0bc      	sub	sp, #240	@ 0xf0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	22c0      	movs	r2, #192	@ 0xc0
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f00c f995 	bl	800d888 <memset>
  if(hi2c->Instance==I2C2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a4d      	ldr	r2, [pc, #308]	@ (8001698 <HAL_I2C_MspInit+0x160>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d148      	bne.n	80015fa <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001568:	f04f 0280 	mov.w	r2, #128	@ 0x80
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_MSIK;
 8001574:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	4618      	mov	r0, r3
 8001582:	f005 fe95 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800158c:	f7ff ffb2 	bl	80014f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	4b42      	ldr	r3, [pc, #264]	@ (800169c <HAL_I2C_MspInit+0x164>)
 8001592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001596:	4a41      	ldr	r2, [pc, #260]	@ (800169c <HAL_I2C_MspInit+0x164>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015a0:	4b3e      	ldr	r3, [pc, #248]	@ (800169c <HAL_I2C_MspInit+0x164>)
 80015a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_DAC2_CURR_POT_SCL_Pin|I2C_DAC2_CURR_POT_SDA_Pin;
 80015ae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80015b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b6:	2312      	movs	r3, #18
 80015b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015c8:	2304      	movs	r3, #4
 80015ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015d2:	4619      	mov	r1, r3
 80015d4:	4832      	ldr	r0, [pc, #200]	@ (80016a0 <HAL_I2C_MspInit+0x168>)
 80015d6:	f002 fa53 	bl	8003a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015da:	4b30      	ldr	r3, [pc, #192]	@ (800169c <HAL_I2C_MspInit+0x164>)
 80015dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015e0:	4a2e      	ldr	r2, [pc, #184]	@ (800169c <HAL_I2C_MspInit+0x164>)
 80015e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015e6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015ea:	4b2c      	ldr	r3, [pc, #176]	@ (800169c <HAL_I2C_MspInit+0x164>)
 80015ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015f8:	e04a      	b.n	8001690 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C3)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a29      	ldr	r2, [pc, #164]	@ (80016a4 <HAL_I2C_MspInit+0x16c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d145      	bne.n	8001690 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_MSIK;
 8001610:	23c0      	movs	r3, #192	@ 0xc0
 8001612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4618      	mov	r0, r3
 800161c:	f005 fe48 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8001626:	f7ff ff65 	bl	80014f4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <HAL_I2C_MspInit+0x164>)
 800162c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001630:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_I2C_MspInit+0x164>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_I2C_MspInit+0x164>)
 800163c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_DAC1_POT_SCL_Pin|I2C_DAC1_POT_SDA_Pin;
 8001648:	2303      	movs	r3, #3
 800164a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164e:	2312      	movs	r3, #18
 8001650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001654:	2301      	movs	r3, #1
 8001656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001660:	2304      	movs	r3, #4
 8001662:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800166a:	4619      	mov	r1, r3
 800166c:	480e      	ldr	r0, [pc, #56]	@ (80016a8 <HAL_I2C_MspInit+0x170>)
 800166e:	f002 fa07 	bl	8003a80 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_I2C_MspInit+0x164>)
 8001674:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001678:	4a08      	ldr	r2, [pc, #32]	@ (800169c <HAL_I2C_MspInit+0x164>)
 800167a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_I2C_MspInit+0x164>)
 8001684:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
}
 8001690:	bf00      	nop
 8001692:	37f0      	adds	r7, #240	@ 0xf0
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40005800 	.word	0x40005800
 800169c:	46020c00 	.word	0x46020c00
 80016a0:	42020400 	.word	0x42020400
 80016a4:	46002800 	.word	0x46002800
 80016a8:	42020800 	.word	0x42020800

080016ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0be      	sub	sp, #248	@ 0xf8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c4:	f107 0320 	add.w	r3, r7, #32
 80016c8:	22c0      	movs	r2, #192	@ 0xc0
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00c f8db 	bl	800d888 <memset>
  if(hspi->Instance==SPI1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001880 <HAL_SPI_MspInit+0x1d4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d147      	bne.n	800176c <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80016dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 80016e8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80016ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4618      	mov	r0, r3
 80016f6:	f005 fddb 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001700:	f7ff fef8 	bl	80014f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001704:	4b5f      	ldr	r3, [pc, #380]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 8001706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800170a:	4a5e      	ldr	r2, [pc, #376]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 800170c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001710:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001714:	4b5b      	ldr	r3, [pc, #364]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 8001716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800171a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171e:	61fb      	str	r3, [r7, #28]
 8001720:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b58      	ldr	r3, [pc, #352]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 8001724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001728:	4a56      	ldr	r2, [pc, #344]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001732:	4b54      	ldr	r3, [pc, #336]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 8001734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_DAC2_SCK_Pin|SPI_DAC2_NSS_Pin|SPI_DAC2_MISO_Pin|SPI_DAC2_MOSI_Pin;
 8001740:	23d2      	movs	r3, #210	@ 0xd2
 8001742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001758:	2305      	movs	r3, #5
 800175a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001762:	4619      	mov	r1, r3
 8001764:	4848      	ldr	r0, [pc, #288]	@ (8001888 <HAL_SPI_MspInit+0x1dc>)
 8001766:	f002 f98b 	bl	8003a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800176a:	e084      	b.n	8001876 <HAL_SPI_MspInit+0x1ca>
  else if(hspi->Instance==SPI2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a46      	ldr	r2, [pc, #280]	@ (800188c <HAL_SPI_MspInit+0x1e0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d17f      	bne.n	8001876 <HAL_SPI_MspInit+0x1ca>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001776:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_MSIK;
 8001782:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	4618      	mov	r0, r3
 8001790:	f005 fd8e 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 800179a:	f7ff feab 	bl	80014f4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800179e:	4b39      	ldr	r3, [pc, #228]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 80017a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017a4:	4a37      	ldr	r2, [pc, #220]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 80017a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80017ae:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 80017b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017bc:	4b31      	ldr	r3, [pc, #196]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 80017be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c2:	4a30      	ldr	r2, [pc, #192]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 80017ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017da:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 80017dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e0:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <HAL_SPI_MspInit+0x1d8>)
 80017ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_DAC1_MISO_Pin;
 80017f8:	2304      	movs	r3, #4
 80017fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001810:	2305      	movs	r3, #5
 8001812:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800181a:	4619      	mov	r1, r3
 800181c:	481c      	ldr	r0, [pc, #112]	@ (8001890 <HAL_SPI_MspInit+0x1e4>)
 800181e:	f002 f92f 	bl	8003a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_NSS_Pin|SPI_DAC1_MOSI_Pin;
 8001822:	2311      	movs	r3, #17
 8001824:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800183a:	2305      	movs	r3, #5
 800183c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001840:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001844:	4619      	mov	r1, r3
 8001846:	4813      	ldr	r0, [pc, #76]	@ (8001894 <HAL_SPI_MspInit+0x1e8>)
 8001848:	f002 f91a 	bl	8003a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_SCK_Pin;
 800184c:	2308      	movs	r3, #8
 800184e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001864:	2303      	movs	r3, #3
 8001866:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_SCK_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800186e:	4619      	mov	r1, r3
 8001870:	4808      	ldr	r0, [pc, #32]	@ (8001894 <HAL_SPI_MspInit+0x1e8>)
 8001872:	f002 f905 	bl	8003a80 <HAL_GPIO_Init>
}
 8001876:	bf00      	nop
 8001878:	37f8      	adds	r7, #248	@ 0xf8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40013000 	.word	0x40013000
 8001884:	46020c00 	.word	0x46020c00
 8001888:	42020000 	.word	0x42020000
 800188c:	40003800 	.word	0x40003800
 8001890:	42020800 	.word	0x42020800
 8001894:	42020c00 	.word	0x42020c00

08001898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001958 <HAL_TIM_Base_MspInit+0xc0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d152      	bne.n	8001950 <HAL_TIM_Base_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018aa:	4b2c      	ldr	r3, [pc, #176]	@ (800195c <HAL_TIM_Base_MspInit+0xc4>)
 80018ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018b0:	4a2a      	ldr	r2, [pc, #168]	@ (800195c <HAL_TIM_Base_MspInit+0xc4>)
 80018b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018b6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80018ba:	4b28      	ldr	r3, [pc, #160]	@ (800195c <HAL_TIM_Base_MspInit+0xc4>)
 80018bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* GPDMA1_REQUEST_TIM8_CH1 Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 80018c8:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 80018ca:	4a26      	ldr	r2, [pc, #152]	@ (8001964 <HAL_TIM_Base_MspInit+0xcc>)
 80018cc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM8_CH1;
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 80018d0:	2231      	movs	r2, #49	@ 0x31
 80018d2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 80018dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 80018ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018ee:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 80018f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018fc:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 8001904:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 8001906:	2201      	movs	r2, #1
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 800190c:	2201      	movs	r2, #1
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001910:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 8001912:	2200      	movs	r2, #0
 8001914:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 800191c:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 800191e:	2200      	movs	r2, #0
 8001920:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8001922:	480f      	ldr	r0, [pc, #60]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 8001924:	f001 fade 	bl	8002ee4 <HAL_DMA_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_TIM_Base_MspInit+0x9a>
    {
      Error_Handler();
 800192e:	f7ff fde1 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA1_Channel12);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
 8001938:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 800193e:	2110      	movs	r1, #16
 8001940:	4807      	ldr	r0, [pc, #28]	@ (8001960 <HAL_TIM_Base_MspInit+0xc8>)
 8001942:	f001 fdbc 	bl	80034be <HAL_DMA_ConfigChannelAttributes>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_TIM_Base_MspInit+0xb8>
    {
      Error_Handler();
 800194c:	f7ff fdd2 	bl	80014f4 <Error_Handler>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40013400 	.word	0x40013400
 800195c:	46020c00 	.word	0x46020c00
 8001960:	20000570 	.word	0x20000570
 8001964:	40020650 	.word	0x40020650

08001968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a12      	ldr	r2, [pc, #72]	@ (80019d0 <HAL_TIM_MspPostInit+0x68>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11e      	bne.n	80019c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 800198c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001990:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 800199c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ADC_CLK_Pin;
 80019a8:	2380      	movs	r3, #128	@ 0x80
 80019aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019b8:	2303      	movs	r3, #3
 80019ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CLK_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	4619      	mov	r1, r3
 80019c2:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <HAL_TIM_MspPostInit+0x70>)
 80019c4:	f002 f85c 	bl	8003a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40013400 	.word	0x40013400
 80019d4:	46020c00 	.word	0x46020c00
 80019d8:	42020800 	.word	0x42020800

080019dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0bc      	sub	sp, #240	@ 0xf0
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	22c0      	movs	r2, #192	@ 0xc0
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00b ff43 	bl	800d888 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a3c      	ldr	r2, [pc, #240]	@ (8001af8 <HAL_PCD_MspInit+0x11c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d171      	bne.n	8001af0 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	4618      	mov	r0, r3
 8001a24:	f005 fc44 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001a2e:	f7ff fd61 	bl	80014f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b32      	ldr	r3, [pc, #200]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a38:	4a30      	ldr	r2, [pc, #192]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a42:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a50:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a74:	4619      	mov	r1, r3
 8001a76:	4822      	ldr	r0, [pc, #136]	@ (8001b00 <HAL_PCD_MspInit+0x124>)
 8001a78:	f002 f802 	bl	8003a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a82:	4a1e      	ldr	r2, [pc, #120]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d119      	bne.n	8001adc <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aae:	4a13      	ldr	r2, [pc, #76]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ab8:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001ac6:	f004 f963 	bl	8005d90 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <HAL_PCD_MspInit+0x120>)
 8001ad2:	f023 0304 	bic.w	r3, r3, #4
 8001ad6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ada:	e001      	b.n	8001ae0 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001adc:	f004 f958 	bl	8005d90 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2049      	movs	r0, #73	@ 0x49
 8001ae6:	f001 f921 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001aea:	2049      	movs	r0, #73	@ 0x49
 8001aec:	f001 f938 	bl	8002d60 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001af0:	bf00      	nop
 8001af2:	37f0      	adds	r7, #240	@ 0xf0
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	42040000 	.word	0x42040000
 8001afc:	46020c00 	.word	0x46020c00
 8001b00:	42020000 	.word	0x42020000

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <NMI_Handler+0x4>

08001b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5a:	f000 ffeb 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <OTG_FS_IRQHandler+0x10>)
 8001b6a:	f002 ff32 	bl	80049d2 <HAL_PCD_IRQHandler>
  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000e4b4 	.word	0x2000e4b4

08001b78 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <GPDMA1_Channel12_IRQHandler+0x10>)
 8001b7e:	f001 fb3d 	bl	80031fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000570 	.word	0x20000570

08001b8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b90:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <SystemInit+0x68>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b96:	4a17      	ldr	r2, [pc, #92]	@ (8001bf4 <SystemInit+0x68>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001ba0:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <SystemInit+0x6c>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001ba6:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <SystemInit+0x6c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <SystemInit+0x6c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <SystemInit+0x6c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <SystemInit+0x6c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf8 <SystemInit+0x6c>)
 8001bbe:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001bc2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001bc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <SystemInit+0x6c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <SystemInit+0x6c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <SystemInit+0x6c>)
 8001bd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <SystemInit+0x6c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <SystemInit+0x68>)
 8001be2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001be6:	609a      	str	r2, [r3, #8]
  #endif
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00
 8001bf8:	46020c00 	.word	0x46020c00

08001bfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c34 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c00:	f7ff ffc4 	bl	8001b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c06:	e003      	b.n	8001c10 <LoopCopyDataInit>

08001c08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c0e:	3104      	adds	r1, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c10:	480a      	ldr	r0, [pc, #40]	@ (8001c3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c18:	d3f6      	bcc.n	8001c08 <CopyDataInit>
	ldr	r2, =_sbss
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c1c:	e002      	b.n	8001c24 <LoopFillZerobss>

08001c1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c20:	f842 3b04 	str.w	r3, [r2], #4

08001c24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <LoopForever+0x16>)
	cmp	r2, r3
 8001c26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c28:	d3f9      	bcc.n	8001c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f00b fe3b 	bl	800d8a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c2e:	f7ff f807 	bl	8000c40 <main>

08001c32 <LoopForever>:

LoopForever:
    b LoopForever
 8001c32:	e7fe      	b.n	8001c32 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001c34:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001c38:	0800e9a0 	.word	0x0800e9a0
	ldr	r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c40:	20000250 	.word	0x20000250
	ldr	r2, =_sbss
 8001c44:	20000250 	.word	0x20000250
	ldr	r3, = _ebss
 8001c48:	2000ecf4 	.word	0x2000ecf4

08001c4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c4c:	e7fe      	b.n	8001c4c <ADC1_IRQHandler>
	...

08001c50 <set_adc_sampling_freq>:

void dma_adc_1_cplt_callback(DMA_HandleTypeDef *hdma);
void dma_adc_2_cplt_callback(DMA_HandleTypeDef *hdma);
void dma_adc_3_cplt_callback(DMA_HandleTypeDef *hdma);

void set_adc_sampling_freq(uint32_t sample_freq){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	uint32_t sample_freq_div;
	sample_freq_div = 160000000UL / sample_freq;
 8001c58:	4a0f      	ldr	r2, [pc, #60]	@ (8001c98 <set_adc_sampling_freq+0x48>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	60fb      	str	r3, [r7, #12]
	TIM8->ARR = sample_freq_div-1;
 8001c62:	4a0e      	ldr	r2, [pc, #56]	@ (8001c9c <set_adc_sampling_freq+0x4c>)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM8->CCR1 = TIM8->ARR/2;
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <set_adc_sampling_freq+0x4c>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c9c <set_adc_sampling_freq+0x4c>)
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM8->CCR2 = TIM8->ARR/2;
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <set_adc_sampling_freq+0x4c>)
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	4a08      	ldr	r2, [pc, #32]	@ (8001c9c <set_adc_sampling_freq+0x4c>)
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM8->DIER = TIM_DIER_UDE;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <set_adc_sampling_freq+0x4c>)
 8001c80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c84:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001c86:	2104      	movs	r1, #4
 8001c88:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <set_adc_sampling_freq+0x50>)
 8001c8a:	f006 fef1 	bl	8008a70 <HAL_TIM_PWM_Start>
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	09896800 	.word	0x09896800
 8001c9c:	40013400 	.word	0x40013400
 8001ca0:	20000524 	.word	0x20000524

08001ca4 <set_adc_dma_callback_routines>:

void set_adc_dma_callback_routines(void){
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	adc_1_busy = 0;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <set_adc_dma_callback_routines+0x34>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
	adc_2_busy = 0;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <set_adc_dma_callback_routines+0x38>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
	adc_3_busy = 0;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <set_adc_dma_callback_routines+0x3c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
	handle_GPDMA1_Channel12.XferCpltCallback = &dma_adc_2_cplt_callback;
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <set_adc_dma_callback_routines+0x40>)
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <set_adc_dma_callback_routines+0x44>)
 8001cbe:	661a      	str	r2, [r3, #96]	@ 0x60
	handle_GPDMA1_Channel13.XferCpltCallback = &dma_adc_2_cplt_callback;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <set_adc_dma_callback_routines+0x48>)
 8001cc2:	4a09      	ldr	r2, [pc, #36]	@ (8001ce8 <set_adc_dma_callback_routines+0x44>)
 8001cc4:	661a      	str	r2, [r3, #96]	@ 0x60
	handle_GPDMA1_Channel14.XferCpltCallback = &dma_adc_3_cplt_callback;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <set_adc_dma_callback_routines+0x4c>)
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <set_adc_dma_callback_routines+0x50>)
 8001cca:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000acc 	.word	0x20000acc
 8001cdc:	20000acd 	.word	0x20000acd
 8001ce0:	20000ace 	.word	0x20000ace
 8001ce4:	20000570 	.word	0x20000570
 8001ce8:	08001db5 	.word	0x08001db5
 8001cec:	200002e4 	.word	0x200002e4
 8001cf0:	2000026c 	.word	0x2000026c
 8001cf4:	08001ddd 	.word	0x08001ddd

08001cf8 <collect_adc_samples2>:
        HAL_DMA_Abort(dma_ptr);
    }
	return result;
}

HAL_StatusTypeDef collect_adc_samples2(uint8_t adc_num){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result1, result2, result3;
	result1 = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
	result2 = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73bb      	strb	r3, [r7, #14]
	result3 = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	737b      	strb	r3, [r7, #13]
	if(adc_num & 0x1){
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <collect_adc_samples2+0x38>
		adc_1_busy = 1;
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <collect_adc_samples2+0x94>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
		result1 = HAL_DMA_Start_IT(&handle_GPDMA1_Channel12,(uint32_t)&GPIOE->IDR,(uint32_t)adc_samples_1,DVC_MAX_NUM_ADC_SAMPLES*sizeof(uint16_t));
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <collect_adc_samples2+0x98>)
 8001d20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d24:	491b      	ldr	r1, [pc, #108]	@ (8001d94 <collect_adc_samples2+0x9c>)
 8001d26:	481c      	ldr	r0, [pc, #112]	@ (8001d98 <collect_adc_samples2+0xa0>)
 8001d28:	f001 fa08 	bl	800313c <HAL_DMA_Start_IT>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]
	}
	if(adc_num & 0x2){
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <collect_adc_samples2+0x5a>
		adc_2_busy = 1;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <collect_adc_samples2+0xa4>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
		result2 = HAL_DMA_Start_IT(&handle_GPDMA1_Channel12,(uint32_t)&GPIOF->IDR,(uint32_t)adc_samples_2,DVC_MAX_NUM_ADC_SAMPLES*sizeof(uint16_t));
 8001d40:	4a17      	ldr	r2, [pc, #92]	@ (8001da0 <collect_adc_samples2+0xa8>)
 8001d42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d46:	4917      	ldr	r1, [pc, #92]	@ (8001da4 <collect_adc_samples2+0xac>)
 8001d48:	4813      	ldr	r0, [pc, #76]	@ (8001d98 <collect_adc_samples2+0xa0>)
 8001d4a:	f001 f9f7 	bl	800313c <HAL_DMA_Start_IT>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	73bb      	strb	r3, [r7, #14]
	}
	if(adc_num & 0x4){
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <collect_adc_samples2+0x7c>
		adc_3_busy = 1;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <collect_adc_samples2+0xb0>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
		result3 = HAL_DMA_Start_IT(&handle_GPDMA1_Channel14,(uint32_t)&GPIOF->IDR,(uint32_t)adc_samples_3,DVC_MAX_NUM_ADC_SAMPLES*sizeof(uint16_t));
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <collect_adc_samples2+0xb4>)
 8001d64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d68:	490e      	ldr	r1, [pc, #56]	@ (8001da4 <collect_adc_samples2+0xac>)
 8001d6a:	4811      	ldr	r0, [pc, #68]	@ (8001db0 <collect_adc_samples2+0xb8>)
 8001d6c:	f001 f9e6 	bl	800313c <HAL_DMA_Start_IT>
 8001d70:	4603      	mov	r3, r0
 8001d72:	737b      	strb	r3, [r7, #13]
	}
	return result1 | result2 | result3;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	7bbb      	ldrb	r3, [r7, #14]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b2db      	uxtb	r3, r3
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000acc 	.word	0x20000acc
 8001d90:	20000ad4 	.word	0x20000ad4
 8001d94:	42021010 	.word	0x42021010
 8001d98:	20000570 	.word	0x20000570
 8001d9c:	20000acd 	.word	0x20000acd
 8001da0:	20004ad4 	.word	0x20004ad4
 8001da4:	42021410 	.word	0x42021410
 8001da8:	20000ace 	.word	0x20000ace
 8001dac:	20008ad4 	.word	0x20008ad4
 8001db0:	2000026c 	.word	0x2000026c

08001db4 <dma_adc_2_cplt_callback>:
void dma_adc_1_cplt_callback(DMA_HandleTypeDef *hdma){
	adc_1_busy = 0;
	adc_1_full = 1;
}

void dma_adc_2_cplt_callback(DMA_HandleTypeDef *hdma){
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	adc_2_busy = 0;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <dma_adc_2_cplt_callback+0x20>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
	adc_2_full = 1;
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <dma_adc_2_cplt_callback+0x24>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20000acd 	.word	0x20000acd
 8001dd8:	20000ad0 	.word	0x20000ad0

08001ddc <dma_adc_3_cplt_callback>:

void dma_adc_3_cplt_callback(DMA_HandleTypeDef *hdma){
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	adc_3_busy = 0;
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <dma_adc_3_cplt_callback+0x20>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
	adc_3_full = 1;
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <dma_adc_3_cplt_callback+0x24>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	20000ace 	.word	0x20000ace
 8001e00:	20000ad1 	.word	0x20000ad1

08001e04 <init_register_map>:
 *      Author: User
 */

#include "../Inc/device_registers.h"

void init_register_map(RegisterMap_TypeDef* RegMap){
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e007      	b.n	8001e22 <init_register_map+0x1e>
		RegMap->RegisterArray[i].RegData = 0;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	2100      	movs	r1, #0
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2bff      	cmp	r3, #255	@ 0xff
 8001e26:	ddf4      	ble.n	8001e12 <init_register_map+0xe>
	}
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <get_register>:

uint32_t get_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr){
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
	return (REG_DATA_MASK & RegMap->RegisterArray[reg_addr].RegData);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <set_register>:

void set_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr, uint32_t data){
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
	RegMap->RegisterArray[reg_addr].RegData = (REG_DATA_MASK & data);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <set_ad9833_dds_buffer>:
 *      Author: User
 */
#include "main.h"
#include "device_sourcing.h"

void set_ad9833_dds_buffer(uint8_t *buffer, uint32_t freq_28b) {
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
	// Combine 14 MSBs and 14 LSBs
//    uint32_t freq_28b = ((freq_14msb & 0x3FFF) << 14) | (freq_14lsb & 0x3FFF);
    // Populate the buffer according to the command sequence
    buffer[0] = 0x21; buffer[1] = 0x00; // Control Register
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2221      	movs	r2, #33	@ 0x21
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3301      	adds	r3, #1
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x40 | ((freq_28b >> 8) & 0x3F); // Frequency Register 0 LSB
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
    buffer[3] = freq_28b & 0xFF;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x40 | ((freq_28b >> 22) & 0x3F); // Frequency Register 0 MSB
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	0d9b      	lsrs	r3, r3, #22
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]
    buffer[5] = (freq_28b >> 14) & 0xFF;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	0b9a      	lsrs	r2, r3, #14
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3305      	adds	r3, #5
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
    buffer[6] = 0xC0; buffer[7] = 0x00; // Phase Register 0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3306      	adds	r3, #6
 8001ee0:	22c0      	movs	r2, #192	@ 0xc0
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3307      	adds	r3, #7
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
    buffer[8] = 0x20; buffer[9] = 0x00; // Exit Reset
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3308      	adds	r3, #8
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3309      	adds	r3, #9
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <set_pot_buffer>:

void set_pot_buffer(uint8_t *buffer, uint32_t cmd, uint32_t value) {
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
    buffer[0] = cmd;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	701a      	strb	r2, [r3, #0]
    buffer[1] = value;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <calculate_pot_value>:

int calculate_pot_value(float Current) {
 8001f34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	ed87 0a01 	vstr	s0, [r7, #4]
	// Function to calculate pot_value
    // Define the constants
//    const float constant = 3.8765;
//    const float exponent = -1.0504;
    const float constant = 4791;
 8001f40:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <calculate_pot_value+0xa0>)
 8001f42:	617b      	str	r3, [r7, #20]
    const float exponent = -1.038;
 8001f44:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <calculate_pot_value+0xa4>)
 8001f46:	613b      	str	r3, [r7, #16]
    const float offset = 255;
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <calculate_pot_value+0xa8>)
 8001f4a:	60fb      	str	r3, [r7, #12]
//    const float scaler = 1000.0;

    // Calculate pot_value using the provided formula
    float pot_value = offset - pow(Current, exponent)*constant;
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7fe faf7 	bl	8000540 <__aeabi_f2d>
 8001f52:	4604      	mov	r4, r0
 8001f54:	460d      	mov	r5, r1
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe faf2 	bl	8000540 <__aeabi_f2d>
 8001f5c:	4680      	mov	r8, r0
 8001f5e:	4689      	mov	r9, r1
 8001f60:	6938      	ldr	r0, [r7, #16]
 8001f62:	f7fe faed 	bl	8000540 <__aeabi_f2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	ec43 2b11 	vmov	d1, r2, r3
 8001f6e:	ec49 8b10 	vmov	d0, r8, r9
 8001f72:	f00b fcbb 	bl	800d8ec <pow>
 8001f76:	ec59 8b10 	vmov	r8, r9, d0
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7fe fae0 	bl	8000540 <__aeabi_f2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4640      	mov	r0, r8
 8001f86:	4649      	mov	r1, r9
 8001f88:	f7fe fb32 	bl	80005f0 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe f974 	bl	8000280 <__aeabi_dsub>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7fe fdfe 	bl	8000ba0 <__aeabi_d2f>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60bb      	str	r3, [r7, #8]

    // Return the calculated pot_value
    return (int)round(pot_value);
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f7fe fac9 	bl	8000540 <__aeabi_f2d>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	ec43 2b10 	vmov	d0, r2, r3
 8001fb6:	f00b fd15 	bl	800d9e4 <round>
 8001fba:	ec53 2b10 	vmov	r2, r3, d0
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fdc5 	bl	8000b50 <__aeabi_d2iz>
 8001fc6:	4603      	mov	r3, r0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fd2:	bf00      	nop
 8001fd4:	4595b800 	.word	0x4595b800
 8001fd8:	bf84dd2f 	.word	0xbf84dd2f
 8001fdc:	437f0000 	.word	0x437f0000

08001fe0 <config_dds_freq>:

HAL_StatusTypeDef config_dds_freq(SPI_HandleTypeDef *hspi, uint8_t *buffer){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	result = HAL_SPI_Transmit(hspi, buffer, 10, 1000);
 8001fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fee:	220a      	movs	r2, #10
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f006 f946 	bl	8008284 <HAL_SPI_Transmit>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8001ffc:	2064      	movs	r0, #100	@ 0x64
 8001ffe:	f000 fdb9 	bl	8002b74 <HAL_Delay>
	return result;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <config_volt_src_gain>:

HAL_StatusTypeDef config_volt_src_gain(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	460b      	mov	r3, r1
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 800201a:	8979      	ldrh	r1, [r7, #10]
 800201c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2302      	movs	r3, #2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f001 ffb6 	bl	8003f98 <HAL_I2C_Master_Transmit>
 800202c:	4603      	mov	r3, r0
 800202e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8002030:	2064      	movs	r0, #100	@ 0x64
 8002032:	f000 fd9f 	bl	8002b74 <HAL_Delay>
	return result;
 8002036:	7dfb      	ldrb	r3, [r7, #23]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <config_current_mirror>:
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
	HAL_Delay(100);
	return result;
}

HAL_StatusTypeDef config_current_mirror(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	460b      	mov	r3, r1
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 800204e:	8979      	ldrh	r1, [r7, #10]
 8002050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2302      	movs	r3, #2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f001 ff9c 	bl	8003f98 <HAL_I2C_Master_Transmit>
 8002060:	4603      	mov	r3, r0
 8002062:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8002064:	2064      	movs	r0, #100	@ 0x64
 8002066:	f000 fd85 	bl	8002b74 <HAL_Delay>
	return result;
 800206a:	7dfb      	ldrb	r3, [r7, #23]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <dvc_exec_msr_dc_resistance_2p>:

extern volatile uint8_t adc_1_full;
extern volatile uint8_t adc_2_full;
extern volatile uint8_t adc_3_full;

void dvc_exec_msr_dc_resistance_2p(void){
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	uint32_t pot_val;
	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 800207a:	2101      	movs	r1, #1
 800207c:	4822      	ldr	r0, [pc, #136]	@ (8002108 <dvc_exec_msr_dc_resistance_2p+0x94>)
 800207e:	f7ff feda 	bl	8001e36 <get_register>
 8002082:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	461a      	mov	r2, r3
 800208a:	2101      	movs	r1, #1
 800208c:	481e      	ldr	r0, [pc, #120]	@ (8002108 <dvc_exec_msr_dc_resistance_2p+0x94>)
 800208e:	f7ff fee3 	bl	8001e58 <set_register>

	// get potentiometer value to configure current mirror
	pot_val = get_register(&device_registers,DVC_2PM_DCRESISTANCE_1);
 8002092:	2103      	movs	r1, #3
 8002094:	481c      	ldr	r0, [pc, #112]	@ (8002108 <dvc_exec_msr_dc_resistance_2p+0x94>)
 8002096:	f7ff fece 	bl	8001e36 <get_register>
 800209a:	6078      	str	r0, [r7, #4]

	// prepare buffer for potentiometer I2C tx
	set_pot_buffer(curr_mrr_i2c_tx_buf,DVC_POT_AD5245_WP_WR_CMD,pot_val);
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	2100      	movs	r1, #0
 80020a0:	481a      	ldr	r0, [pc, #104]	@ (800210c <dvc_exec_msr_dc_resistance_2p+0x98>)
 80020a2:	f7ff ff31 	bl	8001f08 <set_pot_buffer>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 80020a6:	2102      	movs	r1, #2
 80020a8:	4817      	ldr	r0, [pc, #92]	@ (8002108 <dvc_exec_msr_dc_resistance_2p+0x94>)
 80020aa:	f7ff fec4 	bl	8001e36 <get_register>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4619      	mov	r1, r3
 80020b2:	4817      	ldr	r0, [pc, #92]	@ (8002110 <dvc_exec_msr_dc_resistance_2p+0x9c>)
 80020b4:	f000 fae6 	bl	8002684 <map_switch_network>
	set_switch_network(&device_switch_network);
 80020b8:	4815      	ldr	r0, [pc, #84]	@ (8002110 <dvc_exec_msr_dc_resistance_2p+0x9c>)
 80020ba:	f000 faad 	bl	8002618 <set_switch_network>

	// configure the current mirror (2 seconds delay for stabilization)
	config_current_mirror(&hi2c2,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
 80020be:	4a13      	ldr	r2, [pc, #76]	@ (800210c <dvc_exec_msr_dc_resistance_2p+0x98>)
 80020c0:	2158      	movs	r1, #88	@ 0x58
 80020c2:	4814      	ldr	r0, [pc, #80]	@ (8002114 <dvc_exec_msr_dc_resistance_2p+0xa0>)
 80020c4:	f7ff ffbc 	bl	8002040 <config_current_mirror>
	HAL_Delay(2000);
 80020c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80020cc:	f000 fd52 	bl	8002b74 <HAL_Delay>

	// collect ADC samples
	collect_adc_samples2(2);
 80020d0:	2002      	movs	r0, #2
 80020d2:	f7ff fe11 	bl	8001cf8 <collect_adc_samples2>

	// wait for adc dma to complete
	while(adc_2_busy);
 80020d6:	bf00      	nop
 80020d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <dvc_exec_msr_dc_resistance_2p+0xa4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1fa      	bne.n	80020d8 <dvc_exec_msr_dc_resistance_2p+0x64>

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 80020e2:	480b      	ldr	r0, [pc, #44]	@ (8002110 <dvc_exec_msr_dc_resistance_2p+0x9c>)
 80020e4:	f000 fa5e 	bl	80025a4 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 80020e8:	2101      	movs	r1, #1
 80020ea:	4807      	ldr	r0, [pc, #28]	@ (8002108 <dvc_exec_msr_dc_resistance_2p+0x94>)
 80020ec:	f7ff fea3 	bl	8001e36 <get_register>
 80020f0:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 80020f2:	f023 0304 	bic.w	r3, r3, #4
 80020f6:	461a      	mov	r2, r3
 80020f8:	2101      	movs	r1, #1
 80020fa:	4803      	ldr	r0, [pc, #12]	@ (8002108 <dvc_exec_msr_dc_resistance_2p+0x94>)
 80020fc:	f7ff feac 	bl	8001e58 <set_register>

}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2000cad4 	.word	0x2000cad4
 800210c:	20000018 	.word	0x20000018
 8002110:	2000ced4 	.word	0x2000ced4
 8002114:	2000035c 	.word	0x2000035c
 8002118:	20000acd 	.word	0x20000acd

0800211c <dvc_exec_msr_current_voltage>:

void dvc_exec_msr_current_voltage(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
	uint32_t pot_val_gain, pot_val_offset, pot_val_curr_mirr, method_sel, dds_freq_val;
	uint32_t start_param, end_param, incr_param;

	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002122:	2101      	movs	r1, #1
 8002124:	4857      	ldr	r0, [pc, #348]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 8002126:	f7ff fe86 	bl	8001e36 <get_register>
 800212a:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	461a      	mov	r2, r3
 8002132:	2101      	movs	r1, #1
 8002134:	4853      	ldr	r0, [pc, #332]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 8002136:	f7ff fe8f 	bl	8001e58 <set_register>

	// grab the measurement parameters from the registers;
	method_sel = get_register(&device_registers,DVC_2PM_CURRVOLT_1) & 0x3;
 800213a:	2104      	movs	r1, #4
 800213c:	4851      	ldr	r0, [pc, #324]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 800213e:	f7ff fe7a 	bl	8001e36 <get_register>
 8002142:	4603      	mov	r3, r0
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	623b      	str	r3, [r7, #32]
	start_param = get_register(&device_registers,DVC_2PM_CURRVOLT_2);
 800214a:	2105      	movs	r1, #5
 800214c:	484d      	ldr	r0, [pc, #308]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 800214e:	f7ff fe72 	bl	8001e36 <get_register>
 8002152:	61f8      	str	r0, [r7, #28]
	end_param = get_register(&device_registers,DVC_2PM_CURRVOLT_3);
 8002154:	2106      	movs	r1, #6
 8002156:	484b      	ldr	r0, [pc, #300]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 8002158:	f7ff fe6d 	bl	8001e36 <get_register>
 800215c:	61b8      	str	r0, [r7, #24]
	incr_param = get_register(&device_registers,DVC_2PM_CURRVOLT_4);
 800215e:	2107      	movs	r1, #7
 8002160:	4848      	ldr	r0, [pc, #288]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 8002162:	f7ff fe68 	bl	8001e36 <get_register>
 8002166:	6178      	str	r0, [r7, #20]

	// configure the basic DC voltage source with 0Hz
	dds_freq_val = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
	pot_val_gain = 110;
 800216c:	236e      	movs	r3, #110	@ 0x6e
 800216e:	60fb      	str	r3, [r7, #12]
	set_ad9833_dds_buffer(volt_src_dds_spi_tx_buf,dds_freq_val);
 8002170:	6939      	ldr	r1, [r7, #16]
 8002172:	4845      	ldr	r0, [pc, #276]	@ (8002288 <dvc_exec_msr_current_voltage+0x16c>)
 8002174:	f7ff fe83 	bl	8001e7e <set_ad9833_dds_buffer>
	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_gain);
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	2100      	movs	r1, #0
 800217c:	4843      	ldr	r0, [pc, #268]	@ (800228c <dvc_exec_msr_current_voltage+0x170>)
 800217e:	f7ff fec3 	bl	8001f08 <set_pot_buffer>
	config_dds_freq(&hspi2,volt_src_dds_spi_tx_buf);
 8002182:	4941      	ldr	r1, [pc, #260]	@ (8002288 <dvc_exec_msr_current_voltage+0x16c>)
 8002184:	4842      	ldr	r0, [pc, #264]	@ (8002290 <dvc_exec_msr_current_voltage+0x174>)
 8002186:	f7ff ff2b 	bl	8001fe0 <config_dds_freq>
	config_volt_src_gain(&hi2c3,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 800218a:	4a40      	ldr	r2, [pc, #256]	@ (800228c <dvc_exec_msr_current_voltage+0x170>)
 800218c:	215e      	movs	r1, #94	@ 0x5e
 800218e:	4841      	ldr	r0, [pc, #260]	@ (8002294 <dvc_exec_msr_current_voltage+0x178>)
 8002190:	f7ff ff3c 	bl	800200c <config_volt_src_gain>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 8002194:	2102      	movs	r1, #2
 8002196:	483b      	ldr	r0, [pc, #236]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 8002198:	f7ff fe4d 	bl	8001e36 <get_register>
 800219c:	4603      	mov	r3, r0
 800219e:	4619      	mov	r1, r3
 80021a0:	483d      	ldr	r0, [pc, #244]	@ (8002298 <dvc_exec_msr_current_voltage+0x17c>)
 80021a2:	f000 fa6f 	bl	8002684 <map_switch_network>
	set_switch_network(&device_switch_network);
 80021a6:	483c      	ldr	r0, [pc, #240]	@ (8002298 <dvc_exec_msr_current_voltage+0x17c>)
 80021a8:	f000 fa36 	bl	8002618 <set_switch_network>

	for(int param = start_param; param <= end_param; param += incr_param){
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b0:	e051      	b.n	8002256 <dvc_exec_msr_current_voltage+0x13a>
		if(method_sel == DVC_CUR_VOLT_2P_SEL_VOLT){
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <dvc_exec_msr_current_voltage+0xac>
			pot_val_offset = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
			set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset);
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	2100      	movs	r1, #0
 80021c0:	4836      	ldr	r0, [pc, #216]	@ (800229c <dvc_exec_msr_current_voltage+0x180>)
 80021c2:	f7ff fea1 	bl	8001f08 <set_pot_buffer>
 80021c6:	e01b      	b.n	8002200 <dvc_exec_msr_current_voltage+0xe4>
//			config_volt_src_offset(&hi2c3,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
		}
		else if (method_sel == DVC_CUR_VOLT_2P_SEL_CURR){
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d118      	bne.n	8002200 <dvc_exec_msr_current_voltage+0xe4>
			pot_val_curr_mirr = calculate_pot_value((float)param);
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	f7ff feaa 	bl	8001f34 <calculate_pot_value>
 80021e0:	4603      	mov	r3, r0
 80021e2:	60bb      	str	r3, [r7, #8]
			set_pot_buffer(curr_mrr_i2c_tx_buf,DVC_POT_AD5245_WP_WR_CMD,pot_val_curr_mirr);
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	2100      	movs	r1, #0
 80021e8:	482d      	ldr	r0, [pc, #180]	@ (80022a0 <dvc_exec_msr_current_voltage+0x184>)
 80021ea:	f7ff fe8d 	bl	8001f08 <set_pot_buffer>
			config_current_mirror(&hi2c2,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
 80021ee:	4a2c      	ldr	r2, [pc, #176]	@ (80022a0 <dvc_exec_msr_current_voltage+0x184>)
 80021f0:	2158      	movs	r1, #88	@ 0x58
 80021f2:	482c      	ldr	r0, [pc, #176]	@ (80022a4 <dvc_exec_msr_current_voltage+0x188>)
 80021f4:	f7ff ff24 	bl	8002040 <config_current_mirror>
			HAL_Delay(3000);
 80021f8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80021fc:	f000 fcba 	bl	8002b74 <HAL_Delay>
		}

		// collect ADC samples
		collect_adc_samples2(2);
 8002200:	2002      	movs	r0, #2
 8002202:	f7ff fd79 	bl	8001cf8 <collect_adc_samples2>

		// wait for adc dma to complete
		while(adc_2_busy);
 8002206:	bf00      	nop
 8002208:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <dvc_exec_msr_current_voltage+0x18c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1fa      	bne.n	8002208 <dvc_exec_msr_current_voltage+0xec>

		// clear busy flag to indicate a measurement is complete
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8002212:	2101      	movs	r1, #1
 8002214:	481b      	ldr	r0, [pc, #108]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 8002216:	f7ff fe0e 	bl	8001e36 <get_register>
 800221a:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 800221c:	f023 0304 	bic.w	r3, r3, #4
 8002220:	461a      	mov	r2, r3
 8002222:	2101      	movs	r1, #1
 8002224:	4817      	ldr	r0, [pc, #92]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 8002226:	f7ff fe17 	bl	8001e58 <set_register>

		// wait for python to grab the data
		while(adc_2_full);
 800222a:	bf00      	nop
 800222c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <dvc_exec_msr_current_voltage+0x190>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1fa      	bne.n	800222c <dvc_exec_msr_current_voltage+0x110>

		// set busy flag to indicate a measurement is in progress
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
					 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 8002236:	2101      	movs	r1, #1
 8002238:	4812      	ldr	r0, [pc, #72]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 800223a:	f7ff fdfc 	bl	8001e36 <get_register>
 800223e:	4603      	mov	r3, r0
		set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	461a      	mov	r2, r3
 8002246:	2101      	movs	r1, #1
 8002248:	480e      	ldr	r0, [pc, #56]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 800224a:	f7ff fe05 	bl	8001e58 <set_register>
	for(int param = start_param; param <= end_param; param += incr_param){
 800224e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	4413      	add	r3, r2
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	429a      	cmp	r2, r3
 800225c:	d2a9      	bcs.n	80021b2 <dvc_exec_msr_current_voltage+0x96>
	}

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 800225e:	480e      	ldr	r0, [pc, #56]	@ (8002298 <dvc_exec_msr_current_voltage+0x17c>)
 8002260:	f000 f9a0 	bl	80025a4 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 8002264:	2101      	movs	r1, #1
 8002266:	4807      	ldr	r0, [pc, #28]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 8002268:	f7ff fde5 	bl	8001e36 <get_register>
 800226c:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 800226e:	f023 0304 	bic.w	r3, r3, #4
 8002272:	461a      	mov	r2, r3
 8002274:	2101      	movs	r1, #1
 8002276:	4803      	ldr	r0, [pc, #12]	@ (8002284 <dvc_exec_msr_current_voltage+0x168>)
 8002278:	f7ff fdee 	bl	8001e58 <set_register>
}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	@ 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	2000cad4 	.word	0x2000cad4
 8002288:	20000004 	.word	0x20000004
 800228c:	20000010 	.word	0x20000010
 8002290:	20000494 	.word	0x20000494
 8002294:	200003b0 	.word	0x200003b0
 8002298:	2000ced4 	.word	0x2000ced4
 800229c:	20000014 	.word	0x20000014
 80022a0:	20000018 	.word	0x20000018
 80022a4:	2000035c 	.word	0x2000035c
 80022a8:	20000acd 	.word	0x20000acd
 80022ac:	20000ad0 	.word	0x20000ad0

080022b0 <dvc_exec_msr_capacitance_voltage_2p>:

void dvc_exec_msr_capacitance_voltage_2p(void){
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <dvc_exec_msr_impedance_spectroscopy_2p>:

void dvc_exec_msr_impedance_spectroscopy_2p(void){
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <dvc_exec_msr_transfer_characteristics>:

void dvc_exec_msr_transfer_characteristics(void){
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <dvc_exec_msr_output_characteristics>:

void dvc_exec_msr_output_characteristics(void){
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <dvc_exec_msr_capacitance_voltage_3p>:

void dvc_exec_msr_capacitance_voltage_3p(void){
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <dvc_exec_msr_electrochemical>:

void dvc_exec_msr_electrochemical(void){
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <dvc_exec_msr_low_resistance>:

void dvc_exec_msr_low_resistance(void){
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <dvc_exec_msr_dc_resistance_4p>:

void dvc_exec_msr_dc_resistance_4p(void){
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
	uint32_t pot_val;
	// set busy flag to indicate a measurement is in progress
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) | 0x4);
 800231a:	2101      	movs	r1, #1
 800231c:	4820      	ldr	r0, [pc, #128]	@ (80023a0 <dvc_exec_msr_dc_resistance_4p+0x8c>)
 800231e:	f7ff fd8a 	bl	8001e36 <get_register>
 8002322:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	461a      	mov	r2, r3
 800232a:	2101      	movs	r1, #1
 800232c:	481c      	ldr	r0, [pc, #112]	@ (80023a0 <dvc_exec_msr_dc_resistance_4p+0x8c>)
 800232e:	f7ff fd93 	bl	8001e58 <set_register>

	// get potentiometer value to configure current mirror
	pot_val = get_register(&device_registers,DVC_4PM_PROBERESISTANCE_1);
 8002332:	211e      	movs	r1, #30
 8002334:	481a      	ldr	r0, [pc, #104]	@ (80023a0 <dvc_exec_msr_dc_resistance_4p+0x8c>)
 8002336:	f7ff fd7e 	bl	8001e36 <get_register>
 800233a:	6078      	str	r0, [r7, #4]

	// prepare buffer for potentiometer I2C tx
	set_pot_buffer(curr_mrr_i2c_tx_buf,DVC_POT_AD5245_WP_WR_CMD,pot_val);
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	2100      	movs	r1, #0
 8002340:	4818      	ldr	r0, [pc, #96]	@ (80023a4 <dvc_exec_msr_dc_resistance_4p+0x90>)
 8002342:	f7ff fde1 	bl	8001f08 <set_pot_buffer>

	// configure the switch network
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 8002346:	2102      	movs	r1, #2
 8002348:	4815      	ldr	r0, [pc, #84]	@ (80023a0 <dvc_exec_msr_dc_resistance_4p+0x8c>)
 800234a:	f7ff fd74 	bl	8001e36 <get_register>
 800234e:	4603      	mov	r3, r0
 8002350:	4619      	mov	r1, r3
 8002352:	4815      	ldr	r0, [pc, #84]	@ (80023a8 <dvc_exec_msr_dc_resistance_4p+0x94>)
 8002354:	f000 f996 	bl	8002684 <map_switch_network>
	set_switch_network(&device_switch_network);
 8002358:	4813      	ldr	r0, [pc, #76]	@ (80023a8 <dvc_exec_msr_dc_resistance_4p+0x94>)
 800235a:	f000 f95d 	bl	8002618 <set_switch_network>

	// configure the current mirror (2 seconds delay for stabilization)
//	config_current_mirror(&hi2c2,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
	HAL_Delay(2000);
 800235e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002362:	f000 fc07 	bl	8002b74 <HAL_Delay>

	// collect ADC samples
	collect_adc_samples2(2);
 8002366:	2002      	movs	r0, #2
 8002368:	f7ff fcc6 	bl	8001cf8 <collect_adc_samples2>

	// wait for adc dma to complete
	while(adc_2_busy);
 800236c:	bf00      	nop
 800236e:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <dvc_exec_msr_dc_resistance_4p+0x98>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1fa      	bne.n	800236e <dvc_exec_msr_dc_resistance_4p+0x5a>

	// disconnect switch network to cut power
	clear_switch_network(&device_switch_network);
 8002378:	480b      	ldr	r0, [pc, #44]	@ (80023a8 <dvc_exec_msr_dc_resistance_4p+0x94>)
 800237a:	f000 f913 	bl	80025a4 <clear_switch_network>

	// clear busy flag to indicate a measurement is complete
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
				 get_register(&device_registers,DVC_MEASUREMENT_CONFIG) & ~(0x4));
 800237e:	2101      	movs	r1, #1
 8002380:	4807      	ldr	r0, [pc, #28]	@ (80023a0 <dvc_exec_msr_dc_resistance_4p+0x8c>)
 8002382:	f7ff fd58 	bl	8001e36 <get_register>
 8002386:	4603      	mov	r3, r0
	set_register(&device_registers,DVC_MEASUREMENT_CONFIG,
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	461a      	mov	r2, r3
 800238e:	2101      	movs	r1, #1
 8002390:	4803      	ldr	r0, [pc, #12]	@ (80023a0 <dvc_exec_msr_dc_resistance_4p+0x8c>)
 8002392:	f7ff fd61 	bl	8001e58 <set_register>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000cad4 	.word	0x2000cad4
 80023a4:	20000018 	.word	0x20000018
 80023a8:	2000ced4 	.word	0x2000ced4
 80023ac:	20000acd 	.word	0x20000acd

080023b0 <dvc_exec_msr_impedance_spectroscopy_4p>:

void dvc_exec_msr_impedance_spectroscopy_4p(void){
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <run_device>:
uint8_t spi_tx_buf_dac_2_freq[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

RegisterMap_TypeDef device_registers;
SwitchNetwork_TypeDef device_switch_network;

void run_device(){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
	MeasurementCfg_Type measurement_type = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	70fb      	strb	r3, [r7, #3]

	init_register_map(&device_registers);
 80023ca:	4844      	ldr	r0, [pc, #272]	@ (80024dc <run_device+0x11c>)
 80023cc:	f7ff fd1a 	bl	8001e04 <init_register_map>
	init_switch_network(&device_switch_network);
 80023d0:	4843      	ldr	r0, [pc, #268]	@ (80024e0 <run_device+0x120>)
 80023d2:	f000 f88f 	bl	80024f4 <init_switch_network>
	clear_switch_network(&device_switch_network);
 80023d6:	4842      	ldr	r0, [pc, #264]	@ (80024e0 <run_device+0x120>)
 80023d8:	f000 f8e4 	bl	80025a4 <clear_switch_network>
	set_adc_sampling_freq(5000000UL);
 80023dc:	4841      	ldr	r0, [pc, #260]	@ (80024e4 <run_device+0x124>)
 80023de:	f7ff fc37 	bl	8001c50 <set_adc_sampling_freq>
	set_adc_dma_callback_routines();
 80023e2:	f7ff fc5f 	bl	8001ca4 <set_adc_dma_callback_routines>
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	e014      	b.n	8002416 <run_device+0x56>
		adc_samples_1[i] = 0xdead;
 80023ec:	4a3e      	ldr	r2, [pc, #248]	@ (80024e8 <run_device+0x128>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 80023f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_2[i] = 0xdead;
 80023f8:	4a3c      	ldr	r2, [pc, #240]	@ (80024ec <run_device+0x12c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 8002400:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_3[i] = 0xdead;
 8002404:	4a3a      	ldr	r2, [pc, #232]	@ (80024f0 <run_device+0x130>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 800240c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3301      	adds	r3, #1
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800241c:	dbe6      	blt.n	80023ec <run_device+0x2c>
	}

	while(1){
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 800241e:	2101      	movs	r1, #1
 8002420:	482e      	ldr	r0, [pc, #184]	@ (80024dc <run_device+0x11c>)
 8002422:	f7ff fd08 	bl	8001e36 <get_register>
 8002426:	4603      	mov	r3, r0
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f6      	beq.n	800241e <run_device+0x5e>
			measurement_type = (get_register(&device_registers,DVC_MEASUREMENT_CONFIG)>>6) & 0xF;
 8002430:	2101      	movs	r1, #1
 8002432:	482a      	ldr	r0, [pc, #168]	@ (80024dc <run_device+0x11c>)
 8002434:	f7ff fcff 	bl	8001e36 <get_register>
 8002438:	4603      	mov	r3, r0
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	70fb      	strb	r3, [r7, #3]
			switch (measurement_type) {
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	3b01      	subs	r3, #1
 8002448:	2b0a      	cmp	r3, #10
 800244a:	d844      	bhi.n	80024d6 <run_device+0x116>
 800244c:	a201      	add	r2, pc, #4	@ (adr r2, 8002454 <run_device+0x94>)
 800244e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002452:	bf00      	nop
 8002454:	08002481 	.word	0x08002481
 8002458:	08002491 	.word	0x08002491
 800245c:	080024a1 	.word	0x080024a1
 8002460:	080024a7 	.word	0x080024a7
 8002464:	080024ad 	.word	0x080024ad
 8002468:	080024b3 	.word	0x080024b3
 800246c:	080024b9 	.word	0x080024b9
 8002470:	080024bf 	.word	0x080024bf
 8002474:	080024c5 	.word	0x080024c5
 8002478:	080024cb 	.word	0x080024cb
 800247c:	080024d1 	.word	0x080024d1
				case DC_RESISTANCE:
					dvc_exec_msr_dc_resistance_2p();
 8002480:	f7ff fdf8 	bl	8002074 <dvc_exec_msr_dc_resistance_2p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 8002484:	2200      	movs	r2, #0
 8002486:	2101      	movs	r1, #1
 8002488:	4814      	ldr	r0, [pc, #80]	@ (80024dc <run_device+0x11c>)
 800248a:	f7ff fce5 	bl	8001e58 <set_register>
					break;
 800248e:	e023      	b.n	80024d8 <run_device+0x118>
				case CURRENT_VOLTAGE:
					dvc_exec_msr_current_voltage();
 8002490:	f7ff fe44 	bl	800211c <dvc_exec_msr_current_voltage>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 8002494:	2200      	movs	r2, #0
 8002496:	2101      	movs	r1, #1
 8002498:	4810      	ldr	r0, [pc, #64]	@ (80024dc <run_device+0x11c>)
 800249a:	f7ff fcdd 	bl	8001e58 <set_register>
					break;
 800249e:	e01b      	b.n	80024d8 <run_device+0x118>
				case CAPACITANCE_VOLTAGE_2P:
					dvc_exec_msr_capacitance_voltage_2p();
 80024a0:	f7ff ff06 	bl	80022b0 <dvc_exec_msr_capacitance_voltage_2p>
					break;
 80024a4:	e018      	b.n	80024d8 <run_device+0x118>
				case IMPEDANCE_SPECTROSCOPY_2P:
					dvc_exec_msr_impedance_spectroscopy_2p();
 80024a6:	f7ff ff0a 	bl	80022be <dvc_exec_msr_impedance_spectroscopy_2p>
					break;
 80024aa:	e015      	b.n	80024d8 <run_device+0x118>
				case TRANSFER_CHARACTERISTICS:
					dvc_exec_msr_transfer_characteristics();
 80024ac:	f7ff ff0e 	bl	80022cc <dvc_exec_msr_transfer_characteristics>
					break;
 80024b0:	e012      	b.n	80024d8 <run_device+0x118>
				case OUTPUT_CHARACTERISTICS:
					dvc_exec_msr_output_characteristics();
 80024b2:	f7ff ff12 	bl	80022da <dvc_exec_msr_output_characteristics>
					break;
 80024b6:	e00f      	b.n	80024d8 <run_device+0x118>
				case CAPACITANCE_VOLTAGE_3P:
					dvc_exec_msr_capacitance_voltage_3p();
 80024b8:	f7ff ff16 	bl	80022e8 <dvc_exec_msr_capacitance_voltage_3p>
					break;
 80024bc:	e00c      	b.n	80024d8 <run_device+0x118>
				case ELECTROCHEMICAL:
					dvc_exec_msr_electrochemical();
 80024be:	f7ff ff1a 	bl	80022f6 <dvc_exec_msr_electrochemical>
					break;
 80024c2:	e009      	b.n	80024d8 <run_device+0x118>
				case LOW_RESISTANCE:
					dvc_exec_msr_low_resistance();
 80024c4:	f7ff ff1e 	bl	8002304 <dvc_exec_msr_low_resistance>
					break;
 80024c8:	e006      	b.n	80024d8 <run_device+0x118>
				case PROBE_RESISTANCE:
					dvc_exec_msr_dc_resistance_4p();
 80024ca:	f7ff ff23 	bl	8002314 <dvc_exec_msr_dc_resistance_4p>
					break;
 80024ce:	e003      	b.n	80024d8 <run_device+0x118>
				case IMPEDANCE_SPECTROSCOPY_4P:
					dvc_exec_msr_impedance_spectroscopy_4p();
 80024d0:	f7ff ff6e 	bl	80023b0 <dvc_exec_msr_impedance_spectroscopy_4p>
					break;
 80024d4:	e000      	b.n	80024d8 <run_device+0x118>
				default:
					break;
 80024d6:	bf00      	nop
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 80024d8:	e7a1      	b.n	800241e <run_device+0x5e>
 80024da:	bf00      	nop
 80024dc:	2000cad4 	.word	0x2000cad4
 80024e0:	2000ced4 	.word	0x2000ced4
 80024e4:	004c4b40 	.word	0x004c4b40
 80024e8:	20000ad4 	.word	0x20000ad4
 80024ec:	20004ad4 	.word	0x20004ad4
 80024f0:	20008ad4 	.word	0x20008ad4

080024f4 <init_switch_network>:
        ,SWNT_CTRL_09_Pin,SWNT_CTRL_10_Pin,SWNT_CTRL_11_Pin,SWNT_CTRL_12_Pin
        ,SWNT_CTRL_13_Pin,SWNT_CTRL_14_Pin,SWNT_CTRL_15_Pin,SWNT_CTRL_16_Pin
		,SWNT_CTRL_17_Pin,SWNT_CTRL_18_Pin,SWNT_CTRL_19_Pin,SWNT_CTRL_20_Pin
		,SWNT_CTRL_21_Pin};

void init_switch_network(SwitchNetwork_TypeDef* switch_network){
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 80024fc:	2301      	movs	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e040      	b.n	8002584 <init_switch_network+0x90>
		switch_network->Relays[i].RelayId = i;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	b2d8      	uxtb	r0, r3
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	4602      	mov	r2, r0
 8002516:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].AssociatedProbe = 0;
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3301      	adds	r3, #1
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	3302      	adds	r3, #2
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].AssociatedGPIOPort = (i < 17) ? GPIOG : GPIOD;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b10      	cmp	r3, #16
 8002544:	dc01      	bgt.n	800254a <init_switch_network+0x56>
 8002546:	4914      	ldr	r1, [pc, #80]	@ (8002598 <init_switch_network+0xa4>)
 8002548:	e000      	b.n	800254c <init_switch_network+0x58>
 800254a:	4914      	ldr	r1, [pc, #80]	@ (800259c <init_switch_network+0xa8>)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4403      	add	r3, r0
 800255a:	3304      	adds	r3, #4
 800255c:	6019      	str	r1, [r3, #0]
		switch_network->Relays[i].AssociatedGPIO = swnt_pin_list[i-1];
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3b01      	subs	r3, #1
 8002562:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <init_switch_network+0xac>)
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	b298      	uxth	r0, r3
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3308      	adds	r3, #8
 800257a:	4602      	mov	r2, r0
 800257c:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3301      	adds	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b15      	cmp	r3, #21
 8002588:	ddbb      	ble.n	8002502 <init_switch_network+0xe>
	}
	return;
 800258a:	bf00      	nop
}
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	42021800 	.word	0x42021800
 800259c:	42020c00 	.word	0x42020c00
 80025a0:	2000001c 	.word	0x2000001c

080025a4 <clear_switch_network>:

void clear_switch_network(SwitchNetwork_TypeDef* switch_network){
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 80025ac:	2301      	movs	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	e02b      	b.n	800260a <clear_switch_network+0x66>
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3302      	adds	r3, #2
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(switch_network->Relays[i].AssociatedGPIOPort,
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3304      	adds	r3, #4
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3308      	adds	r3, #8
 80025e8:	881c      	ldrh	r4, [r3, #0]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3302      	adds	r3, #2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4621      	mov	r1, r4
 8002600:	f001 fc16 	bl	8003e30 <HAL_GPIO_WritePin>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3301      	adds	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b15      	cmp	r3, #21
 800260e:	ddd0      	ble.n	80025b2 <clear_switch_network+0xe>
						  switch_network->Relays[i].AssociatedGPIO,
						  switch_network->Relays[i].RelayState);
	}
	return;
 8002610:	bf00      	nop
}
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bd90      	pop	{r4, r7, pc}

08002618 <set_switch_network>:
void set_switch_network(SwitchNetwork_TypeDef* switch_network){
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	if(!switch_network->ValidSwitchNetwork) return;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8002626:	2b00      	cmp	r3, #0
 8002628:	d028      	beq.n	800267c <set_switch_network+0x64>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 800262a:	2301      	movs	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e021      	b.n	8002674 <set_switch_network+0x5c>
		HAL_GPIO_WritePin(switch_network->Relays[i].AssociatedGPIOPort,
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3304      	adds	r3, #4
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	3308      	adds	r3, #8
 8002652:	881c      	ldrh	r4, [r3, #0]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3302      	adds	r3, #2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	4621      	mov	r1, r4
 800266a:	f001 fbe1 	bl	8003e30 <HAL_GPIO_WritePin>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3301      	adds	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b15      	cmp	r3, #21
 8002678:	ddda      	ble.n	8002630 <set_switch_network+0x18>
						  switch_network->Relays[i].AssociatedGPIO,
						  switch_network->Relays[i].RelayState);
	}
	return;
 800267a:	e000      	b.n	800267e <set_switch_network+0x66>
	if(!switch_network->ValidSwitchNetwork) return;
 800267c:	bf00      	nop
}
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bd90      	pop	{r4, r7, pc}

08002684 <map_switch_network>:
void map_switch_network(SwitchNetwork_TypeDef* switch_network, uint32_t switch_network_config){
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	// set the basic flags
	switch_network->ValidSwitchNetwork = 1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	uint8_t volt_src_1_used = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	77fb      	strb	r3, [r7, #31]
	uint8_t adc_1_used = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	777b      	strb	r3, [r7, #29]
	uint8_t adc_2_used = 0;	// only ADC2 can do current sensing and has prio over adc1
 800269e:	2300      	movs	r3, #0
 80026a0:	77bb      	strb	r3, [r7, #30]
	uint8_t adc_3_used = 0; // not populated on PCB yet
 80026a2:	2300      	movs	r3, #0
 80026a4:	773b      	strb	r3, [r7, #28]
	uint8_t used_probes = switch_network_config & 0x0F;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	76fb      	strb	r3, [r7, #27]

	// decode configuration values
	uint8_t probe_1_cfg = (switch_network_config >> 4) & 0x1F;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	76bb      	strb	r3, [r7, #26]
	uint8_t probe_2_cfg = (switch_network_config >> 9) & 0x1F;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	0a5b      	lsrs	r3, r3, #9
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	767b      	strb	r3, [r7, #25]
	uint8_t probe_3_cfg = (switch_network_config >> 14)& 0x1F;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	0b9b      	lsrs	r3, r3, #14
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	763b      	strb	r3, [r7, #24]
	uint8_t probe_4_cfg = (switch_network_config >> 19)& 0x1F;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	0cdb      	lsrs	r3, r3, #19
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	75fb      	strb	r3, [r7, #23]

	// decode source configurations
	uint8_t probe_1_cfg_src = (probe_1_cfg >> 2) & 0x07;
 80026e0:	7ebb      	ldrb	r3, [r7, #26]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	75bb      	strb	r3, [r7, #22]
	uint8_t probe_2_cfg_src = (probe_2_cfg >> 2) & 0x07;
 80026ec:	7e7b      	ldrb	r3, [r7, #25]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	757b      	strb	r3, [r7, #21]
	uint8_t probe_3_cfg_src = (probe_3_cfg >> 2) & 0x07;
 80026f8:	7e3b      	ldrb	r3, [r7, #24]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	753b      	strb	r3, [r7, #20]
	uint8_t probe_4_cfg_src = (probe_4_cfg >> 2) & 0x07;
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	74fb      	strb	r3, [r7, #19]

	// decode monitor configurations
	uint8_t probe_1_cfg_mon = (probe_1_cfg) & 0x03;
 8002710:	7ebb      	ldrb	r3, [r7, #26]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	74bb      	strb	r3, [r7, #18]
	uint8_t probe_2_cfg_mon = (probe_2_cfg) & 0x03;
 8002718:	7e7b      	ldrb	r3, [r7, #25]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	747b      	strb	r3, [r7, #17]
	uint8_t probe_3_cfg_mon = (probe_3_cfg) & 0x03;
 8002720:	7e3b      	ldrb	r3, [r7, #24]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	743b      	strb	r3, [r7, #16]
	uint8_t probe_4_cfg_mon = (probe_4_cfg) & 0x03;
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	73fb      	strb	r3, [r7, #15]

	// --------------------------------------------------------------------
	// PROBE 1 CFG
	if(used_probes & 0x01){
 8002730:	7efb      	ldrb	r3, [r7, #27]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d041      	beq.n	80027be <map_switch_network+0x13a>
		if(probe_1_cfg_src == 0){}
 800273a:	7dbb      	ldrb	r3, [r7, #22]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02e      	beq.n	800279e <map_switch_network+0x11a>
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_DCV){
 8002740:	7dbb      	ldrb	r3, [r7, #22]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10c      	bne.n	8002760 <map_switch_network+0xdc>
			if(!volt_src_1_used){
 8002746:	7ffb      	ldrb	r3, [r7, #31]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <map_switch_network+0xd4>
				switch_network->Relays[1].RelayState = GPIO_PIN_SET;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	739a      	strb	r2, [r3, #14]
				volt_src_1_used = 1;
 8002752:	2301      	movs	r3, #1
 8002754:	77fb      	strb	r3, [r7, #31]
 8002756:	e022      	b.n	800279e <map_switch_network+0x11a>
			}
			else{
				switch_network->Relays[2].RelayState = GPIO_PIN_SET;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	769a      	strb	r2, [r3, #26]
 800275e:	e01e      	b.n	800279e <map_switch_network+0x11a>
			}
		}
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_ACV){
 8002760:	7dbb      	ldrb	r3, [r7, #22]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d10c      	bne.n	8002780 <map_switch_network+0xfc>
			if(!volt_src_1_used){
 8002766:	7ffb      	ldrb	r3, [r7, #31]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <map_switch_network+0xf4>
				switch_network->Relays[1].RelayState = GPIO_PIN_SET;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	739a      	strb	r2, [r3, #14]
				volt_src_1_used = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e012      	b.n	800279e <map_switch_network+0x11a>
			}
			else{
				switch_network->Relays[2].RelayState = GPIO_PIN_SET;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	769a      	strb	r2, [r3, #26]
 800277e:	e00e      	b.n	800279e <map_switch_network+0x11a>
			}
		}
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_CUR){
 8002780:	7dbb      	ldrb	r3, [r7, #22]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d104      	bne.n	8002790 <map_switch_network+0x10c>
			switch_network->Relays[3].RelayState = GPIO_PIN_SET;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800278e:	e006      	b.n	800279e <map_switch_network+0x11a>
		}
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_GND){
 8002790:	7dbb      	ldrb	r3, [r7, #22]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d103      	bne.n	800279e <map_switch_network+0x11a>
			switch_network->Relays[4].RelayState = GPIO_PIN_SET;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		}

		if(probe_1_cfg_mon == 0){}
 800279e:	7cbb      	ldrb	r3, [r7, #18]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00c      	beq.n	80027be <map_switch_network+0x13a>
		else if(probe_1_cfg_mon == DVC_PROBE_MEASURE_VOL){
 80027a4:	7cbb      	ldrb	r3, [r7, #18]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <map_switch_network+0x12c>
			adc_2_used = 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	77bb      	strb	r3, [r7, #30]
 80027ae:	e006      	b.n	80027be <map_switch_network+0x13a>
		}
		else if(probe_1_cfg_mon == DVC_PROBE_MEASURE_CUR){
 80027b0:	7cbb      	ldrb	r3, [r7, #18]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d103      	bne.n	80027be <map_switch_network+0x13a>
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	}
	// --------------------------------------------------------------------

	// --------------------------------------------------------------------
	// PROBE 2 CFG
	if(used_probes & 0x02){
 80027be:	7efb      	ldrb	r3, [r7, #27]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d051      	beq.n	800286c <map_switch_network+0x1e8>
		if(probe_2_cfg_src == 0){}
 80027c8:	7d7b      	ldrb	r3, [r7, #21]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d032      	beq.n	8002834 <map_switch_network+0x1b0>
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_DCV){
 80027ce:	7d7b      	ldrb	r3, [r7, #21]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d10e      	bne.n	80027f2 <map_switch_network+0x16e>
			if(!volt_src_1_used){
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <map_switch_network+0x164>
				switch_network->Relays[5].RelayState = GPIO_PIN_SET;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
				volt_src_1_used = 1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	77fb      	strb	r3, [r7, #31]
 80027e6:	e025      	b.n	8002834 <map_switch_network+0x1b0>
			}
			else{
				switch_network->Relays[6].RelayState = GPIO_PIN_SET;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 80027f0:	e020      	b.n	8002834 <map_switch_network+0x1b0>
			}
		}
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_ACV){
 80027f2:	7d7b      	ldrb	r3, [r7, #21]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d10e      	bne.n	8002816 <map_switch_network+0x192>
			if(!volt_src_1_used){
 80027f8:	7ffb      	ldrb	r3, [r7, #31]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <map_switch_network+0x188>
				switch_network->Relays[5].RelayState = GPIO_PIN_SET;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
				volt_src_1_used = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	77fb      	strb	r3, [r7, #31]
 800280a:	e013      	b.n	8002834 <map_switch_network+0x1b0>
			}
			else{
				switch_network->Relays[6].RelayState = GPIO_PIN_SET;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8002814:	e00e      	b.n	8002834 <map_switch_network+0x1b0>
			}
		}
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_CUR){
 8002816:	7d7b      	ldrb	r3, [r7, #21]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d104      	bne.n	8002826 <map_switch_network+0x1a2>
			switch_network->Relays[7].RelayState = GPIO_PIN_SET;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
 8002824:	e006      	b.n	8002834 <map_switch_network+0x1b0>
		}
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_GND){
 8002826:	7d7b      	ldrb	r3, [r7, #21]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d103      	bne.n	8002834 <map_switch_network+0x1b0>
			switch_network->Relays[8].RelayState = GPIO_PIN_SET;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
		}

		if(probe_2_cfg_mon == 0){}
 8002834:	7c7b      	ldrb	r3, [r7, #17]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <map_switch_network+0x1e8>
		else if(probe_2_cfg_mon == DVC_PROBE_MEASURE_VOL){
 800283a:	7c7b      	ldrb	r3, [r7, #17]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10e      	bne.n	800285e <map_switch_network+0x1da>
			if(!adc_2_used){
 8002840:	7fbb      	ldrb	r3, [r7, #30]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <map_switch_network+0x1d0>
				switch_network->Relays[18].RelayState = GPIO_PIN_SET;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				adc_2_used = 1;
 800284e:	2301      	movs	r3, #1
 8002850:	77bb      	strb	r3, [r7, #30]
 8002852:	e00b      	b.n	800286c <map_switch_network+0x1e8>
			}
			else{
				switch_network->Relays[17].RelayState = GPIO_PIN_SET;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
 800285c:	e006      	b.n	800286c <map_switch_network+0x1e8>
			}
		}
		else if(probe_2_cfg_mon == DVC_PROBE_MEASURE_CUR){
 800285e:	7c7b      	ldrb	r3, [r7, #17]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d103      	bne.n	800286c <map_switch_network+0x1e8>
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	}
	// --------------------------------------------------------------------

	// --------------------------------------------------------------------
	// PROBE 3 CFG
	if(used_probes & 0x04){
 800286c:	7efb      	ldrb	r3, [r7, #27]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d051      	beq.n	800291a <map_switch_network+0x296>
		if(probe_3_cfg_src == 0){}
 8002876:	7d3b      	ldrb	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d032      	beq.n	80028e2 <map_switch_network+0x25e>
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_DCV){
 800287c:	7d3b      	ldrb	r3, [r7, #20]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10e      	bne.n	80028a0 <map_switch_network+0x21c>
			if(!volt_src_1_used){
 8002882:	7ffb      	ldrb	r3, [r7, #31]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <map_switch_network+0x212>
				switch_network->Relays[9].RelayState = GPIO_PIN_SET;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
				volt_src_1_used = 1;
 8002890:	2301      	movs	r3, #1
 8002892:	77fb      	strb	r3, [r7, #31]
 8002894:	e025      	b.n	80028e2 <map_switch_network+0x25e>
			}
			else{
				switch_network->Relays[10].RelayState = GPIO_PIN_SET;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 800289e:	e020      	b.n	80028e2 <map_switch_network+0x25e>
			}
		}
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_ACV){
 80028a0:	7d3b      	ldrb	r3, [r7, #20]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d10e      	bne.n	80028c4 <map_switch_network+0x240>
			if(!volt_src_1_used){
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <map_switch_network+0x236>
				switch_network->Relays[9].RelayState = GPIO_PIN_SET;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
				volt_src_1_used = 1;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e013      	b.n	80028e2 <map_switch_network+0x25e>
			}
			else{
				switch_network->Relays[10].RelayState = GPIO_PIN_SET;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 80028c2:	e00e      	b.n	80028e2 <map_switch_network+0x25e>
			}
		}
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_CUR){
 80028c4:	7d3b      	ldrb	r3, [r7, #20]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d104      	bne.n	80028d4 <map_switch_network+0x250>
			switch_network->Relays[11].RelayState = GPIO_PIN_SET;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 80028d2:	e006      	b.n	80028e2 <map_switch_network+0x25e>
		}
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_GND){
 80028d4:	7d3b      	ldrb	r3, [r7, #20]
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d103      	bne.n	80028e2 <map_switch_network+0x25e>
			switch_network->Relays[12].RelayState = GPIO_PIN_SET;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
		}

		if(probe_3_cfg_mon == 0){}
 80028e2:	7c3b      	ldrb	r3, [r7, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d018      	beq.n	800291a <map_switch_network+0x296>
		else if(probe_3_cfg_mon == DVC_PROBE_MEASURE_VOL){
 80028e8:	7c3b      	ldrb	r3, [r7, #16]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d10e      	bne.n	800290c <map_switch_network+0x288>
			if(!adc_2_used){
 80028ee:	7fbb      	ldrb	r3, [r7, #30]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <map_switch_network+0x27e>
				switch_network->Relays[20].RelayState = GPIO_PIN_SET;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
				adc_2_used = 1;
 80028fc:	2301      	movs	r3, #1
 80028fe:	77bb      	strb	r3, [r7, #30]
 8002900:	e00b      	b.n	800291a <map_switch_network+0x296>
			}
			else{
				switch_network->Relays[19].RelayState = GPIO_PIN_SET;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
 800290a:	e006      	b.n	800291a <map_switch_network+0x296>
			}
		}
		else if(probe_3_cfg_mon == DVC_PROBE_MEASURE_CUR){
 800290c:	7c3b      	ldrb	r3, [r7, #16]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d103      	bne.n	800291a <map_switch_network+0x296>
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	}
	// --------------------------------------------------------------------

	// --------------------------------------------------------------------
	// PROBE 4 CFG
	if(used_probes & 0x08){
 800291a:	7efb      	ldrb	r3, [r7, #27]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05a      	beq.n	80029da <map_switch_network+0x356>
		if(probe_4_cfg_src == 0){}
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d032      	beq.n	8002990 <map_switch_network+0x30c>
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_DCV){
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10e      	bne.n	800294e <map_switch_network+0x2ca>
			if(!volt_src_1_used){
 8002930:	7ffb      	ldrb	r3, [r7, #31]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <map_switch_network+0x2c0>
				switch_network->Relays[13].RelayState = GPIO_PIN_SET;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
				volt_src_1_used = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	77fb      	strb	r3, [r7, #31]
 8002942:	e025      	b.n	8002990 <map_switch_network+0x30c>
			}
			else{
				switch_network->Relays[14].RelayState = GPIO_PIN_SET;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 800294c:	e020      	b.n	8002990 <map_switch_network+0x30c>
			}
		}
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_ACV){
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d10e      	bne.n	8002972 <map_switch_network+0x2ee>
			if(!volt_src_1_used){
 8002954:	7ffb      	ldrb	r3, [r7, #31]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <map_switch_network+0x2e4>
				switch_network->Relays[13].RelayState = GPIO_PIN_SET;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
				volt_src_1_used = 1;
 8002962:	2301      	movs	r3, #1
 8002964:	77fb      	strb	r3, [r7, #31]
 8002966:	e013      	b.n	8002990 <map_switch_network+0x30c>
			}
			else{
				switch_network->Relays[14].RelayState = GPIO_PIN_SET;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 8002970:	e00e      	b.n	8002990 <map_switch_network+0x30c>
			}
		}
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_CUR){
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d104      	bne.n	8002982 <map_switch_network+0x2fe>
			switch_network->Relays[15].RelayState = GPIO_PIN_SET;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
 8002980:	e006      	b.n	8002990 <map_switch_network+0x30c>
		}
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_GND){
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d103      	bne.n	8002990 <map_switch_network+0x30c>
			switch_network->Relays[16].RelayState = GPIO_PIN_SET;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		}

		if(probe_4_cfg_mon == 0){}
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d021      	beq.n	80029da <map_switch_network+0x356>
		else if(probe_4_cfg_mon == DVC_PROBE_MEASURE_VOL){
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d116      	bne.n	80029ca <map_switch_network+0x346>
			if(!adc_2_used){
 800299c:	7fbb      	ldrb	r3, [r7, #30]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <map_switch_network+0x334>
				switch_network->Relays[18].RelayState = GPIO_PIN_SET;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				switch_network->Relays[20].RelayState = GPIO_PIN_SET;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
				adc_2_used = 1;
 80029b2:	2301      	movs	r3, #1
 80029b4:	77bb      	strb	r3, [r7, #30]
		else if(probe_4_cfg_mon == DVC_PROBE_MEASURE_CUR){
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
		}
	}
	// --------------------------------------------------------------------
	return;
 80029b6:	e010      	b.n	80029da <map_switch_network+0x356>
				switch_network->Relays[17].RelayState = GPIO_PIN_SET;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
				switch_network->Relays[19].RelayState = GPIO_PIN_SET;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
	return;
 80029c8:	e007      	b.n	80029da <map_switch_network+0x356>
		else if(probe_4_cfg_mon == DVC_PROBE_MEASURE_CUR){
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d104      	bne.n	80029da <map_switch_network+0x356>
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	return;
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
}
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_Init+0x50>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <HAL_Init+0x50>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 f98c 	bl	8002d16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80029fe:	f004 fab5 	bl	8006f6c <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_Init+0x54>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	490c      	ldr	r1, [pc, #48]	@ (8002a40 <HAL_Init+0x58>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	4a0b      	ldr	r2, [pc, #44]	@ (8002a44 <HAL_Init+0x5c>)
 8002a16:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002a18:	2004      	movs	r0, #4
 8002a1a:	f000 f9d1 	bl	8002dc0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1e:	200f      	movs	r0, #15
 8002a20:	f000 f812 	bl	8002a48 <HAL_InitTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e002      	b.n	8002a34 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a2e:	f7fe fd67 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	46020c00 	.word	0x46020c00
 8002a40:	0800e898 	.word	0x0800e898
 8002a44:	20000000 	.word	0x20000000

08002a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002a54:	4b33      	ldr	r3, [pc, #204]	@ (8002b24 <HAL_InitTick+0xdc>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e05c      	b.n	8002b1a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002a60:	4b31      	ldr	r3, [pc, #196]	@ (8002b28 <HAL_InitTick+0xe0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d10c      	bne.n	8002a86 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b2c <HAL_InitTick+0xe4>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b2c      	ldr	r3, [pc, #176]	@ (8002b24 <HAL_InitTick+0xdc>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e037      	b.n	8002af6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002a86:	f000 f9f3 	bl	8002e70 <HAL_SYSTICK_GetCLKSourceConfig>
 8002a8a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d023      	beq.n	8002ada <HAL_InitTick+0x92>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d82d      	bhi.n	8002af4 <HAL_InitTick+0xac>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_InitTick+0x5e>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002aa4:	e026      	b.n	8002af4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002aa6:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <HAL_InitTick+0xe4>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_InitTick+0xdc>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	60fb      	str	r3, [r7, #12]
        break;
 8002abe:	e01a      	b.n	8002af6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002ac0:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <HAL_InitTick+0xdc>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ace:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	60fb      	str	r3, [r7, #12]
        break;
 8002ad8:	e00d      	b.n	8002af6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002ada:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_InitTick+0xdc>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ae8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	60fb      	str	r3, [r7, #12]
        break;
 8002af2:	e000      	b.n	8002af6 <HAL_InitTick+0xae>
        break;
 8002af4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f940 	bl	8002d7c <HAL_SYSTICK_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e009      	b.n	8002b1a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b06:	2200      	movs	r2, #0
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0e:	f000 f90d 	bl	8002d2c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002b12:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <HAL_InitTick+0xe8>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000074 	.word	0x20000074
 8002b28:	e000e010 	.word	0xe000e010
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000070 	.word	0x20000070

08002b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_IncTick+0x20>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_IncTick+0x24>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <HAL_IncTick+0x24>)
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000074 	.word	0x20000074
 8002b58:	2000cfe0 	.word	0x2000cfe0

08002b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <HAL_GetTick+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	2000cfe0 	.word	0x2000cfe0

08002b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b7c:	f7ff ffee 	bl	8002b5c <HAL_GetTick>
 8002b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d005      	beq.n	8002b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <HAL_Delay+0x44>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b9a:	bf00      	nop
 8002b9c:	f7ff ffde 	bl	8002b5c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d8f7      	bhi.n	8002b9c <HAL_Delay+0x28>
  {
  }
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000074 	.word	0x20000074

08002bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bee:	4a04      	ldr	r2, [pc, #16]	@ (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	60d3      	str	r3, [r2, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <__NVIC_GetPriorityGrouping+0x18>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 0307 	and.w	r3, r3, #7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db0b      	blt.n	8002c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4907      	ldr	r1, [pc, #28]	@ (8002c58 <__NVIC_EnableIRQ+0x38>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	@ (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	@ (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	@ 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf28      	it	cs
 8002cce:	2304      	movcs	r3, #4
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
         );
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ff4c 	bl	8002bbc <__NVIC_SetPriorityGrouping>
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3a:	f7ff ff63 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002d3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	6978      	ldr	r0, [r7, #20]
 8002d46:	f7ff ffb3 	bl	8002cb0 <NVIC_EncodePriority>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff82 	bl	8002c5c <__NVIC_SetPriority>
}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff56 	bl	8002c20 <__NVIC_EnableIRQ>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00d      	b.n	8002dae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002d92:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <HAL_SYSTICK_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002d9a:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <HAL_SYSTICK_Config+0x40>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_SYSTICK_Config+0x40>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a05      	ldr	r2, [pc, #20]	@ (8002dbc <HAL_SYSTICK_Config+0x40>)
 8002da6:	f043 0303 	orr.w	r3, r3, #3
 8002daa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d844      	bhi.n	8002e58 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002dce:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002df7 	.word	0x08002df7
 8002dd8:	08002e15 	.word	0x08002e15
 8002ddc:	08002e37 	.word	0x08002e37
 8002de0:	08002e59 	.word	0x08002e59
 8002de4:	08002de9 	.word	0x08002de9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002de8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1e      	ldr	r2, [pc, #120]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6013      	str	r3, [r2, #0]
      break;
 8002df4:	e031      	b.n	8002e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002df6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002e02:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e08:	4a18      	ldr	r2, [pc, #96]	@ (8002e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e0a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002e12:	e022      	b.n	8002e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002e14:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a13      	ldr	r2, [pc, #76]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e1a:	f023 0304 	bic.w	r3, r3, #4
 8002e1e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002e20:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e26:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002e2a:	4a10      	ldr	r2, [pc, #64]	@ (8002e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002e34:	e011      	b.n	8002e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002e36:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e3c:	f023 0304 	bic.w	r3, r3, #4
 8002e40:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002e42:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e48:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002e4c:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002e56:	e000      	b.n	8002e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002e58:	bf00      	nop
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e010 	.word	0xe000e010
 8002e6c:	46020c00 	.word	0x46020c00

08002e70 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002e76:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002e82:	2304      	movs	r3, #4
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	e021      	b.n	8002ecc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e8e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002e92:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e9a:	d011      	beq.n	8002ec0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ea2:	d810      	bhi.n	8002ec6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb0:	d003      	beq.n	8002eba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002eb2:	e008      	b.n	8002ec6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	607b      	str	r3, [r7, #4]
        break;
 8002eb8:	e008      	b.n	8002ecc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	607b      	str	r3, [r7, #4]
        break;
 8002ebe:	e005      	b.n	8002ecc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	607b      	str	r3, [r7, #4]
        break;
 8002ec4:	e002      	b.n	8002ecc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
        break;
 8002eca:	bf00      	nop
    }
  }
  return systick_source;
 8002ecc:	687b      	ldr	r3, [r7, #4]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000e010 	.word	0xe000e010
 8002ee0:	46020c00 	.word	0x46020c00

08002ee4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7ff fe36 	bl	8002b5c <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0db      	b.n	80030b4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a6e      	ldr	r2, [pc, #440]	@ (80030bc <HAL_DMA_Init+0x1d8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	f000 809f 	beq.w	8003046 <HAL_DMA_Init+0x162>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6c      	ldr	r2, [pc, #432]	@ (80030c0 <HAL_DMA_Init+0x1dc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	f000 8099 	beq.w	8003046 <HAL_DMA_Init+0x162>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6a      	ldr	r2, [pc, #424]	@ (80030c4 <HAL_DMA_Init+0x1e0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	f000 8093 	beq.w	8003046 <HAL_DMA_Init+0x162>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a68      	ldr	r2, [pc, #416]	@ (80030c8 <HAL_DMA_Init+0x1e4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	f000 808d 	beq.w	8003046 <HAL_DMA_Init+0x162>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a66      	ldr	r2, [pc, #408]	@ (80030cc <HAL_DMA_Init+0x1e8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	f000 8087 	beq.w	8003046 <HAL_DMA_Init+0x162>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a64      	ldr	r2, [pc, #400]	@ (80030d0 <HAL_DMA_Init+0x1ec>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	f000 8081 	beq.w	8003046 <HAL_DMA_Init+0x162>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a62      	ldr	r2, [pc, #392]	@ (80030d4 <HAL_DMA_Init+0x1f0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d07b      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a61      	ldr	r2, [pc, #388]	@ (80030d8 <HAL_DMA_Init+0x1f4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d076      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5f      	ldr	r2, [pc, #380]	@ (80030dc <HAL_DMA_Init+0x1f8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d071      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5e      	ldr	r2, [pc, #376]	@ (80030e0 <HAL_DMA_Init+0x1fc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d06c      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5c      	ldr	r2, [pc, #368]	@ (80030e4 <HAL_DMA_Init+0x200>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d067      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80030e8 <HAL_DMA_Init+0x204>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d062      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a59      	ldr	r2, [pc, #356]	@ (80030ec <HAL_DMA_Init+0x208>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d05d      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a58      	ldr	r2, [pc, #352]	@ (80030f0 <HAL_DMA_Init+0x20c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d058      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a56      	ldr	r2, [pc, #344]	@ (80030f4 <HAL_DMA_Init+0x210>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d053      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a55      	ldr	r2, [pc, #340]	@ (80030f8 <HAL_DMA_Init+0x214>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d04e      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a53      	ldr	r2, [pc, #332]	@ (80030fc <HAL_DMA_Init+0x218>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d049      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a52      	ldr	r2, [pc, #328]	@ (8003100 <HAL_DMA_Init+0x21c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d044      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a50      	ldr	r2, [pc, #320]	@ (8003104 <HAL_DMA_Init+0x220>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d03f      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a4f      	ldr	r2, [pc, #316]	@ (8003108 <HAL_DMA_Init+0x224>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d03a      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a4d      	ldr	r2, [pc, #308]	@ (800310c <HAL_DMA_Init+0x228>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d035      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a4c      	ldr	r2, [pc, #304]	@ (8003110 <HAL_DMA_Init+0x22c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d030      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8003114 <HAL_DMA_Init+0x230>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d02b      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a49      	ldr	r2, [pc, #292]	@ (8003118 <HAL_DMA_Init+0x234>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d026      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a47      	ldr	r2, [pc, #284]	@ (800311c <HAL_DMA_Init+0x238>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d021      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a46      	ldr	r2, [pc, #280]	@ (8003120 <HAL_DMA_Init+0x23c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d01c      	beq.n	8003046 <HAL_DMA_Init+0x162>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a44      	ldr	r2, [pc, #272]	@ (8003124 <HAL_DMA_Init+0x240>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d017      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a43      	ldr	r2, [pc, #268]	@ (8003128 <HAL_DMA_Init+0x244>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d012      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a41      	ldr	r2, [pc, #260]	@ (800312c <HAL_DMA_Init+0x248>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00d      	beq.n	8003046 <HAL_DMA_Init+0x162>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a40      	ldr	r2, [pc, #256]	@ (8003130 <HAL_DMA_Init+0x24c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d008      	beq.n	8003046 <HAL_DMA_Init+0x162>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3e      	ldr	r2, [pc, #248]	@ (8003134 <HAL_DMA_Init+0x250>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <HAL_DMA_Init+0x162>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a3d      	ldr	r2, [pc, #244]	@ (8003138 <HAL_DMA_Init+0x254>)
 8003044:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0206 	orr.w	r2, r2, #6
 8003064:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003066:	e00f      	b.n	8003088 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003068:	f7ff fd78 	bl	8002b5c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b05      	cmp	r3, #5
 8003074:	d908      	bls.n	8003088 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2210      	movs	r2, #16
 800307a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2203      	movs	r2, #3
 8003080:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e015      	b.n	80030b4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e8      	bne.n	8003068 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa72 	bl	8003580 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40020050 	.word	0x40020050
 80030c0:	50020050 	.word	0x50020050
 80030c4:	400200d0 	.word	0x400200d0
 80030c8:	500200d0 	.word	0x500200d0
 80030cc:	40020150 	.word	0x40020150
 80030d0:	50020150 	.word	0x50020150
 80030d4:	400201d0 	.word	0x400201d0
 80030d8:	500201d0 	.word	0x500201d0
 80030dc:	40020250 	.word	0x40020250
 80030e0:	50020250 	.word	0x50020250
 80030e4:	400202d0 	.word	0x400202d0
 80030e8:	500202d0 	.word	0x500202d0
 80030ec:	40020350 	.word	0x40020350
 80030f0:	50020350 	.word	0x50020350
 80030f4:	400203d0 	.word	0x400203d0
 80030f8:	500203d0 	.word	0x500203d0
 80030fc:	40020450 	.word	0x40020450
 8003100:	50020450 	.word	0x50020450
 8003104:	400204d0 	.word	0x400204d0
 8003108:	500204d0 	.word	0x500204d0
 800310c:	40020550 	.word	0x40020550
 8003110:	50020550 	.word	0x50020550
 8003114:	400205d0 	.word	0x400205d0
 8003118:	500205d0 	.word	0x500205d0
 800311c:	40020650 	.word	0x40020650
 8003120:	50020650 	.word	0x50020650
 8003124:	400206d0 	.word	0x400206d0
 8003128:	500206d0 	.word	0x500206d0
 800312c:	40020750 	.word	0x40020750
 8003130:	50020750 	.word	0x50020750
 8003134:	400207d0 	.word	0x400207d0
 8003138:	500207d0 	.word	0x500207d0

0800313c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e04f      	b.n	80031f4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_DMA_Start_IT+0x26>
 800315e:	2302      	movs	r3, #2
 8003160:	e048      	b.n	80031f4 <HAL_DMA_Start_IT+0xb8>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d136      	bne.n	80031e4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f9d3 	bl	8003536 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800319e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031ce:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e007      	b.n	80031f4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2240      	movs	r2, #64	@ 0x40
 80031e8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800320c:	f023 030f 	bic.w	r3, r3, #15
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321a:	3b50      	subs	r3, #80	@ 0x50
 800321c:	09db      	lsrs	r3, r3, #7
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2201      	movs	r2, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 813b 	beq.w	80034b2 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003246:	2b00      	cmp	r3, #0
 8003248:	d011      	beq.n	800326e <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003260:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003278:	2b00      	cmp	r3, #0
 800327a:	d011      	beq.n	80032a0 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003292:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	f043 0202 	orr.w	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d011      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032c4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ca:	f043 0204 	orr.w	r2, r3, #4
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d011      	beq.n	8003304 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80032f6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fc:	f043 0208 	orr.w	r2, r3, #8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800330e:	2b00      	cmp	r3, #0
 8003310:	d013      	beq.n	800333a <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00c      	beq.n	800333a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003328:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d04c      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800335e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b04      	cmp	r3, #4
 800336a:	d12e      	bne.n	80033ca <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800337a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0202 	orr.w	r2, r2, #2
 800338a:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a4:	2201      	movs	r2, #1
 80033a6:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d07a      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
        }

        return;
 80033c8:	e075      	b.n	80034b6 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2205      	movs	r2, #5
 80033ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d039      	beq.n	8003464 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d032      	beq.n	8003464 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d116      	bne.n	8003442 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341a:	2b00      	cmp	r3, #0
 800341c:	d111      	bne.n	8003442 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800342a:	2201      	movs	r2, #1
 800342c:	731a      	strb	r2, [r3, #12]
 800342e:	e008      	b.n	8003442 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800344a:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003468:	2b00      	cmp	r3, #0
 800346a:	d025      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0202 	orr.w	r2, r2, #2
 800347a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003494:	2201      	movs	r2, #1
 8003496:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
 80034b0:	e002      	b.n	80034b8 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80034b6:	bf00      	nop
    }
  }
}
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e02b      	b.n	800352a <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80034da:	f023 030f 	bic.w	r3, r3, #15
 80034de:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e8:	3b50      	subs	r3, #80	@ 0x50
 80034ea:	09db      	lsrs	r3, r3, #7
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2201      	movs	r2, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f003 0311 	and.w	r3, r3, #17
 8003508:	2b11      	cmp	r3, #17
 800350a:	d106      	bne.n	800351a <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	e006      	b.n	8003528 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	43db      	mvns	r3, r3
 8003522:	401a      	ands	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	b291      	uxth	r1, r2
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	430b      	orrs	r3, r1
 8003558:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003562:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	430a      	orrs	r2, r1
 80035a0:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a53      	ldr	r2, [pc, #332]	@ (800370c <DMA_Init+0x18c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	f000 80a0 	beq.w	8003706 <DMA_Init+0x186>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a51      	ldr	r2, [pc, #324]	@ (8003710 <DMA_Init+0x190>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	f000 809a 	beq.w	8003706 <DMA_Init+0x186>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a4f      	ldr	r2, [pc, #316]	@ (8003714 <DMA_Init+0x194>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	f000 8094 	beq.w	8003706 <DMA_Init+0x186>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a4d      	ldr	r2, [pc, #308]	@ (8003718 <DMA_Init+0x198>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	f000 808e 	beq.w	8003706 <DMA_Init+0x186>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a4b      	ldr	r2, [pc, #300]	@ (800371c <DMA_Init+0x19c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	f000 8088 	beq.w	8003706 <DMA_Init+0x186>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a49      	ldr	r2, [pc, #292]	@ (8003720 <DMA_Init+0x1a0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	f000 8082 	beq.w	8003706 <DMA_Init+0x186>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a47      	ldr	r2, [pc, #284]	@ (8003724 <DMA_Init+0x1a4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d07c      	beq.n	8003706 <DMA_Init+0x186>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a45      	ldr	r2, [pc, #276]	@ (8003728 <DMA_Init+0x1a8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d077      	beq.n	8003706 <DMA_Init+0x186>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a44      	ldr	r2, [pc, #272]	@ (800372c <DMA_Init+0x1ac>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d072      	beq.n	8003706 <DMA_Init+0x186>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a42      	ldr	r2, [pc, #264]	@ (8003730 <DMA_Init+0x1b0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d06d      	beq.n	8003706 <DMA_Init+0x186>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a41      	ldr	r2, [pc, #260]	@ (8003734 <DMA_Init+0x1b4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d068      	beq.n	8003706 <DMA_Init+0x186>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3f      	ldr	r2, [pc, #252]	@ (8003738 <DMA_Init+0x1b8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d063      	beq.n	8003706 <DMA_Init+0x186>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a3e      	ldr	r2, [pc, #248]	@ (800373c <DMA_Init+0x1bc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d05e      	beq.n	8003706 <DMA_Init+0x186>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3c      	ldr	r2, [pc, #240]	@ (8003740 <DMA_Init+0x1c0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d059      	beq.n	8003706 <DMA_Init+0x186>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3b      	ldr	r2, [pc, #236]	@ (8003744 <DMA_Init+0x1c4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d054      	beq.n	8003706 <DMA_Init+0x186>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a39      	ldr	r2, [pc, #228]	@ (8003748 <DMA_Init+0x1c8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d04f      	beq.n	8003706 <DMA_Init+0x186>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a38      	ldr	r2, [pc, #224]	@ (800374c <DMA_Init+0x1cc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d04a      	beq.n	8003706 <DMA_Init+0x186>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a36      	ldr	r2, [pc, #216]	@ (8003750 <DMA_Init+0x1d0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d045      	beq.n	8003706 <DMA_Init+0x186>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a35      	ldr	r2, [pc, #212]	@ (8003754 <DMA_Init+0x1d4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d040      	beq.n	8003706 <DMA_Init+0x186>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a33      	ldr	r2, [pc, #204]	@ (8003758 <DMA_Init+0x1d8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d03b      	beq.n	8003706 <DMA_Init+0x186>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a32      	ldr	r2, [pc, #200]	@ (800375c <DMA_Init+0x1dc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d036      	beq.n	8003706 <DMA_Init+0x186>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a30      	ldr	r2, [pc, #192]	@ (8003760 <DMA_Init+0x1e0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d031      	beq.n	8003706 <DMA_Init+0x186>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003764 <DMA_Init+0x1e4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d02c      	beq.n	8003706 <DMA_Init+0x186>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <DMA_Init+0x1e8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d027      	beq.n	8003706 <DMA_Init+0x186>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2c      	ldr	r2, [pc, #176]	@ (800376c <DMA_Init+0x1ec>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d022      	beq.n	8003706 <DMA_Init+0x186>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003770 <DMA_Init+0x1f0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01d      	beq.n	8003706 <DMA_Init+0x186>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a29      	ldr	r2, [pc, #164]	@ (8003774 <DMA_Init+0x1f4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <DMA_Init+0x186>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a27      	ldr	r2, [pc, #156]	@ (8003778 <DMA_Init+0x1f8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <DMA_Init+0x186>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a26      	ldr	r2, [pc, #152]	@ (800377c <DMA_Init+0x1fc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00e      	beq.n	8003706 <DMA_Init+0x186>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a24      	ldr	r2, [pc, #144]	@ (8003780 <DMA_Init+0x200>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <DMA_Init+0x186>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a23      	ldr	r2, [pc, #140]	@ (8003784 <DMA_Init+0x204>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <DMA_Init+0x186>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a21      	ldr	r2, [pc, #132]	@ (8003788 <DMA_Init+0x208>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d142      	bne.n	800378c <DMA_Init+0x20c>
 8003706:	2301      	movs	r3, #1
 8003708:	e041      	b.n	800378e <DMA_Init+0x20e>
 800370a:	bf00      	nop
 800370c:	40020050 	.word	0x40020050
 8003710:	50020050 	.word	0x50020050
 8003714:	400200d0 	.word	0x400200d0
 8003718:	500200d0 	.word	0x500200d0
 800371c:	40020150 	.word	0x40020150
 8003720:	50020150 	.word	0x50020150
 8003724:	400201d0 	.word	0x400201d0
 8003728:	500201d0 	.word	0x500201d0
 800372c:	40020250 	.word	0x40020250
 8003730:	50020250 	.word	0x50020250
 8003734:	400202d0 	.word	0x400202d0
 8003738:	500202d0 	.word	0x500202d0
 800373c:	40020350 	.word	0x40020350
 8003740:	50020350 	.word	0x50020350
 8003744:	400203d0 	.word	0x400203d0
 8003748:	500203d0 	.word	0x500203d0
 800374c:	40020450 	.word	0x40020450
 8003750:	50020450 	.word	0x50020450
 8003754:	400204d0 	.word	0x400204d0
 8003758:	500204d0 	.word	0x500204d0
 800375c:	40020550 	.word	0x40020550
 8003760:	50020550 	.word	0x50020550
 8003764:	400205d0 	.word	0x400205d0
 8003768:	500205d0 	.word	0x500205d0
 800376c:	40020650 	.word	0x40020650
 8003770:	50020650 	.word	0x50020650
 8003774:	400206d0 	.word	0x400206d0
 8003778:	500206d0 	.word	0x500206d0
 800377c:	40020750 	.word	0x40020750
 8003780:	50020750 	.word	0x50020750
 8003784:	400207d0 	.word	0x400207d0
 8003788:	500207d0 	.word	0x500207d0
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d012      	beq.n	80037b8 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379a:	3b01      	subs	r3, #1
 800379c:	051b      	lsls	r3, r3, #20
 800379e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80037a2:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	3b01      	subs	r3, #1
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80037b0:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ea:	f040 80b0 	bne.w	800394e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a82      	ldr	r2, [pc, #520]	@ (80039fc <DMA_Init+0x47c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	f000 80a0 	beq.w	800393a <DMA_Init+0x3ba>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a80      	ldr	r2, [pc, #512]	@ (8003a00 <DMA_Init+0x480>)
 8003800:	4293      	cmp	r3, r2
 8003802:	f000 809a 	beq.w	800393a <DMA_Init+0x3ba>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a04 <DMA_Init+0x484>)
 800380c:	4293      	cmp	r3, r2
 800380e:	f000 8094 	beq.w	800393a <DMA_Init+0x3ba>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7c      	ldr	r2, [pc, #496]	@ (8003a08 <DMA_Init+0x488>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f000 808e 	beq.w	800393a <DMA_Init+0x3ba>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7a      	ldr	r2, [pc, #488]	@ (8003a0c <DMA_Init+0x48c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	f000 8088 	beq.w	800393a <DMA_Init+0x3ba>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a78      	ldr	r2, [pc, #480]	@ (8003a10 <DMA_Init+0x490>)
 8003830:	4293      	cmp	r3, r2
 8003832:	f000 8082 	beq.w	800393a <DMA_Init+0x3ba>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a76      	ldr	r2, [pc, #472]	@ (8003a14 <DMA_Init+0x494>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d07c      	beq.n	800393a <DMA_Init+0x3ba>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a74      	ldr	r2, [pc, #464]	@ (8003a18 <DMA_Init+0x498>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d077      	beq.n	800393a <DMA_Init+0x3ba>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a73      	ldr	r2, [pc, #460]	@ (8003a1c <DMA_Init+0x49c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d072      	beq.n	800393a <DMA_Init+0x3ba>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a71      	ldr	r2, [pc, #452]	@ (8003a20 <DMA_Init+0x4a0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d06d      	beq.n	800393a <DMA_Init+0x3ba>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a70      	ldr	r2, [pc, #448]	@ (8003a24 <DMA_Init+0x4a4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d068      	beq.n	800393a <DMA_Init+0x3ba>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6e      	ldr	r2, [pc, #440]	@ (8003a28 <DMA_Init+0x4a8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d063      	beq.n	800393a <DMA_Init+0x3ba>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6d      	ldr	r2, [pc, #436]	@ (8003a2c <DMA_Init+0x4ac>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d05e      	beq.n	800393a <DMA_Init+0x3ba>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6b      	ldr	r2, [pc, #428]	@ (8003a30 <DMA_Init+0x4b0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d059      	beq.n	800393a <DMA_Init+0x3ba>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6a      	ldr	r2, [pc, #424]	@ (8003a34 <DMA_Init+0x4b4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d054      	beq.n	800393a <DMA_Init+0x3ba>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <DMA_Init+0x4b8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04f      	beq.n	800393a <DMA_Init+0x3ba>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a67      	ldr	r2, [pc, #412]	@ (8003a3c <DMA_Init+0x4bc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d04a      	beq.n	800393a <DMA_Init+0x3ba>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <DMA_Init+0x4c0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d045      	beq.n	800393a <DMA_Init+0x3ba>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a64      	ldr	r2, [pc, #400]	@ (8003a44 <DMA_Init+0x4c4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d040      	beq.n	800393a <DMA_Init+0x3ba>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a62      	ldr	r2, [pc, #392]	@ (8003a48 <DMA_Init+0x4c8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d03b      	beq.n	800393a <DMA_Init+0x3ba>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a61      	ldr	r2, [pc, #388]	@ (8003a4c <DMA_Init+0x4cc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d036      	beq.n	800393a <DMA_Init+0x3ba>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003a50 <DMA_Init+0x4d0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <DMA_Init+0x3ba>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a5e      	ldr	r2, [pc, #376]	@ (8003a54 <DMA_Init+0x4d4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02c      	beq.n	800393a <DMA_Init+0x3ba>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5c      	ldr	r2, [pc, #368]	@ (8003a58 <DMA_Init+0x4d8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d027      	beq.n	800393a <DMA_Init+0x3ba>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a5b      	ldr	r2, [pc, #364]	@ (8003a5c <DMA_Init+0x4dc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <DMA_Init+0x3ba>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a59      	ldr	r2, [pc, #356]	@ (8003a60 <DMA_Init+0x4e0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01d      	beq.n	800393a <DMA_Init+0x3ba>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a58      	ldr	r2, [pc, #352]	@ (8003a64 <DMA_Init+0x4e4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <DMA_Init+0x3ba>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a56      	ldr	r2, [pc, #344]	@ (8003a68 <DMA_Init+0x4e8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <DMA_Init+0x3ba>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a55      	ldr	r2, [pc, #340]	@ (8003a6c <DMA_Init+0x4ec>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <DMA_Init+0x3ba>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a53      	ldr	r2, [pc, #332]	@ (8003a70 <DMA_Init+0x4f0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <DMA_Init+0x3ba>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a52      	ldr	r2, [pc, #328]	@ (8003a74 <DMA_Init+0x4f4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <DMA_Init+0x3ba>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a50      	ldr	r2, [pc, #320]	@ (8003a78 <DMA_Init+0x4f8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <DMA_Init+0x3be>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <DMA_Init+0x3c0>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e008      	b.n	8003960 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003956:	d103      	bne.n	8003960 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800395e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003966:	4b45      	ldr	r3, [pc, #276]	@ (8003a7c <DMA_Init+0x4fc>)
 8003968:	4013      	ands	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	68f9      	ldr	r1, [r7, #12]
 8003970:	430b      	orrs	r3, r1
 8003972:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2200      	movs	r2, #0
 800397a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a36      	ldr	r2, [pc, #216]	@ (8003a5c <DMA_Init+0x4dc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <DMA_Init+0x44c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a35      	ldr	r2, [pc, #212]	@ (8003a60 <DMA_Init+0x4e0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d01d      	beq.n	80039cc <DMA_Init+0x44c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a33      	ldr	r2, [pc, #204]	@ (8003a64 <DMA_Init+0x4e4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <DMA_Init+0x44c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a32      	ldr	r2, [pc, #200]	@ (8003a68 <DMA_Init+0x4e8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <DMA_Init+0x44c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a30      	ldr	r2, [pc, #192]	@ (8003a6c <DMA_Init+0x4ec>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <DMA_Init+0x44c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a70 <DMA_Init+0x4f0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <DMA_Init+0x44c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003a74 <DMA_Init+0x4f4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <DMA_Init+0x44c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a78 <DMA_Init+0x4f8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <DMA_Init+0x450>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <DMA_Init+0x452>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40020050 	.word	0x40020050
 8003a00:	50020050 	.word	0x50020050
 8003a04:	400200d0 	.word	0x400200d0
 8003a08:	500200d0 	.word	0x500200d0
 8003a0c:	40020150 	.word	0x40020150
 8003a10:	50020150 	.word	0x50020150
 8003a14:	400201d0 	.word	0x400201d0
 8003a18:	500201d0 	.word	0x500201d0
 8003a1c:	40020250 	.word	0x40020250
 8003a20:	50020250 	.word	0x50020250
 8003a24:	400202d0 	.word	0x400202d0
 8003a28:	500202d0 	.word	0x500202d0
 8003a2c:	40020350 	.word	0x40020350
 8003a30:	50020350 	.word	0x50020350
 8003a34:	400203d0 	.word	0x400203d0
 8003a38:	500203d0 	.word	0x500203d0
 8003a3c:	40020450 	.word	0x40020450
 8003a40:	50020450 	.word	0x50020450
 8003a44:	400204d0 	.word	0x400204d0
 8003a48:	500204d0 	.word	0x500204d0
 8003a4c:	40020550 	.word	0x40020550
 8003a50:	50020550 	.word	0x50020550
 8003a54:	400205d0 	.word	0x400205d0
 8003a58:	500205d0 	.word	0x500205d0
 8003a5c:	40020650 	.word	0x40020650
 8003a60:	50020650 	.word	0x50020650
 8003a64:	400206d0 	.word	0x400206d0
 8003a68:	500206d0 	.word	0x500206d0
 8003a6c:	40020750 	.word	0x40020750
 8003a70:	50020750 	.word	0x50020750
 8003a74:	400207d0 	.word	0x400207d0
 8003a78:	500207d0 	.word	0x500207d0
 8003a7c:	3cc03180 	.word	0x3cc03180

08003a80 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	@ 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a92:	e1ba      	b.n	8003e0a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 81aa 	beq.w	8003e04 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a55      	ldr	r2, [pc, #340]	@ (8003c08 <HAL_GPIO_Init+0x188>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d15d      	bne.n	8003b74 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0201 	and.w	r2, r3, #1
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003ae8:	4a48      	ldr	r2, [pc, #288]	@ (8003c0c <HAL_GPIO_Init+0x18c>)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003af0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003af2:	4a46      	ldr	r2, [pc, #280]	@ (8003c0c <HAL_GPIO_Init+0x18c>)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	08da      	lsrs	r2, r3, #3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3208      	adds	r2, #8
 8003b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220b      	movs	r2, #11
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	08da      	lsrs	r2, r3, #3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3208      	adds	r2, #8
 8003b3e:	69f9      	ldr	r1, [r7, #28]
 8003b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	2202      	movs	r2, #2
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e067      	b.n	8003c44 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x104>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b12      	cmp	r3, #18
 8003b82:	d145      	bne.n	8003c10 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	08da      	lsrs	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3208      	adds	r2, #8
 8003b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	08da      	lsrs	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3208      	adds	r2, #8
 8003bca:	69f9      	ldr	r1, [r7, #28]
 8003bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	2203      	movs	r2, #3
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0203 	and.w	r2, r3, #3
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e01e      	b.n	8003c44 <HAL_GPIO_Init+0x1c4>
 8003c06:	bf00      	nop
 8003c08:	46020000 	.word	0x46020000
 8003c0c:	0800e8e8 	.word	0x0800e8e8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0203 	and.w	r2, r3, #3
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d00b      	beq.n	8003c64 <HAL_GPIO_Init+0x1e4>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d007      	beq.n	8003c64 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c58:	2b11      	cmp	r3, #17
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b12      	cmp	r3, #18
 8003c62:	d130      	bne.n	8003cc6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	f003 0201 	and.w	r2, r3, #1
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d017      	beq.n	8003cfe <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d07c      	beq.n	8003e04 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003d0a:	4a47      	ldr	r2, [pc, #284]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3318      	adds	r3, #24
 8003d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d16:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	220f      	movs	r2, #15
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0a9a      	lsrs	r2, r3, #10
 8003d32:	4b3e      	ldr	r3, [pc, #248]	@ (8003e2c <HAL_GPIO_Init+0x3ac>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	f002 0203 	and.w	r2, r2, #3
 8003d3c:	00d2      	lsls	r2, r2, #3
 8003d3e:	4093      	lsls	r3, r2
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003d46:	4938      	ldr	r1, [pc, #224]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	3318      	adds	r3, #24
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003d54:	4b34      	ldr	r3, [pc, #208]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003d78:	4a2b      	ldr	r2, [pc, #172]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003da2:	4a21      	ldr	r2, [pc, #132]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003da8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003dce:	4a16      	ldr	r2, [pc, #88]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003dd6:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ddc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003e28 <HAL_GPIO_Init+0x3a8>)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3301      	adds	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f47f ae3d 	bne.w	8003a94 <HAL_GPIO_Init+0x14>
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	3724      	adds	r7, #36	@ 0x24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	46022000 	.word	0x46022000
 8003e2c:	002f7f7f 	.word	0x002f7f7f

08003e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e40:	787b      	ldrb	r3, [r7, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003e4c:	e002      	b.n	8003e54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e08d      	b.n	8003f8e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd fb56 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	@ 0x24
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003eb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ec0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	e006      	b.n	8003ee8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d108      	bne.n	8003f02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e007      	b.n	8003f12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	817b      	strh	r3, [r7, #10]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	f040 80da 	bne.w	800416e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_I2C_Master_Transmit+0x30>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e0d3      	b.n	8004170 <HAL_I2C_Master_Transmit+0x1d8>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fd0:	f7fe fdc4 	bl	8002b5c <HAL_GetTick>
 8003fd4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2319      	movs	r3, #25
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f8f0 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0be      	b.n	8004170 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2221      	movs	r2, #33	@ 0x21
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	893a      	ldrh	r2, [r7, #8]
 8004012:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	2bff      	cmp	r3, #255	@ 0xff
 8004022:	d90e      	bls.n	8004042 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	22ff      	movs	r2, #255	@ 0xff
 8004028:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	b2da      	uxtb	r2, r3
 8004030:	8979      	ldrh	r1, [r7, #10]
 8004032:	4b51      	ldr	r3, [pc, #324]	@ (8004178 <HAL_I2C_Master_Transmit+0x1e0>)
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fa88 	bl	8004550 <I2C_TransferConfig>
 8004040:	e06c      	b.n	800411c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004050:	b2da      	uxtb	r2, r3
 8004052:	8979      	ldrh	r1, [r7, #10]
 8004054:	4b48      	ldr	r3, [pc, #288]	@ (8004178 <HAL_I2C_Master_Transmit+0x1e0>)
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fa77 	bl	8004550 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004062:	e05b      	b.n	800411c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	6a39      	ldr	r1, [r7, #32]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f906 	bl	800427a <I2C_WaitOnTXISFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e07b      	b.n	8004170 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d034      	beq.n	800411c <HAL_I2C_Master_Transmit+0x184>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d130      	bne.n	800411c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	2200      	movs	r2, #0
 80040c2:	2180      	movs	r1, #128	@ 0x80
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f87f 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e04d      	b.n	8004170 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2bff      	cmp	r3, #255	@ 0xff
 80040dc:	d90e      	bls.n	80040fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	22ff      	movs	r2, #255	@ 0xff
 80040e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	8979      	ldrh	r1, [r7, #10]
 80040ec:	2300      	movs	r3, #0
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fa2b 	bl	8004550 <I2C_TransferConfig>
 80040fa:	e00f      	b.n	800411c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410a:	b2da      	uxtb	r2, r3
 800410c:	8979      	ldrh	r1, [r7, #10]
 800410e:	2300      	movs	r3, #0
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fa1a 	bl	8004550 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d19e      	bne.n	8004064 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	6a39      	ldr	r1, [r7, #32]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f8ec 	bl	8004308 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e01a      	b.n	8004170 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2220      	movs	r2, #32
 8004140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_I2C_Master_Transmit+0x1e4>)
 800414e:	400b      	ands	r3, r1
 8004150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	80002000 	.word	0x80002000
 800417c:	fe00e800 	.word	0xfe00e800

08004180 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d103      	bne.n	800419e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d007      	beq.n	80041bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	619a      	str	r2, [r3, #24]
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d8:	e03b      	b.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	6839      	ldr	r1, [r7, #0]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f8d6 	bl	8004390 <I2C_IsErrorOccurred>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e041      	b.n	8004272 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d02d      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fe fcb1 	bl	8002b5c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d122      	bne.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	429a      	cmp	r2, r3
 8004228:	d113      	bne.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e00f      	b.n	8004272 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	429a      	cmp	r2, r3
 800426e:	d0b4      	beq.n	80041da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004286:	e033      	b.n	80042f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f87f 	bl	8004390 <I2C_IsErrorOccurred>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e031      	b.n	8004300 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d025      	beq.n	80042f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fe fc5a 	bl	8002b5c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d11a      	bne.n	80042f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d013      	beq.n	80042f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e007      	b.n	8004300 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d1c4      	bne.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004314:	e02f      	b.n	8004376 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f838 	bl	8004390 <I2C_IsErrorOccurred>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e02d      	b.n	8004386 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432a:	f7fe fc17 	bl	8002b5c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11a      	bne.n	8004376 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d013      	beq.n	8004376 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e007      	b.n	8004386 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b20      	cmp	r3, #32
 8004382:	d1c8      	bne.n	8004316 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	@ 0x28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d068      	beq.n	800448e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2210      	movs	r2, #16
 80043c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043c4:	e049      	b.n	800445a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d045      	beq.n	800445a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe fbc5 	bl	8002b5c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_IsErrorOccurred+0x54>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d13a      	bne.n	800445a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004406:	d121      	bne.n	800444c <I2C_IsErrorOccurred+0xbc>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800440e:	d01d      	beq.n	800444c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	2b20      	cmp	r3, #32
 8004414:	d01a      	beq.n	800444c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004424:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004426:	f7fe fb99 	bl	8002b5c <HAL_GetTick>
 800442a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800442c:	e00e      	b.n	800444c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800442e:	f7fe fb95 	bl	8002b5c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b19      	cmp	r3, #25
 800443a:	d907      	bls.n	800444c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f043 0320 	orr.w	r3, r3, #32
 8004442:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800444a:	e006      	b.n	800445a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b20      	cmp	r3, #32
 8004458:	d1e9      	bne.n	800442e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b20      	cmp	r3, #32
 8004466:	d003      	beq.n	8004470 <I2C_IsErrorOccurred+0xe0>
 8004468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0aa      	beq.n	80043c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004474:	2b00      	cmp	r3, #0
 8004476:	d103      	bne.n	8004480 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2220      	movs	r2, #32
 800447e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	f043 0308 	orr.w	r3, r3, #8
 80044c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	f043 0302 	orr.w	r3, r3, #2
 80044ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80044fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01c      	beq.n	800453e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff fe3b 	bl	8004180 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <I2C_IsErrorOccurred+0x1bc>)
 8004516:	400b      	ands	r3, r1
 8004518:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800453e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004542:	4618      	mov	r0, r3
 8004544:	3728      	adds	r7, #40	@ 0x28
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	fe00e800 	.word	0xfe00e800

08004550 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	460b      	mov	r3, r1
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	4613      	mov	r3, r2
 8004560:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004562:	897b      	ldrh	r3, [r7, #10]
 8004564:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004568:	7a7b      	ldrb	r3, [r7, #9]
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004570:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	4313      	orrs	r3, r2
 800457a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800457e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	0d5b      	lsrs	r3, r3, #21
 800458a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800458e:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <I2C_TransferConfig+0x60>)
 8004590:	430b      	orrs	r3, r1
 8004592:	43db      	mvns	r3, r3
 8004594:	ea02 0103 	and.w	r1, r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	03ff63ff 	.word	0x03ff63ff

080045b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d138      	bne.n	800463c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e032      	b.n	800463e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2224      	movs	r2, #36	@ 0x24
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0201 	bic.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004606:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e000      	b.n	800463e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
  }
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b20      	cmp	r3, #32
 800465e:	d139      	bne.n	80046d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800466a:	2302      	movs	r3, #2
 800466c:	e033      	b.n	80046d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2224      	movs	r2, #36	@ 0x24
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0201 	bic.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800469c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
 8004700:	e007      	b.n	8004712 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004702:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 0204 	bic.w	r2, r3, #4
 800470a:	4905      	ldr	r1, [pc, #20]	@ (8004720 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004712:	7bfb      	ldrb	r3, [r7, #15]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40030400 	.word	0x40030400

08004724 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <HAL_ICACHE_Enable+0x1c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a04      	ldr	r2, [pc, #16]	@ (8004740 <HAL_ICACHE_Enable+0x1c>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40030400 	.word	0x40030400

08004744 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af02      	add	r7, sp, #8
 800474a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e108      	b.n	8004968 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fd f933 	bl	80019dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a7b      	ldr	r2, [pc, #492]	@ (8004970 <HAL_PCD_Init+0x22c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d102      	bne.n	800478c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f005 fcaa 	bl	800a0ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	7c1a      	ldrb	r2, [r3, #16]
 800479e:	f88d 2000 	strb.w	r2, [sp]
 80047a2:	3304      	adds	r3, #4
 80047a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047a6:	f005 fbbf 	bl	8009f28 <USB_CoreInit>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0d5      	b.n	8004968 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f005 fca2 	bl	800a10c <USB_SetCurrentMode>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0c6      	b.n	8004968 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e04a      	b.n	8004876 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	3315      	adds	r3, #21
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	3314      	adds	r3, #20
 8004804:	7bfa      	ldrb	r2, [r7, #15]
 8004806:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	b298      	uxth	r0, r3
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	332e      	adds	r3, #46	@ 0x2e
 800481c:	4602      	mov	r2, r0
 800481e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3318      	adds	r3, #24
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	331c      	adds	r3, #28
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3320      	adds	r3, #32
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800485c:	7bfa      	ldrb	r2, [r7, #15]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	3324      	adds	r3, #36	@ 0x24
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	3301      	adds	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	791b      	ldrb	r3, [r3, #4]
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	429a      	cmp	r2, r3
 800487e:	d3af      	bcc.n	80047e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e044      	b.n	8004910 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800489c:	7bfa      	ldrb	r2, [r7, #15]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048b2:	7bfa      	ldrb	r2, [r7, #15]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048de:	7bfa      	ldrb	r2, [r7, #15]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	3301      	adds	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	791b      	ldrb	r3, [r3, #4]
 8004914:	7bfa      	ldrb	r2, [r7, #15]
 8004916:	429a      	cmp	r2, r3
 8004918:	d3b5      	bcc.n	8004886 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	7c1a      	ldrb	r2, [r3, #16]
 8004922:	f88d 2000 	strb.w	r2, [sp]
 8004926:	3304      	adds	r3, #4
 8004928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800492a:	f005 fc3b 	bl	800a1a4 <USB_DevInit>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e013      	b.n	8004968 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	7b1b      	ldrb	r3, [r3, #12]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d102      	bne.n	800495c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f001 f96a 	bl	8005c30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f006 fc66 	bl	800b232 <USB_DevDisconnect>

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	42040000 	.word	0x42040000

08004974 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_PCD_Start+0x1c>
 800498c:	2302      	movs	r3, #2
 800498e:	e01c      	b.n	80049ca <HAL_PCD_Start+0x56>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7b5b      	ldrb	r3, [r3, #13]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d105      	bne.n	80049ac <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f005 fb89 	bl	800a0c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f006 fc18 	bl	800b1f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049d2:	b590      	push	{r4, r7, lr}
 80049d4:	b08d      	sub	sp, #52	@ 0x34
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f006 fcd6 	bl	800b39a <USB_GetMode>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f040 84b9 	bne.w	8005368 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f006 fc3a 	bl	800b274 <USB_ReadInterrupts>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 84af 	beq.w	8005366 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	0a1b      	lsrs	r3, r3, #8
 8004a12:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f006 fc27 	bl	800b274 <USB_ReadInterrupts>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d107      	bne.n	8004a40 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f002 0202 	and.w	r2, r2, #2
 8004a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f006 fc15 	bl	800b274 <USB_ReadInterrupts>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d161      	bne.n	8004b18 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0210 	bic.w	r2, r2, #16
 8004a62:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f003 020f 	and.w	r2, r3, #15
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4413      	add	r3, r2
 8004a80:	3304      	adds	r3, #4
 8004a82:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	0c5b      	lsrs	r3, r3, #17
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d124      	bne.n	8004ada <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d035      	beq.n	8004b08 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	6a38      	ldr	r0, [r7, #32]
 8004ab0:	f006 fa4c 	bl	800af4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	091b      	lsrs	r3, r3, #4
 8004abc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ac0:	441a      	add	r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ad2:	441a      	add	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	615a      	str	r2, [r3, #20]
 8004ad8:	e016      	b.n	8004b08 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	0c5b      	lsrs	r3, r3, #17
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d110      	bne.n	8004b08 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004aec:	2208      	movs	r2, #8
 8004aee:	4619      	mov	r1, r3
 8004af0:	6a38      	ldr	r0, [r7, #32]
 8004af2:	f006 fa2b 	bl	800af4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b02:	441a      	add	r2, r3
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0210 	orr.w	r2, r2, #16
 8004b16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f006 fba9 	bl	800b274 <USB_ReadInterrupts>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b2c:	f040 80a7 	bne.w	8004c7e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f006 fbae 	bl	800b29a <USB_ReadDevAllOutEpInterrupt>
 8004b3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004b40:	e099      	b.n	8004c76 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 808e 	beq.w	8004c6a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f006 fbd2 	bl	800b302 <USB_ReadDevOutEPInterrupt>
 8004b5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00c      	beq.n	8004b84 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b76:	461a      	mov	r2, r3
 8004b78:	2301      	movs	r3, #1
 8004b7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004b7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fed0 	bl	8005924 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 ffa6 	bl	8005af4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d030      	beq.n	8004c30 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd6:	2b80      	cmp	r3, #128	@ 0x80
 8004bd8:	d109      	bne.n	8004bee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004be8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	3304      	adds	r3, #4
 8004c02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	78db      	ldrb	r3, [r3, #3]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d108      	bne.n	8004c1e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f006 ff9b 	bl	800bb54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c46:	461a      	mov	r2, r3
 8004c48:	2320      	movs	r3, #32
 8004c4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c62:	461a      	mov	r2, r3
 8004c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f47f af62 	bne.w	8004b42 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f006 faf6 	bl	800b274 <USB_ReadInterrupts>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c92:	f040 80db 	bne.w	8004e4c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f006 fb17 	bl	800b2ce <USB_ReadDevAllInEpInterrupt>
 8004ca0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004ca6:	e0cd      	b.n	8004e44 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 80c2 	beq.w	8004e38 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f006 fb3d 	bl	800b33e <USB_ReadDevInEPInterrupt>
 8004cc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d057      	beq.n	8004d80 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69f9      	ldr	r1, [r7, #28]
 8004cec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d00:	461a      	mov	r2, r3
 8004d02:	2301      	movs	r3, #1
 8004d04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	799b      	ldrb	r3, [r3, #6]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d132      	bne.n	8004d74 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3320      	adds	r3, #32
 8004d1e:	6819      	ldr	r1, [r3, #0]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4403      	add	r3, r0
 8004d2e:	331c      	adds	r3, #28
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4419      	add	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4403      	add	r3, r0
 8004d42:	3320      	adds	r3, #32
 8004d44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d113      	bne.n	8004d74 <HAL_PCD_IRQHandler+0x3a2>
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d50:	4613      	mov	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3324      	adds	r3, #36	@ 0x24
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d108      	bne.n	8004d74 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2101      	movs	r1, #1
 8004d70:	f006 fb44 	bl	800b3fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	4619      	mov	r1, r3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f006 fe6e 	bl	800ba5c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d96:	461a      	mov	r2, r3
 8004d98:	2308      	movs	r3, #8
 8004d9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db2:	461a      	mov	r2, r3
 8004db4:	2310      	movs	r3, #16
 8004db6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2340      	movs	r3, #64	@ 0x40
 8004dd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d023      	beq.n	8004e26 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004dde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004de0:	6a38      	ldr	r0, [r7, #32]
 8004de2:	f005 fb2b 	bl	800a43c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	3310      	adds	r3, #16
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	3304      	adds	r3, #4
 8004df8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	78db      	ldrb	r3, [r3, #3]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d108      	bne.n	8004e14 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f006 feb2 	bl	800bb78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e20:	461a      	mov	r2, r3
 8004e22:	2302      	movs	r3, #2
 8004e24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004e30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fcea 	bl	800580c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f47f af2e 	bne.w	8004ca8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f006 fa0f 	bl	800b274 <USB_ReadInterrupts>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e60:	d122      	bne.n	8004ea8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d108      	bne.n	8004e92 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e88:	2100      	movs	r1, #0
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f007 f832 	bl	800bef4 <HAL_PCDEx_LPM_Callback>
 8004e90:	e002      	b.n	8004e98 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f006 fe42 	bl	800bb1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f006 f9e1 	bl	800b274 <USB_ReadInterrupts>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ebc:	d112      	bne.n	8004ee4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d102      	bne.n	8004ed4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f006 fe0a 	bl	800bae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f006 f9c3 	bl	800b274 <USB_ReadInterrupts>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ef8:	d121      	bne.n	8004f3e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004f08:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d111      	bne.n	8004f38 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	f003 020f 	and.w	r2, r3, #15
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f2e:	2101      	movs	r1, #1
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f006 ffdf 	bl	800bef4 <HAL_PCDEx_LPM_Callback>
 8004f36:	e002      	b.n	8004f3e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f006 fdd5 	bl	800bae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f006 f996 	bl	800b274 <USB_ReadInterrupts>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f52:	f040 80b7 	bne.w	80050c4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2110      	movs	r1, #16
 8004f70:	4618      	mov	r0, r3
 8004f72:	f005 fa63 	bl	800a43c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f7a:	e046      	b.n	800500a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004faa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fc2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fe2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ffe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005002:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005006:	3301      	adds	r3, #1
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	791b      	ldrb	r3, [r3, #4]
 800500e:	461a      	mov	r2, r3
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005012:	4293      	cmp	r3, r2
 8005014:	d3b2      	bcc.n	8004f7c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005024:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005028:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7bdb      	ldrb	r3, [r3, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005042:	f043 030b 	orr.w	r3, r3, #11
 8005046:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005058:	f043 030b 	orr.w	r3, r3, #11
 800505c:	6453      	str	r3, [r2, #68]	@ 0x44
 800505e:	e015      	b.n	800508c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800506e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005072:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005076:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005086:	f043 030b 	orr.w	r3, r3, #11
 800508a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800509a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800509e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050ae:	461a      	mov	r2, r3
 80050b0:	f006 f9a4 	bl	800b3fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80050c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f006 f8d3 	bl	800b274 <USB_ReadInterrupts>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050d8:	d123      	bne.n	8005122 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f006 f969 	bl	800b3b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f005 fa20 	bl	800a52e <USB_GetDevSpeed>
 80050ee:	4603      	mov	r3, r0
 80050f0:	461a      	mov	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681c      	ldr	r4, [r3, #0]
 80050fa:	f002 f839 	bl	8007170 <HAL_RCC_GetHCLKFreq>
 80050fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005104:	461a      	mov	r2, r3
 8005106:	4620      	mov	r0, r4
 8005108:	f004 ff3c 	bl	8009f84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f006 fccd 	bl	800baac <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005120:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f006 f8a4 	bl	800b274 <USB_ReadInterrupts>
 800512c:	4603      	mov	r3, r0
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b08      	cmp	r3, #8
 8005134:	d10a      	bne.n	800514c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f006 fcaa 	bl	800ba90 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f002 0208 	and.w	r2, r2, #8
 800514a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f006 f88f 	bl	800b274 <USB_ReadInterrupts>
 8005156:	4603      	mov	r3, r0
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b80      	cmp	r3, #128	@ 0x80
 800515e:	d123      	bne.n	80051a8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800516c:	2301      	movs	r3, #1
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005170:	e014      	b.n	800519c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	b2db      	uxtb	r3, r3
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fb0a 	bl	80057aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	3301      	adds	r3, #1
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	791b      	ldrb	r3, [r3, #4]
 80051a0:	461a      	mov	r2, r3
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d3e4      	bcc.n	8005172 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f006 f861 	bl	800b274 <USB_ReadInterrupts>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051bc:	d13c      	bne.n	8005238 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051be:	2301      	movs	r3, #1
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c2:	e02b      	b.n	800521c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	3318      	adds	r3, #24
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d115      	bne.n	8005216 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80051ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	da12      	bge.n	8005216 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f4:	4613      	mov	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	3317      	adds	r3, #23
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800520c:	b2db      	uxtb	r3, r3
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 faca 	bl	80057aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	3301      	adds	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	@ 0x24
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	791b      	ldrb	r3, [r3, #4]
 8005220:	461a      	mov	r2, r3
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	4293      	cmp	r3, r2
 8005226:	d3cd      	bcc.n	80051c4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695a      	ldr	r2, [r3, #20]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f006 f819 	bl	800b274 <USB_ReadInterrupts>
 8005242:	4603      	mov	r3, r0
 8005244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005248:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800524c:	d156      	bne.n	80052fc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800524e:	2301      	movs	r3, #1
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
 8005252:	e045      	b.n	80052e0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d12e      	bne.n	80052da <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800527c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800527e:	2b00      	cmp	r3, #0
 8005280:	da2b      	bge.n	80052da <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	0c1a      	lsrs	r2, r3, #16
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800528c:	4053      	eors	r3, r2
 800528e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005292:	2b00      	cmp	r3, #0
 8005294:	d121      	bne.n	80052da <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529a:	4613      	mov	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052d6:	6053      	str	r3, [r2, #4]
            break;
 80052d8:	e008      	b.n	80052ec <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	3301      	adds	r3, #1
 80052de:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	791b      	ldrb	r3, [r3, #4]
 80052e4:	461a      	mov	r2, r3
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d3b3      	bcc.n	8005254 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80052fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f005 ffb7 	bl	800b274 <USB_ReadInterrupts>
 8005306:	4603      	mov	r3, r0
 8005308:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005310:	d10a      	bne.n	8005328 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f006 fc42 	bl	800bb9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005326:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4618      	mov	r0, r3
 800532e:	f005 ffa1 	bl	800b274 <USB_ReadInterrupts>
 8005332:	4603      	mov	r3, r0
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d115      	bne.n	8005368 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f006 fc32 	bl	800bbb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	e000      	b.n	8005368 <HAL_PCD_IRQHandler+0x996>
      return;
 8005366:	bf00      	nop
    }
  }
}
 8005368:	3734      	adds	r7, #52	@ 0x34
 800536a:	46bd      	mov	sp, r7
 800536c:	bd90      	pop	{r4, r7, pc}

0800536e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_PCD_SetAddress+0x1a>
 8005384:	2302      	movs	r3, #2
 8005386:	e012      	b.n	80053ae <HAL_PCD_SetAddress+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	4611      	mov	r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f005 ff00 	bl	800b1a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	4608      	mov	r0, r1
 80053c0:	4611      	mov	r1, r2
 80053c2:	461a      	mov	r2, r3
 80053c4:	4603      	mov	r3, r0
 80053c6:	70fb      	strb	r3, [r7, #3]
 80053c8:	460b      	mov	r3, r1
 80053ca:	803b      	strh	r3, [r7, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da0f      	bge.n	80053fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	f003 020f 	and.w	r2, r3, #15
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	3310      	adds	r3, #16
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	3304      	adds	r3, #4
 80053f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	705a      	strb	r2, [r3, #1]
 80053fa:	e00f      	b.n	800541c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005428:	883b      	ldrh	r3, [r7, #0]
 800542a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	78ba      	ldrb	r2, [r7, #2]
 8005436:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d004      	beq.n	800544a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800544a:	78bb      	ldrb	r3, [r7, #2]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d102      	bne.n	8005456 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_PCD_EP_Open+0xae>
 8005460:	2302      	movs	r3, #2
 8005462:	e00e      	b.n	8005482 <HAL_PCD_EP_Open+0xcc>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	4618      	mov	r0, r3
 8005474:	f005 f880 	bl	800a578 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005480:	7afb      	ldrb	r3, [r7, #11]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	460b      	mov	r3, r1
 8005494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800549a:	2b00      	cmp	r3, #0
 800549c:	da0f      	bge.n	80054be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	f003 020f 	and.w	r2, r3, #15
 80054a4:	4613      	mov	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	3310      	adds	r3, #16
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4413      	add	r3, r2
 80054b2:	3304      	adds	r3, #4
 80054b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	705a      	strb	r2, [r3, #1]
 80054bc:	e00f      	b.n	80054de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	f003 020f 	and.w	r2, r3, #15
 80054c4:	4613      	mov	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	4413      	add	r3, r2
 80054d4:	3304      	adds	r3, #4
 80054d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_PCD_EP_Close+0x6e>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e00e      	b.n	8005516 <HAL_PCD_EP_Close+0x8c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	4618      	mov	r0, r3
 8005508:	f005 f8be 	bl	800a688 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	460b      	mov	r3, r1
 800552c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800552e:	7afb      	ldrb	r3, [r7, #11]
 8005530:	f003 020f 	and.w	r2, r3, #15
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	3304      	adds	r3, #4
 8005546:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2200      	movs	r2, #0
 8005558:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005560:	7afb      	ldrb	r3, [r7, #11]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	b2da      	uxtb	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	799b      	ldrb	r3, [r3, #6]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d102      	bne.n	800557a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	799b      	ldrb	r3, [r3, #6]
 8005582:	461a      	mov	r2, r3
 8005584:	6979      	ldr	r1, [r7, #20]
 8005586:	f005 f95b 	bl	800a840 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 020f 	and.w	r2, r3, #15
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80055b6:	681b      	ldr	r3, [r3, #0]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	460b      	mov	r3, r1
 80055d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055d4:	7afb      	ldrb	r3, [r7, #11]
 80055d6:	f003 020f 	and.w	r2, r3, #15
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	3310      	adds	r3, #16
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	3304      	adds	r3, #4
 80055ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2200      	movs	r2, #0
 80055fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2201      	movs	r2, #1
 8005602:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005604:	7afb      	ldrb	r3, [r7, #11]
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	b2da      	uxtb	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	799b      	ldrb	r3, [r3, #6]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d102      	bne.n	800561e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	799b      	ldrb	r3, [r3, #6]
 8005626:	461a      	mov	r2, r3
 8005628:	6979      	ldr	r1, [r7, #20]
 800562a:	f005 f909 	bl	800a840 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	7912      	ldrb	r2, [r2, #4]
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e04f      	b.n	80056f6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da0f      	bge.n	800567e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	f003 020f 	and.w	r2, r3, #15
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	3310      	adds	r3, #16
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4413      	add	r3, r2
 8005672:	3304      	adds	r3, #4
 8005674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	705a      	strb	r2, [r3, #1]
 800567c:	e00d      	b.n	800569a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4413      	add	r3, r2
 8005690:	3304      	adds	r3, #4
 8005692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_PCD_EP_SetStall+0x82>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e01d      	b.n	80056f6 <HAL_PCD_EP_SetStall+0xbe>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f005 fc97 	bl	800affc <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	7999      	ldrb	r1, [r3, #6]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056e6:	461a      	mov	r2, r3
 80056e8:	f005 fe88 	bl	800b3fc <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	7912      	ldrb	r2, [r2, #4]
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e042      	b.n	80057a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800571c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005720:	2b00      	cmp	r3, #0
 8005722:	da0f      	bge.n	8005744 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	f003 020f 	and.w	r2, r3, #15
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	3310      	adds	r3, #16
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	3304      	adds	r3, #4
 800573a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	705a      	strb	r2, [r3, #1]
 8005742:	e00f      	b.n	8005764 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	f003 020f 	and.w	r2, r3, #15
 800574a:	4613      	mov	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	4413      	add	r3, r2
 800575a:	3304      	adds	r3, #4
 800575c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_PCD_EP_ClrStall+0x86>
 8005780:	2302      	movs	r3, #2
 8005782:	e00e      	b.n	80057a2 <HAL_PCD_EP_ClrStall+0xa4>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68f9      	ldr	r1, [r7, #12]
 8005792:	4618      	mov	r0, r3
 8005794:	f005 fca0 	bl	800b0d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80057b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da0c      	bge.n	80057d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	f003 020f 	and.w	r2, r3, #15
 80057c4:	4613      	mov	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	3310      	adds	r3, #16
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	3304      	adds	r3, #4
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	e00c      	b.n	80057f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	f003 020f 	and.w	r2, r3, #15
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	3304      	adds	r3, #4
 80057f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f005 fabf 	bl	800ad7c <USB_EPStopXfer>
 80057fe:	4603      	mov	r3, r0
 8005800:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005802:	7afb      	ldrb	r3, [r7, #11]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	@ 0x28
 8005810:	af02      	add	r7, sp, #8
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	3310      	adds	r3, #16
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	3304      	adds	r3, #4
 8005832:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	429a      	cmp	r2, r3
 800583e:	d901      	bls.n	8005844 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e06b      	b.n	800591c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	429a      	cmp	r2, r3
 8005858:	d902      	bls.n	8005860 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3303      	adds	r3, #3
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005868:	e02a      	b.n	80058c0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	429a      	cmp	r2, r3
 800587e:	d902      	bls.n	8005886 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3303      	adds	r3, #3
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68d9      	ldr	r1, [r3, #12]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	b2da      	uxtb	r2, r3
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	4603      	mov	r3, r0
 80058a2:	6978      	ldr	r0, [r7, #20]
 80058a4:	f005 fb14 	bl	800aed0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	441a      	add	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	441a      	add	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d809      	bhi.n	80058ea <PCD_WriteEmptyTxFifo+0xde>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058de:	429a      	cmp	r2, r3
 80058e0:	d203      	bcs.n	80058ea <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1bf      	bne.n	800586a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d811      	bhi.n	800591a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	2201      	movs	r2, #1
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	43db      	mvns	r3, r3
 8005910:	6939      	ldr	r1, [r7, #16]
 8005912:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005916:	4013      	ands	r3, r2
 8005918:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	333c      	adds	r3, #60	@ 0x3c
 800593c:	3304      	adds	r3, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	799b      	ldrb	r3, [r3, #6]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d17b      	bne.n	8005a52 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d015      	beq.n	8005990 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	4a61      	ldr	r2, [pc, #388]	@ (8005aec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	f240 80b9 	bls.w	8005ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80b3 	beq.w	8005ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005986:	461a      	mov	r2, r3
 8005988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800598c:	6093      	str	r3, [r2, #8]
 800598e:	e0a7      	b.n	8005ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a6:	461a      	mov	r2, r3
 80059a8:	2320      	movs	r3, #32
 80059aa:	6093      	str	r3, [r2, #8]
 80059ac:	e098      	b.n	8005ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f040 8093 	bne.w	8005ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4a4b      	ldr	r2, [pc, #300]	@ (8005aec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d90f      	bls.n	80059e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d8:	461a      	mov	r2, r3
 80059da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059de:	6093      	str	r3, [r2, #8]
 80059e0:	e07e      	b.n	8005ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	3304      	adds	r3, #4
 80059f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	0159      	lsls	r1, r3, #5
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	440b      	add	r3, r1
 8005a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d114      	bne.n	8005a44 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2101      	movs	r1, #1
 8005a30:	f005 fce4 	bl	800b3fc <USB_EP0_OutStart>
 8005a34:	e006      	b.n	8005a44 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	441a      	add	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f005 ffeb 	bl	800ba26 <HAL_PCD_DataOutStageCallback>
 8005a50:	e046      	b.n	8005ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4a26      	ldr	r2, [pc, #152]	@ (8005af0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d124      	bne.n	8005aa4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a70:	461a      	mov	r2, r3
 8005a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a76:	6093      	str	r3, [r2, #8]
 8005a78:	e032      	b.n	8005ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a90:	461a      	mov	r2, r3
 8005a92:	2320      	movs	r3, #32
 8005a94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f005 ffc2 	bl	800ba26 <HAL_PCD_DataOutStageCallback>
 8005aa2:	e01d      	b.n	8005ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d114      	bne.n	8005ad4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005acc:	461a      	mov	r2, r3
 8005ace:	2100      	movs	r1, #0
 8005ad0:	f005 fc94 	bl	800b3fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f005 ffa3 	bl	800ba26 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	4f54300a 	.word	0x4f54300a
 8005af0:	4f54310a 	.word	0x4f54310a

08005af4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	333c      	adds	r3, #60	@ 0x3c
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a15      	ldr	r2, [pc, #84]	@ (8005b7c <PCD_EP_OutSetupPacket_int+0x88>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d90e      	bls.n	8005b48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d009      	beq.n	8005b48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b40:	461a      	mov	r2, r3
 8005b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f005 ff5a 	bl	800ba02 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a0a      	ldr	r2, [pc, #40]	@ (8005b7c <PCD_EP_OutSetupPacket_int+0x88>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d90c      	bls.n	8005b70 <PCD_EP_OutSetupPacket_int+0x7c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	799b      	ldrb	r3, [r3, #6]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d108      	bne.n	8005b70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b68:	461a      	mov	r2, r3
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	f005 fc46 	bl	800b3fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	4f54300a 	.word	0x4f54300a

08005b80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d107      	bne.n	8005bae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b9e:	883b      	ldrh	r3, [r7, #0]
 8005ba0:	0419      	lsls	r1, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bac:	e028      	b.n	8005c00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	73fb      	strb	r3, [r7, #15]
 8005bc0:	e00d      	b.n	8005bde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	3340      	adds	r3, #64	@ 0x40
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	73fb      	strb	r3, [r7, #15]
 8005bde:	7bfa      	ldrb	r2, [r7, #15]
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d3ec      	bcc.n	8005bc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005be8:	883b      	ldrh	r3, [r7, #0]
 8005bea:	0418      	lsls	r0, r3, #16
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	4302      	orrs	r2, r0
 8005bf8:	3340      	adds	r3, #64	@ 0x40
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c62:	f043 0303 	orr.w	r3, r3, #3
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005c80:	4b39      	ldr	r3, [pc, #228]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c88:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d10b      	bne.n	8005caa <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c98:	d905      	bls.n	8005ca6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005c9a:	4b33      	ldr	r3, [pc, #204]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	4a32      	ldr	r2, [pc, #200]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ca4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e057      	b.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb0:	d90a      	bls.n	8005cc8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cc4:	60d3      	str	r3, [r2, #12]
 8005cc6:	e007      	b.n	8005cd8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005cc8:	4b27      	ldr	r3, [pc, #156]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005cd0:	4925      	ldr	r1, [pc, #148]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005cd8:	4b24      	ldr	r3, [pc, #144]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a24      	ldr	r2, [pc, #144]	@ (8005d70 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	099b      	lsrs	r3, r3, #6
 8005ce4:	2232      	movs	r2, #50	@ 0x32
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
 8005cea:	4a21      	ldr	r2, [pc, #132]	@ (8005d70 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	099b      	lsrs	r3, r3, #6
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005cf6:	e002      	b.n	8005cfe <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f3      	bne.n	8005cf8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01b      	beq.n	8005d4e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005d16:	4b15      	ldr	r3, [pc, #84]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a15      	ldr	r2, [pc, #84]	@ (8005d70 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	2232      	movs	r2, #50	@ 0x32
 8005d24:	fb02 f303 	mul.w	r3, r2, r3
 8005d28:	4a11      	ldr	r2, [pc, #68]	@ (8005d70 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	099b      	lsrs	r3, r3, #6
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005d34:	e002      	b.n	8005d3c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f3      	bne.n	8005d36 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e000      	b.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	46020800 	.word	0x46020800
 8005d6c:	20000000 	.word	0x20000000
 8005d70:	10624dd3 	.word	0x10624dd3

08005d74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005d78:	4b04      	ldr	r3, [pc, #16]	@ (8005d8c <HAL_PWREx_GetVoltageRange+0x18>)
 8005d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	46020800 	.word	0x46020800

08005d90 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8005d94:	4b05      	ldr	r3, [pc, #20]	@ (8005dac <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	4a04      	ldr	r2, [pc, #16]	@ (8005dac <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d9e:	6113      	str	r3, [r2, #16]
}
 8005da0:	bf00      	nop
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	46020800 	.word	0x46020800

08005db0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005db4:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <HAL_PWREx_EnableVddIO2+0x1c>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	4a04      	ldr	r2, [pc, #16]	@ (8005dcc <HAL_PWREx_EnableVddIO2+0x1c>)
 8005dba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dbe:	6113      	str	r3, [r2, #16]
}
 8005dc0:	bf00      	nop
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	46020800 	.word	0x46020800

08005dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08e      	sub	sp, #56	@ 0x38
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	f000 bec8 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dea:	4b99      	ldr	r3, [pc, #612]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005df4:	4b96      	ldr	r3, [pc, #600]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 816c 	beq.w	80060e4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_RCC_OscConfig+0x52>
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	f040 80de 	bne.w	8005fd6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	f040 80da 	bne.w	8005fd6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f000 bea5 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e34:	4b86      	ldr	r3, [pc, #536]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <HAL_RCC_OscConfig+0x7a>
 8005e40:	4b83      	ldr	r3, [pc, #524]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e48:	e005      	b.n	8005e56 <HAL_RCC_OscConfig+0x86>
 8005e4a:	4b81      	ldr	r3, [pc, #516]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d255      	bcs.n	8005f06 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 f99d 	bl	80071a4 <RCC_SetFlashLatencyFromMSIRange>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f000 be82 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005e76:	4b76      	ldr	r3, [pc, #472]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	4a75      	ldr	r2, [pc, #468]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005e7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e80:	6093      	str	r3, [r2, #8]
 8005e82:	4b73      	ldr	r3, [pc, #460]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	4970      	ldr	r1, [pc, #448]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005e9c:	d309      	bcc.n	8005eb2 <HAL_RCC_OscConfig+0xe2>
 8005e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f023 021f 	bic.w	r2, r3, #31
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	4969      	ldr	r1, [pc, #420]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60cb      	str	r3, [r1, #12]
 8005eb0:	e07e      	b.n	8005fb0 <HAL_RCC_OscConfig+0x1e0>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da0a      	bge.n	8005ed0 <HAL_RCC_OscConfig+0x100>
 8005eba:	4b65      	ldr	r3, [pc, #404]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	015b      	lsls	r3, r3, #5
 8005ec8:	4961      	ldr	r1, [pc, #388]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60cb      	str	r3, [r1, #12]
 8005ece:	e06f      	b.n	8005fb0 <HAL_RCC_OscConfig+0x1e0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed8:	d30a      	bcc.n	8005ef0 <HAL_RCC_OscConfig+0x120>
 8005eda:	4b5d      	ldr	r3, [pc, #372]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	029b      	lsls	r3, r3, #10
 8005ee8:	4959      	ldr	r1, [pc, #356]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60cb      	str	r3, [r1, #12]
 8005eee:	e05f      	b.n	8005fb0 <HAL_RCC_OscConfig+0x1e0>
 8005ef0:	4b57      	ldr	r3, [pc, #348]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	03db      	lsls	r3, r3, #15
 8005efe:	4954      	ldr	r1, [pc, #336]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60cb      	str	r3, [r1, #12]
 8005f04:	e054      	b.n	8005fb0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005f06:	4b52      	ldr	r3, [pc, #328]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	4a51      	ldr	r2, [pc, #324]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f10:	6093      	str	r3, [r2, #8]
 8005f12:	4b4f      	ldr	r3, [pc, #316]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1e:	494c      	ldr	r1, [pc, #304]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005f2c:	d309      	bcc.n	8005f42 <HAL_RCC_OscConfig+0x172>
 8005f2e:	4b48      	ldr	r3, [pc, #288]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f023 021f 	bic.w	r2, r3, #31
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	4945      	ldr	r1, [pc, #276]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60cb      	str	r3, [r1, #12]
 8005f40:	e028      	b.n	8005f94 <HAL_RCC_OscConfig+0x1c4>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da0a      	bge.n	8005f60 <HAL_RCC_OscConfig+0x190>
 8005f4a:	4b41      	ldr	r3, [pc, #260]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	015b      	lsls	r3, r3, #5
 8005f58:	493d      	ldr	r1, [pc, #244]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60cb      	str	r3, [r1, #12]
 8005f5e:	e019      	b.n	8005f94 <HAL_RCC_OscConfig+0x1c4>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f68:	d30a      	bcc.n	8005f80 <HAL_RCC_OscConfig+0x1b0>
 8005f6a:	4b39      	ldr	r3, [pc, #228]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	029b      	lsls	r3, r3, #10
 8005f78:	4935      	ldr	r1, [pc, #212]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60cb      	str	r3, [r1, #12]
 8005f7e:	e009      	b.n	8005f94 <HAL_RCC_OscConfig+0x1c4>
 8005f80:	4b33      	ldr	r3, [pc, #204]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	03db      	lsls	r3, r3, #15
 8005f8e:	4930      	ldr	r1, [pc, #192]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f001 f900 	bl	80071a4 <RCC_SetFlashLatencyFromMSIRange>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	f000 bde5 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005fb0:	f001 f8de 	bl	8007170 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005fb4:	4b27      	ldr	r3, [pc, #156]	@ (8006054 <HAL_RCC_OscConfig+0x284>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fc fd45 	bl	8002a48 <HAL_InitTick>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 808a 	beq.w	80060e2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005fce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fd2:	f000 bdd2 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d066      	beq.n	80060ac <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005fde:	4b1c      	ldr	r3, [pc, #112]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005fea:	f7fc fdb7 	bl	8002b5c <HAL_GetTick>
 8005fee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005ff0:	e009      	b.n	8006006 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ff2:	f7fc fdb3 	bl	8002b5c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d902      	bls.n	8006006 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	f000 bdba 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006006:	4b12      	ldr	r3, [pc, #72]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0ef      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006012:	4b0f      	ldr	r3, [pc, #60]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	4a0e      	ldr	r2, [pc, #56]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8006018:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800601c:	6093      	str	r3, [r2, #8]
 800601e:	4b0c      	ldr	r3, [pc, #48]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602a:	4909      	ldr	r1, [pc, #36]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 800602c:	4313      	orrs	r3, r2
 800602e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006038:	d30e      	bcc.n	8006058 <HAL_RCC_OscConfig+0x288>
 800603a:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f023 021f 	bic.w	r2, r3, #31
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	4902      	ldr	r1, [pc, #8]	@ (8006050 <HAL_RCC_OscConfig+0x280>)
 8006048:	4313      	orrs	r3, r2
 800604a:	60cb      	str	r3, [r1, #12]
 800604c:	e04a      	b.n	80060e4 <HAL_RCC_OscConfig+0x314>
 800604e:	bf00      	nop
 8006050:	46020c00 	.word	0x46020c00
 8006054:	20000070 	.word	0x20000070
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605c:	2b00      	cmp	r3, #0
 800605e:	da0a      	bge.n	8006076 <HAL_RCC_OscConfig+0x2a6>
 8006060:	4b98      	ldr	r3, [pc, #608]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	015b      	lsls	r3, r3, #5
 800606e:	4995      	ldr	r1, [pc, #596]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006070:	4313      	orrs	r3, r2
 8006072:	60cb      	str	r3, [r1, #12]
 8006074:	e036      	b.n	80060e4 <HAL_RCC_OscConfig+0x314>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607e:	d30a      	bcc.n	8006096 <HAL_RCC_OscConfig+0x2c6>
 8006080:	4b90      	ldr	r3, [pc, #576]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	029b      	lsls	r3, r3, #10
 800608e:	498d      	ldr	r1, [pc, #564]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006090:	4313      	orrs	r3, r2
 8006092:	60cb      	str	r3, [r1, #12]
 8006094:	e026      	b.n	80060e4 <HAL_RCC_OscConfig+0x314>
 8006096:	4b8b      	ldr	r3, [pc, #556]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	03db      	lsls	r3, r3, #15
 80060a4:	4987      	ldr	r1, [pc, #540]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60cb      	str	r3, [r1, #12]
 80060aa:	e01b      	b.n	80060e4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80060ac:	4b85      	ldr	r3, [pc, #532]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a84      	ldr	r2, [pc, #528]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80060b8:	f7fc fd50 	bl	8002b5c <HAL_GetTick>
 80060bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80060be:	e009      	b.n	80060d4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060c0:	f7fc fd4c 	bl	8002b5c <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d902      	bls.n	80060d4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	f000 bd53 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80060d4:	4b7b      	ldr	r3, [pc, #492]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1ef      	bne.n	80060c0 <HAL_RCC_OscConfig+0x2f0>
 80060e0:	e000      	b.n	80060e4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80060e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 808b 	beq.w	8006208 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d005      	beq.n	8006104 <HAL_RCC_OscConfig+0x334>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	2b0c      	cmp	r3, #12
 80060fc:	d109      	bne.n	8006112 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006100:	2b03      	cmp	r3, #3
 8006102:	d106      	bne.n	8006112 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d17d      	bne.n	8006208 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	f000 bd34 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800611a:	d106      	bne.n	800612a <HAL_RCC_OscConfig+0x35a>
 800611c:	4b69      	ldr	r3, [pc, #420]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a68      	ldr	r2, [pc, #416]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	e041      	b.n	80061ae <HAL_RCC_OscConfig+0x3de>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006132:	d112      	bne.n	800615a <HAL_RCC_OscConfig+0x38a>
 8006134:	4b63      	ldr	r3, [pc, #396]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a62      	ldr	r2, [pc, #392]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 800613a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b60      	ldr	r3, [pc, #384]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5f      	ldr	r2, [pc, #380]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006146:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	4b5d      	ldr	r3, [pc, #372]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a5c      	ldr	r2, [pc, #368]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	e029      	b.n	80061ae <HAL_RCC_OscConfig+0x3de>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006162:	d112      	bne.n	800618a <HAL_RCC_OscConfig+0x3ba>
 8006164:	4b57      	ldr	r3, [pc, #348]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a56      	ldr	r2, [pc, #344]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 800616a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	4b54      	ldr	r3, [pc, #336]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a53      	ldr	r2, [pc, #332]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b51      	ldr	r3, [pc, #324]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a50      	ldr	r2, [pc, #320]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	e011      	b.n	80061ae <HAL_RCC_OscConfig+0x3de>
 800618a:	4b4e      	ldr	r3, [pc, #312]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a4d      	ldr	r2, [pc, #308]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	4b4b      	ldr	r3, [pc, #300]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a4a      	ldr	r2, [pc, #296]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 800619c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	4b48      	ldr	r3, [pc, #288]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a47      	ldr	r2, [pc, #284]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 80061a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80061ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d014      	beq.n	80061e0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80061b6:	f7fc fcd1 	bl	8002b5c <HAL_GetTick>
 80061ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061bc:	e009      	b.n	80061d2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061be:	f7fc fccd 	bl	8002b5c <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b64      	cmp	r3, #100	@ 0x64
 80061ca:	d902      	bls.n	80061d2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	f000 bcd4 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061d2:	4b3c      	ldr	r3, [pc, #240]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0ef      	beq.n	80061be <HAL_RCC_OscConfig+0x3ee>
 80061de:	e013      	b.n	8006208 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80061e0:	f7fc fcbc 	bl	8002b5c <HAL_GetTick>
 80061e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061e6:	e009      	b.n	80061fc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061e8:	f7fc fcb8 	bl	8002b5c <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b64      	cmp	r3, #100	@ 0x64
 80061f4:	d902      	bls.n	80061fc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	f000 bcbf 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061fc:	4b31      	ldr	r3, [pc, #196]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1ef      	bne.n	80061e8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d05f      	beq.n	80062d4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	2b04      	cmp	r3, #4
 8006218:	d005      	beq.n	8006226 <HAL_RCC_OscConfig+0x456>
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	2b0c      	cmp	r3, #12
 800621e:	d114      	bne.n	800624a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006222:	2b02      	cmp	r3, #2
 8006224:	d111      	bne.n	800624a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f000 bca3 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006234:	4b23      	ldr	r3, [pc, #140]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	4920      	ldr	r1, [pc, #128]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006244:	4313      	orrs	r3, r2
 8006246:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006248:	e044      	b.n	80062d4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d024      	beq.n	800629c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006252:	4b1c      	ldr	r3, [pc, #112]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1b      	ldr	r2, [pc, #108]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800625c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800625e:	f7fc fc7d 	bl	8002b5c <HAL_GetTick>
 8006262:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006264:	e009      	b.n	800627a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006266:	f7fc fc79 	bl	8002b5c <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d902      	bls.n	800627a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	f000 bc80 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800627a:	4b12      	ldr	r3, [pc, #72]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0ef      	beq.n	8006266 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006286:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	490b      	ldr	r1, [pc, #44]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]
 800629a:	e01b      	b.n	80062d4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800629c:	4b09      	ldr	r3, [pc, #36]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <HAL_RCC_OscConfig+0x4f4>)
 80062a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80062a8:	f7fc fc58 	bl	8002b5c <HAL_GetTick>
 80062ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062ae:	e00b      	b.n	80062c8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062b0:	f7fc fc54 	bl	8002b5c <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d904      	bls.n	80062c8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	f000 bc5b 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
 80062c4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062c8:	4baf      	ldr	r3, [pc, #700]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1ed      	bne.n	80062b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80c8 	beq.w	8006472 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e8:	4ba7      	ldr	r3, [pc, #668]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80062ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d111      	bne.n	800631a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062f6:	4ba4      	ldr	r3, [pc, #656]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80062f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062fc:	4aa2      	ldr	r2, [pc, #648]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80062fe:	f043 0304 	orr.w	r3, r3, #4
 8006302:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006306:	4ba0      	ldr	r3, [pc, #640]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800631a:	4b9c      	ldr	r3, [pc, #624]	@ (800658c <HAL_RCC_OscConfig+0x7bc>)
 800631c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d119      	bne.n	800635a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006326:	4b99      	ldr	r3, [pc, #612]	@ (800658c <HAL_RCC_OscConfig+0x7bc>)
 8006328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632a:	4a98      	ldr	r2, [pc, #608]	@ (800658c <HAL_RCC_OscConfig+0x7bc>)
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006332:	f7fc fc13 	bl	8002b5c <HAL_GetTick>
 8006336:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006338:	e009      	b.n	800634e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633a:	f7fc fc0f 	bl	8002b5c <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d902      	bls.n	800634e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	f000 bc16 	b.w	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800634e:	4b8f      	ldr	r3, [pc, #572]	@ (800658c <HAL_RCC_OscConfig+0x7bc>)
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0ef      	beq.n	800633a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d05f      	beq.n	8006422 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006362:	4b89      	ldr	r3, [pc, #548]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006368:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006374:	429a      	cmp	r2, r3
 8006376:	d037      	beq.n	80063e8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d006      	beq.n	8006390 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e3f4      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01b      	beq.n	80063d2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800639a:	4b7b      	ldr	r3, [pc, #492]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 800639c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063a0:	4a79      	ldr	r2, [pc, #484]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80063a2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80063a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80063aa:	f7fc fbd7 	bl	8002b5c <HAL_GetTick>
 80063ae:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b2:	f7fc fbd3 	bl	8002b5c <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b05      	cmp	r3, #5
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e3da      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80063c4:	4b70      	ldr	r3, [pc, #448]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80063c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1ef      	bne.n	80063b2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80063d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80063d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	4969      	ldr	r1, [pc, #420]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80063e8:	4b67      	ldr	r3, [pc, #412]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80063ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ee:	4a66      	ldr	r2, [pc, #408]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80063f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80063f8:	f7fc fbb0 	bl	8002b5c <HAL_GetTick>
 80063fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006400:	f7fc fbac 	bl	8002b5c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b05      	cmp	r3, #5
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e3b3      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006412:	4b5d      	ldr	r3, [pc, #372]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0ef      	beq.n	8006400 <HAL_RCC_OscConfig+0x630>
 8006420:	e01b      	b.n	800645a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006422:	4b59      	ldr	r3, [pc, #356]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006428:	4a57      	ldr	r2, [pc, #348]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 800642a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800642e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006432:	f7fc fb93 	bl	8002b5c <HAL_GetTick>
 8006436:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800643a:	f7fc fb8f 	bl	8002b5c <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b05      	cmp	r3, #5
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e396      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800644c:	4b4e      	ldr	r3, [pc, #312]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 800644e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1ef      	bne.n	800643a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800645a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800645e:	2b01      	cmp	r3, #1
 8006460:	d107      	bne.n	8006472 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006462:	4b49      	ldr	r3, [pc, #292]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006468:	4a47      	ldr	r2, [pc, #284]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 800646a:	f023 0304 	bic.w	r3, r3, #4
 800646e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8111 	beq.w	80066a2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006480:	2300      	movs	r3, #0
 8006482:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006486:	4b40      	ldr	r3, [pc, #256]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d111      	bne.n	80064b8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006494:	4b3c      	ldr	r3, [pc, #240]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800649a:	4a3b      	ldr	r2, [pc, #236]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 800649c:	f043 0304 	orr.w	r3, r3, #4
 80064a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80064a4:	4b38      	ldr	r3, [pc, #224]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 80064a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064b8:	4b34      	ldr	r3, [pc, #208]	@ (800658c <HAL_RCC_OscConfig+0x7bc>)
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d118      	bne.n	80064f6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80064c4:	4b31      	ldr	r3, [pc, #196]	@ (800658c <HAL_RCC_OscConfig+0x7bc>)
 80064c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c8:	4a30      	ldr	r2, [pc, #192]	@ (800658c <HAL_RCC_OscConfig+0x7bc>)
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064d0:	f7fc fb44 	bl	8002b5c <HAL_GetTick>
 80064d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d8:	f7fc fb40 	bl	8002b5c <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e347      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064ea:	4b28      	ldr	r3, [pc, #160]	@ (800658c <HAL_RCC_OscConfig+0x7bc>)
 80064ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01f      	beq.n	8006542 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d010      	beq.n	8006530 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800650e:	4b1e      	ldr	r3, [pc, #120]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006514:	4a1c      	ldr	r2, [pc, #112]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006516:	f043 0304 	orr.w	r3, r3, #4
 800651a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800651e:	4b1a      	ldr	r3, [pc, #104]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006524:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800652e:	e018      	b.n	8006562 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006530:	4b15      	ldr	r3, [pc, #84]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006536:	4a14      	ldr	r2, [pc, #80]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006538:	f043 0301 	orr.w	r3, r3, #1
 800653c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006540:	e00f      	b.n	8006562 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006542:	4b11      	ldr	r3, [pc, #68]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006548:	4a0f      	ldr	r2, [pc, #60]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006552:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 8006554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006558:	4a0b      	ldr	r2, [pc, #44]	@ (8006588 <HAL_RCC_OscConfig+0x7b8>)
 800655a:	f023 0304 	bic.w	r3, r3, #4
 800655e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d057      	beq.n	800661a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800656a:	f7fc faf7 	bl	8002b5c <HAL_GetTick>
 800656e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006570:	e00e      	b.n	8006590 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006572:	f7fc faf3 	bl	8002b5c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006580:	4293      	cmp	r3, r2
 8006582:	d905      	bls.n	8006590 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e2f8      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
 8006588:	46020c00 	.word	0x46020c00
 800658c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006590:	4b9c      	ldr	r3, [pc, #624]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 8006592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0e9      	beq.n	8006572 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01b      	beq.n	80065e2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80065aa:	4b96      	ldr	r3, [pc, #600]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80065ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b0:	4a94      	ldr	r2, [pc, #592]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80065b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80065ba:	e00a      	b.n	80065d2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065bc:	f7fc face 	bl	8002b5c <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e2d3      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80065d2:	4b8c      	ldr	r3, [pc, #560]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80065d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0ed      	beq.n	80065bc <HAL_RCC_OscConfig+0x7ec>
 80065e0:	e053      	b.n	800668a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80065e2:	4b88      	ldr	r3, [pc, #544]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80065e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065e8:	4a86      	ldr	r2, [pc, #536]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80065ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065f2:	e00a      	b.n	800660a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f4:	f7fc fab2 	bl	8002b5c <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e2b7      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800660a:	4b7e      	ldr	r3, [pc, #504]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 800660c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1ed      	bne.n	80065f4 <HAL_RCC_OscConfig+0x824>
 8006618:	e037      	b.n	800668a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800661a:	f7fc fa9f 	bl	8002b5c <HAL_GetTick>
 800661e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006620:	e00a      	b.n	8006638 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006622:	f7fc fa9b 	bl	8002b5c <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006630:	4293      	cmp	r3, r2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e2a0      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006638:	4b72      	ldr	r3, [pc, #456]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 800663a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ed      	bne.n	8006622 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006646:	4b6f      	ldr	r3, [pc, #444]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 8006648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800664c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01a      	beq.n	800668a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006654:	4b6b      	ldr	r3, [pc, #428]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 8006656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800665a:	4a6a      	ldr	r2, [pc, #424]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 800665c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006660:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006664:	e00a      	b.n	800667c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006666:	f7fc fa79 	bl	8002b5c <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006674:	4293      	cmp	r3, r2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e27e      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800667c:	4b61      	ldr	r3, [pc, #388]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 800667e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1ed      	bne.n	8006666 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800668a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800668e:	2b01      	cmp	r3, #1
 8006690:	d107      	bne.n	80066a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006692:	4b5c      	ldr	r3, [pc, #368]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 8006694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006698:	4a5a      	ldr	r2, [pc, #360]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 800669a:	f023 0304 	bic.w	r3, r3, #4
 800669e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d036      	beq.n	800671c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d019      	beq.n	80066ea <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80066b6:	4b53      	ldr	r3, [pc, #332]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a52      	ldr	r2, [pc, #328]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80066bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066c0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066c2:	f7fc fa4b 	bl	8002b5c <HAL_GetTick>
 80066c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066ca:	f7fc fa47 	bl	8002b5c <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e24e      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80066dc:	4b49      	ldr	r3, [pc, #292]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0f0      	beq.n	80066ca <HAL_RCC_OscConfig+0x8fa>
 80066e8:	e018      	b.n	800671c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80066ea:	4b46      	ldr	r3, [pc, #280]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a45      	ldr	r2, [pc, #276]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80066f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066f6:	f7fc fa31 	bl	8002b5c <HAL_GetTick>
 80066fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066fe:	f7fc fa2d 	bl	8002b5c <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e234      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006710:	4b3c      	ldr	r3, [pc, #240]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f0      	bne.n	80066fe <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006724:	2b00      	cmp	r3, #0
 8006726:	d036      	beq.n	8006796 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672c:	2b00      	cmp	r3, #0
 800672e:	d019      	beq.n	8006764 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006730:	4b34      	ldr	r3, [pc, #208]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a33      	ldr	r2, [pc, #204]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 8006736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800673a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800673c:	f7fc fa0e 	bl	8002b5c <HAL_GetTick>
 8006740:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006744:	f7fc fa0a 	bl	8002b5c <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e211      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006756:	4b2b      	ldr	r3, [pc, #172]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0f0      	beq.n	8006744 <HAL_RCC_OscConfig+0x974>
 8006762:	e018      	b.n	8006796 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006764:	4b27      	ldr	r3, [pc, #156]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a26      	ldr	r2, [pc, #152]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 800676a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800676e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006770:	f7fc f9f4 	bl	8002b5c <HAL_GetTick>
 8006774:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006778:	f7fc f9f0 	bl	8002b5c <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e1f7      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800678a:	4b1e      	ldr	r3, [pc, #120]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d07f      	beq.n	80068a2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d062      	beq.n	8006870 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80067aa:	4b16      	ldr	r3, [pc, #88]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80067b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067b4:	6093      	str	r3, [r2, #8]
 80067b6:	4b13      	ldr	r3, [pc, #76]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c2:	4910      	ldr	r1, [pc, #64]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80067d0:	d309      	bcc.n	80067e6 <HAL_RCC_OscConfig+0xa16>
 80067d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f023 021f 	bic.w	r2, r3, #31
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	4909      	ldr	r1, [pc, #36]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60cb      	str	r3, [r1, #12]
 80067e4:	e02a      	b.n	800683c <HAL_RCC_OscConfig+0xa6c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da0c      	bge.n	8006808 <HAL_RCC_OscConfig+0xa38>
 80067ee:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	015b      	lsls	r3, r3, #5
 80067fc:	4901      	ldr	r1, [pc, #4]	@ (8006804 <HAL_RCC_OscConfig+0xa34>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	60cb      	str	r3, [r1, #12]
 8006802:	e01b      	b.n	800683c <HAL_RCC_OscConfig+0xa6c>
 8006804:	46020c00 	.word	0x46020c00
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006810:	d30a      	bcc.n	8006828 <HAL_RCC_OscConfig+0xa58>
 8006812:	4ba1      	ldr	r3, [pc, #644]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	029b      	lsls	r3, r3, #10
 8006820:	499d      	ldr	r1, [pc, #628]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006822:	4313      	orrs	r3, r2
 8006824:	60cb      	str	r3, [r1, #12]
 8006826:	e009      	b.n	800683c <HAL_RCC_OscConfig+0xa6c>
 8006828:	4b9b      	ldr	r3, [pc, #620]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	03db      	lsls	r3, r3, #15
 8006836:	4998      	ldr	r1, [pc, #608]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006838:	4313      	orrs	r3, r2
 800683a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800683c:	4b96      	ldr	r3, [pc, #600]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a95      	ldr	r2, [pc, #596]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006842:	f043 0310 	orr.w	r3, r3, #16
 8006846:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006848:	f7fc f988 	bl	8002b5c <HAL_GetTick>
 800684c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006850:	f7fc f984 	bl	8002b5c <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e18b      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006862:	4b8d      	ldr	r3, [pc, #564]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f0      	beq.n	8006850 <HAL_RCC_OscConfig+0xa80>
 800686e:	e018      	b.n	80068a2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006870:	4b89      	ldr	r3, [pc, #548]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a88      	ldr	r2, [pc, #544]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006876:	f023 0310 	bic.w	r3, r3, #16
 800687a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800687c:	f7fc f96e 	bl	8002b5c <HAL_GetTick>
 8006880:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006884:	f7fc f96a 	bl	8002b5c <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e171      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006896:	4b80      	ldr	r3, [pc, #512]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f0      	bne.n	8006884 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8166 	beq.w	8006b78 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80068ac:	2300      	movs	r3, #0
 80068ae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068b2:	4b79      	ldr	r3, [pc, #484]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 030c 	and.w	r3, r3, #12
 80068ba:	2b0c      	cmp	r3, #12
 80068bc:	f000 80f2 	beq.w	8006aa4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	f040 80c5 	bne.w	8006a54 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80068ca:	4b73      	ldr	r3, [pc, #460]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a72      	ldr	r2, [pc, #456]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80068d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068d6:	f7fc f941 	bl	8002b5c <HAL_GetTick>
 80068da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068de:	f7fc f93d 	bl	8002b5c <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e144      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068f0:	4b69      	ldr	r3, [pc, #420]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f0      	bne.n	80068de <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068fc:	4b66      	ldr	r3, [pc, #408]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80068fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d111      	bne.n	800692e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800690a:	4b63      	ldr	r3, [pc, #396]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 800690c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006910:	4a61      	ldr	r2, [pc, #388]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006912:	f043 0304 	orr.w	r3, r3, #4
 8006916:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800691a:	4b5f      	ldr	r3, [pc, #380]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 800691c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800692e:	4b5b      	ldr	r3, [pc, #364]	@ (8006a9c <HAL_RCC_OscConfig+0xccc>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006936:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800693a:	d102      	bne.n	8006942 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006942:	4b56      	ldr	r3, [pc, #344]	@ (8006a9c <HAL_RCC_OscConfig+0xccc>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	4a55      	ldr	r2, [pc, #340]	@ (8006a9c <HAL_RCC_OscConfig+0xccc>)
 8006948:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800694c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800694e:	4b52      	ldr	r3, [pc, #328]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006956:	f023 0303 	bic.w	r3, r3, #3
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006962:	3a01      	subs	r2, #1
 8006964:	0212      	lsls	r2, r2, #8
 8006966:	4311      	orrs	r1, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800696c:	430a      	orrs	r2, r1
 800696e:	494a      	ldr	r1, [pc, #296]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006970:	4313      	orrs	r3, r2
 8006972:	628b      	str	r3, [r1, #40]	@ 0x28
 8006974:	4b48      	ldr	r3, [pc, #288]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006978:	4b49      	ldr	r3, [pc, #292]	@ (8006aa0 <HAL_RCC_OscConfig+0xcd0>)
 800697a:	4013      	ands	r3, r2
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006980:	3a01      	subs	r2, #1
 8006982:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800698a:	3a01      	subs	r2, #1
 800698c:	0252      	lsls	r2, r2, #9
 800698e:	b292      	uxth	r2, r2
 8006990:	4311      	orrs	r1, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006996:	3a01      	subs	r2, #1
 8006998:	0412      	lsls	r2, r2, #16
 800699a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800699e:	4311      	orrs	r1, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80069a4:	3a01      	subs	r2, #1
 80069a6:	0612      	lsls	r2, r2, #24
 80069a8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80069ac:	430a      	orrs	r2, r1
 80069ae:	493a      	ldr	r1, [pc, #232]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80069b4:	4b38      	ldr	r3, [pc, #224]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	4a37      	ldr	r2, [pc, #220]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80069ba:	f023 0310 	bic.w	r3, r3, #16
 80069be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c4:	4a34      	ldr	r2, [pc, #208]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80069ca:	4b33      	ldr	r3, [pc, #204]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80069cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ce:	4a32      	ldr	r2, [pc, #200]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80069d0:	f043 0310 	orr.w	r3, r3, #16
 80069d4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80069d6:	4b30      	ldr	r3, [pc, #192]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80069d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069da:	f023 020c 	bic.w	r2, r3, #12
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e2:	492d      	ldr	r1, [pc, #180]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80069e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d105      	bne.n	80069fc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80069f0:	4b2a      	ldr	r3, [pc, #168]	@ (8006a9c <HAL_RCC_OscConfig+0xccc>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4a29      	ldr	r2, [pc, #164]	@ (8006a9c <HAL_RCC_OscConfig+0xccc>)
 80069f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069fa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80069fc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d107      	bne.n	8006a14 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006a04:	4b24      	ldr	r3, [pc, #144]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a0a:	4a23      	ldr	r2, [pc, #140]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a0c:	f023 0304 	bic.w	r3, r3, #4
 8006a10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006a14:	4b20      	ldr	r3, [pc, #128]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1f      	ldr	r2, [pc, #124]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a20:	f7fc f89c 	bl	8002b5c <HAL_GetTick>
 8006a24:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a28:	f7fc f898 	bl	8002b5c <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e09f      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006a3a:	4b17      	ldr	r3, [pc, #92]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f0      	beq.n	8006a28 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a46:	4b14      	ldr	r3, [pc, #80]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4a:	4a13      	ldr	r2, [pc, #76]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a50:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a52:	e091      	b.n	8006b78 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006a54:	4b10      	ldr	r3, [pc, #64]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a0f      	ldr	r2, [pc, #60]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a5e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a60:	f7fc f87c 	bl	8002b5c <HAL_GetTick>
 8006a64:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a68:	f7fc f878 	bl	8002b5c <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e07f      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a7a:	4b07      	ldr	r3, [pc, #28]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f0      	bne.n	8006a68 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006a86:	4b04      	ldr	r3, [pc, #16]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	4a03      	ldr	r2, [pc, #12]	@ (8006a98 <HAL_RCC_OscConfig+0xcc8>)
 8006a8c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006a90:	f023 0303 	bic.w	r3, r3, #3
 8006a94:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a96:	e06f      	b.n	8006b78 <HAL_RCC_OscConfig+0xda8>
 8006a98:	46020c00 	.word	0x46020c00
 8006a9c:	46020800 	.word	0x46020800
 8006aa0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006aa4:	4b37      	ldr	r3, [pc, #220]	@ (8006b84 <HAL_RCC_OscConfig+0xdb4>)
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006aaa:	4b36      	ldr	r3, [pc, #216]	@ (8006b84 <HAL_RCC_OscConfig+0xdb4>)
 8006aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aae:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d039      	beq.n	8006b2c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 0203 	and.w	r2, r3, #3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d132      	bne.n	8006b2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d129      	bne.n	8006b2c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d122      	bne.n	8006b2c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006af0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d11a      	bne.n	8006b2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	0a5b      	lsrs	r3, r3, #9
 8006afa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d111      	bne.n	8006b2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b14:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d108      	bne.n	8006b2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	0e1b      	lsrs	r3, r3, #24
 8006b1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b26:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d001      	beq.n	8006b30 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e024      	b.n	8006b7a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b30:	4b14      	ldr	r3, [pc, #80]	@ (8006b84 <HAL_RCC_OscConfig+0xdb4>)
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	08db      	lsrs	r3, r3, #3
 8006b36:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d01a      	beq.n	8006b78 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006b42:	4b10      	ldr	r3, [pc, #64]	@ (8006b84 <HAL_RCC_OscConfig+0xdb4>)
 8006b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b46:	4a0f      	ldr	r2, [pc, #60]	@ (8006b84 <HAL_RCC_OscConfig+0xdb4>)
 8006b48:	f023 0310 	bic.w	r3, r3, #16
 8006b4c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4e:	f7fc f805 	bl	8002b5c <HAL_GetTick>
 8006b52:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006b54:	bf00      	nop
 8006b56:	f7fc f801 	bl	8002b5c <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d0f9      	beq.n	8006b56 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b66:	4a07      	ldr	r2, [pc, #28]	@ (8006b84 <HAL_RCC_OscConfig+0xdb4>)
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006b6c:	4b05      	ldr	r3, [pc, #20]	@ (8006b84 <HAL_RCC_OscConfig+0xdb4>)
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	4a04      	ldr	r2, [pc, #16]	@ (8006b84 <HAL_RCC_OscConfig+0xdb4>)
 8006b72:	f043 0310 	orr.w	r3, r3, #16
 8006b76:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3738      	adds	r7, #56	@ 0x38
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	46020c00 	.word	0x46020c00

08006b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e1d9      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b9c:	4b9b      	ldr	r3, [pc, #620]	@ (8006e0c <HAL_RCC_ClockConfig+0x284>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d910      	bls.n	8006bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006baa:	4b98      	ldr	r3, [pc, #608]	@ (8006e0c <HAL_RCC_ClockConfig+0x284>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f023 020f 	bic.w	r2, r3, #15
 8006bb2:	4996      	ldr	r1, [pc, #600]	@ (8006e0c <HAL_RCC_ClockConfig+0x284>)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bba:	4b94      	ldr	r3, [pc, #592]	@ (8006e0c <HAL_RCC_ClockConfig+0x284>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e1c1      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d010      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	4b8c      	ldr	r3, [pc, #560]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d908      	bls.n	8006bfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006be8:	4b89      	ldr	r3, [pc, #548]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	4986      	ldr	r1, [pc, #536]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d012      	beq.n	8006c2c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	4b81      	ldr	r3, [pc, #516]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	091b      	lsrs	r3, r3, #4
 8006c10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d909      	bls.n	8006c2c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006c18:	4b7d      	ldr	r3, [pc, #500]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	497a      	ldr	r1, [pc, #488]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d010      	beq.n	8006c5a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	4b74      	ldr	r3, [pc, #464]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d908      	bls.n	8006c5a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006c48:	4b71      	ldr	r3, [pc, #452]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	496e      	ldr	r1, [pc, #440]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d010      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	4b69      	ldr	r3, [pc, #420]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d908      	bls.n	8006c88 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006c76:	4b66      	ldr	r3, [pc, #408]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f023 020f 	bic.w	r2, r3, #15
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	4963      	ldr	r1, [pc, #396]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80d2 	beq.w	8006e3a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d143      	bne.n	8006d2a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d110      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006cb0:	4b57      	ldr	r3, [pc, #348]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cb6:	4a56      	ldr	r2, [pc, #344]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006cb8:	f043 0304 	orr.w	r3, r3, #4
 8006cbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006cc0:	4b53      	ldr	r3, [pc, #332]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	60bb      	str	r3, [r7, #8]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006cd2:	f7fb ff43 	bl	8002b5c <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006cd8:	4b4e      	ldr	r3, [pc, #312]	@ (8006e14 <HAL_RCC_ClockConfig+0x28c>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00f      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006ce6:	f7fb ff39 	bl	8002b5c <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e12b      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006cf8:	4b46      	ldr	r3, [pc, #280]	@ (8006e14 <HAL_RCC_ClockConfig+0x28c>)
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0f0      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d107      	bne.n	8006d1a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006d0a:	4b41      	ldr	r3, [pc, #260]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d10:	4a3f      	ldr	r2, [pc, #252]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006d12:	f023 0304 	bic.w	r3, r3, #4
 8006d16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d121      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e112      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d107      	bne.n	8006d42 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d32:	4b37      	ldr	r3, [pc, #220]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d115      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e106      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d107      	bne.n	8006d5a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006d4a:	4b31      	ldr	r3, [pc, #196]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e0fa      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e0f2      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006d6a:	4b29      	ldr	r3, [pc, #164]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f023 0203 	bic.w	r2, r3, #3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	4926      	ldr	r1, [pc, #152]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006d7c:	f7fb feee 	bl	8002b5c <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d112      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d8a:	e00a      	b.n	8006da2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d8c:	f7fb fee6 	bl	8002b5c <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e0d6      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006da2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f003 030c 	and.w	r3, r3, #12
 8006daa:	2b0c      	cmp	r3, #12
 8006dac:	d1ee      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x204>
 8006dae:	e044      	b.n	8006e3a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d112      	bne.n	8006dde <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006db8:	e00a      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dba:	f7fb fecf 	bl	8002b5c <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e0bf      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f003 030c 	and.w	r3, r3, #12
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d1ee      	bne.n	8006dba <HAL_RCC_ClockConfig+0x232>
 8006ddc:	e02d      	b.n	8006e3a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d123      	bne.n	8006e2e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006de6:	e00a      	b.n	8006dfe <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de8:	f7fb feb8 	bl	8002b5c <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e0a8      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006dfe:	4b04      	ldr	r3, [pc, #16]	@ (8006e10 <HAL_RCC_ClockConfig+0x288>)
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f003 030c 	and.w	r3, r3, #12
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1ee      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x260>
 8006e0a:	e016      	b.n	8006e3a <HAL_RCC_ClockConfig+0x2b2>
 8006e0c:	40022000 	.word	0x40022000
 8006e10:	46020c00 	.word	0x46020c00
 8006e14:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e18:	f7fb fea0 	bl	8002b5c <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e090      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 030c 	and.w	r3, r3, #12
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d1ee      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d010      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	4b43      	ldr	r3, [pc, #268]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d208      	bcs.n	8006e68 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006e56:	4b40      	ldr	r3, [pc, #256]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f023 020f 	bic.w	r2, r3, #15
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	493d      	ldr	r1, [pc, #244]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e68:	4b3c      	ldr	r3, [pc, #240]	@ (8006f5c <HAL_RCC_ClockConfig+0x3d4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d210      	bcs.n	8006e98 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e76:	4b39      	ldr	r3, [pc, #228]	@ (8006f5c <HAL_RCC_ClockConfig+0x3d4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f023 020f 	bic.w	r2, r3, #15
 8006e7e:	4937      	ldr	r1, [pc, #220]	@ (8006f5c <HAL_RCC_ClockConfig+0x3d4>)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e86:	4b35      	ldr	r3, [pc, #212]	@ (8006f5c <HAL_RCC_ClockConfig+0x3d4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d001      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e05b      	b.n	8006f50 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d010      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d208      	bcs.n	8006ec6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006eb4:	4b28      	ldr	r3, [pc, #160]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	4925      	ldr	r1, [pc, #148]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d012      	beq.n	8006ef8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	4b20      	ldr	r3, [pc, #128]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	091b      	lsrs	r3, r3, #4
 8006edc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d209      	bcs.n	8006ef8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	4919      	ldr	r1, [pc, #100]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d010      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	4b13      	ldr	r3, [pc, #76]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d208      	bcs.n	8006f26 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006f14:	4b10      	ldr	r3, [pc, #64]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	490d      	ldr	r1, [pc, #52]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006f26:	f000 f821 	bl	8006f6c <HAL_RCC_GetSysClockFreq>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f58 <HAL_RCC_ClockConfig+0x3d0>)
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	490a      	ldr	r1, [pc, #40]	@ (8006f60 <HAL_RCC_ClockConfig+0x3d8>)
 8006f36:	5ccb      	ldrb	r3, [r1, r3]
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3c:	4a09      	ldr	r2, [pc, #36]	@ (8006f64 <HAL_RCC_ClockConfig+0x3dc>)
 8006f3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f40:	4b09      	ldr	r3, [pc, #36]	@ (8006f68 <HAL_RCC_ClockConfig+0x3e0>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fb fd7f 	bl	8002a48 <HAL_InitTick>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	46020c00 	.word	0x46020c00
 8006f5c:	40022000 	.word	0x40022000
 8006f60:	0800e898 	.word	0x0800e898
 8006f64:	20000000 	.word	0x20000000
 8006f68:	20000070 	.word	0x20000070

08006f6c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b08b      	sub	sp, #44	@ 0x2c
 8006f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f7a:	4b78      	ldr	r3, [pc, #480]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
 8006f82:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f84:	4b75      	ldr	r3, [pc, #468]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	f003 0303 	and.w	r3, r3, #3
 8006f8c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d005      	beq.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2b0c      	cmp	r3, #12
 8006f98:	d121      	bne.n	8006fde <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d11e      	bne.n	8006fde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006fa0:	4b6e      	ldr	r3, [pc, #440]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006fac:	4b6b      	ldr	r3, [pc, #428]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fb2:	0b1b      	lsrs	r3, r3, #12
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fba:	e005      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006fbc:	4b67      	ldr	r3, [pc, #412]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	0f1b      	lsrs	r3, r3, #28
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006fc8:	4a65      	ldr	r2, [pc, #404]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d110      	bne.n	8006ffa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006fdc:	e00d      	b.n	8006ffa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fde:	4b5f      	ldr	r3, [pc, #380]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d102      	bne.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fea:	4b5e      	ldr	r3, [pc, #376]	@ (8007164 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006fec:	623b      	str	r3, [r7, #32]
 8006fee:	e004      	b.n	8006ffa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8007164 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006ff8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b0c      	cmp	r3, #12
 8006ffe:	f040 80a5 	bne.w	800714c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007002:	4b56      	ldr	r3, [pc, #344]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800700c:	4b53      	ldr	r3, [pc, #332]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	3301      	adds	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800701a:	4b50      	ldr	r3, [pc, #320]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701e:	091b      	lsrs	r3, r3, #4
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007026:	4b4d      	ldr	r3, [pc, #308]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702a:	08db      	lsrs	r3, r3, #3
 800702c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d003      	beq.n	8007050 <HAL_RCC_GetSysClockFreq+0xe4>
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d022      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0x128>
 800704e:	e043      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007168 <HAL_RCC_GetSysClockFreq+0x1fc>
 800705e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007062:	4b3e      	ldr	r3, [pc, #248]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007072:	ed97 6a01 	vldr	s12, [r7, #4]
 8007076:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800716c <HAL_RCC_GetSysClockFreq+0x200>
 800707a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800707e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007086:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800708a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007092:	e046      	b.n	8007122 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007168 <HAL_RCC_GetSysClockFreq+0x1fc>
 80070a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a6:	4b2d      	ldr	r3, [pc, #180]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80070b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80070ba:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800716c <HAL_RCC_GetSysClockFreq+0x200>
 80070be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80070c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d6:	e024      	b.n	8007122 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	ee07 3a90 	vmov	s15, r3
 80070e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f0:	4b1a      	ldr	r3, [pc, #104]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f8:	ee07 3a90 	vmov	s15, r3
 80070fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007100:	ed97 6a01 	vldr	s12, [r7, #4]
 8007104:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800716c <HAL_RCC_GetSysClockFreq+0x200>
 8007108:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800710c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007114:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007120:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007122:	4b0e      	ldr	r3, [pc, #56]	@ (800715c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007126:	0e1b      	lsrs	r3, r3, #24
 8007128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800712c:	3301      	adds	r3, #1
 800712e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800713a:	edd7 6a07 	vldr	s13, [r7, #28]
 800713e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007146:	ee17 3a90 	vmov	r3, s15
 800714a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800714c:	6a3b      	ldr	r3, [r7, #32]
}
 800714e:	4618      	mov	r0, r3
 8007150:	372c      	adds	r7, #44	@ 0x2c
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	46020c00 	.word	0x46020c00
 8007160:	0800e8a8 	.word	0x0800e8a8
 8007164:	00f42400 	.word	0x00f42400
 8007168:	4b742400 	.word	0x4b742400
 800716c:	46000000 	.word	0x46000000

08007170 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007174:	f7ff fefa 	bl	8006f6c <HAL_RCC_GetSysClockFreq>
 8007178:	4602      	mov	r2, r0
 800717a:	4b07      	ldr	r3, [pc, #28]	@ (8007198 <HAL_RCC_GetHCLKFreq+0x28>)
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	4906      	ldr	r1, [pc, #24]	@ (800719c <HAL_RCC_GetHCLKFreq+0x2c>)
 8007184:	5ccb      	ldrb	r3, [r1, r3]
 8007186:	fa22 f303 	lsr.w	r3, r2, r3
 800718a:	4a05      	ldr	r2, [pc, #20]	@ (80071a0 <HAL_RCC_GetHCLKFreq+0x30>)
 800718c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800718e:	4b04      	ldr	r3, [pc, #16]	@ (80071a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8007190:	681b      	ldr	r3, [r3, #0]
}
 8007192:	4618      	mov	r0, r3
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	46020c00 	.word	0x46020c00
 800719c:	0800e898 	.word	0x0800e898
 80071a0:	20000000 	.word	0x20000000

080071a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80071ac:	4b3e      	ldr	r3, [pc, #248]	@ (80072a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80071ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80071ba:	f7fe fddb 	bl	8005d74 <HAL_PWREx_GetVoltageRange>
 80071be:	6178      	str	r0, [r7, #20]
 80071c0:	e019      	b.n	80071f6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80071c2:	4b39      	ldr	r3, [pc, #228]	@ (80072a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80071c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071c8:	4a37      	ldr	r2, [pc, #220]	@ (80072a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80071ca:	f043 0304 	orr.w	r3, r3, #4
 80071ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80071d2:	4b35      	ldr	r3, [pc, #212]	@ (80072a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80071d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071e0:	f7fe fdc8 	bl	8005d74 <HAL_PWREx_GetVoltageRange>
 80071e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071e6:	4b30      	ldr	r3, [pc, #192]	@ (80072a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80071e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071ec:	4a2e      	ldr	r2, [pc, #184]	@ (80072a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80071ee:	f023 0304 	bic.w	r3, r3, #4
 80071f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071fc:	d003      	beq.n	8007206 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007204:	d109      	bne.n	800721a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800720c:	d202      	bcs.n	8007214 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800720e:	2301      	movs	r3, #1
 8007210:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007212:	e033      	b.n	800727c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007218:	e030      	b.n	800727c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007220:	d208      	bcs.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007228:	d102      	bne.n	8007230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800722a:	2303      	movs	r3, #3
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	e025      	b.n	800727c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e035      	b.n	80072a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800723a:	d90f      	bls.n	800725c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007248:	d902      	bls.n	8007250 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	e015      	b.n	800727c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007250:	2301      	movs	r3, #1
 8007252:	613b      	str	r3, [r7, #16]
 8007254:	e012      	b.n	800727c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007256:	2300      	movs	r3, #0
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	e00f      	b.n	800727c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007262:	d109      	bne.n	8007278 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800726a:	d102      	bne.n	8007272 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800726c:	2301      	movs	r3, #1
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	e004      	b.n	800727c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007272:	2302      	movs	r3, #2
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	e001      	b.n	800727c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007278:	2301      	movs	r3, #1
 800727a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800727c:	4b0b      	ldr	r3, [pc, #44]	@ (80072ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f023 020f 	bic.w	r2, r3, #15
 8007284:	4909      	ldr	r1, [pc, #36]	@ (80072ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800728c:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	429a      	cmp	r2, r3
 8007298:	d001      	beq.n	800729e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	46020c00 	.word	0x46020c00
 80072ac:	40022000 	.word	0x40022000

080072b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80072b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b4:	b0b8      	sub	sp, #224	@ 0xe0
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f002 0401 	and.w	r4, r2, #1
 80072d4:	2500      	movs	r5, #0
 80072d6:	ea54 0305 	orrs.w	r3, r4, r5
 80072da:	d00b      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80072dc:	4bca      	ldr	r3, [pc, #808]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072e2:	f023 0103 	bic.w	r1, r3, #3
 80072e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ec:	4ac6      	ldr	r2, [pc, #792]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072ee:	430b      	orrs	r3, r1
 80072f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f002 0802 	and.w	r8, r2, #2
 8007300:	f04f 0900 	mov.w	r9, #0
 8007304:	ea58 0309 	orrs.w	r3, r8, r9
 8007308:	d00b      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800730a:	4bbf      	ldr	r3, [pc, #764]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800730c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007310:	f023 010c 	bic.w	r1, r3, #12
 8007314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800731a:	4abb      	ldr	r2, [pc, #748]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800731c:	430b      	orrs	r3, r1
 800731e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	f002 0a04 	and.w	sl, r2, #4
 800732e:	f04f 0b00 	mov.w	fp, #0
 8007332:	ea5a 030b 	orrs.w	r3, sl, fp
 8007336:	d00b      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007338:	4bb3      	ldr	r3, [pc, #716]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800733a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800733e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007348:	4aaf      	ldr	r2, [pc, #700]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800734a:	430b      	orrs	r3, r1
 800734c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f002 0308 	and.w	r3, r2, #8
 800735c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007360:	2300      	movs	r3, #0
 8007362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007366:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800736a:	460b      	mov	r3, r1
 800736c:	4313      	orrs	r3, r2
 800736e:	d00b      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007370:	4ba5      	ldr	r3, [pc, #660]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007376:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800737a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800737e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007380:	4aa1      	ldr	r2, [pc, #644]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007382:	430b      	orrs	r3, r1
 8007384:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f002 0310 	and.w	r3, r2, #16
 8007394:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007398:	2300      	movs	r3, #0
 800739a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800739e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80073a2:	460b      	mov	r3, r1
 80073a4:	4313      	orrs	r3, r2
 80073a6:	d00b      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80073a8:	4b97      	ldr	r3, [pc, #604]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80073b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b8:	4a93      	ldr	r2, [pc, #588]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073ba:	430b      	orrs	r3, r1
 80073bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f002 0320 	and.w	r3, r2, #32
 80073cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073d0:	2300      	movs	r3, #0
 80073d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80073da:	460b      	mov	r3, r1
 80073dc:	4313      	orrs	r3, r2
 80073de:	d00b      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80073e0:	4b89      	ldr	r3, [pc, #548]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073e6:	f023 0107 	bic.w	r1, r3, #7
 80073ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073f0:	4a85      	ldr	r2, [pc, #532]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073f2:	430b      	orrs	r3, r1
 80073f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007408:	2300      	movs	r3, #0
 800740a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800740e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007412:	460b      	mov	r3, r1
 8007414:	4313      	orrs	r3, r2
 8007416:	d00b      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007418:	4b7b      	ldr	r3, [pc, #492]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800741a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800741e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007422:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007428:	4a77      	ldr	r2, [pc, #476]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800742a:	430b      	orrs	r3, r1
 800742c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800743c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007440:	2300      	movs	r3, #0
 8007442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007446:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800744a:	460b      	mov	r3, r1
 800744c:	4313      	orrs	r3, r2
 800744e:	d00b      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007450:	4b6d      	ldr	r3, [pc, #436]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007456:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800745a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800745e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007460:	4a69      	ldr	r2, [pc, #420]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007462:	430b      	orrs	r3, r1
 8007464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007478:	2300      	movs	r3, #0
 800747a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800747e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007482:	460b      	mov	r3, r1
 8007484:	4313      	orrs	r3, r2
 8007486:	d00b      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007488:	4b5f      	ldr	r3, [pc, #380]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800748a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800748e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007492:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007498:	4a5b      	ldr	r2, [pc, #364]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800749a:	430b      	orrs	r3, r1
 800749c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80074ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074b0:	2300      	movs	r3, #0
 80074b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80074ba:	460b      	mov	r3, r1
 80074bc:	4313      	orrs	r3, r2
 80074be:	d00b      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80074c0:	4b51      	ldr	r3, [pc, #324]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074c6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80074ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d0:	4a4d      	ldr	r2, [pc, #308]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074d2:	430b      	orrs	r3, r1
 80074d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80074d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80074e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074e8:	2300      	movs	r3, #0
 80074ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80074ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80074f2:	460b      	mov	r3, r1
 80074f4:	4313      	orrs	r3, r2
 80074f6:	d00b      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80074f8:	4b43      	ldr	r3, [pc, #268]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074fe:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007508:	4a3f      	ldr	r2, [pc, #252]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800750a:	430b      	orrs	r3, r1
 800750c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800751c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007520:	2300      	movs	r3, #0
 8007522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007526:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800752a:	460b      	mov	r3, r1
 800752c:	4313      	orrs	r3, r2
 800752e:	d00b      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007530:	4b35      	ldr	r3, [pc, #212]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007536:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800753a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800753e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007540:	4a31      	ldr	r2, [pc, #196]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007542:	430b      	orrs	r3, r1
 8007544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007554:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007556:	2300      	movs	r3, #0
 8007558:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800755a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800755e:	460b      	mov	r3, r1
 8007560:	4313      	orrs	r3, r2
 8007562:	d00c      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007564:	4b28      	ldr	r3, [pc, #160]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800756a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800756e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007576:	4a24      	ldr	r2, [pc, #144]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007578:	430b      	orrs	r3, r1
 800757a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800757e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800758a:	673b      	str	r3, [r7, #112]	@ 0x70
 800758c:	2300      	movs	r3, #0
 800758e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007590:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007594:	460b      	mov	r3, r1
 8007596:	4313      	orrs	r3, r2
 8007598:	d04f      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800759a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a2:	2b80      	cmp	r3, #128	@ 0x80
 80075a4:	d02d      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80075a6:	2b80      	cmp	r3, #128	@ 0x80
 80075a8:	d827      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80075aa:	2b60      	cmp	r3, #96	@ 0x60
 80075ac:	d02e      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80075ae:	2b60      	cmp	r3, #96	@ 0x60
 80075b0:	d823      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80075b2:	2b40      	cmp	r3, #64	@ 0x40
 80075b4:	d006      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80075b6:	2b40      	cmp	r3, #64	@ 0x40
 80075b8:	d81f      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d011      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80075c2:	e01a      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075c4:	4b10      	ldr	r3, [pc, #64]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80075c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c8:	4a0f      	ldr	r2, [pc, #60]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80075ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80075d0:	e01d      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075d6:	3308      	adds	r3, #8
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fc0d 	bl	8007df8 <RCCEx_PLL2_Config>
 80075de:	4603      	mov	r3, r0
 80075e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80075e4:	e013      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075ea:	332c      	adds	r3, #44	@ 0x2c
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fc9b 	bl	8007f28 <RCCEx_PLL3_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80075f8:	e009      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007600:	e005      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8007602:	bf00      	nop
 8007604:	e003      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007606:	bf00      	nop
 8007608:	46020c00 	.word	0x46020c00
        break;
 800760c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800760e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10d      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007616:	4bb6      	ldr	r3, [pc, #728]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800761c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007628:	4ab1      	ldr	r2, [pc, #708]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800762a:	430b      	orrs	r3, r1
 800762c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007630:	e003      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007632:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007636:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800763a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007646:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007648:	2300      	movs	r3, #0
 800764a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800764c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007650:	460b      	mov	r3, r1
 8007652:	4313      	orrs	r3, r2
 8007654:	d053      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800765a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800765e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007662:	d033      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007668:	d82c      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800766a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800766e:	d02f      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007670:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007674:	d826      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800767a:	d008      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800767c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007680:	d820      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800768a:	d011      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800768c:	e01a      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800768e:	4b98      	ldr	r3, [pc, #608]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007692:	4a97      	ldr	r2, [pc, #604]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007698:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800769a:	e01a      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800769c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076a0:	3308      	adds	r3, #8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fba8 	bl	8007df8 <RCCEx_PLL2_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80076ae:	e010      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076b4:	332c      	adds	r3, #44	@ 0x2c
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fc36 	bl	8007f28 <RCCEx_PLL3_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80076c2:	e006      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80076ca:	e002      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80076cc:	bf00      	nop
 80076ce:	e000      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80076d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80076da:	4b85      	ldr	r3, [pc, #532]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80076dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076e0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80076e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076ec:	4a80      	ldr	r2, [pc, #512]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80076ee:	430b      	orrs	r3, r1
 80076f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80076f4:	e003      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80076fa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80076fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800770a:	663b      	str	r3, [r7, #96]	@ 0x60
 800770c:	2300      	movs	r3, #0
 800770e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007710:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007714:	460b      	mov	r3, r1
 8007716:	4313      	orrs	r3, r2
 8007718:	d046      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800771a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800771e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007722:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007726:	d028      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007728:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800772c:	d821      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800772e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007732:	d022      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007734:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007738:	d81b      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800773a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800773e:	d01c      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007740:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007744:	d815      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800774a:	d008      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800774c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007750:	d80f      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d011      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800775a:	d00e      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800775c:	e009      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800775e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007762:	3308      	adds	r3, #8
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fb47 	bl	8007df8 <RCCEx_PLL2_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007770:	e004      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007778:	e000      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800777a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800777c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10d      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007784:	4b5a      	ldr	r3, [pc, #360]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800778a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800778e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007796:	4a56      	ldr	r2, [pc, #344]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007798:	430b      	orrs	r3, r1
 800779a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800779e:	e003      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80077a4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80077a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80077b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077b6:	2300      	movs	r3, #0
 80077b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80077be:	460b      	mov	r3, r1
 80077c0:	4313      	orrs	r3, r2
 80077c2:	d03f      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80077c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d81e      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80077d0:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	08007817 	.word	0x08007817
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	080077fb 	.word	0x080077fb
 80077e4:	08007817 	.word	0x08007817
 80077e8:	08007817 	.word	0x08007817
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077ec:	4b40      	ldr	r3, [pc, #256]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80077ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f0:	4a3f      	ldr	r2, [pc, #252]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80077f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077f6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80077f8:	e00e      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077fe:	332c      	adds	r3, #44	@ 0x2c
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fb91 	bl	8007f28 <RCCEx_PLL3_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800780c:	e004      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007814:	e000      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8007816:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007818:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10d      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007820:	4b33      	ldr	r3, [pc, #204]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007822:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007826:	f023 0107 	bic.w	r1, r3, #7
 800782a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007832:	4a2f      	ldr	r2, [pc, #188]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007834:	430b      	orrs	r3, r1
 8007836:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800783a:	e003      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007840:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007850:	653b      	str	r3, [r7, #80]	@ 0x50
 8007852:	2300      	movs	r3, #0
 8007854:	657b      	str	r3, [r7, #84]	@ 0x54
 8007856:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800785a:	460b      	mov	r3, r1
 800785c:	4313      	orrs	r3, r2
 800785e:	d04d      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007868:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800786c:	d028      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800786e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007872:	d821      	bhi.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007874:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007878:	d024      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800787a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800787e:	d81b      	bhi.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007884:	d00e      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8007886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800788a:	d815      	bhi.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01b      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007894:	d110      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007896:	4b16      	ldr	r3, [pc, #88]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789a:	4a15      	ldr	r2, [pc, #84]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800789c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078a0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80078a2:	e012      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078a8:	332c      	adds	r3, #44	@ 0x2c
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 fb3c 	bl	8007f28 <RCCEx_PLL3_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80078b6:	e008      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80078be:	e004      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80078c0:	bf00      	nop
 80078c2:	e002      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80078c4:	bf00      	nop
 80078c6:	e000      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80078c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80078ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d110      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80078d2:	4b07      	ldr	r3, [pc, #28]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80078d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80078dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078e4:	4a02      	ldr	r2, [pc, #8]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80078e6:	430b      	orrs	r3, r1
 80078e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80078ec:	e006      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80078ee:	bf00      	nop
 80078f0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80078f8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800790a:	2300      	movs	r3, #0
 800790c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800790e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007912:	460b      	mov	r3, r1
 8007914:	4313      	orrs	r3, r2
 8007916:	f000 80b5 	beq.w	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800791a:	2300      	movs	r3, #0
 800791c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007920:	4b9d      	ldr	r3, [pc, #628]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007926:	f003 0304 	and.w	r3, r3, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	d113      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800792e:	4b9a      	ldr	r3, [pc, #616]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007934:	4a98      	ldr	r2, [pc, #608]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007936:	f043 0304 	orr.w	r3, r3, #4
 800793a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800793e:	4b96      	ldr	r3, [pc, #600]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800794c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007956:	4b91      	ldr	r3, [pc, #580]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795a:	4a90      	ldr	r2, [pc, #576]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800795c:	f043 0301 	orr.w	r3, r3, #1
 8007960:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007962:	f7fb f8fb 	bl	8002b5c <HAL_GetTick>
 8007966:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800796a:	e00b      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800796c:	f7fb f8f6 	bl	8002b5c <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d903      	bls.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007982:	e005      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007984:	4b85      	ldr	r3, [pc, #532]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0ed      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8007990:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007994:	2b00      	cmp	r3, #0
 8007996:	d165      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007998:	4b7f      	ldr	r3, [pc, #508]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800799a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800799e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80079a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d023      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x746>
 80079ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079b2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80079b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d01b      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079be:	4b76      	ldr	r3, [pc, #472]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079cc:	4b72      	ldr	r3, [pc, #456]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079d2:	4a71      	ldr	r2, [pc, #452]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079dc:	4b6e      	ldr	r3, [pc, #440]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079e2:	4a6d      	ldr	r2, [pc, #436]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079ec:	4a6a      	ldr	r2, [pc, #424]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d019      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a02:	f7fb f8ab 	bl	8002b5c <HAL_GetTick>
 8007a06:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a0a:	e00d      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a0c:	f7fb f8a6 	bl	8002b5c <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d903      	bls.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8007a26:	e006      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a28:	4b5b      	ldr	r3, [pc, #364]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0ea      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8007a36:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10d      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007a3e:	4b56      	ldr	r3, [pc, #344]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a50:	4a51      	ldr	r2, [pc, #324]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a52:	430b      	orrs	r3, r1
 8007a54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007a58:	e008      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a5a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007a5e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8007a62:	e003      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a64:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007a68:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a6c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d107      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a74:	4b48      	ldr	r3, [pc, #288]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a7a:	4a47      	ldr	r2, [pc, #284]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a7c:	f023 0304 	bic.w	r3, r3, #4
 8007a80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007a90:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a92:	2300      	movs	r3, #0
 8007a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	d042      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007aa8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007aac:	d022      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007aae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007ab2:	d81b      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ab8:	d011      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007aba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007abe:	d815      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d019      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007ac4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ac8:	d110      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ace:	3308      	adds	r3, #8
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 f991 	bl	8007df8 <RCCEx_PLL2_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007adc:	e00d      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ade:	4b2e      	ldr	r3, [pc, #184]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ae8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007aea:	e006      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007af2:	e002      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007af4:	bf00      	nop
 8007af6:	e000      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007af8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007afa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10d      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007b02:	4b25      	ldr	r3, [pc, #148]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b08:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b14:	4a20      	ldr	r2, [pc, #128]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007b16:	430b      	orrs	r3, r1
 8007b18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b1c:	e003      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b22:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b34:	2300      	movs	r3, #0
 8007b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	d032      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b4e:	d00b      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b54:	d804      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d008      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b5e:	d007      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007b66:	e004      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007b68:	bf00      	nop
 8007b6a:	e002      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007b6c:	bf00      	nop
 8007b6e:	e000      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007b70:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007b72:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d112      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007b7a:	4b07      	ldr	r3, [pc, #28]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007b7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b8c:	4a02      	ldr	r2, [pc, #8]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007b94:	e008      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8007b96:	bf00      	nop
 8007b98:	46020c00 	.word	0x46020c00
 8007b9c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007ba4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	d019      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bd0:	d105      	bne.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007bd2:	4b88      	ldr	r3, [pc, #544]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd6:	4a87      	ldr	r2, [pc, #540]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bdc:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007bde:	4b85      	ldr	r3, [pc, #532]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007be0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007be4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bf0:	4a80      	ldr	r2, [pc, #512]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c06:	2300      	movs	r3, #0
 8007c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4313      	orrs	r3, r2
 8007c12:	d00c      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007c14:	4b77      	ldr	r3, [pc, #476]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c26:	4973      	ldr	r1, [pc, #460]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007c2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c3a:	623b      	str	r3, [r7, #32]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c44:	460b      	mov	r3, r1
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d00c      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c5c:	4965      	ldr	r1, [pc, #404]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	d00c      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007c80:	4b5c      	ldr	r3, [pc, #368]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c86:	f023 0218 	bic.w	r2, r3, #24
 8007c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c92:	4958      	ldr	r1, [pc, #352]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007ca6:	613b      	str	r3, [r7, #16]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	d032      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007cb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007cbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cc2:	d105      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cce:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cdc:	d108      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 f887 	bl	8007df8 <RCCEx_PLL2_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8007cf0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10d      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d0a:	493a      	ldr	r1, [pc, #232]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007d12:	e003      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d14:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007d18:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007d28:	60bb      	str	r3, [r7, #8]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d32:	460b      	mov	r3, r1
 8007d34:	4313      	orrs	r3, r2
 8007d36:	d03a      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d44:	d00e      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007d46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d4a:	d815      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d017      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8007d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d54:	d110      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d56:	4b27      	ldr	r3, [pc, #156]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5a:	4a26      	ldr	r2, [pc, #152]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d60:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007d62:	e00e      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d68:	3308      	adds	r3, #8
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 f844 	bl	8007df8 <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007d76:	e004      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8007d80:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007d82:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10d      	bne.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d90:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d9c:	4915      	ldr	r1, [pc, #84]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007da4:	e003      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007daa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	607b      	str	r3, [r7, #4]
 8007dc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	d00c      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007dca:	4b0a      	ldr	r3, [pc, #40]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007dd0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ddc:	4905      	ldr	r1, [pc, #20]	@ (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007de4:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	37e0      	adds	r7, #224	@ 0xe0
 8007dec:	46bd      	mov	sp, r7
 8007dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007df2:	bf00      	nop
 8007df4:	46020c00 	.word	0x46020c00

08007df8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007e00:	4b47      	ldr	r3, [pc, #284]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a46      	ldr	r2, [pc, #280]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007e06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e0a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e0c:	f7fa fea6 	bl	8002b5c <HAL_GetTick>
 8007e10:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e12:	e008      	b.n	8007e26 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e14:	f7fa fea2 	bl	8002b5c <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d901      	bls.n	8007e26 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e077      	b.n	8007f16 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e26:	4b3e      	ldr	r3, [pc, #248]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007e32:	4b3b      	ldr	r3, [pc, #236]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007e3a:	f023 0303 	bic.w	r3, r3, #3
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6811      	ldr	r1, [r2, #0]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6852      	ldr	r2, [r2, #4]
 8007e46:	3a01      	subs	r2, #1
 8007e48:	0212      	lsls	r2, r2, #8
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	4934      	ldr	r1, [pc, #208]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007e52:	4b33      	ldr	r3, [pc, #204]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007e54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e56:	4b33      	ldr	r3, [pc, #204]	@ (8007f24 <RCCEx_PLL2_Config+0x12c>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6892      	ldr	r2, [r2, #8]
 8007e5e:	3a01      	subs	r2, #1
 8007e60:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	68d2      	ldr	r2, [r2, #12]
 8007e68:	3a01      	subs	r2, #1
 8007e6a:	0252      	lsls	r2, r2, #9
 8007e6c:	b292      	uxth	r2, r2
 8007e6e:	4311      	orrs	r1, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6912      	ldr	r2, [r2, #16]
 8007e74:	3a01      	subs	r2, #1
 8007e76:	0412      	lsls	r2, r2, #16
 8007e78:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007e7c:	4311      	orrs	r1, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6952      	ldr	r2, [r2, #20]
 8007e82:	3a01      	subs	r2, #1
 8007e84:	0612      	lsls	r2, r2, #24
 8007e86:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	4924      	ldr	r1, [pc, #144]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007e92:	4b23      	ldr	r3, [pc, #140]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	f023 020c 	bic.w	r2, r3, #12
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	4920      	ldr	r1, [pc, #128]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	491c      	ldr	r1, [pc, #112]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007eb8:	f023 0310 	bic.w	r3, r3, #16
 8007ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ebe:	4b18      	ldr	r3, [pc, #96]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ec6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	69d2      	ldr	r2, [r2, #28]
 8007ece:	00d2      	lsls	r2, r2, #3
 8007ed0:	4913      	ldr	r1, [pc, #76]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007ed6:	4b12      	ldr	r3, [pc, #72]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eda:	4a11      	ldr	r2, [pc, #68]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007edc:	f043 0310 	orr.w	r3, r3, #16
 8007ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007ee8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007eec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007eee:	f7fa fe35 	bl	8002b5c <HAL_GetTick>
 8007ef2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ef4:	e008      	b.n	8007f08 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ef6:	f7fa fe31 	bl	8002b5c <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d901      	bls.n	8007f08 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e006      	b.n	8007f16 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f08:	4b05      	ldr	r3, [pc, #20]	@ (8007f20 <RCCEx_PLL2_Config+0x128>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0f0      	beq.n	8007ef6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007f14:	2300      	movs	r3, #0

}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	46020c00 	.word	0x46020c00
 8007f24:	80800000 	.word	0x80800000

08007f28 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007f30:	4b47      	ldr	r3, [pc, #284]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a46      	ldr	r2, [pc, #280]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f3c:	f7fa fe0e 	bl	8002b5c <HAL_GetTick>
 8007f40:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f42:	e008      	b.n	8007f56 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f44:	f7fa fe0a 	bl	8002b5c <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d901      	bls.n	8007f56 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e077      	b.n	8008046 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f56:	4b3e      	ldr	r3, [pc, #248]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f0      	bne.n	8007f44 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007f62:	4b3b      	ldr	r3, [pc, #236]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6811      	ldr	r1, [r2, #0]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6852      	ldr	r2, [r2, #4]
 8007f76:	3a01      	subs	r2, #1
 8007f78:	0212      	lsls	r2, r2, #8
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	4934      	ldr	r1, [pc, #208]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	630b      	str	r3, [r1, #48]	@ 0x30
 8007f82:	4b33      	ldr	r3, [pc, #204]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f86:	4b33      	ldr	r3, [pc, #204]	@ (8008054 <RCCEx_PLL3_Config+0x12c>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6892      	ldr	r2, [r2, #8]
 8007f8e:	3a01      	subs	r2, #1
 8007f90:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	68d2      	ldr	r2, [r2, #12]
 8007f98:	3a01      	subs	r2, #1
 8007f9a:	0252      	lsls	r2, r2, #9
 8007f9c:	b292      	uxth	r2, r2
 8007f9e:	4311      	orrs	r1, r2
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6912      	ldr	r2, [r2, #16]
 8007fa4:	3a01      	subs	r2, #1
 8007fa6:	0412      	lsls	r2, r2, #16
 8007fa8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007fac:	4311      	orrs	r1, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6952      	ldr	r2, [r2, #20]
 8007fb2:	3a01      	subs	r2, #1
 8007fb4:	0612      	lsls	r2, r2, #24
 8007fb6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	4924      	ldr	r1, [pc, #144]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007fc2:	4b23      	ldr	r3, [pc, #140]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc6:	f023 020c 	bic.w	r2, r3, #12
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	4920      	ldr	r1, [pc, #128]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007fd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	491c      	ldr	r1, [pc, #112]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007fe8:	f023 0310 	bic.w	r3, r3, #16
 8007fec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fee:	4b18      	ldr	r3, [pc, #96]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8007ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ff6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	69d2      	ldr	r2, [r2, #28]
 8007ffe:	00d2      	lsls	r2, r2, #3
 8008000:	4913      	ldr	r1, [pc, #76]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8008002:	4313      	orrs	r3, r2
 8008004:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008006:	4b12      	ldr	r3, [pc, #72]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8008008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800a:	4a11      	ldr	r2, [pc, #68]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 800800c:	f043 0310 	orr.w	r3, r3, #16
 8008010:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008012:	4b0f      	ldr	r3, [pc, #60]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a0e      	ldr	r2, [pc, #56]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 8008018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800801c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800801e:	f7fa fd9d 	bl	8002b5c <HAL_GetTick>
 8008022:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008024:	e008      	b.n	8008038 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008026:	f7fa fd99 	bl	8002b5c <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d901      	bls.n	8008038 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e006      	b.n	8008046 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008038:	4b05      	ldr	r3, [pc, #20]	@ (8008050 <RCCEx_PLL3_Config+0x128>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0f0      	beq.n	8008026 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	46020c00 	.word	0x46020c00
 8008054:	80800000 	.word	0x80800000

08008058 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e0fb      	b.n	8008262 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a7f      	ldr	r2, [pc, #508]	@ (800826c <HAL_SPI_Init+0x214>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <HAL_SPI_Init+0x26>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a7d      	ldr	r2, [pc, #500]	@ (8008270 <HAL_SPI_Init+0x218>)
 800807a:	4293      	cmp	r3, r2
 800807c:	e000      	b.n	8008080 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800807e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a78      	ldr	r2, [pc, #480]	@ (800826c <HAL_SPI_Init+0x214>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d004      	beq.n	800809a <HAL_SPI_Init+0x42>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a76      	ldr	r2, [pc, #472]	@ (8008270 <HAL_SPI_Init+0x218>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d105      	bne.n	80080a6 <HAL_SPI_Init+0x4e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	2b0f      	cmp	r3, #15
 80080a0:	d901      	bls.n	80080a6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e0dd      	b.n	8008262 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fbce 	bl	8008848 <SPI_GetPacketSize>
 80080ac:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a6e      	ldr	r2, [pc, #440]	@ (800826c <HAL_SPI_Init+0x214>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d004      	beq.n	80080c2 <HAL_SPI_Init+0x6a>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a6c      	ldr	r2, [pc, #432]	@ (8008270 <HAL_SPI_Init+0x218>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d102      	bne.n	80080c8 <HAL_SPI_Init+0x70>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d816      	bhi.n	80080f6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80080cc:	4a69      	ldr	r2, [pc, #420]	@ (8008274 <HAL_SPI_Init+0x21c>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00e      	beq.n	80080f0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a68      	ldr	r2, [pc, #416]	@ (8008278 <HAL_SPI_Init+0x220>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d009      	beq.n	80080f0 <HAL_SPI_Init+0x98>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a66      	ldr	r2, [pc, #408]	@ (800827c <HAL_SPI_Init+0x224>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d004      	beq.n	80080f0 <HAL_SPI_Init+0x98>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a65      	ldr	r2, [pc, #404]	@ (8008280 <HAL_SPI_Init+0x228>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d104      	bne.n	80080fa <HAL_SPI_Init+0xa2>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	d901      	bls.n	80080fa <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e0b3      	b.n	8008262 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7f9 facc 	bl	80016ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008136:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008140:	d119      	bne.n	8008176 <HAL_SPI_Init+0x11e>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800814a:	d103      	bne.n	8008154 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008150:	2b00      	cmp	r3, #0
 8008152:	d008      	beq.n	8008166 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10c      	bne.n	8008176 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008160:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008164:	d107      	bne.n	8008176 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008174:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00f      	beq.n	80081a2 <HAL_SPI_Init+0x14a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	2b06      	cmp	r3, #6
 8008188:	d90b      	bls.n	80081a2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e007      	b.n	80081b2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80081b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69da      	ldr	r2, [r3, #28]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ba:	431a      	orrs	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	431a      	orrs	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c4:	ea42 0103 	orr.w	r1, r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	431a      	orrs	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	431a      	orrs	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008206:	431a      	orrs	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	431a      	orrs	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008212:	431a      	orrs	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008218:	431a      	orrs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800821e:	ea42 0103 	orr.w	r1, r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	46002000 	.word	0x46002000
 8008270:	56002000 	.word	0x56002000
 8008274:	40013000 	.word	0x40013000
 8008278:	50013000 	.word	0x50013000
 800827c:	40003800 	.word	0x40003800
 8008280:	50003800 	.word	0x50003800

08008284 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	4613      	mov	r3, r2
 8008292:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3320      	adds	r3, #32
 800829a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a90      	ldr	r2, [pc, #576]	@ (80084e4 <HAL_SPI_Transmit+0x260>)
 80082a2:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082a4:	f7fa fc5a 	bl	8002b5c <HAL_GetTick>
 80082a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d001      	beq.n	80082ba <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80082b6:	2302      	movs	r3, #2
 80082b8:	e1f4      	b.n	80086a4 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <HAL_SPI_Transmit+0x42>
 80082c0:	88fb      	ldrh	r3, [r7, #6]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e1ec      	b.n	80086a4 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_SPI_Transmit+0x54>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e1e5      	b.n	80086a4 <HAL_SPI_Transmit+0x420>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2203      	movs	r2, #3
 80082e4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	88fa      	ldrh	r2, [r7, #6]
 80082fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	88fa      	ldrh	r2, [r7, #6]
 8008302:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008330:	d108      	bne.n	8008344 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e009      	b.n	8008358 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008356:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	0c1b      	lsrs	r3, r3, #16
 8008360:	041b      	lsls	r3, r3, #16
 8008362:	88f9      	ldrh	r1, [r7, #6]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	6812      	ldr	r2, [r2, #0]
 8008368:	430b      	orrs	r3, r1
 800836a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10c      	bne.n	80083a4 <HAL_SPI_Transmit+0x120>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008392:	d107      	bne.n	80083a4 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	2b0f      	cmp	r3, #15
 80083aa:	d95b      	bls.n	8008464 <HAL_SPI_Transmit+0x1e0>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a4d      	ldr	r2, [pc, #308]	@ (80084e8 <HAL_SPI_Transmit+0x264>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d04f      	beq.n	8008456 <HAL_SPI_Transmit+0x1d2>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a4c      	ldr	r2, [pc, #304]	@ (80084ec <HAL_SPI_Transmit+0x268>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d04a      	beq.n	8008456 <HAL_SPI_Transmit+0x1d2>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a4a      	ldr	r2, [pc, #296]	@ (80084f0 <HAL_SPI_Transmit+0x26c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d045      	beq.n	8008456 <HAL_SPI_Transmit+0x1d2>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a49      	ldr	r2, [pc, #292]	@ (80084f4 <HAL_SPI_Transmit+0x270>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d147      	bne.n	8008464 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80083d4:	e03f      	b.n	8008456 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d114      	bne.n	800840e <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083f4:	1d1a      	adds	r2, r3, #4
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b29a      	uxth	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800840c:	e023      	b.n	8008456 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800840e:	f7fa fba5 	bl	8002b5c <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	429a      	cmp	r2, r3
 800841c:	d803      	bhi.n	8008426 <HAL_SPI_Transmit+0x1a2>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008424:	d102      	bne.n	800842c <HAL_SPI_Transmit+0x1a8>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d114      	bne.n	8008456 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 f93d 	bl	80086ac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008438:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e126      	b.n	80086a4 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1b9      	bne.n	80083d6 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008462:	e0f9      	b.n	8008658 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	2b07      	cmp	r3, #7
 800846a:	f240 80ee 	bls.w	800864a <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800846e:	e067      	b.n	8008540 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b02      	cmp	r3, #2
 800847c:	d13c      	bne.n	80084f8 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008484:	b29b      	uxth	r3, r3
 8008486:	2b01      	cmp	r3, #1
 8008488:	d918      	bls.n	80084bc <HAL_SPI_Transmit+0x238>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d014      	beq.n	80084bc <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084a2:	1d1a      	adds	r2, r3, #4
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b02      	subs	r3, #2
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80084ba:	e041      	b.n	8008540 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084c0:	881a      	ldrh	r2, [r3, #0]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ca:	1c9a      	adds	r2, r3, #2
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80084e2:	e02d      	b.n	8008540 <HAL_SPI_Transmit+0x2bc>
 80084e4:	46002000 	.word	0x46002000
 80084e8:	40013000 	.word	0x40013000
 80084ec:	50013000 	.word	0x50013000
 80084f0:	40003800 	.word	0x40003800
 80084f4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084f8:	f7fa fb30 	bl	8002b5c <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d803      	bhi.n	8008510 <HAL_SPI_Transmit+0x28c>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d102      	bne.n	8008516 <HAL_SPI_Transmit+0x292>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d114      	bne.n	8008540 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 f8c8 	bl	80086ac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008522:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e0b1      	b.n	80086a4 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008546:	b29b      	uxth	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d191      	bne.n	8008470 <HAL_SPI_Transmit+0x1ec>
 800854c:	e084      	b.n	8008658 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b02      	cmp	r3, #2
 800855a:	d152      	bne.n	8008602 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008562:	b29b      	uxth	r3, r3
 8008564:	2b03      	cmp	r3, #3
 8008566:	d918      	bls.n	800859a <HAL_SPI_Transmit+0x316>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800856c:	2b40      	cmp	r3, #64	@ 0x40
 800856e:	d914      	bls.n	800859a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008580:	1d1a      	adds	r2, r3, #4
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b04      	subs	r3, #4
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008598:	e057      	b.n	800864a <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d917      	bls.n	80085d6 <HAL_SPI_Transmit+0x352>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d013      	beq.n	80085d6 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085b2:	881a      	ldrh	r2, [r3, #0]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085bc:	1c9a      	adds	r2, r3, #2
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	3b02      	subs	r3, #2
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80085d4:	e039      	b.n	800864a <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3320      	adds	r3, #32
 80085e0:	7812      	ldrb	r2, [r2, #0]
 80085e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008600:	e023      	b.n	800864a <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008602:	f7fa faab 	bl	8002b5c <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d803      	bhi.n	800861a <HAL_SPI_Transmit+0x396>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008618:	d102      	bne.n	8008620 <HAL_SPI_Transmit+0x39c>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d114      	bne.n	800864a <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f843 	bl	80086ac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800862c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e02c      	b.n	80086a4 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	f47f af7b 	bne.w	800854e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2200      	movs	r2, #0
 8008660:	2108      	movs	r1, #8
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f8c2 	bl	80087ec <SPI_WaitOnFlagUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008674:	f043 0220 	orr.w	r2, r3, #32
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f814 	bl	80086ac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 80086a2:	2300      	movs	r3, #0
  }
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0208 	orr.w	r2, r2, #8
 80086ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0210 	orr.w	r2, r2, #16
 80086da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0201 	bic.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80086fa:	f023 0303 	bic.w	r3, r3, #3
 80086fe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800870e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b04      	cmp	r3, #4
 800871a:	d014      	beq.n	8008746 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00f      	beq.n	8008746 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800872c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	699a      	ldr	r2, [r3, #24]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0220 	orr.w	r2, r2, #32
 8008744:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b03      	cmp	r3, #3
 8008750:	d014      	beq.n	800877c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00f      	beq.n	800877c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008762:	f043 0204 	orr.w	r2, r3, #4
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800877a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00f      	beq.n	80087a6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800878c:	f043 0201 	orr.w	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	699a      	ldr	r2, [r3, #24]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00f      	beq.n	80087d0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087b6:	f043 0208 	orr.w	r2, r3, #8
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80087e0:	bf00      	nop
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	4613      	mov	r3, r2
 80087fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80087fc:	e010      	b.n	8008820 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087fe:	f7fa f9ad 	bl	8002b5c <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d803      	bhi.n	8008816 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d102      	bne.n	800881c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e00f      	b.n	8008840 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695a      	ldr	r2, [r3, #20]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4013      	ands	r3, r2
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	429a      	cmp	r2, r3
 800882e:	bf0c      	ite	eq
 8008830:	2301      	moveq	r3, #1
 8008832:	2300      	movne	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	461a      	mov	r2, r3
 8008838:	79fb      	ldrb	r3, [r7, #7]
 800883a:	429a      	cmp	r2, r3
 800883c:	d0df      	beq.n	80087fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008854:	095b      	lsrs	r3, r3, #5
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	3307      	adds	r3, #7
 8008866:	08db      	lsrs	r3, r3, #3
 8008868:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b01      	cmp	r3, #1
 8008892:	d12e      	bne.n	80088f2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800889a:	2b01      	cmp	r3, #1
 800889c:	d101      	bne.n	80088a2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800889e:	2302      	movs	r3, #2
 80088a0:	e028      	b.n	80088f4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2202      	movs	r2, #2
 80088ae:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 0201 	bic.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80088ce:	ea42 0103 	orr.w	r1, r2, r3
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e000      	b.n	80088f4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
  }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e049      	b.n	80089a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7f8 ffb6 	bl	8001898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f000 fbfe 	bl	8009140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e049      	b.n	8008a54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d106      	bne.n	80089da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f841 	bl	8008a5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4619      	mov	r1, r3
 80089ec:	4610      	mov	r0, r2
 80089ee:	f000 fba7 	bl	8009140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <HAL_TIM_PWM_Start+0x24>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	bf14      	ite	ne
 8008a8c:	2301      	movne	r3, #1
 8008a8e:	2300      	moveq	r3, #0
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	e03c      	b.n	8008b0e <HAL_TIM_PWM_Start+0x9e>
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d109      	bne.n	8008aae <HAL_TIM_PWM_Start+0x3e>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	bf14      	ite	ne
 8008aa6:	2301      	movne	r3, #1
 8008aa8:	2300      	moveq	r3, #0
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	e02f      	b.n	8008b0e <HAL_TIM_PWM_Start+0x9e>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d109      	bne.n	8008ac8 <HAL_TIM_PWM_Start+0x58>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	bf14      	ite	ne
 8008ac0:	2301      	movne	r3, #1
 8008ac2:	2300      	moveq	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	e022      	b.n	8008b0e <HAL_TIM_PWM_Start+0x9e>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b0c      	cmp	r3, #12
 8008acc:	d109      	bne.n	8008ae2 <HAL_TIM_PWM_Start+0x72>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	bf14      	ite	ne
 8008ada:	2301      	movne	r3, #1
 8008adc:	2300      	moveq	r3, #0
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	e015      	b.n	8008b0e <HAL_TIM_PWM_Start+0x9e>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b10      	cmp	r3, #16
 8008ae6:	d109      	bne.n	8008afc <HAL_TIM_PWM_Start+0x8c>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	bf14      	ite	ne
 8008af4:	2301      	movne	r3, #1
 8008af6:	2300      	moveq	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	e008      	b.n	8008b0e <HAL_TIM_PWM_Start+0x9e>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	bf14      	ite	ne
 8008b08:	2301      	movne	r3, #1
 8008b0a:	2300      	moveq	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e0d8      	b.n	8008cc8 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d104      	bne.n	8008b26 <HAL_TIM_PWM_Start+0xb6>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b24:	e023      	b.n	8008b6e <HAL_TIM_PWM_Start+0xfe>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d104      	bne.n	8008b36 <HAL_TIM_PWM_Start+0xc6>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b34:	e01b      	b.n	8008b6e <HAL_TIM_PWM_Start+0xfe>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d104      	bne.n	8008b46 <HAL_TIM_PWM_Start+0xd6>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b44:	e013      	b.n	8008b6e <HAL_TIM_PWM_Start+0xfe>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	2b0c      	cmp	r3, #12
 8008b4a:	d104      	bne.n	8008b56 <HAL_TIM_PWM_Start+0xe6>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b54:	e00b      	b.n	8008b6e <HAL_TIM_PWM_Start+0xfe>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b10      	cmp	r3, #16
 8008b5a:	d104      	bne.n	8008b66 <HAL_TIM_PWM_Start+0xf6>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b64:	e003      	b.n	8008b6e <HAL_TIM_PWM_Start+0xfe>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2202      	movs	r2, #2
 8008b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2201      	movs	r2, #1
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f001 f854 	bl	8009c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a53      	ldr	r2, [pc, #332]	@ (8008cd0 <HAL_TIM_PWM_Start+0x260>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d02c      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x170>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a52      	ldr	r2, [pc, #328]	@ (8008cd4 <HAL_TIM_PWM_Start+0x264>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d027      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x170>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a50      	ldr	r2, [pc, #320]	@ (8008cd8 <HAL_TIM_PWM_Start+0x268>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d022      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x170>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a4f      	ldr	r2, [pc, #316]	@ (8008cdc <HAL_TIM_PWM_Start+0x26c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d01d      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x170>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a4d      	ldr	r2, [pc, #308]	@ (8008ce0 <HAL_TIM_PWM_Start+0x270>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d018      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x170>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a4c      	ldr	r2, [pc, #304]	@ (8008ce4 <HAL_TIM_PWM_Start+0x274>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d013      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x170>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a4a      	ldr	r2, [pc, #296]	@ (8008ce8 <HAL_TIM_PWM_Start+0x278>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00e      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x170>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a49      	ldr	r2, [pc, #292]	@ (8008cec <HAL_TIM_PWM_Start+0x27c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d009      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x170>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a47      	ldr	r2, [pc, #284]	@ (8008cf0 <HAL_TIM_PWM_Start+0x280>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d004      	beq.n	8008be0 <HAL_TIM_PWM_Start+0x170>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a46      	ldr	r2, [pc, #280]	@ (8008cf4 <HAL_TIM_PWM_Start+0x284>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d101      	bne.n	8008be4 <HAL_TIM_PWM_Start+0x174>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e000      	b.n	8008be6 <HAL_TIM_PWM_Start+0x176>
 8008be4:	2300      	movs	r3, #0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d007      	beq.n	8008bfa <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a34      	ldr	r2, [pc, #208]	@ (8008cd0 <HAL_TIM_PWM_Start+0x260>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d040      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a32      	ldr	r2, [pc, #200]	@ (8008cd4 <HAL_TIM_PWM_Start+0x264>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d03b      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c16:	d036      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c20:	d031      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a34      	ldr	r2, [pc, #208]	@ (8008cf8 <HAL_TIM_PWM_Start+0x288>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d02c      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a32      	ldr	r2, [pc, #200]	@ (8008cfc <HAL_TIM_PWM_Start+0x28c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d027      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a31      	ldr	r2, [pc, #196]	@ (8008d00 <HAL_TIM_PWM_Start+0x290>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d022      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a2f      	ldr	r2, [pc, #188]	@ (8008d04 <HAL_TIM_PWM_Start+0x294>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d01d      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8008d08 <HAL_TIM_PWM_Start+0x298>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d018      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a2c      	ldr	r2, [pc, #176]	@ (8008d0c <HAL_TIM_PWM_Start+0x29c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d013      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd8 <HAL_TIM_PWM_Start+0x268>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00e      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8008cdc <HAL_TIM_PWM_Start+0x26c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d009      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a1a      	ldr	r2, [pc, #104]	@ (8008ce0 <HAL_TIM_PWM_Start+0x270>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d004      	beq.n	8008c86 <HAL_TIM_PWM_Start+0x216>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a18      	ldr	r2, [pc, #96]	@ (8008ce4 <HAL_TIM_PWM_Start+0x274>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d115      	bne.n	8008cb2 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	4b20      	ldr	r3, [pc, #128]	@ (8008d10 <HAL_TIM_PWM_Start+0x2a0>)
 8008c8e:	4013      	ands	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b06      	cmp	r3, #6
 8008c96:	d015      	beq.n	8008cc4 <HAL_TIM_PWM_Start+0x254>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c9e:	d011      	beq.n	8008cc4 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb0:	e008      	b.n	8008cc4 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f042 0201 	orr.w	r2, r2, #1
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	e000      	b.n	8008cc6 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	40012c00 	.word	0x40012c00
 8008cd4:	50012c00 	.word	0x50012c00
 8008cd8:	40013400 	.word	0x40013400
 8008cdc:	50013400 	.word	0x50013400
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	50014000 	.word	0x50014000
 8008ce8:	40014400 	.word	0x40014400
 8008cec:	50014400 	.word	0x50014400
 8008cf0:	40014800 	.word	0x40014800
 8008cf4:	50014800 	.word	0x50014800
 8008cf8:	40000400 	.word	0x40000400
 8008cfc:	50000400 	.word	0x50000400
 8008d00:	40000800 	.word	0x40000800
 8008d04:	50000800 	.word	0x50000800
 8008d08:	40000c00 	.word	0x40000c00
 8008d0c:	50000c00 	.word	0x50000c00
 8008d10:	00010007 	.word	0x00010007

08008d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d101      	bne.n	8008d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d2e:	2302      	movs	r3, #2
 8008d30:	e0ff      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b14      	cmp	r3, #20
 8008d3e:	f200 80f0 	bhi.w	8008f22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d42:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d9d 	.word	0x08008d9d
 8008d4c:	08008f23 	.word	0x08008f23
 8008d50:	08008f23 	.word	0x08008f23
 8008d54:	08008f23 	.word	0x08008f23
 8008d58:	08008ddd 	.word	0x08008ddd
 8008d5c:	08008f23 	.word	0x08008f23
 8008d60:	08008f23 	.word	0x08008f23
 8008d64:	08008f23 	.word	0x08008f23
 8008d68:	08008e1f 	.word	0x08008e1f
 8008d6c:	08008f23 	.word	0x08008f23
 8008d70:	08008f23 	.word	0x08008f23
 8008d74:	08008f23 	.word	0x08008f23
 8008d78:	08008e5f 	.word	0x08008e5f
 8008d7c:	08008f23 	.word	0x08008f23
 8008d80:	08008f23 	.word	0x08008f23
 8008d84:	08008f23 	.word	0x08008f23
 8008d88:	08008ea1 	.word	0x08008ea1
 8008d8c:	08008f23 	.word	0x08008f23
 8008d90:	08008f23 	.word	0x08008f23
 8008d94:	08008f23 	.word	0x08008f23
 8008d98:	08008ee1 	.word	0x08008ee1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 facc 	bl	8009340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699a      	ldr	r2, [r3, #24]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0208 	orr.w	r2, r2, #8
 8008db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f022 0204 	bic.w	r2, r2, #4
 8008dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6999      	ldr	r1, [r3, #24]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	691a      	ldr	r2, [r3, #16]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	619a      	str	r2, [r3, #24]
      break;
 8008dda:	e0a5      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68b9      	ldr	r1, [r7, #8]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fb6e 	bl	80094c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699a      	ldr	r2, [r3, #24]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699a      	ldr	r2, [r3, #24]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6999      	ldr	r1, [r3, #24]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	021a      	lsls	r2, r3, #8
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	619a      	str	r2, [r3, #24]
      break;
 8008e1c:	e084      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 fbfd 	bl	8009624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69da      	ldr	r2, [r3, #28]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f042 0208 	orr.w	r2, r2, #8
 8008e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0204 	bic.w	r2, r2, #4
 8008e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69d9      	ldr	r1, [r3, #28]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	61da      	str	r2, [r3, #28]
      break;
 8008e5c:	e064      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68b9      	ldr	r1, [r7, #8]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 fc8b 	bl	8009780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69da      	ldr	r2, [r3, #28]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69da      	ldr	r2, [r3, #28]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69d9      	ldr	r1, [r3, #28]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	021a      	lsls	r2, r3, #8
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	61da      	str	r2, [r3, #28]
      break;
 8008e9e:	e043      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fd1a 	bl	80098e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0208 	orr.w	r2, r2, #8
 8008eba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0204 	bic.w	r2, r2, #4
 8008eca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	691a      	ldr	r2, [r3, #16]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ede:	e023      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fd7c 	bl	80099e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008efa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	021a      	lsls	r2, r3, #8
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f20:	e002      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	75fb      	strb	r3, [r7, #23]
      break;
 8008f26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop

08008f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_TIM_ConfigClockSource+0x1c>
 8008f54:	2302      	movs	r3, #2
 8008f56:	e0e6      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x1ea>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008f76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a67      	ldr	r2, [pc, #412]	@ (8009130 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	f000 80b1 	beq.w	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8008f98:	4a65      	ldr	r2, [pc, #404]	@ (8009130 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	f200 80b6 	bhi.w	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8008fa0:	4a64      	ldr	r2, [pc, #400]	@ (8009134 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	f000 80a9 	beq.w	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8008fa8:	4a62      	ldr	r2, [pc, #392]	@ (8009134 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	f200 80ae 	bhi.w	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8008fb0:	4a61      	ldr	r2, [pc, #388]	@ (8009138 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	f000 80a1 	beq.w	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8008fb8:	4a5f      	ldr	r2, [pc, #380]	@ (8009138 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	f200 80a6 	bhi.w	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8008fc0:	4a5e      	ldr	r2, [pc, #376]	@ (800913c <HAL_TIM_ConfigClockSource+0x200>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	f000 8099 	beq.w	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8008fc8:	4a5c      	ldr	r2, [pc, #368]	@ (800913c <HAL_TIM_ConfigClockSource+0x200>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	f200 809e 	bhi.w	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8008fd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008fd4:	f000 8091 	beq.w	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8008fd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008fdc:	f200 8096 	bhi.w	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8008fe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fe4:	f000 8089 	beq.w	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8008fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fec:	f200 808e 	bhi.w	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8008ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ff4:	d03e      	beq.n	8009074 <HAL_TIM_ConfigClockSource+0x138>
 8008ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ffa:	f200 8087 	bhi.w	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8008ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009002:	f000 8086 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x1d6>
 8009006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800900a:	d87f      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 800900c:	2b70      	cmp	r3, #112	@ 0x70
 800900e:	d01a      	beq.n	8009046 <HAL_TIM_ConfigClockSource+0x10a>
 8009010:	2b70      	cmp	r3, #112	@ 0x70
 8009012:	d87b      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8009014:	2b60      	cmp	r3, #96	@ 0x60
 8009016:	d050      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0x17e>
 8009018:	2b60      	cmp	r3, #96	@ 0x60
 800901a:	d877      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 800901c:	2b50      	cmp	r3, #80	@ 0x50
 800901e:	d03c      	beq.n	800909a <HAL_TIM_ConfigClockSource+0x15e>
 8009020:	2b50      	cmp	r3, #80	@ 0x50
 8009022:	d873      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8009024:	2b40      	cmp	r3, #64	@ 0x40
 8009026:	d058      	beq.n	80090da <HAL_TIM_ConfigClockSource+0x19e>
 8009028:	2b40      	cmp	r3, #64	@ 0x40
 800902a:	d86f      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 800902c:	2b30      	cmp	r3, #48	@ 0x30
 800902e:	d064      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8009030:	2b30      	cmp	r3, #48	@ 0x30
 8009032:	d86b      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 8009034:	2b20      	cmp	r3, #32
 8009036:	d060      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8009038:	2b20      	cmp	r3, #32
 800903a:	d867      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x1d0>
 800903c:	2b00      	cmp	r3, #0
 800903e:	d05c      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8009040:	2b10      	cmp	r3, #16
 8009042:	d05a      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8009044:	e062      	b.n	800910c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009056:	f000 fdc5 	bl	8009be4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	609a      	str	r2, [r3, #8]
      break;
 8009072:	e04f      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009084:	f000 fdae 	bl	8009be4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009096:	609a      	str	r2, [r3, #8]
      break;
 8009098:	e03c      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090a6:	461a      	mov	r2, r3
 80090a8:	f000 fd20 	bl	8009aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2150      	movs	r1, #80	@ 0x50
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fd79 	bl	8009baa <TIM_ITRx_SetConfig>
      break;
 80090b8:	e02c      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090c6:	461a      	mov	r2, r3
 80090c8:	f000 fd3f 	bl	8009b4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2160      	movs	r1, #96	@ 0x60
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fd69 	bl	8009baa <TIM_ITRx_SetConfig>
      break;
 80090d8:	e01c      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090e6:	461a      	mov	r2, r3
 80090e8:	f000 fd00 	bl	8009aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2140      	movs	r1, #64	@ 0x40
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fd59 	bl	8009baa <TIM_ITRx_SetConfig>
      break;
 80090f8:	e00c      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f000 fd50 	bl	8009baa <TIM_ITRx_SetConfig>
      break;
 800910a:	e003      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	73fb      	strb	r3, [r7, #15]
      break;
 8009110:	e000      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009124:	7bfb      	ldrb	r3, [r7, #15]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	00100070 	.word	0x00100070
 8009134:	00100040 	.word	0x00100040
 8009138:	00100030 	.word	0x00100030
 800913c:	00100020 	.word	0x00100020

08009140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a6b      	ldr	r2, [pc, #428]	@ (8009300 <TIM_Base_SetConfig+0x1c0>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d02b      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a6a      	ldr	r2, [pc, #424]	@ (8009304 <TIM_Base_SetConfig+0x1c4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d027      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009166:	d023      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800916e:	d01f      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a65      	ldr	r2, [pc, #404]	@ (8009308 <TIM_Base_SetConfig+0x1c8>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d01b      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a64      	ldr	r2, [pc, #400]	@ (800930c <TIM_Base_SetConfig+0x1cc>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d017      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a63      	ldr	r2, [pc, #396]	@ (8009310 <TIM_Base_SetConfig+0x1d0>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d013      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a62      	ldr	r2, [pc, #392]	@ (8009314 <TIM_Base_SetConfig+0x1d4>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d00f      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a61      	ldr	r2, [pc, #388]	@ (8009318 <TIM_Base_SetConfig+0x1d8>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d00b      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a60      	ldr	r2, [pc, #384]	@ (800931c <TIM_Base_SetConfig+0x1dc>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d007      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a5f      	ldr	r2, [pc, #380]	@ (8009320 <TIM_Base_SetConfig+0x1e0>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d003      	beq.n	80091b0 <TIM_Base_SetConfig+0x70>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a5e      	ldr	r2, [pc, #376]	@ (8009324 <TIM_Base_SetConfig+0x1e4>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d108      	bne.n	80091c2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a4e      	ldr	r2, [pc, #312]	@ (8009300 <TIM_Base_SetConfig+0x1c0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d043      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a4d      	ldr	r2, [pc, #308]	@ (8009304 <TIM_Base_SetConfig+0x1c4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d03f      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d8:	d03b      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091e0:	d037      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a48      	ldr	r2, [pc, #288]	@ (8009308 <TIM_Base_SetConfig+0x1c8>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d033      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a47      	ldr	r2, [pc, #284]	@ (800930c <TIM_Base_SetConfig+0x1cc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d02f      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a46      	ldr	r2, [pc, #280]	@ (8009310 <TIM_Base_SetConfig+0x1d0>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d02b      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a45      	ldr	r2, [pc, #276]	@ (8009314 <TIM_Base_SetConfig+0x1d4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d027      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a44      	ldr	r2, [pc, #272]	@ (8009318 <TIM_Base_SetConfig+0x1d8>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d023      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a43      	ldr	r2, [pc, #268]	@ (800931c <TIM_Base_SetConfig+0x1dc>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d01f      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a42      	ldr	r2, [pc, #264]	@ (8009320 <TIM_Base_SetConfig+0x1e0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d01b      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a41      	ldr	r2, [pc, #260]	@ (8009324 <TIM_Base_SetConfig+0x1e4>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d017      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a40      	ldr	r2, [pc, #256]	@ (8009328 <TIM_Base_SetConfig+0x1e8>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d013      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a3f      	ldr	r2, [pc, #252]	@ (800932c <TIM_Base_SetConfig+0x1ec>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00f      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a3e      	ldr	r2, [pc, #248]	@ (8009330 <TIM_Base_SetConfig+0x1f0>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d00b      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a3d      	ldr	r2, [pc, #244]	@ (8009334 <TIM_Base_SetConfig+0x1f4>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d007      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a3c      	ldr	r2, [pc, #240]	@ (8009338 <TIM_Base_SetConfig+0x1f8>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d003      	beq.n	8009252 <TIM_Base_SetConfig+0x112>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a3b      	ldr	r2, [pc, #236]	@ (800933c <TIM_Base_SetConfig+0x1fc>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d108      	bne.n	8009264 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	689a      	ldr	r2, [r3, #8]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a1e      	ldr	r2, [pc, #120]	@ (8009300 <TIM_Base_SetConfig+0x1c0>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d023      	beq.n	80092d2 <TIM_Base_SetConfig+0x192>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a1d      	ldr	r2, [pc, #116]	@ (8009304 <TIM_Base_SetConfig+0x1c4>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d01f      	beq.n	80092d2 <TIM_Base_SetConfig+0x192>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a22      	ldr	r2, [pc, #136]	@ (8009320 <TIM_Base_SetConfig+0x1e0>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d01b      	beq.n	80092d2 <TIM_Base_SetConfig+0x192>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a21      	ldr	r2, [pc, #132]	@ (8009324 <TIM_Base_SetConfig+0x1e4>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d017      	beq.n	80092d2 <TIM_Base_SetConfig+0x192>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a20      	ldr	r2, [pc, #128]	@ (8009328 <TIM_Base_SetConfig+0x1e8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d013      	beq.n	80092d2 <TIM_Base_SetConfig+0x192>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a1f      	ldr	r2, [pc, #124]	@ (800932c <TIM_Base_SetConfig+0x1ec>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d00f      	beq.n	80092d2 <TIM_Base_SetConfig+0x192>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009330 <TIM_Base_SetConfig+0x1f0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d00b      	beq.n	80092d2 <TIM_Base_SetConfig+0x192>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009334 <TIM_Base_SetConfig+0x1f4>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d007      	beq.n	80092d2 <TIM_Base_SetConfig+0x192>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009338 <TIM_Base_SetConfig+0x1f8>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d003      	beq.n	80092d2 <TIM_Base_SetConfig+0x192>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a1b      	ldr	r2, [pc, #108]	@ (800933c <TIM_Base_SetConfig+0x1fc>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d103      	bne.n	80092da <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	691a      	ldr	r2, [r3, #16]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f043 0204 	orr.w	r2, r3, #4
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	601a      	str	r2, [r3, #0]
}
 80092f2:	bf00      	nop
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	40012c00 	.word	0x40012c00
 8009304:	50012c00 	.word	0x50012c00
 8009308:	40000400 	.word	0x40000400
 800930c:	50000400 	.word	0x50000400
 8009310:	40000800 	.word	0x40000800
 8009314:	50000800 	.word	0x50000800
 8009318:	40000c00 	.word	0x40000c00
 800931c:	50000c00 	.word	0x50000c00
 8009320:	40013400 	.word	0x40013400
 8009324:	50013400 	.word	0x50013400
 8009328:	40014000 	.word	0x40014000
 800932c:	50014000 	.word	0x50014000
 8009330:	40014400 	.word	0x40014400
 8009334:	50014400 	.word	0x50014400
 8009338:	40014800 	.word	0x40014800
 800933c:	50014800 	.word	0x50014800

08009340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	f023 0201 	bic.w	r2, r3, #1
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800936e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0303 	bic.w	r3, r3, #3
 800937a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f023 0302 	bic.w	r3, r3, #2
 800938c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	4313      	orrs	r3, r2
 8009396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a40      	ldr	r2, [pc, #256]	@ (800949c <TIM_OC1_SetConfig+0x15c>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d023      	beq.n	80093e8 <TIM_OC1_SetConfig+0xa8>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a3f      	ldr	r2, [pc, #252]	@ (80094a0 <TIM_OC1_SetConfig+0x160>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d01f      	beq.n	80093e8 <TIM_OC1_SetConfig+0xa8>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a3e      	ldr	r2, [pc, #248]	@ (80094a4 <TIM_OC1_SetConfig+0x164>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d01b      	beq.n	80093e8 <TIM_OC1_SetConfig+0xa8>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a3d      	ldr	r2, [pc, #244]	@ (80094a8 <TIM_OC1_SetConfig+0x168>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d017      	beq.n	80093e8 <TIM_OC1_SetConfig+0xa8>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a3c      	ldr	r2, [pc, #240]	@ (80094ac <TIM_OC1_SetConfig+0x16c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d013      	beq.n	80093e8 <TIM_OC1_SetConfig+0xa8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a3b      	ldr	r2, [pc, #236]	@ (80094b0 <TIM_OC1_SetConfig+0x170>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00f      	beq.n	80093e8 <TIM_OC1_SetConfig+0xa8>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a3a      	ldr	r2, [pc, #232]	@ (80094b4 <TIM_OC1_SetConfig+0x174>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00b      	beq.n	80093e8 <TIM_OC1_SetConfig+0xa8>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a39      	ldr	r2, [pc, #228]	@ (80094b8 <TIM_OC1_SetConfig+0x178>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_OC1_SetConfig+0xa8>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a38      	ldr	r2, [pc, #224]	@ (80094bc <TIM_OC1_SetConfig+0x17c>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_OC1_SetConfig+0xa8>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a37      	ldr	r2, [pc, #220]	@ (80094c0 <TIM_OC1_SetConfig+0x180>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d10c      	bne.n	8009402 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f023 0308 	bic.w	r3, r3, #8
 80093ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f023 0304 	bic.w	r3, r3, #4
 8009400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a25      	ldr	r2, [pc, #148]	@ (800949c <TIM_OC1_SetConfig+0x15c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d023      	beq.n	8009452 <TIM_OC1_SetConfig+0x112>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a24      	ldr	r2, [pc, #144]	@ (80094a0 <TIM_OC1_SetConfig+0x160>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d01f      	beq.n	8009452 <TIM_OC1_SetConfig+0x112>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a23      	ldr	r2, [pc, #140]	@ (80094a4 <TIM_OC1_SetConfig+0x164>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d01b      	beq.n	8009452 <TIM_OC1_SetConfig+0x112>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a22      	ldr	r2, [pc, #136]	@ (80094a8 <TIM_OC1_SetConfig+0x168>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d017      	beq.n	8009452 <TIM_OC1_SetConfig+0x112>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a21      	ldr	r2, [pc, #132]	@ (80094ac <TIM_OC1_SetConfig+0x16c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d013      	beq.n	8009452 <TIM_OC1_SetConfig+0x112>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a20      	ldr	r2, [pc, #128]	@ (80094b0 <TIM_OC1_SetConfig+0x170>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d00f      	beq.n	8009452 <TIM_OC1_SetConfig+0x112>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a1f      	ldr	r2, [pc, #124]	@ (80094b4 <TIM_OC1_SetConfig+0x174>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00b      	beq.n	8009452 <TIM_OC1_SetConfig+0x112>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a1e      	ldr	r2, [pc, #120]	@ (80094b8 <TIM_OC1_SetConfig+0x178>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d007      	beq.n	8009452 <TIM_OC1_SetConfig+0x112>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a1d      	ldr	r2, [pc, #116]	@ (80094bc <TIM_OC1_SetConfig+0x17c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d003      	beq.n	8009452 <TIM_OC1_SetConfig+0x112>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a1c      	ldr	r2, [pc, #112]	@ (80094c0 <TIM_OC1_SetConfig+0x180>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d111      	bne.n	8009476 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	4313      	orrs	r3, r2
 800946a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	4313      	orrs	r3, r2
 8009474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	621a      	str	r2, [r3, #32]
}
 8009490:	bf00      	nop
 8009492:	371c      	adds	r7, #28
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	50012c00 	.word	0x50012c00
 80094a4:	40013400 	.word	0x40013400
 80094a8:	50013400 	.word	0x50013400
 80094ac:	40014000 	.word	0x40014000
 80094b0:	50014000 	.word	0x50014000
 80094b4:	40014400 	.word	0x40014400
 80094b8:	50014400 	.word	0x50014400
 80094bc:	40014800 	.word	0x40014800
 80094c0:	50014800 	.word	0x50014800

080094c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a1b      	ldr	r3, [r3, #32]
 80094d8:	f023 0210 	bic.w	r2, r3, #16
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	021b      	lsls	r3, r3, #8
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	4313      	orrs	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f023 0320 	bic.w	r3, r3, #32
 8009512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	011b      	lsls	r3, r3, #4
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	4313      	orrs	r3, r2
 800951e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a36      	ldr	r2, [pc, #216]	@ (80095fc <TIM_OC2_SetConfig+0x138>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00b      	beq.n	8009540 <TIM_OC2_SetConfig+0x7c>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a35      	ldr	r2, [pc, #212]	@ (8009600 <TIM_OC2_SetConfig+0x13c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d007      	beq.n	8009540 <TIM_OC2_SetConfig+0x7c>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a34      	ldr	r2, [pc, #208]	@ (8009604 <TIM_OC2_SetConfig+0x140>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_OC2_SetConfig+0x7c>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a33      	ldr	r2, [pc, #204]	@ (8009608 <TIM_OC2_SetConfig+0x144>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d10d      	bne.n	800955c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800955a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a27      	ldr	r2, [pc, #156]	@ (80095fc <TIM_OC2_SetConfig+0x138>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d023      	beq.n	80095ac <TIM_OC2_SetConfig+0xe8>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a26      	ldr	r2, [pc, #152]	@ (8009600 <TIM_OC2_SetConfig+0x13c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d01f      	beq.n	80095ac <TIM_OC2_SetConfig+0xe8>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a25      	ldr	r2, [pc, #148]	@ (8009604 <TIM_OC2_SetConfig+0x140>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d01b      	beq.n	80095ac <TIM_OC2_SetConfig+0xe8>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a24      	ldr	r2, [pc, #144]	@ (8009608 <TIM_OC2_SetConfig+0x144>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d017      	beq.n	80095ac <TIM_OC2_SetConfig+0xe8>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a23      	ldr	r2, [pc, #140]	@ (800960c <TIM_OC2_SetConfig+0x148>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d013      	beq.n	80095ac <TIM_OC2_SetConfig+0xe8>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a22      	ldr	r2, [pc, #136]	@ (8009610 <TIM_OC2_SetConfig+0x14c>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d00f      	beq.n	80095ac <TIM_OC2_SetConfig+0xe8>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a21      	ldr	r2, [pc, #132]	@ (8009614 <TIM_OC2_SetConfig+0x150>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00b      	beq.n	80095ac <TIM_OC2_SetConfig+0xe8>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a20      	ldr	r2, [pc, #128]	@ (8009618 <TIM_OC2_SetConfig+0x154>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d007      	beq.n	80095ac <TIM_OC2_SetConfig+0xe8>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a1f      	ldr	r2, [pc, #124]	@ (800961c <TIM_OC2_SetConfig+0x158>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_OC2_SetConfig+0xe8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009620 <TIM_OC2_SetConfig+0x15c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d113      	bne.n	80095d4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	621a      	str	r2, [r3, #32]
}
 80095ee:	bf00      	nop
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	40012c00 	.word	0x40012c00
 8009600:	50012c00 	.word	0x50012c00
 8009604:	40013400 	.word	0x40013400
 8009608:	50013400 	.word	0x50013400
 800960c:	40014000 	.word	0x40014000
 8009610:	50014000 	.word	0x50014000
 8009614:	40014400 	.word	0x40014400
 8009618:	50014400 	.word	0x50014400
 800961c:	40014800 	.word	0x40014800
 8009620:	50014800 	.word	0x50014800

08009624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f023 0303 	bic.w	r3, r3, #3
 800965e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	021b      	lsls	r3, r3, #8
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	4313      	orrs	r3, r2
 800967c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a35      	ldr	r2, [pc, #212]	@ (8009758 <TIM_OC3_SetConfig+0x134>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d00b      	beq.n	800969e <TIM_OC3_SetConfig+0x7a>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a34      	ldr	r2, [pc, #208]	@ (800975c <TIM_OC3_SetConfig+0x138>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d007      	beq.n	800969e <TIM_OC3_SetConfig+0x7a>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a33      	ldr	r2, [pc, #204]	@ (8009760 <TIM_OC3_SetConfig+0x13c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d003      	beq.n	800969e <TIM_OC3_SetConfig+0x7a>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a32      	ldr	r2, [pc, #200]	@ (8009764 <TIM_OC3_SetConfig+0x140>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d10d      	bne.n	80096ba <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	021b      	lsls	r3, r3, #8
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a26      	ldr	r2, [pc, #152]	@ (8009758 <TIM_OC3_SetConfig+0x134>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d023      	beq.n	800970a <TIM_OC3_SetConfig+0xe6>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a25      	ldr	r2, [pc, #148]	@ (800975c <TIM_OC3_SetConfig+0x138>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d01f      	beq.n	800970a <TIM_OC3_SetConfig+0xe6>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a24      	ldr	r2, [pc, #144]	@ (8009760 <TIM_OC3_SetConfig+0x13c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d01b      	beq.n	800970a <TIM_OC3_SetConfig+0xe6>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a23      	ldr	r2, [pc, #140]	@ (8009764 <TIM_OC3_SetConfig+0x140>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d017      	beq.n	800970a <TIM_OC3_SetConfig+0xe6>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a22      	ldr	r2, [pc, #136]	@ (8009768 <TIM_OC3_SetConfig+0x144>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d013      	beq.n	800970a <TIM_OC3_SetConfig+0xe6>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a21      	ldr	r2, [pc, #132]	@ (800976c <TIM_OC3_SetConfig+0x148>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00f      	beq.n	800970a <TIM_OC3_SetConfig+0xe6>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a20      	ldr	r2, [pc, #128]	@ (8009770 <TIM_OC3_SetConfig+0x14c>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00b      	beq.n	800970a <TIM_OC3_SetConfig+0xe6>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009774 <TIM_OC3_SetConfig+0x150>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d007      	beq.n	800970a <TIM_OC3_SetConfig+0xe6>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a1e      	ldr	r2, [pc, #120]	@ (8009778 <TIM_OC3_SetConfig+0x154>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d003      	beq.n	800970a <TIM_OC3_SetConfig+0xe6>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a1d      	ldr	r2, [pc, #116]	@ (800977c <TIM_OC3_SetConfig+0x158>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d113      	bne.n	8009732 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	011b      	lsls	r3, r3, #4
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	4313      	orrs	r3, r2
 8009724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	011b      	lsls	r3, r3, #4
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	4313      	orrs	r3, r2
 8009730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	621a      	str	r2, [r3, #32]
}
 800974c:	bf00      	nop
 800974e:	371c      	adds	r7, #28
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	40012c00 	.word	0x40012c00
 800975c:	50012c00 	.word	0x50012c00
 8009760:	40013400 	.word	0x40013400
 8009764:	50013400 	.word	0x50013400
 8009768:	40014000 	.word	0x40014000
 800976c:	50014000 	.word	0x50014000
 8009770:	40014400 	.word	0x40014400
 8009774:	50014400 	.word	0x50014400
 8009778:	40014800 	.word	0x40014800
 800977c:	50014800 	.word	0x50014800

08009780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	021b      	lsls	r3, r3, #8
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	031b      	lsls	r3, r3, #12
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	4313      	orrs	r3, r2
 80097da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a36      	ldr	r2, [pc, #216]	@ (80098b8 <TIM_OC4_SetConfig+0x138>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d00b      	beq.n	80097fc <TIM_OC4_SetConfig+0x7c>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a35      	ldr	r2, [pc, #212]	@ (80098bc <TIM_OC4_SetConfig+0x13c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d007      	beq.n	80097fc <TIM_OC4_SetConfig+0x7c>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a34      	ldr	r2, [pc, #208]	@ (80098c0 <TIM_OC4_SetConfig+0x140>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d003      	beq.n	80097fc <TIM_OC4_SetConfig+0x7c>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a33      	ldr	r2, [pc, #204]	@ (80098c4 <TIM_OC4_SetConfig+0x144>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d10d      	bne.n	8009818 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	031b      	lsls	r3, r3, #12
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a27      	ldr	r2, [pc, #156]	@ (80098b8 <TIM_OC4_SetConfig+0x138>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d023      	beq.n	8009868 <TIM_OC4_SetConfig+0xe8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a26      	ldr	r2, [pc, #152]	@ (80098bc <TIM_OC4_SetConfig+0x13c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d01f      	beq.n	8009868 <TIM_OC4_SetConfig+0xe8>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a25      	ldr	r2, [pc, #148]	@ (80098c0 <TIM_OC4_SetConfig+0x140>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d01b      	beq.n	8009868 <TIM_OC4_SetConfig+0xe8>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a24      	ldr	r2, [pc, #144]	@ (80098c4 <TIM_OC4_SetConfig+0x144>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d017      	beq.n	8009868 <TIM_OC4_SetConfig+0xe8>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a23      	ldr	r2, [pc, #140]	@ (80098c8 <TIM_OC4_SetConfig+0x148>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <TIM_OC4_SetConfig+0xe8>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a22      	ldr	r2, [pc, #136]	@ (80098cc <TIM_OC4_SetConfig+0x14c>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00f      	beq.n	8009868 <TIM_OC4_SetConfig+0xe8>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a21      	ldr	r2, [pc, #132]	@ (80098d0 <TIM_OC4_SetConfig+0x150>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00b      	beq.n	8009868 <TIM_OC4_SetConfig+0xe8>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a20      	ldr	r2, [pc, #128]	@ (80098d4 <TIM_OC4_SetConfig+0x154>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d007      	beq.n	8009868 <TIM_OC4_SetConfig+0xe8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a1f      	ldr	r2, [pc, #124]	@ (80098d8 <TIM_OC4_SetConfig+0x158>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_OC4_SetConfig+0xe8>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a1e      	ldr	r2, [pc, #120]	@ (80098dc <TIM_OC4_SetConfig+0x15c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d113      	bne.n	8009890 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800986e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009876:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	019b      	lsls	r3, r3, #6
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	019b      	lsls	r3, r3, #6
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4313      	orrs	r3, r2
 800988e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	621a      	str	r2, [r3, #32]
}
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	40012c00 	.word	0x40012c00
 80098bc:	50012c00 	.word	0x50012c00
 80098c0:	40013400 	.word	0x40013400
 80098c4:	50013400 	.word	0x50013400
 80098c8:	40014000 	.word	0x40014000
 80098cc:	50014000 	.word	0x50014000
 80098d0:	40014400 	.word	0x40014400
 80098d4:	50014400 	.word	0x50014400
 80098d8:	40014800 	.word	0x40014800
 80098dc:	50014800 	.word	0x50014800

080098e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800990e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4313      	orrs	r3, r2
 8009930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a21      	ldr	r2, [pc, #132]	@ (80099bc <TIM_OC5_SetConfig+0xdc>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d023      	beq.n	8009982 <TIM_OC5_SetConfig+0xa2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a20      	ldr	r2, [pc, #128]	@ (80099c0 <TIM_OC5_SetConfig+0xe0>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d01f      	beq.n	8009982 <TIM_OC5_SetConfig+0xa2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a1f      	ldr	r2, [pc, #124]	@ (80099c4 <TIM_OC5_SetConfig+0xe4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d01b      	beq.n	8009982 <TIM_OC5_SetConfig+0xa2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a1e      	ldr	r2, [pc, #120]	@ (80099c8 <TIM_OC5_SetConfig+0xe8>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d017      	beq.n	8009982 <TIM_OC5_SetConfig+0xa2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a1d      	ldr	r2, [pc, #116]	@ (80099cc <TIM_OC5_SetConfig+0xec>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d013      	beq.n	8009982 <TIM_OC5_SetConfig+0xa2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a1c      	ldr	r2, [pc, #112]	@ (80099d0 <TIM_OC5_SetConfig+0xf0>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00f      	beq.n	8009982 <TIM_OC5_SetConfig+0xa2>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a1b      	ldr	r2, [pc, #108]	@ (80099d4 <TIM_OC5_SetConfig+0xf4>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00b      	beq.n	8009982 <TIM_OC5_SetConfig+0xa2>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a1a      	ldr	r2, [pc, #104]	@ (80099d8 <TIM_OC5_SetConfig+0xf8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d007      	beq.n	8009982 <TIM_OC5_SetConfig+0xa2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a19      	ldr	r2, [pc, #100]	@ (80099dc <TIM_OC5_SetConfig+0xfc>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d003      	beq.n	8009982 <TIM_OC5_SetConfig+0xa2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a18      	ldr	r2, [pc, #96]	@ (80099e0 <TIM_OC5_SetConfig+0x100>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d109      	bne.n	8009996 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009988:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	021b      	lsls	r3, r3, #8
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	4313      	orrs	r3, r2
 8009994:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	621a      	str	r2, [r3, #32]
}
 80099b0:	bf00      	nop
 80099b2:	371c      	adds	r7, #28
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	40012c00 	.word	0x40012c00
 80099c0:	50012c00 	.word	0x50012c00
 80099c4:	40013400 	.word	0x40013400
 80099c8:	50013400 	.word	0x50013400
 80099cc:	40014000 	.word	0x40014000
 80099d0:	50014000 	.word	0x50014000
 80099d4:	40014400 	.word	0x40014400
 80099d8:	50014400 	.word	0x50014400
 80099dc:	40014800 	.word	0x40014800
 80099e0:	50014800 	.word	0x50014800

080099e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	021b      	lsls	r3, r3, #8
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	051b      	lsls	r3, r3, #20
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a22      	ldr	r2, [pc, #136]	@ (8009ac4 <TIM_OC6_SetConfig+0xe0>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d023      	beq.n	8009a88 <TIM_OC6_SetConfig+0xa4>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a21      	ldr	r2, [pc, #132]	@ (8009ac8 <TIM_OC6_SetConfig+0xe4>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d01f      	beq.n	8009a88 <TIM_OC6_SetConfig+0xa4>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a20      	ldr	r2, [pc, #128]	@ (8009acc <TIM_OC6_SetConfig+0xe8>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d01b      	beq.n	8009a88 <TIM_OC6_SetConfig+0xa4>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a1f      	ldr	r2, [pc, #124]	@ (8009ad0 <TIM_OC6_SetConfig+0xec>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d017      	beq.n	8009a88 <TIM_OC6_SetConfig+0xa4>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad4 <TIM_OC6_SetConfig+0xf0>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d013      	beq.n	8009a88 <TIM_OC6_SetConfig+0xa4>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad8 <TIM_OC6_SetConfig+0xf4>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d00f      	beq.n	8009a88 <TIM_OC6_SetConfig+0xa4>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8009adc <TIM_OC6_SetConfig+0xf8>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d00b      	beq.n	8009a88 <TIM_OC6_SetConfig+0xa4>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a1b      	ldr	r2, [pc, #108]	@ (8009ae0 <TIM_OC6_SetConfig+0xfc>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d007      	beq.n	8009a88 <TIM_OC6_SetConfig+0xa4>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ae4 <TIM_OC6_SetConfig+0x100>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d003      	beq.n	8009a88 <TIM_OC6_SetConfig+0xa4>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a19      	ldr	r2, [pc, #100]	@ (8009ae8 <TIM_OC6_SetConfig+0x104>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d109      	bne.n	8009a9c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	695b      	ldr	r3, [r3, #20]
 8009a94:	029b      	lsls	r3, r3, #10
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	621a      	str	r2, [r3, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	371c      	adds	r7, #28
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	40012c00 	.word	0x40012c00
 8009ac8:	50012c00 	.word	0x50012c00
 8009acc:	40013400 	.word	0x40013400
 8009ad0:	50013400 	.word	0x50013400
 8009ad4:	40014000 	.word	0x40014000
 8009ad8:	50014000 	.word	0x50014000
 8009adc:	40014400 	.word	0x40014400
 8009ae0:	50014400 	.word	0x50014400
 8009ae4:	40014800 	.word	0x40014800
 8009ae8:	50014800 	.word	0x50014800

08009aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	f023 0201 	bic.w	r2, r3, #1
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f023 030a 	bic.w	r3, r3, #10
 8009b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	621a      	str	r2, [r3, #32]
}
 8009b3e:	bf00      	nop
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b087      	sub	sp, #28
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	f023 0210 	bic.w	r2, r3, #16
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	031b      	lsls	r3, r3, #12
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	621a      	str	r2, [r3, #32]
}
 8009b9e:	bf00      	nop
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b085      	sub	sp, #20
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	f043 0307 	orr.w	r3, r3, #7
 8009bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	609a      	str	r2, [r3, #8]
}
 8009bd8:	bf00      	nop
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	021a      	lsls	r2, r3, #8
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	609a      	str	r2, [r3, #8]
}
 8009c18:	bf00      	nop
 8009c1a:	371c      	adds	r7, #28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f003 031f 	and.w	r3, r3, #31
 8009c36:	2201      	movs	r2, #1
 8009c38:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a1a      	ldr	r2, [r3, #32]
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	43db      	mvns	r3, r3
 8009c46:	401a      	ands	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a1a      	ldr	r2, [r3, #32]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f003 031f 	and.w	r3, r3, #31
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	fa01 f303 	lsl.w	r3, r1, r3
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	621a      	str	r2, [r3, #32]
}
 8009c62:	bf00      	nop
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
	...

08009c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d101      	bne.n	8009c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c84:	2302      	movs	r3, #2
 8009c86:	e097      	b.n	8009db8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2202      	movs	r2, #2
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a45      	ldr	r2, [pc, #276]	@ (8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d00e      	beq.n	8009cd0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a44      	ldr	r2, [pc, #272]	@ (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d009      	beq.n	8009cd0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a42      	ldr	r2, [pc, #264]	@ (8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d004      	beq.n	8009cd0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a41      	ldr	r2, [pc, #260]	@ (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d108      	bne.n	8009ce2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009cd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a2f      	ldr	r2, [pc, #188]	@ (8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d040      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d03b      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d1c:	d036      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d26:	d031      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a29      	ldr	r2, [pc, #164]	@ (8009dd4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d02c      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a28      	ldr	r2, [pc, #160]	@ (8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d027      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a26      	ldr	r2, [pc, #152]	@ (8009ddc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d022      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a25      	ldr	r2, [pc, #148]	@ (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d01d      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a23      	ldr	r2, [pc, #140]	@ (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d018      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a22      	ldr	r2, [pc, #136]	@ (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d013      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a18      	ldr	r2, [pc, #96]	@ (8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00e      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a17      	ldr	r2, [pc, #92]	@ (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d009      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d004      	beq.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a1a      	ldr	r2, [pc, #104]	@ (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d10c      	bne.n	8009da6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	40012c00 	.word	0x40012c00
 8009dc8:	50012c00 	.word	0x50012c00
 8009dcc:	40013400 	.word	0x40013400
 8009dd0:	50013400 	.word	0x50013400
 8009dd4:	40000400 	.word	0x40000400
 8009dd8:	50000400 	.word	0x50000400
 8009ddc:	40000800 	.word	0x40000800
 8009de0:	50000800 	.word	0x50000800
 8009de4:	40000c00 	.word	0x40000c00
 8009de8:	50000c00 	.word	0x50000c00
 8009dec:	40014000 	.word	0x40014000
 8009df0:	50014000 	.word	0x50014000

08009df4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d101      	bne.n	8009e10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	e07d      	b.n	8009f0c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	041b      	lsls	r3, r3, #16
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8009f18 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d00e      	beq.n	8009ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8009f1c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d009      	beq.n	8009ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8009f20 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d004      	beq.n	8009ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a1a      	ldr	r2, [pc, #104]	@ (8009f24 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d11c      	bne.n	8009efa <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eca:	051b      	lsls	r3, r3, #20
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	40012c00 	.word	0x40012c00
 8009f1c:	50012c00 	.word	0x50012c00
 8009f20:	40013400 	.word	0x40013400
 8009f24:	50013400 	.word	0x50013400

08009f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f28:	b084      	sub	sp, #16
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	f107 001c 	add.w	r0, r7, #28
 8009f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fab6 	bl	800b4b8 <USB_CoreReset>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009f50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d106      	bne.n	8009f66 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f64:	e005      	b.n	8009f72 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f7e:	b004      	add	sp, #16
 8009f80:	4770      	bx	lr
	...

08009f84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d165      	bne.n	800a064 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	4a41      	ldr	r2, [pc, #260]	@ (800a0a0 <USB_SetTurnaroundTime+0x11c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d906      	bls.n	8009fae <USB_SetTurnaroundTime+0x2a>
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	4a40      	ldr	r2, [pc, #256]	@ (800a0a4 <USB_SetTurnaroundTime+0x120>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d202      	bcs.n	8009fae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009fa8:	230f      	movs	r3, #15
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	e062      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4a3c      	ldr	r2, [pc, #240]	@ (800a0a4 <USB_SetTurnaroundTime+0x120>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d306      	bcc.n	8009fc4 <USB_SetTurnaroundTime+0x40>
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	4a3b      	ldr	r2, [pc, #236]	@ (800a0a8 <USB_SetTurnaroundTime+0x124>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d202      	bcs.n	8009fc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009fbe:	230e      	movs	r3, #14
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	e057      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4a38      	ldr	r2, [pc, #224]	@ (800a0a8 <USB_SetTurnaroundTime+0x124>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d306      	bcc.n	8009fda <USB_SetTurnaroundTime+0x56>
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	4a37      	ldr	r2, [pc, #220]	@ (800a0ac <USB_SetTurnaroundTime+0x128>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d202      	bcs.n	8009fda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009fd4:	230d      	movs	r3, #13
 8009fd6:	617b      	str	r3, [r7, #20]
 8009fd8:	e04c      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	4a33      	ldr	r2, [pc, #204]	@ (800a0ac <USB_SetTurnaroundTime+0x128>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d306      	bcc.n	8009ff0 <USB_SetTurnaroundTime+0x6c>
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	4a32      	ldr	r2, [pc, #200]	@ (800a0b0 <USB_SetTurnaroundTime+0x12c>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d802      	bhi.n	8009ff0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009fea:	230c      	movs	r3, #12
 8009fec:	617b      	str	r3, [r7, #20]
 8009fee:	e041      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	4a2f      	ldr	r2, [pc, #188]	@ (800a0b0 <USB_SetTurnaroundTime+0x12c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d906      	bls.n	800a006 <USB_SetTurnaroundTime+0x82>
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	4a2e      	ldr	r2, [pc, #184]	@ (800a0b4 <USB_SetTurnaroundTime+0x130>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d802      	bhi.n	800a006 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a000:	230b      	movs	r3, #11
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	e036      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	4a2a      	ldr	r2, [pc, #168]	@ (800a0b4 <USB_SetTurnaroundTime+0x130>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d906      	bls.n	800a01c <USB_SetTurnaroundTime+0x98>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	4a29      	ldr	r2, [pc, #164]	@ (800a0b8 <USB_SetTurnaroundTime+0x134>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d802      	bhi.n	800a01c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a016:	230a      	movs	r3, #10
 800a018:	617b      	str	r3, [r7, #20]
 800a01a:	e02b      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	4a26      	ldr	r2, [pc, #152]	@ (800a0b8 <USB_SetTurnaroundTime+0x134>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d906      	bls.n	800a032 <USB_SetTurnaroundTime+0xae>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	4a25      	ldr	r2, [pc, #148]	@ (800a0bc <USB_SetTurnaroundTime+0x138>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d202      	bcs.n	800a032 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a02c:	2309      	movs	r3, #9
 800a02e:	617b      	str	r3, [r7, #20]
 800a030:	e020      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4a21      	ldr	r2, [pc, #132]	@ (800a0bc <USB_SetTurnaroundTime+0x138>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d306      	bcc.n	800a048 <USB_SetTurnaroundTime+0xc4>
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4a20      	ldr	r2, [pc, #128]	@ (800a0c0 <USB_SetTurnaroundTime+0x13c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d802      	bhi.n	800a048 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a042:	2308      	movs	r3, #8
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	e015      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4a1d      	ldr	r2, [pc, #116]	@ (800a0c0 <USB_SetTurnaroundTime+0x13c>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d906      	bls.n	800a05e <USB_SetTurnaroundTime+0xda>
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	4a1c      	ldr	r2, [pc, #112]	@ (800a0c4 <USB_SetTurnaroundTime+0x140>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d202      	bcs.n	800a05e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a058:	2307      	movs	r3, #7
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	e00a      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a05e:	2306      	movs	r3, #6
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	e007      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a06a:	2309      	movs	r3, #9
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	e001      	b.n	800a074 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a070:	2309      	movs	r3, #9
 800a072:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68da      	ldr	r2, [r3, #12]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	029b      	lsls	r3, r3, #10
 800a088:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a08c:	431a      	orrs	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	371c      	adds	r7, #28
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	00d8acbf 	.word	0x00d8acbf
 800a0a4:	00e4e1c0 	.word	0x00e4e1c0
 800a0a8:	00f42400 	.word	0x00f42400
 800a0ac:	01067380 	.word	0x01067380
 800a0b0:	011a499f 	.word	0x011a499f
 800a0b4:	01312cff 	.word	0x01312cff
 800a0b8:	014ca43f 	.word	0x014ca43f
 800a0bc:	016e3600 	.word	0x016e3600
 800a0c0:	01a6ab1f 	.word	0x01a6ab1f
 800a0c4:	01e84800 	.word	0x01e84800

0800a0c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f043 0201 	orr.w	r2, r3, #1
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f023 0201 	bic.w	r2, r3, #1
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d115      	bne.n	800a15a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a13a:	200a      	movs	r0, #10
 800a13c:	f7f8 fd1a 	bl	8002b74 <HAL_Delay>
      ms += 10U;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	330a      	adds	r3, #10
 800a144:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 f927 	bl	800b39a <USB_GetMode>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d01e      	beq.n	800a190 <USB_SetCurrentMode+0x84>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2bc7      	cmp	r3, #199	@ 0xc7
 800a156:	d9f0      	bls.n	800a13a <USB_SetCurrentMode+0x2e>
 800a158:	e01a      	b.n	800a190 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d115      	bne.n	800a18c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a16c:	200a      	movs	r0, #10
 800a16e:	f7f8 fd01 	bl	8002b74 <HAL_Delay>
      ms += 10U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	330a      	adds	r3, #10
 800a176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 f90e 	bl	800b39a <USB_GetMode>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <USB_SetCurrentMode+0x84>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2bc7      	cmp	r3, #199	@ 0xc7
 800a188:	d9f0      	bls.n	800a16c <USB_SetCurrentMode+0x60>
 800a18a:	e001      	b.n	800a190 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e005      	b.n	800a19c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2bc8      	cmp	r3, #200	@ 0xc8
 800a194:	d101      	bne.n	800a19a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e000      	b.n	800a19c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a1b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a1be:	2300      	movs	r3, #0
 800a1c0:	613b      	str	r3, [r7, #16]
 800a1c2:	e009      	b.n	800a1d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	3340      	adds	r3, #64	@ 0x40
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	613b      	str	r3, [r7, #16]
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	2b0e      	cmp	r3, #14
 800a1dc:	d9f2      	bls.n	800a1c4 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a1de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d11c      	bne.n	800a220 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1f4:	f043 0302 	orr.w	r3, r3, #2
 800a1f8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1fe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	e005      	b.n	800a22c <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a224:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a232:	461a      	mov	r2, r3
 800a234:	2300      	movs	r3, #0
 800a236:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a238:	2103      	movs	r1, #3
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f95e 	bl	800a4fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a240:	2110      	movs	r1, #16
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f8fa 	bl	800a43c <USB_FlushTxFifo>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f924 	bl	800a4a0 <USB_FlushRxFifo>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a268:	461a      	mov	r2, r3
 800a26a:	2300      	movs	r3, #0
 800a26c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a274:	461a      	mov	r2, r3
 800a276:	2300      	movs	r3, #0
 800a278:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a280:	461a      	mov	r2, r3
 800a282:	2300      	movs	r3, #0
 800a284:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a286:	2300      	movs	r3, #0
 800a288:	613b      	str	r3, [r7, #16]
 800a28a:	e043      	b.n	800a314 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a29e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2a2:	d118      	bne.n	800a2d6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10a      	bne.n	800a2c0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	015a      	lsls	r2, r3, #5
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	e013      	b.n	800a2e8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	e008      	b.n	800a2e8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a306:	461a      	mov	r2, r3
 800a308:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a30c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	3301      	adds	r3, #1
 800a312:	613b      	str	r3, [r7, #16]
 800a314:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a318:	461a      	mov	r2, r3
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d3b5      	bcc.n	800a28c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a320:	2300      	movs	r3, #0
 800a322:	613b      	str	r3, [r7, #16]
 800a324:	e043      	b.n	800a3ae <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	015a      	lsls	r2, r3, #5
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a33c:	d118      	bne.n	800a370 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10a      	bne.n	800a35a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a350:	461a      	mov	r2, r3
 800a352:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	e013      	b.n	800a382 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a366:	461a      	mov	r2, r3
 800a368:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	e008      	b.n	800a382 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a37c:	461a      	mov	r2, r3
 800a37e:	2300      	movs	r3, #0
 800a380:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38e:	461a      	mov	r2, r3
 800a390:	2300      	movs	r3, #0
 800a392:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a3a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	613b      	str	r3, [r7, #16]
 800a3ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d3b5      	bcc.n	800a326 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a3da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a3dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d105      	bne.n	800a3f0 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	f043 0210 	orr.w	r2, r3, #16
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	699a      	ldr	r2, [r3, #24]
 800a3f4:	4b10      	ldr	r3, [pc, #64]	@ (800a438 <USB_DevInit+0x294>)
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a3fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	f043 0208 	orr.w	r2, r3, #8
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a410:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a414:	2b01      	cmp	r3, #1
 800a416:	d107      	bne.n	800a428 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a420:	f043 0304 	orr.w	r3, r3, #4
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a428:	7dfb      	ldrb	r3, [r7, #23]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a434:	b004      	add	sp, #16
 800a436:	4770      	bx	lr
 800a438:	803c3800 	.word	0x803c3800

0800a43c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a456:	d901      	bls.n	800a45c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e01b      	b.n	800a494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	daf2      	bge.n	800a44a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a464:	2300      	movs	r3, #0
 800a466:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	019b      	lsls	r3, r3, #6
 800a46c:	f043 0220 	orr.w	r2, r3, #32
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3301      	adds	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a480:	d901      	bls.n	800a486 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e006      	b.n	800a494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f003 0320 	and.w	r3, r3, #32
 800a48e:	2b20      	cmp	r3, #32
 800a490:	d0f0      	beq.n	800a474 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4b8:	d901      	bls.n	800a4be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e018      	b.n	800a4f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	daf2      	bge.n	800a4ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2210      	movs	r2, #16
 800a4ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4dc:	d901      	bls.n	800a4e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e006      	b.n	800a4f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	f003 0310 	and.w	r3, r3, #16
 800a4ea:	2b10      	cmp	r3, #16
 800a4ec:	d0f0      	beq.n	800a4d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	460b      	mov	r3, r1
 800a506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	68f9      	ldr	r1, [r7, #12]
 800a518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a51c:	4313      	orrs	r3, r2
 800a51e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a52e:	b480      	push	{r7}
 800a530:	b087      	sub	sp, #28
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f003 0306 	and.w	r3, r3, #6
 800a546:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d102      	bne.n	800a554 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a54e:	2300      	movs	r3, #0
 800a550:	75fb      	strb	r3, [r7, #23]
 800a552:	e00a      	b.n	800a56a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b02      	cmp	r3, #2
 800a558:	d002      	beq.n	800a560 <USB_GetDevSpeed+0x32>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b06      	cmp	r3, #6
 800a55e:	d102      	bne.n	800a566 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a560:	2302      	movs	r3, #2
 800a562:	75fb      	strb	r3, [r7, #23]
 800a564:	e001      	b.n	800a56a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a566:	230f      	movs	r3, #15
 800a568:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	371c      	adds	r7, #28
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	785b      	ldrb	r3, [r3, #1]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d13a      	bne.n	800a60a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a59a:	69da      	ldr	r2, [r3, #28]
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	f003 030f 	and.w	r3, r3, #15
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	68f9      	ldr	r1, [r7, #12]
 800a5ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d155      	bne.n	800a678 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	791b      	ldrb	r3, [r3, #4]
 800a5e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	059b      	lsls	r3, r3, #22
 800a5ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	0151      	lsls	r1, r2, #5
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	440a      	add	r2, r1
 800a5fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	e036      	b.n	800a678 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a610:	69da      	ldr	r2, [r3, #28]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	f003 030f 	and.w	r3, r3, #15
 800a61a:	2101      	movs	r1, #1
 800a61c:	fa01 f303 	lsl.w	r3, r1, r3
 800a620:	041b      	lsls	r3, r3, #16
 800a622:	68f9      	ldr	r1, [r7, #12]
 800a624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a628:	4313      	orrs	r3, r2
 800a62a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d11a      	bne.n	800a678 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	791b      	ldrb	r3, [r3, #4]
 800a65c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a65e:	430b      	orrs	r3, r1
 800a660:	4313      	orrs	r3, r2
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	0151      	lsls	r1, r2, #5
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	440a      	add	r2, r1
 800a66a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a66e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a676:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
	...

0800a688 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	785b      	ldrb	r3, [r3, #1]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d161      	bne.n	800a768 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6ba:	d11f      	bne.n	800a6fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	015a      	lsls	r2, r3, #5
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	0151      	lsls	r1, r2, #5
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	0151      	lsls	r1, r2, #5
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	440a      	add	r2, r1
 800a6f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a702:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f003 030f 	and.w	r3, r3, #15
 800a70c:	2101      	movs	r1, #1
 800a70e:	fa01 f303 	lsl.w	r3, r1, r3
 800a712:	b29b      	uxth	r3, r3
 800a714:	43db      	mvns	r3, r3
 800a716:	68f9      	ldr	r1, [r7, #12]
 800a718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a71c:	4013      	ands	r3, r2
 800a71e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a726:	69da      	ldr	r2, [r3, #28]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	f003 030f 	and.w	r3, r3, #15
 800a730:	2101      	movs	r1, #1
 800a732:	fa01 f303 	lsl.w	r3, r1, r3
 800a736:	b29b      	uxth	r3, r3
 800a738:	43db      	mvns	r3, r3
 800a73a:	68f9      	ldr	r1, [r7, #12]
 800a73c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a740:	4013      	ands	r3, r2
 800a742:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	0159      	lsls	r1, r3, #5
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	440b      	add	r3, r1
 800a75a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a75e:	4619      	mov	r1, r3
 800a760:	4b35      	ldr	r3, [pc, #212]	@ (800a838 <USB_DeactivateEndpoint+0x1b0>)
 800a762:	4013      	ands	r3, r2
 800a764:	600b      	str	r3, [r1, #0]
 800a766:	e060      	b.n	800a82a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a77a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a77e:	d11f      	bne.n	800a7c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	0151      	lsls	r1, r2, #5
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	440a      	add	r2, r1
 800a796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a79a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a79e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	0151      	lsls	r1, r2, #5
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	440a      	add	r2, r1
 800a7b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	f003 030f 	and.w	r3, r3, #15
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d6:	041b      	lsls	r3, r3, #16
 800a7d8:	43db      	mvns	r3, r3
 800a7da:	68f9      	ldr	r1, [r7, #12]
 800a7dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7ea:	69da      	ldr	r2, [r3, #28]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	f003 030f 	and.w	r3, r3, #15
 800a7f4:	2101      	movs	r1, #1
 800a7f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7fa:	041b      	lsls	r3, r3, #16
 800a7fc:	43db      	mvns	r3, r3
 800a7fe:	68f9      	ldr	r1, [r7, #12]
 800a800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a804:	4013      	ands	r3, r2
 800a806:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	015a      	lsls	r2, r3, #5
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	0159      	lsls	r1, r3, #5
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	440b      	add	r3, r1
 800a81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a822:	4619      	mov	r1, r3
 800a824:	4b05      	ldr	r3, [pc, #20]	@ (800a83c <USB_DeactivateEndpoint+0x1b4>)
 800a826:	4013      	ands	r3, r2
 800a828:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	ec337800 	.word	0xec337800
 800a83c:	eff37800 	.word	0xeff37800

0800a840 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	@ 0x28
 800a844:	af02      	add	r7, sp, #8
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	4613      	mov	r3, r2
 800a84c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	785b      	ldrb	r3, [r3, #1]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	f040 817f 	bne.w	800ab60 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d132      	bne.n	800a8d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	4413      	add	r3, r2
 800a872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	69ba      	ldr	r2, [r7, #24]
 800a87a:	0151      	lsls	r1, r2, #5
 800a87c:	69fa      	ldr	r2, [r7, #28]
 800a87e:	440a      	add	r2, r1
 800a880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a884:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a888:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a88c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	4413      	add	r3, r2
 800a896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	0151      	lsls	r1, r2, #5
 800a8a0:	69fa      	ldr	r2, [r7, #28]
 800a8a2:	440a      	add	r2, r1
 800a8a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	015a      	lsls	r2, r3, #5
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	69ba      	ldr	r2, [r7, #24]
 800a8be:	0151      	lsls	r1, r2, #5
 800a8c0:	69fa      	ldr	r2, [r7, #28]
 800a8c2:	440a      	add	r2, r1
 800a8c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8c8:	0cdb      	lsrs	r3, r3, #19
 800a8ca:	04db      	lsls	r3, r3, #19
 800a8cc:	6113      	str	r3, [r2, #16]
 800a8ce:	e097      	b.n	800aa00 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	69ba      	ldr	r2, [r7, #24]
 800a8e0:	0151      	lsls	r1, r2, #5
 800a8e2:	69fa      	ldr	r2, [r7, #28]
 800a8e4:	440a      	add	r2, r1
 800a8e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ea:	0cdb      	lsrs	r3, r3, #19
 800a8ec:	04db      	lsls	r3, r3, #19
 800a8ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	015a      	lsls	r2, r3, #5
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	0151      	lsls	r1, r2, #5
 800a902:	69fa      	ldr	r2, [r7, #28]
 800a904:	440a      	add	r2, r1
 800a906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a90a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a90e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a912:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d11a      	bne.n	800a950 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	691a      	ldr	r2, [r3, #16]
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	429a      	cmp	r2, r3
 800a924:	d903      	bls.n	800a92e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	689a      	ldr	r2, [r3, #8]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	4413      	add	r3, r2
 800a936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	69ba      	ldr	r2, [r7, #24]
 800a93e:	0151      	lsls	r1, r2, #5
 800a940:	69fa      	ldr	r2, [r7, #28]
 800a942:	440a      	add	r2, r1
 800a944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a948:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a94c:	6113      	str	r3, [r2, #16]
 800a94e:	e044      	b.n	800a9da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	691a      	ldr	r2, [r3, #16]
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	4413      	add	r3, r2
 800a95a:	1e5a      	subs	r2, r3, #1
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	fbb2 f3f3 	udiv	r3, r2, r3
 800a964:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a972:	691a      	ldr	r2, [r3, #16]
 800a974:	8afb      	ldrh	r3, [r7, #22]
 800a976:	04d9      	lsls	r1, r3, #19
 800a978:	4ba4      	ldr	r3, [pc, #656]	@ (800ac0c <USB_EPStartXfer+0x3cc>)
 800a97a:	400b      	ands	r3, r1
 800a97c:	69b9      	ldr	r1, [r7, #24]
 800a97e:	0148      	lsls	r0, r1, #5
 800a980:	69f9      	ldr	r1, [r7, #28]
 800a982:	4401      	add	r1, r0
 800a984:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a988:	4313      	orrs	r3, r2
 800a98a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	791b      	ldrb	r3, [r3, #4]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d122      	bne.n	800a9da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	69ba      	ldr	r2, [r7, #24]
 800a9a4:	0151      	lsls	r1, r2, #5
 800a9a6:	69fa      	ldr	r2, [r7, #28]
 800a9a8:	440a      	add	r2, r1
 800a9aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a9b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	015a      	lsls	r2, r3, #5
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9c0:	691a      	ldr	r2, [r3, #16]
 800a9c2:	8afb      	ldrh	r3, [r7, #22]
 800a9c4:	075b      	lsls	r3, r3, #29
 800a9c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a9ca:	69b9      	ldr	r1, [r7, #24]
 800a9cc:	0148      	lsls	r0, r1, #5
 800a9ce:	69f9      	ldr	r1, [r7, #28]
 800a9d0:	4401      	add	r1, r0
 800a9d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9e6:	691a      	ldr	r2, [r3, #16]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f0:	69b9      	ldr	r1, [r7, #24]
 800a9f2:	0148      	lsls	r0, r1, #5
 800a9f4:	69f9      	ldr	r1, [r7, #28]
 800a9f6:	4401      	add	r1, r0
 800a9f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aa00:	79fb      	ldrb	r3, [r7, #7]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d14b      	bne.n	800aa9e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d009      	beq.n	800aa22 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	4413      	add	r3, r2
 800aa16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	791b      	ldrb	r3, [r3, #4]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d128      	bne.n	800aa7c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d110      	bne.n	800aa5c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69ba      	ldr	r2, [r7, #24]
 800aa4a:	0151      	lsls	r1, r2, #5
 800aa4c:	69fa      	ldr	r2, [r7, #28]
 800aa4e:	440a      	add	r2, r1
 800aa50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aa58:	6013      	str	r3, [r2, #0]
 800aa5a:	e00f      	b.n	800aa7c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	69ba      	ldr	r2, [r7, #24]
 800aa6c:	0151      	lsls	r1, r2, #5
 800aa6e:	69fa      	ldr	r2, [r7, #28]
 800aa70:	440a      	add	r2, r1
 800aa72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa7a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	69ba      	ldr	r2, [r7, #24]
 800aa8c:	0151      	lsls	r1, r2, #5
 800aa8e:	69fa      	ldr	r2, [r7, #28]
 800aa90:	440a      	add	r2, r1
 800aa92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	e166      	b.n	800ad6c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	69ba      	ldr	r2, [r7, #24]
 800aaae:	0151      	lsls	r1, r2, #5
 800aab0:	69fa      	ldr	r2, [r7, #28]
 800aab2:	440a      	add	r2, r1
 800aab4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aab8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aabc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	791b      	ldrb	r3, [r3, #4]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d015      	beq.n	800aaf2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 814e 	beq.w	800ad6c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	f003 030f 	and.w	r3, r3, #15
 800aae0:	2101      	movs	r1, #1
 800aae2:	fa01 f303 	lsl.w	r3, r1, r3
 800aae6:	69f9      	ldr	r1, [r7, #28]
 800aae8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aaec:	4313      	orrs	r3, r2
 800aaee:	634b      	str	r3, [r1, #52]	@ 0x34
 800aaf0:	e13c      	b.n	800ad6c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d110      	bne.n	800ab24 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	015a      	lsls	r2, r3, #5
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	4413      	add	r3, r2
 800ab0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	0151      	lsls	r1, r2, #5
 800ab14:	69fa      	ldr	r2, [r7, #28]
 800ab16:	440a      	add	r2, r1
 800ab18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ab20:	6013      	str	r3, [r2, #0]
 800ab22:	e00f      	b.n	800ab44 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	015a      	lsls	r2, r3, #5
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	0151      	lsls	r1, r2, #5
 800ab36:	69fa      	ldr	r2, [r7, #28]
 800ab38:	440a      	add	r2, r1
 800ab3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab42:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	68d9      	ldr	r1, [r3, #12]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	781a      	ldrb	r2, [r3, #0]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	b298      	uxth	r0, r3
 800ab52:	79fb      	ldrb	r3, [r7, #7]
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	4603      	mov	r3, r0
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 f9b9 	bl	800aed0 <USB_WritePacket>
 800ab5e:	e105      	b.n	800ad6c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	0151      	lsls	r1, r2, #5
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	440a      	add	r2, r1
 800ab76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab7a:	0cdb      	lsrs	r3, r3, #19
 800ab7c:	04db      	lsls	r3, r3, #19
 800ab7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	0151      	lsls	r1, r2, #5
 800ab92:	69fa      	ldr	r2, [r7, #28]
 800ab94:	440a      	add	r2, r1
 800ab96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab9a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ab9e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aba2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d132      	bne.n	800ac10 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	689a      	ldr	r2, [r3, #8]
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	689a      	ldr	r2, [r3, #8]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abce:	691a      	ldr	r2, [r3, #16]
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abd8:	69b9      	ldr	r1, [r7, #24]
 800abda:	0148      	lsls	r0, r1, #5
 800abdc:	69f9      	ldr	r1, [r7, #28]
 800abde:	4401      	add	r1, r0
 800abe0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800abe4:	4313      	orrs	r3, r2
 800abe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	69ba      	ldr	r2, [r7, #24]
 800abf8:	0151      	lsls	r1, r2, #5
 800abfa:	69fa      	ldr	r2, [r7, #28]
 800abfc:	440a      	add	r2, r1
 800abfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac06:	6113      	str	r3, [r2, #16]
 800ac08:	e062      	b.n	800acd0 <USB_EPStartXfer+0x490>
 800ac0a:	bf00      	nop
 800ac0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d123      	bne.n	800ac60 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac24:	691a      	ldr	r2, [r3, #16]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac2e:	69b9      	ldr	r1, [r7, #24]
 800ac30:	0148      	lsls	r0, r1, #5
 800ac32:	69f9      	ldr	r1, [r7, #28]
 800ac34:	4401      	add	r1, r0
 800ac36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	015a      	lsls	r2, r3, #5
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	4413      	add	r3, r2
 800ac46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	0151      	lsls	r1, r2, #5
 800ac50:	69fa      	ldr	r2, [r7, #28]
 800ac52:	440a      	add	r2, r1
 800ac54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac5c:	6113      	str	r3, [r2, #16]
 800ac5e:	e037      	b.n	800acd0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	691a      	ldr	r2, [r3, #16]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	4413      	add	r3, r2
 800ac6a:	1e5a      	subs	r2, r3, #1
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac74:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	8afa      	ldrh	r2, [r7, #22]
 800ac7c:	fb03 f202 	mul.w	r2, r3, r2
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	015a      	lsls	r2, r3, #5
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac90:	691a      	ldr	r2, [r3, #16]
 800ac92:	8afb      	ldrh	r3, [r7, #22]
 800ac94:	04d9      	lsls	r1, r3, #19
 800ac96:	4b38      	ldr	r3, [pc, #224]	@ (800ad78 <USB_EPStartXfer+0x538>)
 800ac98:	400b      	ands	r3, r1
 800ac9a:	69b9      	ldr	r1, [r7, #24]
 800ac9c:	0148      	lsls	r0, r1, #5
 800ac9e:	69f9      	ldr	r1, [r7, #28]
 800aca0:	4401      	add	r1, r0
 800aca2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aca6:	4313      	orrs	r3, r2
 800aca8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	015a      	lsls	r2, r3, #5
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	4413      	add	r3, r2
 800acb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acb6:	691a      	ldr	r2, [r3, #16]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acc0:	69b9      	ldr	r1, [r7, #24]
 800acc2:	0148      	lsls	r0, r1, #5
 800acc4:	69f9      	ldr	r1, [r7, #28]
 800acc6:	4401      	add	r1, r0
 800acc8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800accc:	4313      	orrs	r3, r2
 800acce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d10d      	bne.n	800acf2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d009      	beq.n	800acf2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	68d9      	ldr	r1, [r3, #12]
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	015a      	lsls	r2, r3, #5
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acee:	460a      	mov	r2, r1
 800acf0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d128      	bne.n	800ad4c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d110      	bne.n	800ad2c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	69ba      	ldr	r2, [r7, #24]
 800ad1a:	0151      	lsls	r1, r2, #5
 800ad1c:	69fa      	ldr	r2, [r7, #28]
 800ad1e:	440a      	add	r2, r1
 800ad20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ad28:	6013      	str	r3, [r2, #0]
 800ad2a:	e00f      	b.n	800ad4c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	0151      	lsls	r1, r2, #5
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	440a      	add	r2, r1
 800ad42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	69ba      	ldr	r2, [r7, #24]
 800ad5c:	0151      	lsls	r1, r2, #5
 800ad5e:	69fa      	ldr	r2, [r7, #28]
 800ad60:	440a      	add	r2, r1
 800ad62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad66:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3720      	adds	r7, #32
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	1ff80000 	.word	0x1ff80000

0800ad7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d14a      	bne.n	800ae30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	015a      	lsls	r2, r3, #5
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	4413      	add	r3, r2
 800ada4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adb2:	f040 8086 	bne.w	800aec2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	7812      	ldrb	r2, [r2, #0]
 800adca:	0151      	lsls	r1, r2, #5
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	440a      	add	r2, r1
 800add0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800add4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800add8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	7812      	ldrb	r2, [r2, #0]
 800adee:	0151      	lsls	r1, r2, #5
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	440a      	add	r2, r1
 800adf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800adfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3301      	adds	r3, #1
 800ae02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d902      	bls.n	800ae14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	75fb      	strb	r3, [r7, #23]
          break;
 800ae12:	e056      	b.n	800aec2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	015a      	lsls	r2, r3, #5
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae2c:	d0e7      	beq.n	800adfe <USB_EPStopXfer+0x82>
 800ae2e:	e048      	b.n	800aec2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae48:	d13b      	bne.n	800aec2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	683a      	ldr	r2, [r7, #0]
 800ae5c:	7812      	ldrb	r2, [r2, #0]
 800ae5e:	0151      	lsls	r1, r2, #5
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	440a      	add	r2, r1
 800ae64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	015a      	lsls	r2, r3, #5
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	4413      	add	r3, r2
 800ae78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	7812      	ldrb	r2, [r2, #0]
 800ae82:	0151      	lsls	r1, r2, #5
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	440a      	add	r2, r1
 800ae88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3301      	adds	r3, #1
 800ae96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d902      	bls.n	800aea8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	75fb      	strb	r3, [r7, #23]
          break;
 800aea6:	e00c      	b.n	800aec2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aec0:	d0e7      	beq.n	800ae92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	371c      	adds	r7, #28
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b089      	sub	sp, #36	@ 0x24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	4611      	mov	r1, r2
 800aedc:	461a      	mov	r2, r3
 800aede:	460b      	mov	r3, r1
 800aee0:	71fb      	strb	r3, [r7, #7]
 800aee2:	4613      	mov	r3, r2
 800aee4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aeee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d123      	bne.n	800af3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aef6:	88bb      	ldrh	r3, [r7, #4]
 800aef8:	3303      	adds	r3, #3
 800aefa:	089b      	lsrs	r3, r3, #2
 800aefc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aefe:	2300      	movs	r3, #0
 800af00:	61bb      	str	r3, [r7, #24]
 800af02:	e018      	b.n	800af36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	031a      	lsls	r2, r3, #12
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af10:	461a      	mov	r2, r3
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	3301      	adds	r3, #1
 800af1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	3301      	adds	r3, #1
 800af22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	3301      	adds	r3, #1
 800af28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	3301      	adds	r3, #1
 800af2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	3301      	adds	r3, #1
 800af34:	61bb      	str	r3, [r7, #24]
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d3e2      	bcc.n	800af04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3724      	adds	r7, #36	@ 0x24
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b08b      	sub	sp, #44	@ 0x2c
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	4613      	mov	r3, r2
 800af58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af62:	88fb      	ldrh	r3, [r7, #6]
 800af64:	089b      	lsrs	r3, r3, #2
 800af66:	b29b      	uxth	r3, r3
 800af68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af6a:	88fb      	ldrh	r3, [r7, #6]
 800af6c:	f003 0303 	and.w	r3, r3, #3
 800af70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af72:	2300      	movs	r3, #0
 800af74:	623b      	str	r3, [r7, #32]
 800af76:	e014      	b.n	800afa2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	601a      	str	r2, [r3, #0]
    pDest++;
 800af84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af86:	3301      	adds	r3, #1
 800af88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	3301      	adds	r3, #1
 800af8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af92:	3301      	adds	r3, #1
 800af94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af98:	3301      	adds	r3, #1
 800af9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	3301      	adds	r3, #1
 800afa0:	623b      	str	r3, [r7, #32]
 800afa2:	6a3a      	ldr	r2, [r7, #32]
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d3e6      	bcc.n	800af78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800afaa:	8bfb      	ldrh	r3, [r7, #30]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01e      	beq.n	800afee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800afb0:	2300      	movs	r3, #0
 800afb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afba:	461a      	mov	r2, r3
 800afbc:	f107 0310 	add.w	r3, r7, #16
 800afc0:	6812      	ldr	r2, [r2, #0]
 800afc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	00db      	lsls	r3, r3, #3
 800afcc:	fa22 f303 	lsr.w	r3, r2, r3
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	701a      	strb	r2, [r3, #0]
      i++;
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	3301      	adds	r3, #1
 800afda:	623b      	str	r3, [r7, #32]
      pDest++;
 800afdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afde:	3301      	adds	r3, #1
 800afe0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800afe2:	8bfb      	ldrh	r3, [r7, #30]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800afe8:	8bfb      	ldrh	r3, [r7, #30]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1ea      	bne.n	800afc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	372c      	adds	r7, #44	@ 0x2c
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d12c      	bne.n	800b072 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	db12      	blt.n	800b050 <USB_EPSetStall+0x54>
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00f      	beq.n	800b050 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	015a      	lsls	r2, r3, #5
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4413      	add	r3, r2
 800b038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	0151      	lsls	r1, r2, #5
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	440a      	add	r2, r1
 800b046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b04a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b04e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	0151      	lsls	r1, r2, #5
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	440a      	add	r2, r1
 800b066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b06a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	e02b      	b.n	800b0ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	015a      	lsls	r2, r3, #5
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	4413      	add	r3, r2
 800b07a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	db12      	blt.n	800b0aa <USB_EPSetStall+0xae>
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00f      	beq.n	800b0aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4413      	add	r3, r2
 800b092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	0151      	lsls	r1, r2, #5
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	440a      	add	r2, r1
 800b0a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b0a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b0c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	785b      	ldrb	r3, [r3, #1]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d128      	bne.n	800b146 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	0151      	lsls	r1, r2, #5
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	440a      	add	r2, r1
 800b10a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b10e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b112:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	791b      	ldrb	r3, [r3, #4]
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d003      	beq.n	800b124 <USB_EPClearStall+0x4c>
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	791b      	ldrb	r3, [r3, #4]
 800b120:	2b02      	cmp	r3, #2
 800b122:	d138      	bne.n	800b196 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	0151      	lsls	r1, r2, #5
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	440a      	add	r2, r1
 800b13a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b13e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b142:	6013      	str	r3, [r2, #0]
 800b144:	e027      	b.n	800b196 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b160:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b164:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	791b      	ldrb	r3, [r3, #4]
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d003      	beq.n	800b176 <USB_EPClearStall+0x9e>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	791b      	ldrb	r3, [r3, #4]
 800b172:	2b02      	cmp	r3, #2
 800b174:	d10f      	bne.n	800b196 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	0151      	lsls	r1, r2, #5
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	440a      	add	r2, r1
 800b18c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b194:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3714      	adds	r7, #20
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b1c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	78fb      	ldrb	r3, [r7, #3]
 800b1d2:	011b      	lsls	r3, r3, #4
 800b1d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b1d8:	68f9      	ldr	r1, [r7, #12]
 800b1da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b20a:	f023 0303 	bic.w	r3, r3, #3
 800b20e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b21e:	f023 0302 	bic.w	r3, r3, #2
 800b222:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b232:	b480      	push	{r7}
 800b234:	b085      	sub	sp, #20
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b24c:	f023 0303 	bic.w	r3, r3, #3
 800b250:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b260:	f043 0302 	orr.w	r3, r3, #2
 800b264:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	4013      	ands	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b28c:	68fb      	ldr	r3, [r7, #12]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b085      	sub	sp, #20
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	0c1b      	lsrs	r3, r3, #16
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b085      	sub	sp, #20
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	b29b      	uxth	r3, r3
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b302:	b480      	push	{r7}
 800b304:	b085      	sub	sp, #20
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b312:	78fb      	ldrb	r3, [r7, #3]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	4013      	ands	r3, r2
 800b32e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b330:	68bb      	ldr	r3, [r7, #8]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3714      	adds	r7, #20
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b33e:	b480      	push	{r7}
 800b340:	b087      	sub	sp, #28
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	460b      	mov	r3, r1
 800b348:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b360:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b362:	78fb      	ldrb	r3, [r7, #3]
 800b364:	f003 030f 	and.w	r3, r3, #15
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	fa22 f303 	lsr.w	r3, r2, r3
 800b36e:	01db      	lsls	r3, r3, #7
 800b370:	b2db      	uxtb	r3, r3
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	4313      	orrs	r3, r2
 800b376:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b378:	78fb      	ldrb	r3, [r7, #3]
 800b37a:	015a      	lsls	r2, r3, #5
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	4413      	add	r3, r2
 800b380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	4013      	ands	r3, r2
 800b38a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b38c:	68bb      	ldr	r3, [r7, #8]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	371c      	adds	r7, #28
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b39a:	b480      	push	{r7}
 800b39c:	b083      	sub	sp, #12
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	f003 0301 	and.w	r3, r3, #1
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b3d4:	f023 0307 	bic.w	r3, r3, #7
 800b3d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b087      	sub	sp, #28
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	460b      	mov	r3, r1
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	333c      	adds	r3, #60	@ 0x3c
 800b412:	3304      	adds	r3, #4
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	4a26      	ldr	r2, [pc, #152]	@ (800b4b4 <USB_EP0_OutStart+0xb8>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d90a      	bls.n	800b436 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b42c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b430:	d101      	bne.n	800b436 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b432:	2300      	movs	r3, #0
 800b434:	e037      	b.n	800b4a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b43c:	461a      	mov	r2, r3
 800b43e:	2300      	movs	r3, #0
 800b440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b450:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b464:	f043 0318 	orr.w	r3, r3, #24
 800b468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b478:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b47c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b47e:	7afb      	ldrb	r3, [r7, #11]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d10f      	bne.n	800b4a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b48a:	461a      	mov	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b49e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b4a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	371c      	adds	r7, #28
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop
 800b4b4:	4f54300a 	.word	0x4f54300a

0800b4b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4d0:	d901      	bls.n	800b4d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e01b      	b.n	800b50e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	daf2      	bge.n	800b4c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	f043 0201 	orr.w	r2, r3, #1
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4fa:	d901      	bls.n	800b500 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e006      	b.n	800b50e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d0f0      	beq.n	800b4ee <USB_CoreReset+0x36>

  return HAL_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3714      	adds	r7, #20
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
	...

0800b51c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b520:	2200      	movs	r2, #0
 800b522:	4912      	ldr	r1, [pc, #72]	@ (800b56c <MX_USB_Device_Init+0x50>)
 800b524:	4812      	ldr	r0, [pc, #72]	@ (800b570 <MX_USB_Device_Init+0x54>)
 800b526:	f001 f86f 	bl	800c608 <USBD_Init>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b530:	f7f5 ffe0 	bl	80014f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b534:	490f      	ldr	r1, [pc, #60]	@ (800b574 <MX_USB_Device_Init+0x58>)
 800b536:	480e      	ldr	r0, [pc, #56]	@ (800b570 <MX_USB_Device_Init+0x54>)
 800b538:	f001 f896 	bl	800c668 <USBD_RegisterClass>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b542:	f7f5 ffd7 	bl	80014f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b546:	490c      	ldr	r1, [pc, #48]	@ (800b578 <MX_USB_Device_Init+0x5c>)
 800b548:	4809      	ldr	r0, [pc, #36]	@ (800b570 <MX_USB_Device_Init+0x54>)
 800b54a:	f000 ffc1 	bl	800c4d0 <USBD_CDC_RegisterInterface>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b554:	f7f5 ffce 	bl	80014f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b558:	4805      	ldr	r0, [pc, #20]	@ (800b570 <MX_USB_Device_Init+0x54>)
 800b55a:	f001 f8ac 	bl	800c6b6 <USBD_Start>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b564:	f7f5 ffc6 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b568:	bf00      	nop
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	2000008c 	.word	0x2000008c
 800b570:	2000cfe4 	.word	0x2000cfe4
 800b574:	200000ec 	.word	0x200000ec
 800b578:	20000078 	.word	0x20000078

0800b57c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b580:	2200      	movs	r2, #0
 800b582:	4905      	ldr	r1, [pc, #20]	@ (800b598 <CDC_Init_FS+0x1c>)
 800b584:	4805      	ldr	r0, [pc, #20]	@ (800b59c <CDC_Init_FS+0x20>)
 800b586:	f000 ffb8 	bl	800c4fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b58a:	4905      	ldr	r1, [pc, #20]	@ (800b5a0 <CDC_Init_FS+0x24>)
 800b58c:	4803      	ldr	r0, [pc, #12]	@ (800b59c <CDC_Init_FS+0x20>)
 800b58e:	f000 ffcd 	bl	800c52c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b592:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b594:	4618      	mov	r0, r3
 800b596:	bd80      	pop	{r7, pc}
 800b598:	2000dab4 	.word	0x2000dab4
 800b59c:	2000cfe4 	.word	0x2000cfe4
 800b5a0:	2000d2b4 	.word	0x2000d2b4

0800b5a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	6039      	str	r1, [r7, #0]
 800b5be:	71fb      	strb	r3, [r7, #7]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b5c4:	79fb      	ldrb	r3, [r7, #7]
 800b5c6:	2b23      	cmp	r3, #35	@ 0x23
 800b5c8:	d84a      	bhi.n	800b660 <CDC_Control_FS+0xac>
 800b5ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b5d0 <CDC_Control_FS+0x1c>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b661 	.word	0x0800b661
 800b5d4:	0800b661 	.word	0x0800b661
 800b5d8:	0800b661 	.word	0x0800b661
 800b5dc:	0800b661 	.word	0x0800b661
 800b5e0:	0800b661 	.word	0x0800b661
 800b5e4:	0800b661 	.word	0x0800b661
 800b5e8:	0800b661 	.word	0x0800b661
 800b5ec:	0800b661 	.word	0x0800b661
 800b5f0:	0800b661 	.word	0x0800b661
 800b5f4:	0800b661 	.word	0x0800b661
 800b5f8:	0800b661 	.word	0x0800b661
 800b5fc:	0800b661 	.word	0x0800b661
 800b600:	0800b661 	.word	0x0800b661
 800b604:	0800b661 	.word	0x0800b661
 800b608:	0800b661 	.word	0x0800b661
 800b60c:	0800b661 	.word	0x0800b661
 800b610:	0800b661 	.word	0x0800b661
 800b614:	0800b661 	.word	0x0800b661
 800b618:	0800b661 	.word	0x0800b661
 800b61c:	0800b661 	.word	0x0800b661
 800b620:	0800b661 	.word	0x0800b661
 800b624:	0800b661 	.word	0x0800b661
 800b628:	0800b661 	.word	0x0800b661
 800b62c:	0800b661 	.word	0x0800b661
 800b630:	0800b661 	.word	0x0800b661
 800b634:	0800b661 	.word	0x0800b661
 800b638:	0800b661 	.word	0x0800b661
 800b63c:	0800b661 	.word	0x0800b661
 800b640:	0800b661 	.word	0x0800b661
 800b644:	0800b661 	.word	0x0800b661
 800b648:	0800b661 	.word	0x0800b661
 800b64c:	0800b661 	.word	0x0800b661
 800b650:	0800b661 	.word	0x0800b661
 800b654:	0800b661 	.word	0x0800b661
 800b658:	0800b661 	.word	0x0800b661
 800b65c:	0800b661 	.word	0x0800b661
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b660:	bf00      	nop
  }

  return (USBD_OK);
 800b662:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	4834      	ldr	r0, [pc, #208]	@ (800b750 <CDC_Receive_FS+0xe0>)
 800b67e:	f000 ff55 	bl	800c52c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b682:	4833      	ldr	r0, [pc, #204]	@ (800b750 <CDC_Receive_FS+0xe0>)
 800b684:	f000 ff96 	bl	800c5b4 <USBD_CDC_ReceivePacket>

  uint32_t msg_rx = (Buf[3]<<24)|(Buf[2]<<16)|(Buf[1]<<8)|(Buf[0]);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3303      	adds	r3, #3
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	061a      	lsls	r2, r3, #24
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	3302      	adds	r3, #2
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	041b      	lsls	r3, r3, #16
 800b698:	431a      	orrs	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3301      	adds	r3, #1
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	021b      	lsls	r3, r3, #8
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	7812      	ldrb	r2, [r2, #0]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	617b      	str	r3, [r7, #20]

  uint32_t addr = (msg_rx&0x7F000000)>>24;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	0e1b      	lsrs	r3, r3, #24
 800b6b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b4:	613b      	str	r3, [r7, #16]
  uint32_t data = (msg_rx&0x00FFFFFF);
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b6bc:	60fb      	str	r3, [r7, #12]
  uint32_t msg_tx = 0xdeadbeef;
 800b6be:	4b25      	ldr	r3, [pc, #148]	@ (800b754 <CDC_Receive_FS+0xe4>)
 800b6c0:	60bb      	str	r3, [r7, #8]

  if(msg_rx&0x80000000){
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	da05      	bge.n	800b6d4 <CDC_Receive_FS+0x64>
	  set_register(&device_registers,addr,data);
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	6939      	ldr	r1, [r7, #16]
 800b6cc:	4822      	ldr	r0, [pc, #136]	@ (800b758 <CDC_Receive_FS+0xe8>)
 800b6ce:	f7f6 fbc3 	bl	8001e58 <set_register>
 800b6d2:	e037      	b.n	800b744 <CDC_Receive_FS+0xd4>
  }
  else{
	  if(addr == DVC_FLUSH_SAMPLE_DATA_1){
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2b64      	cmp	r3, #100	@ 0x64
 800b6d8:	d108      	bne.n	800b6ec <CDC_Receive_FS+0x7c>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_1, sizeof(adc_samples_1));
 800b6da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b6de:	481f      	ldr	r0, [pc, #124]	@ (800b75c <CDC_Receive_FS+0xec>)
 800b6e0:	f000 f848 	bl	800b774 <CDC_Transmit_FS>
		  adc_1_full = 0;
 800b6e4:	4b1e      	ldr	r3, [pc, #120]	@ (800b760 <CDC_Receive_FS+0xf0>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	e02b      	b.n	800b744 <CDC_Receive_FS+0xd4>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_2){
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	2b65      	cmp	r3, #101	@ 0x65
 800b6f0:	d108      	bne.n	800b704 <CDC_Receive_FS+0x94>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_2, sizeof(adc_samples_2));
 800b6f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b6f6:	481b      	ldr	r0, [pc, #108]	@ (800b764 <CDC_Receive_FS+0xf4>)
 800b6f8:	f000 f83c 	bl	800b774 <CDC_Transmit_FS>
		  adc_2_full = 0;
 800b6fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b768 <CDC_Receive_FS+0xf8>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	e01f      	b.n	800b744 <CDC_Receive_FS+0xd4>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_3){
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	2b66      	cmp	r3, #102	@ 0x66
 800b708:	d108      	bne.n	800b71c <CDC_Receive_FS+0xac>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_3, sizeof(adc_samples_3));
 800b70a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b70e:	4817      	ldr	r0, [pc, #92]	@ (800b76c <CDC_Receive_FS+0xfc>)
 800b710:	f000 f830 	bl	800b774 <CDC_Transmit_FS>
		  adc_3_full = 0;
 800b714:	4b16      	ldr	r3, [pc, #88]	@ (800b770 <CDC_Receive_FS+0x100>)
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	e013      	b.n	800b744 <CDC_Receive_FS+0xd4>
	  }
	  else{
		  data = get_register(&device_registers,addr);
 800b71c:	6939      	ldr	r1, [r7, #16]
 800b71e:	480e      	ldr	r0, [pc, #56]	@ (800b758 <CDC_Receive_FS+0xe8>)
 800b720:	f7f6 fb89 	bl	8001e36 <get_register>
 800b724:	60f8      	str	r0, [r7, #12]
		  msg_tx = ((addr << 24)&0x7F000000) | (data&0x00FFFFFF);
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	061b      	lsls	r3, r3, #24
 800b72a:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b734:	4313      	orrs	r3, r2
 800b736:	60bb      	str	r3, [r7, #8]
		  CDC_Transmit_FS((uint8_t*)&msg_tx, sizeof(msg_tx));
 800b738:	f107 0308 	add.w	r3, r7, #8
 800b73c:	2104      	movs	r1, #4
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 f818 	bl	800b774 <CDC_Transmit_FS>
	  }
  }

  return (USBD_OK);
 800b744:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	2000cfe4 	.word	0x2000cfe4
 800b754:	deadbeef 	.word	0xdeadbeef
 800b758:	2000cad4 	.word	0x2000cad4
 800b75c:	20000ad4 	.word	0x20000ad4
 800b760:	20000acf 	.word	0x20000acf
 800b764:	20004ad4 	.word	0x20004ad4
 800b768:	20000ad0 	.word	0x20000ad0
 800b76c:	20008ad4 	.word	0x20008ad4
 800b770:	20000ad1 	.word	0x20000ad1

0800b774 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b784:	4b0d      	ldr	r3, [pc, #52]	@ (800b7bc <CDC_Transmit_FS+0x48>)
 800b786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b78a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b796:	2301      	movs	r3, #1
 800b798:	e00b      	b.n	800b7b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b79a:	887b      	ldrh	r3, [r7, #2]
 800b79c:	461a      	mov	r2, r3
 800b79e:	6879      	ldr	r1, [r7, #4]
 800b7a0:	4806      	ldr	r0, [pc, #24]	@ (800b7bc <CDC_Transmit_FS+0x48>)
 800b7a2:	f000 feaa 	bl	800c4fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b7a6:	4805      	ldr	r0, [pc, #20]	@ (800b7bc <CDC_Transmit_FS+0x48>)
 800b7a8:	f000 fed4 	bl	800c554 <USBD_CDC_TransmitPacket>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	2000cfe4 	.word	0x2000cfe4

0800b7c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b7d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	371c      	adds	r7, #28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
	...

0800b7e4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6039      	str	r1, [r7, #0]
 800b7ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2212      	movs	r2, #18
 800b7f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b7f6:	4b03      	ldr	r3, [pc, #12]	@ (800b804 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	200000ac 	.word	0x200000ac

0800b808 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	6039      	str	r1, [r7, #0]
 800b812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2204      	movs	r2, #4
 800b818:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b81a:	4b03      	ldr	r3, [pc, #12]	@ (800b828 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	200000c0 	.word	0x200000c0

0800b82c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	6039      	str	r1, [r7, #0]
 800b836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b838:	79fb      	ldrb	r3, [r7, #7]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d105      	bne.n	800b84a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	4907      	ldr	r1, [pc, #28]	@ (800b860 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b842:	4808      	ldr	r0, [pc, #32]	@ (800b864 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b844:	f001 ff40 	bl	800d6c8 <USBD_GetString>
 800b848:	e004      	b.n	800b854 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	4904      	ldr	r1, [pc, #16]	@ (800b860 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b84e:	4805      	ldr	r0, [pc, #20]	@ (800b864 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b850:	f001 ff3a 	bl	800d6c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b854:	4b02      	ldr	r3, [pc, #8]	@ (800b860 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b856:	4618      	mov	r0, r3
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	2000e2b4 	.word	0x2000e2b4
 800b864:	0800e850 	.word	0x0800e850

0800b868 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	4603      	mov	r3, r0
 800b870:	6039      	str	r1, [r7, #0]
 800b872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b874:	683a      	ldr	r2, [r7, #0]
 800b876:	4904      	ldr	r1, [pc, #16]	@ (800b888 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b878:	4804      	ldr	r0, [pc, #16]	@ (800b88c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b87a:	f001 ff25 	bl	800d6c8 <USBD_GetString>
  return USBD_StrDesc;
 800b87e:	4b02      	ldr	r3, [pc, #8]	@ (800b888 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	2000e2b4 	.word	0x2000e2b4
 800b88c:	0800e868 	.word	0x0800e868

0800b890 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	6039      	str	r1, [r7, #0]
 800b89a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	221a      	movs	r2, #26
 800b8a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b8a2:	f000 f843 	bl	800b92c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b8a6:	4b02      	ldr	r3, [pc, #8]	@ (800b8b0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	200000c4 	.word	0x200000c4

0800b8b4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	6039      	str	r1, [r7, #0]
 800b8be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b8c0:	79fb      	ldrb	r3, [r7, #7]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d105      	bne.n	800b8d2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	4907      	ldr	r1, [pc, #28]	@ (800b8e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b8ca:	4808      	ldr	r0, [pc, #32]	@ (800b8ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b8cc:	f001 fefc 	bl	800d6c8 <USBD_GetString>
 800b8d0:	e004      	b.n	800b8dc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	4904      	ldr	r1, [pc, #16]	@ (800b8e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b8d6:	4805      	ldr	r0, [pc, #20]	@ (800b8ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b8d8:	f001 fef6 	bl	800d6c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8dc:	4b02      	ldr	r3, [pc, #8]	@ (800b8e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	2000e2b4 	.word	0x2000e2b4
 800b8ec:	0800e87c 	.word	0x0800e87c

0800b8f0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	6039      	str	r1, [r7, #0]
 800b8fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8fc:	79fb      	ldrb	r3, [r7, #7]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d105      	bne.n	800b90e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	4907      	ldr	r1, [pc, #28]	@ (800b924 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b906:	4808      	ldr	r0, [pc, #32]	@ (800b928 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b908:	f001 fede 	bl	800d6c8 <USBD_GetString>
 800b90c:	e004      	b.n	800b918 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	4904      	ldr	r1, [pc, #16]	@ (800b924 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b912:	4805      	ldr	r0, [pc, #20]	@ (800b928 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b914:	f001 fed8 	bl	800d6c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b918:	4b02      	ldr	r3, [pc, #8]	@ (800b924 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	2000e2b4 	.word	0x2000e2b4
 800b928:	0800e888 	.word	0x0800e888

0800b92c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b932:	4b0f      	ldr	r3, [pc, #60]	@ (800b970 <Get_SerialNum+0x44>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b938:	4b0e      	ldr	r3, [pc, #56]	@ (800b974 <Get_SerialNum+0x48>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b93e:	4b0e      	ldr	r3, [pc, #56]	@ (800b978 <Get_SerialNum+0x4c>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4413      	add	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d009      	beq.n	800b966 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b952:	2208      	movs	r2, #8
 800b954:	4909      	ldr	r1, [pc, #36]	@ (800b97c <Get_SerialNum+0x50>)
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 f814 	bl	800b984 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b95c:	2204      	movs	r2, #4
 800b95e:	4908      	ldr	r1, [pc, #32]	@ (800b980 <Get_SerialNum+0x54>)
 800b960:	68b8      	ldr	r0, [r7, #8]
 800b962:	f000 f80f 	bl	800b984 <IntToUnicode>
  }
}
 800b966:	bf00      	nop
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	0bfa0700 	.word	0x0bfa0700
 800b974:	0bfa0704 	.word	0x0bfa0704
 800b978:	0bfa0708 	.word	0x0bfa0708
 800b97c:	200000c6 	.word	0x200000c6
 800b980:	200000d6 	.word	0x200000d6

0800b984 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b996:	2300      	movs	r3, #0
 800b998:	75fb      	strb	r3, [r7, #23]
 800b99a:	e027      	b.n	800b9ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	0f1b      	lsrs	r3, r3, #28
 800b9a0:	2b09      	cmp	r3, #9
 800b9a2:	d80b      	bhi.n	800b9bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	0f1b      	lsrs	r3, r3, #28
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	005b      	lsls	r3, r3, #1
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	440b      	add	r3, r1
 800b9b4:	3230      	adds	r2, #48	@ 0x30
 800b9b6:	b2d2      	uxtb	r2, r2
 800b9b8:	701a      	strb	r2, [r3, #0]
 800b9ba:	e00a      	b.n	800b9d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	0f1b      	lsrs	r3, r3, #28
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	005b      	lsls	r3, r3, #1
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	440b      	add	r3, r1
 800b9cc:	3237      	adds	r2, #55	@ 0x37
 800b9ce:	b2d2      	uxtb	r2, r2
 800b9d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	011b      	lsls	r3, r3, #4
 800b9d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	3301      	adds	r3, #1
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	75fb      	strb	r3, [r7, #23]
 800b9ec:	7dfa      	ldrb	r2, [r7, #23]
 800b9ee:	79fb      	ldrb	r3, [r7, #7]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d3d3      	bcc.n	800b99c <IntToUnicode+0x18>
  }
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop
 800b9f8:	371c      	adds	r7, #28
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ba16:	4619      	mov	r1, r3
 800ba18:	4610      	mov	r0, r2
 800ba1a:	f000 fe97 	bl	800c74c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ba1e:	bf00      	nop
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b082      	sub	sp, #8
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ba38:	78fa      	ldrb	r2, [r7, #3]
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	4413      	add	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	440b      	add	r3, r1
 800ba46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	78fb      	ldrb	r3, [r7, #3]
 800ba4e:	4619      	mov	r1, r3
 800ba50:	f000 fed1 	bl	800c7f6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ba54:	bf00      	nop
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ba6e:	78fa      	ldrb	r2, [r7, #3]
 800ba70:	6879      	ldr	r1, [r7, #4]
 800ba72:	4613      	mov	r3, r2
 800ba74:	00db      	lsls	r3, r3, #3
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	440b      	add	r3, r1
 800ba7c:	3320      	adds	r3, #32
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	4619      	mov	r1, r3
 800ba84:	f000 ff1a 	bl	800c8bc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f001 f81e 	bl	800cae0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800baa4:	bf00      	nop
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bab4:	2301      	movs	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	79db      	ldrb	r3, [r3, #7]
 800babc:	2b02      	cmp	r3, #2
 800babe:	d001      	beq.n	800bac4 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bac0:	f7f5 fd18 	bl	80014f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800baca:	7bfa      	ldrb	r2, [r7, #15]
 800bacc:	4611      	mov	r1, r2
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 ffcb 	bl	800ca6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bada:	4618      	mov	r0, r3
 800badc:	f000 ff84 	bl	800c9e8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bae0:	bf00      	nop
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f000 ffc7 	bl	800ca8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	7adb      	ldrb	r3, [r3, #11]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d005      	beq.n	800bb10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb04:	4b04      	ldr	r3, [pc, #16]	@ (800bb18 <HAL_PCD_SuspendCallback+0x30>)
 800bb06:	691b      	ldr	r3, [r3, #16]
 800bb08:	4a03      	ldr	r2, [pc, #12]	@ (800bb18 <HAL_PCD_SuspendCallback+0x30>)
 800bb0a:	f043 0306 	orr.w	r3, r3, #6
 800bb0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bb10:	bf00      	nop
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	e000ed00 	.word	0xe000ed00

0800bb1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	7adb      	ldrb	r3, [r3, #11]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d007      	beq.n	800bb3c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb2c:	4b08      	ldr	r3, [pc, #32]	@ (800bb50 <HAL_PCD_ResumeCallback+0x34>)
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	4a07      	ldr	r2, [pc, #28]	@ (800bb50 <HAL_PCD_ResumeCallback+0x34>)
 800bb32:	f023 0306 	bic.w	r3, r3, #6
 800bb36:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bb38:	f000 fa2a 	bl	800bf90 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb42:	4618      	mov	r0, r3
 800bb44:	f000 ffb6 	bl	800cab4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bb48:	bf00      	nop
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	e000ed00 	.word	0xe000ed00

0800bb54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb66:	78fa      	ldrb	r2, [r7, #3]
 800bb68:	4611      	mov	r1, r2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 ffdf 	bl	800cb2e <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb8a:	78fa      	ldrb	r2, [r7, #3]
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 ffc0 	bl	800cb14 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 ffcc 	bl	800cb48 <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 800bbb0:	bf00      	nop
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 ffc9 	bl	800cb5e <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bbdc:	4a24      	ldr	r2, [pc, #144]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a22      	ldr	r2, [pc, #136]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bbe8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bbec:	f7fa f8d0 	bl	8005d90 <HAL_PWREx_EnableVddUSB>
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler( );
  }
#else
  hpcd_USB_FS.Instance = USB_OTG_FS;
 800bbf0:	4b1f      	ldr	r3, [pc, #124]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bbf2:	4a20      	ldr	r2, [pc, #128]	@ (800bc74 <USBD_LL_Init+0xa0>)
 800bbf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 6;
 800bbf6:	4b1e      	ldr	r3, [pc, #120]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bbf8:	2206      	movs	r2, #6
 800bbfa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bbfc:	4b1c      	ldr	r3, [pc, #112]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bbfe:	2202      	movs	r2, #2
 800bc00:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bc02:	4b1b      	ldr	r3, [pc, #108]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc08:	4b19      	ldr	r3, [pc, #100]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc0e:	4b18      	ldr	r3, [pc, #96]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc14:	4b16      	ldr	r3, [pc, #88]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	735a      	strb	r2, [r3, #13]
  hpcd_USB_FS.Init.use_dedicated_ep1 = DISABLE;
 800bc1a:	4b15      	ldr	r3, [pc, #84]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_FS.Init.vbus_sensing_enable = DISABLE;
 800bc20:	4b13      	ldr	r3, [pc, #76]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bc26:	4812      	ldr	r0, [pc, #72]	@ (800bc70 <USBD_LL_Init+0x9c>)
 800bc28:	f7f8 fd8c 	bl	8004744 <HAL_PCD_Init>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d001      	beq.n	800bc36 <USBD_LL_Init+0x62>
  {
    Error_Handler();
 800bc32:	f7f5 fc5f 	bl	80014f4 <Error_Handler>
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , 0, 0xC0);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , 0, 0x110);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , 0, 0x100);
#else
  HAL_PCDEx_SetRxFiFo((PCD_HandleTypeDef*)pdev->pData, 0x80);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc3c:	2180      	movs	r1, #128	@ 0x80
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7f9 ffe5 	bl	8005c0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 0, 0x40);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc4a:	2240      	movs	r2, #64	@ 0x40
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7f9 ff96 	bl	8005b80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 1, 0x80);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc5a:	2280      	movs	r2, #128	@ 0x80
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7f9 ff8e 	bl	8005b80 <HAL_PCDEx_SetTxFiFo>
#endif
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	2000e4b4 	.word	0x2000e4b4
 800bc74:	42040000 	.word	0x42040000

0800bc78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7f8 fe70 	bl	8004974 <HAL_PCD_Start>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 f97e 	bl	800bf9c <USBD_Get_USB_Status>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bca4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	4608      	mov	r0, r1
 800bcb8:	4611      	mov	r1, r2
 800bcba:	461a      	mov	r2, r3
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	70fb      	strb	r3, [r7, #3]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70bb      	strb	r3, [r7, #2]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bcd6:	78bb      	ldrb	r3, [r7, #2]
 800bcd8:	883a      	ldrh	r2, [r7, #0]
 800bcda:	78f9      	ldrb	r1, [r7, #3]
 800bcdc:	f7f9 fb6b 	bl	80053b6 <HAL_PCD_EP_Open>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 f958 	bl	800bf9c <USBD_Get_USB_Status>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd14:	78fa      	ldrb	r2, [r7, #3]
 800bd16:	4611      	mov	r1, r2
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7f9 fbb6 	bl	800548a <HAL_PCD_EP_Close>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd22:	7bfb      	ldrb	r3, [r7, #15]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f000 f939 	bl	800bf9c <USBD_Get_USB_Status>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd52:	78fa      	ldrb	r2, [r7, #3]
 800bd54:	4611      	mov	r1, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7f9 fc6e 	bl	8005638 <HAL_PCD_EP_SetStall>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd60:	7bfb      	ldrb	r3, [r7, #15]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 f91a 	bl	800bf9c <USBD_Get_USB_Status>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b084      	sub	sp, #16
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	460b      	mov	r3, r1
 800bd80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd90:	78fa      	ldrb	r2, [r7, #3]
 800bd92:	4611      	mov	r1, r2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7f9 fcb2 	bl	80056fe <HAL_PCD_EP_ClrStall>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f000 f8fb 	bl	800bf9c <USBD_Get_USB_Status>
 800bda6:	4603      	mov	r3, r0
 800bda8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bdc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bdc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	da0b      	bge.n	800bde8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bdd0:	78fb      	ldrb	r3, [r7, #3]
 800bdd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdd6:	68f9      	ldr	r1, [r7, #12]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	440b      	add	r3, r1
 800bde2:	3316      	adds	r3, #22
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	e00b      	b.n	800be00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bde8:	78fb      	ldrb	r3, [r7, #3]
 800bdea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdee:	68f9      	ldr	r1, [r7, #12]
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	4413      	add	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	440b      	add	r3, r1
 800bdfa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bdfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be26:	78fa      	ldrb	r2, [r7, #3]
 800be28:	4611      	mov	r1, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f9 fa9f 	bl	800536e <HAL_PCD_SetAddress>
 800be30:	4603      	mov	r3, r0
 800be32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	4618      	mov	r0, r3
 800be38:	f000 f8b0 	bl	800bf9c <USBD_Get_USB_Status>
 800be3c:	4603      	mov	r3, r0
 800be3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be40:	7bbb      	ldrb	r3, [r7, #14]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b086      	sub	sp, #24
 800be4e:	af00      	add	r7, sp, #0
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	607a      	str	r2, [r7, #4]
 800be54:	603b      	str	r3, [r7, #0]
 800be56:	460b      	mov	r3, r1
 800be58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800be68:	7af9      	ldrb	r1, [r7, #11]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	f7f9 fba9 	bl	80055c4 <HAL_PCD_EP_Transmit>
 800be72:	4603      	mov	r3, r0
 800be74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be76:	7dfb      	ldrb	r3, [r7, #23]
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 f88f 	bl	800bf9c <USBD_Get_USB_Status>
 800be7e:	4603      	mov	r3, r0
 800be80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be82:	7dbb      	ldrb	r3, [r7, #22]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	607a      	str	r2, [r7, #4]
 800be96:	603b      	str	r3, [r7, #0]
 800be98:	460b      	mov	r3, r1
 800be9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800beaa:	7af9      	ldrb	r1, [r7, #11]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	f7f9 fb35 	bl	800551e <HAL_PCD_EP_Receive>
 800beb4:	4603      	mov	r3, r0
 800beb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beb8:	7dfb      	ldrb	r3, [r7, #23]
 800beba:	4618      	mov	r0, r3
 800bebc:	f000 f86e 	bl	800bf9c <USBD_Get_USB_Status>
 800bec0:	4603      	mov	r3, r0
 800bec2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bec4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	460b      	mov	r3, r1
 800bed8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bee0:	78fa      	ldrb	r2, [r7, #3]
 800bee2:	4611      	mov	r1, r2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f9 fb55 	bl	8005594 <HAL_PCD_EP_GetRxCount>
 800beea:	4603      	mov	r3, r0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bf00:	78fb      	ldrb	r3, [r7, #3]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <HAL_PCDEx_LPM_Callback+0x18>
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d013      	beq.n	800bf32 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bf0a:	e023      	b.n	800bf54 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	7adb      	ldrb	r3, [r3, #11]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d007      	beq.n	800bf24 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bf14:	f000 f83c 	bl	800bf90 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf18:	4b10      	ldr	r3, [pc, #64]	@ (800bf5c <HAL_PCDEx_LPM_Callback+0x68>)
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	4a0f      	ldr	r2, [pc, #60]	@ (800bf5c <HAL_PCDEx_LPM_Callback+0x68>)
 800bf1e:	f023 0306 	bic.w	r3, r3, #6
 800bf22:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 fdc2 	bl	800cab4 <USBD_LL_Resume>
    break;
 800bf30:	e010      	b.n	800bf54 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fda6 	bl	800ca8a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	7adb      	ldrb	r3, [r3, #11]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d005      	beq.n	800bf52 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf46:	4b05      	ldr	r3, [pc, #20]	@ (800bf5c <HAL_PCDEx_LPM_Callback+0x68>)
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	4a04      	ldr	r2, [pc, #16]	@ (800bf5c <HAL_PCDEx_LPM_Callback+0x68>)
 800bf4c:	f043 0306 	orr.w	r3, r3, #6
 800bf50:	6113      	str	r3, [r2, #16]
    break;
 800bf52:	bf00      	nop
}
 800bf54:	bf00      	nop
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	e000ed00 	.word	0xe000ed00

0800bf60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf68:	4b03      	ldr	r3, [pc, #12]	@ (800bf78 <USBD_static_malloc+0x18>)
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	2000e998 	.word	0x2000e998

0800bf7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]

}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bf94:	f7f4 fe76 	bl	8000c84 <SystemClock_Config>
}
 800bf98:	bf00      	nop
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfaa:	79fb      	ldrb	r3, [r7, #7]
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d817      	bhi.n	800bfe0 <USBD_Get_USB_Status+0x44>
 800bfb0:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb8 <USBD_Get_USB_Status+0x1c>)
 800bfb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb6:	bf00      	nop
 800bfb8:	0800bfc9 	.word	0x0800bfc9
 800bfbc:	0800bfcf 	.word	0x0800bfcf
 800bfc0:	0800bfd5 	.word	0x0800bfd5
 800bfc4:	0800bfdb 	.word	0x0800bfdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73fb      	strb	r3, [r7, #15]
    break;
 800bfcc:	e00b      	b.n	800bfe6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd2:	e008      	b.n	800bfe6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd8:	e005      	b.n	800bfe6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	73fb      	strb	r3, [r7, #15]
    break;
 800bfde:	e002      	b.n	800bfe6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe4:	bf00      	nop
  }
  return usb_status;
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c000:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c004:	f7ff ffac 	bl	800bf60 <USBD_static_malloc>
 800c008:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d105      	bne.n	800c01c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800c018:	2302      	movs	r3, #2
 800c01a:	e066      	b.n	800c0ea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	7c1b      	ldrb	r3, [r3, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d119      	bne.n	800c060 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c02c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c030:	2202      	movs	r2, #2
 800c032:	2181      	movs	r1, #129	@ 0x81
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff fe3a 	bl	800bcae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c040:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c044:	2202      	movs	r2, #2
 800c046:	2101      	movs	r1, #1
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7ff fe30 	bl	800bcae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2201      	movs	r2, #1
 800c052:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2210      	movs	r2, #16
 800c05a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800c05e:	e016      	b.n	800c08e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c060:	2340      	movs	r3, #64	@ 0x40
 800c062:	2202      	movs	r2, #2
 800c064:	2181      	movs	r1, #129	@ 0x81
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff fe21 	bl	800bcae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c072:	2340      	movs	r3, #64	@ 0x40
 800c074:	2202      	movs	r2, #2
 800c076:	2101      	movs	r1, #1
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7ff fe18 	bl	800bcae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2210      	movs	r2, #16
 800c08a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c08e:	2308      	movs	r3, #8
 800c090:	2203      	movs	r2, #3
 800c092:	2182      	movs	r1, #130	@ 0x82
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff fe0a 	bl	800bcae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7c1b      	ldrb	r3, [r3, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d109      	bne.n	800c0d8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c0ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7ff fedb 	bl	800be8c <USBD_LL_PrepareReceive>
 800c0d6:	e007      	b.n	800c0e8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c0de:	2340      	movs	r3, #64	@ 0x40
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff fed2 	bl	800be8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c0fe:	2181      	movs	r1, #129	@ 0x81
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff fdfa 	bl	800bcfa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c10c:	2101      	movs	r1, #1
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fdf3 	bl	800bcfa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c11c:	2182      	movs	r1, #130	@ 0x82
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff fdeb 	bl	800bcfa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00e      	beq.n	800c15c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c14e:	4618      	mov	r0, r3
 800c150:	f7ff ff14 	bl	800bf7c <USBD_static_free>
    pdev->pClassData = NULL;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
	...

0800c168 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c178:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c17a:	2300      	movs	r3, #0
 800c17c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c17e:	2300      	movs	r3, #0
 800c180:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d03a      	beq.n	800c208 <USBD_CDC_Setup+0xa0>
 800c192:	2b20      	cmp	r3, #32
 800c194:	f040 8097 	bne.w	800c2c6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	88db      	ldrh	r3, [r3, #6]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d029      	beq.n	800c1f4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	b25b      	sxtb	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	da11      	bge.n	800c1ce <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c1b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	88d2      	ldrh	r2, [r2, #6]
 800c1bc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c1be:	6939      	ldr	r1, [r7, #16]
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	88db      	ldrh	r3, [r3, #6]
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f001 fade 	bl	800d788 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c1cc:	e082      	b.n	800c2d4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	785a      	ldrb	r2, [r3, #1]
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	88db      	ldrh	r3, [r3, #6]
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c1e4:	6939      	ldr	r1, [r7, #16]
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	88db      	ldrh	r3, [r3, #6]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 faf7 	bl	800d7e0 <USBD_CtlPrepareRx>
      break;
 800c1f2:	e06f      	b.n	800c2d4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	7850      	ldrb	r0, [r2, #1]
 800c200:	2200      	movs	r2, #0
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	4798      	blx	r3
      break;
 800c206:	e065      	b.n	800c2d4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	785b      	ldrb	r3, [r3, #1]
 800c20c:	2b0b      	cmp	r3, #11
 800c20e:	d84f      	bhi.n	800c2b0 <USBD_CDC_Setup+0x148>
 800c210:	a201      	add	r2, pc, #4	@ (adr r2, 800c218 <USBD_CDC_Setup+0xb0>)
 800c212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c216:	bf00      	nop
 800c218:	0800c249 	.word	0x0800c249
 800c21c:	0800c2bf 	.word	0x0800c2bf
 800c220:	0800c2b1 	.word	0x0800c2b1
 800c224:	0800c2b1 	.word	0x0800c2b1
 800c228:	0800c2b1 	.word	0x0800c2b1
 800c22c:	0800c2b1 	.word	0x0800c2b1
 800c230:	0800c2b1 	.word	0x0800c2b1
 800c234:	0800c2b1 	.word	0x0800c2b1
 800c238:	0800c2b1 	.word	0x0800c2b1
 800c23c:	0800c2b1 	.word	0x0800c2b1
 800c240:	0800c271 	.word	0x0800c271
 800c244:	0800c299 	.word	0x0800c299
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d107      	bne.n	800c262 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c252:	f107 030c 	add.w	r3, r7, #12
 800c256:	2202      	movs	r2, #2
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f001 fa94 	bl	800d788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c260:	e030      	b.n	800c2c4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 fa1e 	bl	800d6a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c26a:	2303      	movs	r3, #3
 800c26c:	75fb      	strb	r3, [r7, #23]
          break;
 800c26e:	e029      	b.n	800c2c4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c276:	2b03      	cmp	r3, #3
 800c278:	d107      	bne.n	800c28a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c27a:	f107 030f 	add.w	r3, r7, #15
 800c27e:	2201      	movs	r2, #1
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f001 fa80 	bl	800d788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c288:	e01c      	b.n	800c2c4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f001 fa0a 	bl	800d6a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	75fb      	strb	r3, [r7, #23]
          break;
 800c296:	e015      	b.n	800c2c4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	d00f      	beq.n	800c2c2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f001 f9fe 	bl	800d6a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2aa:	2303      	movs	r3, #3
 800c2ac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c2ae:	e008      	b.n	800c2c2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f001 f9f7 	bl	800d6a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800c2b8:	2303      	movs	r3, #3
 800c2ba:	75fb      	strb	r3, [r7, #23]
          break;
 800c2bc:	e002      	b.n	800c2c4 <USBD_CDC_Setup+0x15c>
          break;
 800c2be:	bf00      	nop
 800c2c0:	e008      	b.n	800c2d4 <USBD_CDC_Setup+0x16c>
          break;
 800c2c2:	bf00      	nop
      }
      break;
 800c2c4:	e006      	b.n	800c2d4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f001 f9ec 	bl	800d6a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	75fb      	strb	r3, [r7, #23]
      break;
 800c2d2:	bf00      	nop
  }

  return (uint8_t)ret;
 800c2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3718      	adds	r7, #24
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop

0800c2e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c2f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e04f      	b.n	800c3a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c308:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c30a:	78fa      	ldrb	r2, [r7, #3]
 800c30c:	6879      	ldr	r1, [r7, #4]
 800c30e:	4613      	mov	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	440b      	add	r3, r1
 800c318:	3318      	adds	r3, #24
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d029      	beq.n	800c374 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c320:	78fa      	ldrb	r2, [r7, #3]
 800c322:	6879      	ldr	r1, [r7, #4]
 800c324:	4613      	mov	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	440b      	add	r3, r1
 800c32e:	3318      	adds	r3, #24
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	78f9      	ldrb	r1, [r7, #3]
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	460b      	mov	r3, r1
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	440b      	add	r3, r1
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4403      	add	r3, r0
 800c340:	331c      	adds	r3, #28
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	fbb2 f1f3 	udiv	r1, r2, r3
 800c348:	fb01 f303 	mul.w	r3, r1, r3
 800c34c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d110      	bne.n	800c374 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c352:	78fa      	ldrb	r2, [r7, #3]
 800c354:	6879      	ldr	r1, [r7, #4]
 800c356:	4613      	mov	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	440b      	add	r3, r1
 800c360:	3318      	adds	r3, #24
 800c362:	2200      	movs	r2, #0
 800c364:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c366:	78f9      	ldrb	r1, [r7, #3]
 800c368:	2300      	movs	r3, #0
 800c36a:	2200      	movs	r2, #0
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f7ff fd6c 	bl	800be4a <USBD_LL_Transmit>
 800c372:	e015      	b.n	800c3a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2200      	movs	r2, #0
 800c378:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c396:	68ba      	ldr	r2, [r7, #8]
 800c398:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c39c:	78fa      	ldrb	r2, [r7, #3]
 800c39e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c3bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	e015      	b.n	800c3f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c3cc:	78fb      	ldrb	r3, [r7, #3]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7ff fd7c 	bl	800bece <USBD_LL_GetRxDataSize>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c40e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d014      	beq.n	800c444 <USBD_CDC_EP0_RxReady+0x44>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c420:	2bff      	cmp	r3, #255	@ 0xff
 800c422:	d00f      	beq.n	800c444 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800c432:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c43a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	22ff      	movs	r2, #255	@ 0xff
 800c440:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2243      	movs	r2, #67	@ 0x43
 800c45c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c45e:	4b03      	ldr	r3, [pc, #12]	@ (800c46c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c460:	4618      	mov	r0, r3
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	20000168 	.word	0x20000168

0800c470 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2243      	movs	r2, #67	@ 0x43
 800c47c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c47e:	4b03      	ldr	r3, [pc, #12]	@ (800c48c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c480:	4618      	mov	r0, r3
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	20000124 	.word	0x20000124

0800c490 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2243      	movs	r2, #67	@ 0x43
 800c49c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c49e:	4b03      	ldr	r3, [pc, #12]	@ (800c4ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	200001ac 	.word	0x200001ac

0800c4b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	220a      	movs	r2, #10
 800c4bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c4be:	4b03      	ldr	r3, [pc, #12]	@ (800c4cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr
 800c4cc:	200000e0 	.word	0x200000e0

0800c4d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	e004      	b.n	800c4ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b087      	sub	sp, #28
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c50c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	371c      	adds	r7, #28
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c53c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3714      	adds	r7, #20
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c562:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c564:	2301      	movs	r3, #1
 800c566:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c572:	2303      	movs	r3, #3
 800c574:	e01a      	b.n	800c5ac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d114      	bne.n	800c5aa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2201      	movs	r2, #1
 800c584:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c59e:	2181      	movs	r1, #129	@ 0x81
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7ff fc52 	bl	800be4a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c5c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	e016      	b.n	800c600 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	7c1b      	ldrb	r3, [r3, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d109      	bne.n	800c5ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff fc50 	bl	800be8c <USBD_LL_PrepareReceive>
 800c5ec:	e007      	b.n	800c5fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5f4:	2340      	movs	r3, #64	@ 0x40
 800c5f6:	2101      	movs	r1, #1
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7ff fc47 	bl	800be8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	4613      	mov	r3, r2
 800c614:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e01f      	b.n	800c660 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d003      	beq.n	800c646 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	68ba      	ldr	r2, [r7, #8]
 800c642:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	79fa      	ldrb	r2, [r7, #7]
 800c652:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f7ff fabd 	bl	800bbd4 <USBD_LL_Init>
 800c65a:	4603      	mov	r3, r0
 800c65c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3718      	adds	r7, #24
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c672:	2300      	movs	r3, #0
 800c674:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c67c:	2303      	movs	r3, #3
 800c67e:	e016      	b.n	800c6ae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00b      	beq.n	800c6ac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c69c:	f107 020e 	add.w	r2, r7, #14
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	4798      	blx	r3
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff fada 	bl	800bc78 <USBD_LL_Start>
 800c6c4:	4603      	mov	r3, r0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b083      	sub	sp, #12
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d009      	beq.n	800c712 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	78fa      	ldrb	r2, [r7, #3]
 800c708:	4611      	mov	r1, r2
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	4798      	blx	r3
 800c70e:	4603      	mov	r3, r0
 800c710:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c712:	7bfb      	ldrb	r3, [r7, #15]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	460b      	mov	r3, r1
 800c726:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d007      	beq.n	800c742 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	78fa      	ldrb	r2, [r7, #3]
 800c73c:	4611      	mov	r1, r2
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	4798      	blx	r3
  }

  return USBD_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 ff67 	bl	800d632 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c772:	461a      	mov	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c780:	f003 031f 	and.w	r3, r3, #31
 800c784:	2b02      	cmp	r3, #2
 800c786:	d01a      	beq.n	800c7be <USBD_LL_SetupStage+0x72>
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d822      	bhi.n	800c7d2 <USBD_LL_SetupStage+0x86>
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <USBD_LL_SetupStage+0x4a>
 800c790:	2b01      	cmp	r3, #1
 800c792:	d00a      	beq.n	800c7aa <USBD_LL_SetupStage+0x5e>
 800c794:	e01d      	b.n	800c7d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c79c:	4619      	mov	r1, r3
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fa18 	bl	800cbd4 <USBD_StdDevReq>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a8:	e020      	b.n	800c7ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fa7c 	bl	800ccb0 <USBD_StdItfReq>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c7bc:	e016      	b.n	800c7ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 faba 	bl	800cd40 <USBD_StdEPReq>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c7d0:	e00c      	b.n	800c7ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c7d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7ff faa9 	bl	800bd38 <USBD_LL_StallEP>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ea:	bf00      	nop
  }

  return ret;
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b086      	sub	sp, #24
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	460b      	mov	r3, r1
 800c800:	607a      	str	r2, [r7, #4]
 800c802:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c804:	7afb      	ldrb	r3, [r7, #11]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d137      	bne.n	800c87a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c810:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c818:	2b03      	cmp	r3, #3
 800c81a:	d14a      	bne.n	800c8b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	689a      	ldr	r2, [r3, #8]
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	429a      	cmp	r2, r3
 800c826:	d913      	bls.n	800c850 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	689a      	ldr	r2, [r3, #8]
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	1ad2      	subs	r2, r2, r3
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	68da      	ldr	r2, [r3, #12]
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	4293      	cmp	r3, r2
 800c840:	bf28      	it	cs
 800c842:	4613      	movcs	r3, r2
 800c844:	461a      	mov	r2, r3
 800c846:	6879      	ldr	r1, [r7, #4]
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f000 ffe6 	bl	800d81a <USBD_CtlContinueRx>
 800c84e:	e030      	b.n	800c8b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00a      	beq.n	800c872 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c862:	2b03      	cmp	r3, #3
 800c864:	d105      	bne.n	800c872 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f000 ffe2 	bl	800d83c <USBD_CtlSendStatus>
 800c878:	e01b      	b.n	800c8b2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d013      	beq.n	800c8ae <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	d10e      	bne.n	800c8ae <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	7afa      	ldrb	r2, [r7, #11]
 800c89a:	4611      	mov	r1, r2
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	4798      	blx	r3
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c8a4:	7dfb      	ldrb	r3, [r7, #23]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d003      	beq.n	800c8b2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c8aa:	7dfb      	ldrb	r3, [r7, #23]
 800c8ac:	e002      	b.n	800c8b4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e000      	b.n	800c8b4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	607a      	str	r2, [r7, #4]
 800c8c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c8ca:	7afb      	ldrb	r3, [r7, #11]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d16a      	bne.n	800c9a6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	3314      	adds	r3, #20
 800c8d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d155      	bne.n	800c98c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	689a      	ldr	r2, [r3, #8]
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d914      	bls.n	800c916 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	689a      	ldr	r2, [r3, #8]
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	1ad2      	subs	r2, r2, r3
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	461a      	mov	r2, r3
 800c900:	6879      	ldr	r1, [r7, #4]
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f000 ff5b 	bl	800d7be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c908:	2300      	movs	r3, #0
 800c90a:	2200      	movs	r2, #0
 800c90c:	2100      	movs	r1, #0
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f7ff fabc 	bl	800be8c <USBD_LL_PrepareReceive>
 800c914:	e03a      	b.n	800c98c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	68da      	ldr	r2, [r3, #12]
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d11c      	bne.n	800c95c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d316      	bcc.n	800c95c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c938:	429a      	cmp	r2, r3
 800c93a:	d20f      	bcs.n	800c95c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c93c:	2200      	movs	r2, #0
 800c93e:	2100      	movs	r1, #0
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f000 ff3c 	bl	800d7be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2200      	movs	r2, #0
 800c94a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c94e:	2300      	movs	r3, #0
 800c950:	2200      	movs	r2, #0
 800c952:	2100      	movs	r1, #0
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff fa99 	bl	800be8c <USBD_LL_PrepareReceive>
 800c95a:	e017      	b.n	800c98c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00a      	beq.n	800c97e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c96e:	2b03      	cmp	r3, #3
 800c970:	d105      	bne.n	800c97e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c97e:	2180      	movs	r1, #128	@ 0x80
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f7ff f9d9 	bl	800bd38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f000 ff6b 	bl	800d862 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c992:	2b01      	cmp	r3, #1
 800c994:	d123      	bne.n	800c9de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f7ff fe99 	bl	800c6ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c9a4:	e01b      	b.n	800c9de <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9ac:	695b      	ldr	r3, [r3, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d013      	beq.n	800c9da <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c9b8:	2b03      	cmp	r3, #3
 800c9ba:	d10e      	bne.n	800c9da <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	7afa      	ldrb	r2, [r7, #11]
 800c9c6:	4611      	mov	r1, r2
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	4798      	blx	r3
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d003      	beq.n	800c9de <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	e002      	b.n	800c9e0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c9da:	2303      	movs	r3, #3
 800c9dc:	e000      	b.n	800c9e0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d009      	beq.n	800ca2c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	6852      	ldr	r2, [r2, #4]
 800ca24:	b2d2      	uxtb	r2, r2
 800ca26:	4611      	mov	r1, r2
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca2c:	2340      	movs	r3, #64	@ 0x40
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2100      	movs	r1, #0
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7ff f93b 	bl	800bcae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2240      	movs	r2, #64	@ 0x40
 800ca44:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca48:	2340      	movs	r3, #64	@ 0x40
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	2180      	movs	r1, #128	@ 0x80
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff f92d 	bl	800bcae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2201      	movs	r2, #1
 800ca58:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2240      	movs	r2, #64	@ 0x40
 800ca5e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b083      	sub	sp, #12
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
 800ca72:	460b      	mov	r3, r1
 800ca74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	78fa      	ldrb	r2, [r7, #3]
 800ca7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr

0800ca8a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b083      	sub	sp, #12
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2204      	movs	r2, #4
 800caa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800caa6:	2300      	movs	r3, #0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cac2:	2b04      	cmp	r3, #4
 800cac4:	d105      	bne.n	800cad2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caee:	2b03      	cmp	r3, #3
 800caf0:	d10b      	bne.n	800cb0a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caf8:	69db      	ldr	r3, [r3, #28]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d005      	beq.n	800cb0a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb04:	69db      	ldr	r3, [r3, #28]
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb0a:	2300      	movs	r3, #0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	460b      	mov	r3, r1
 800cb38:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	370c      	adds	r7, #12
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b082      	sub	sp, #8
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d009      	beq.n	800cb8c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	6852      	ldr	r2, [r2, #4]
 800cb84:	b2d2      	uxtb	r2, r2
 800cb86:	4611      	mov	r1, r2
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	4798      	blx	r3
  }

  return USBD_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb96:	b480      	push	{r7}
 800cb98:	b087      	sub	sp, #28
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cbb4:	8a3b      	ldrh	r3, [r7, #16]
 800cbb6:	021b      	lsls	r3, r3, #8
 800cbb8:	b21a      	sxth	r2, r3
 800cbba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	b21b      	sxth	r3, r3
 800cbc2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cbc4:	89fb      	ldrh	r3, [r7, #14]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	371c      	adds	r7, #28
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
	...

0800cbd4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cbea:	2b40      	cmp	r3, #64	@ 0x40
 800cbec:	d005      	beq.n	800cbfa <USBD_StdDevReq+0x26>
 800cbee:	2b40      	cmp	r3, #64	@ 0x40
 800cbf0:	d853      	bhi.n	800cc9a <USBD_StdDevReq+0xc6>
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00b      	beq.n	800cc0e <USBD_StdDevReq+0x3a>
 800cbf6:	2b20      	cmp	r3, #32
 800cbf8:	d14f      	bne.n	800cc9a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	6839      	ldr	r1, [r7, #0]
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	4798      	blx	r3
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc0c:	e04a      	b.n	800cca4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	785b      	ldrb	r3, [r3, #1]
 800cc12:	2b09      	cmp	r3, #9
 800cc14:	d83b      	bhi.n	800cc8e <USBD_StdDevReq+0xba>
 800cc16:	a201      	add	r2, pc, #4	@ (adr r2, 800cc1c <USBD_StdDevReq+0x48>)
 800cc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1c:	0800cc71 	.word	0x0800cc71
 800cc20:	0800cc85 	.word	0x0800cc85
 800cc24:	0800cc8f 	.word	0x0800cc8f
 800cc28:	0800cc7b 	.word	0x0800cc7b
 800cc2c:	0800cc8f 	.word	0x0800cc8f
 800cc30:	0800cc4f 	.word	0x0800cc4f
 800cc34:	0800cc45 	.word	0x0800cc45
 800cc38:	0800cc8f 	.word	0x0800cc8f
 800cc3c:	0800cc67 	.word	0x0800cc67
 800cc40:	0800cc59 	.word	0x0800cc59
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f9da 	bl	800d000 <USBD_GetDescriptor>
      break;
 800cc4c:	e024      	b.n	800cc98 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fb69 	bl	800d328 <USBD_SetAddress>
      break;
 800cc56:	e01f      	b.n	800cc98 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fba8 	bl	800d3b0 <USBD_SetConfig>
 800cc60:	4603      	mov	r3, r0
 800cc62:	73fb      	strb	r3, [r7, #15]
      break;
 800cc64:	e018      	b.n	800cc98 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fc45 	bl	800d4f8 <USBD_GetConfig>
      break;
 800cc6e:	e013      	b.n	800cc98 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800cc70:	6839      	ldr	r1, [r7, #0]
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fc75 	bl	800d562 <USBD_GetStatus>
      break;
 800cc78:	e00e      	b.n	800cc98 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fca3 	bl	800d5c8 <USBD_SetFeature>
      break;
 800cc82:	e009      	b.n	800cc98 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800cc84:	6839      	ldr	r1, [r7, #0]
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fcb2 	bl	800d5f0 <USBD_ClrFeature>
      break;
 800cc8c:	e004      	b.n	800cc98 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fd08 	bl	800d6a6 <USBD_CtlError>
      break;
 800cc96:	bf00      	nop
    }
    break;
 800cc98:	e004      	b.n	800cca4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 fd02 	bl	800d6a6 <USBD_CtlError>
    break;
 800cca2:	bf00      	nop
  }

  return ret;
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop

0800ccb0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ccc6:	2b40      	cmp	r3, #64	@ 0x40
 800ccc8:	d005      	beq.n	800ccd6 <USBD_StdItfReq+0x26>
 800ccca:	2b40      	cmp	r3, #64	@ 0x40
 800cccc:	d82e      	bhi.n	800cd2c <USBD_StdItfReq+0x7c>
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <USBD_StdItfReq+0x26>
 800ccd2:	2b20      	cmp	r3, #32
 800ccd4:	d12a      	bne.n	800cd2c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d81d      	bhi.n	800cd1e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	889b      	ldrh	r3, [r3, #4]
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d813      	bhi.n	800cd14 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	6839      	ldr	r1, [r7, #0]
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	4798      	blx	r3
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	88db      	ldrh	r3, [r3, #6]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d110      	bne.n	800cd28 <USBD_StdItfReq+0x78>
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10d      	bne.n	800cd28 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 fd95 	bl	800d83c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800cd12:	e009      	b.n	800cd28 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800cd14:	6839      	ldr	r1, [r7, #0]
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fcc5 	bl	800d6a6 <USBD_CtlError>
      break;
 800cd1c:	e004      	b.n	800cd28 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800cd1e:	6839      	ldr	r1, [r7, #0]
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fcc0 	bl	800d6a6 <USBD_CtlError>
      break;
 800cd26:	e000      	b.n	800cd2a <USBD_StdItfReq+0x7a>
      break;
 800cd28:	bf00      	nop
    }
    break;
 800cd2a:	e004      	b.n	800cd36 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fcb9 	bl	800d6a6 <USBD_CtlError>
    break;
 800cd34:	bf00      	nop
  }

  return ret;
 800cd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	889b      	ldrh	r3, [r3, #4]
 800cd52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd5c:	2b40      	cmp	r3, #64	@ 0x40
 800cd5e:	d007      	beq.n	800cd70 <USBD_StdEPReq+0x30>
 800cd60:	2b40      	cmp	r3, #64	@ 0x40
 800cd62:	f200 8142 	bhi.w	800cfea <USBD_StdEPReq+0x2aa>
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00c      	beq.n	800cd84 <USBD_StdEPReq+0x44>
 800cd6a:	2b20      	cmp	r3, #32
 800cd6c:	f040 813d 	bne.w	800cfea <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	4798      	blx	r3
 800cd7e:	4603      	mov	r3, r0
 800cd80:	73fb      	strb	r3, [r7, #15]
    break;
 800cd82:	e137      	b.n	800cff4 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	785b      	ldrb	r3, [r3, #1]
 800cd88:	2b03      	cmp	r3, #3
 800cd8a:	d007      	beq.n	800cd9c <USBD_StdEPReq+0x5c>
 800cd8c:	2b03      	cmp	r3, #3
 800cd8e:	f300 8126 	bgt.w	800cfde <USBD_StdEPReq+0x29e>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d07d      	beq.n	800ce92 <USBD_StdEPReq+0x152>
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d03b      	beq.n	800ce12 <USBD_StdEPReq+0xd2>
 800cd9a:	e120      	b.n	800cfde <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cda2:	2b02      	cmp	r3, #2
 800cda4:	d002      	beq.n	800cdac <USBD_StdEPReq+0x6c>
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d016      	beq.n	800cdd8 <USBD_StdEPReq+0x98>
 800cdaa:	e02c      	b.n	800ce06 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdac:	7bbb      	ldrb	r3, [r7, #14]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00d      	beq.n	800cdce <USBD_StdEPReq+0x8e>
 800cdb2:	7bbb      	ldrb	r3, [r7, #14]
 800cdb4:	2b80      	cmp	r3, #128	@ 0x80
 800cdb6:	d00a      	beq.n	800cdce <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdb8:	7bbb      	ldrb	r3, [r7, #14]
 800cdba:	4619      	mov	r1, r3
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7fe ffbb 	bl	800bd38 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdc2:	2180      	movs	r1, #128	@ 0x80
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7fe ffb7 	bl	800bd38 <USBD_LL_StallEP>
 800cdca:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800cdcc:	e020      	b.n	800ce10 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800cdce:	6839      	ldr	r1, [r7, #0]
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 fc68 	bl	800d6a6 <USBD_CtlError>
        break;
 800cdd6:	e01b      	b.n	800ce10 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	885b      	ldrh	r3, [r3, #2]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10e      	bne.n	800cdfe <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cde0:	7bbb      	ldrb	r3, [r7, #14]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00b      	beq.n	800cdfe <USBD_StdEPReq+0xbe>
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	2b80      	cmp	r3, #128	@ 0x80
 800cdea:	d008      	beq.n	800cdfe <USBD_StdEPReq+0xbe>
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	88db      	ldrh	r3, [r3, #6]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d104      	bne.n	800cdfe <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7fe ff9d 	bl	800bd38 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 fd1c 	bl	800d83c <USBD_CtlSendStatus>

        break;
 800ce04:	e004      	b.n	800ce10 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fc4c 	bl	800d6a6 <USBD_CtlError>
        break;
 800ce0e:	bf00      	nop
      }
      break;
 800ce10:	e0ea      	b.n	800cfe8 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d002      	beq.n	800ce22 <USBD_StdEPReq+0xe2>
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d016      	beq.n	800ce4e <USBD_StdEPReq+0x10e>
 800ce20:	e030      	b.n	800ce84 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce22:	7bbb      	ldrb	r3, [r7, #14]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00d      	beq.n	800ce44 <USBD_StdEPReq+0x104>
 800ce28:	7bbb      	ldrb	r3, [r7, #14]
 800ce2a:	2b80      	cmp	r3, #128	@ 0x80
 800ce2c:	d00a      	beq.n	800ce44 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce2e:	7bbb      	ldrb	r3, [r7, #14]
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7fe ff80 	bl	800bd38 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce38:	2180      	movs	r1, #128	@ 0x80
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7fe ff7c 	bl	800bd38 <USBD_LL_StallEP>
 800ce40:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ce42:	e025      	b.n	800ce90 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fc2d 	bl	800d6a6 <USBD_CtlError>
        break;
 800ce4c:	e020      	b.n	800ce90 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	885b      	ldrh	r3, [r3, #2]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d11b      	bne.n	800ce8e <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ce56:	7bbb      	ldrb	r3, [r7, #14]
 800ce58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d004      	beq.n	800ce6a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce60:	7bbb      	ldrb	r3, [r7, #14]
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7fe ff86 	bl	800bd76 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fce6 	bl	800d83c <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	4798      	blx	r3
 800ce7e:	4603      	mov	r3, r0
 800ce80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ce82:	e004      	b.n	800ce8e <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800ce84:	6839      	ldr	r1, [r7, #0]
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fc0d 	bl	800d6a6 <USBD_CtlError>
        break;
 800ce8c:	e000      	b.n	800ce90 <USBD_StdEPReq+0x150>
        break;
 800ce8e:	bf00      	nop
      }
      break;
 800ce90:	e0aa      	b.n	800cfe8 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d002      	beq.n	800cea2 <USBD_StdEPReq+0x162>
 800ce9c:	2b03      	cmp	r3, #3
 800ce9e:	d032      	beq.n	800cf06 <USBD_StdEPReq+0x1c6>
 800cea0:	e097      	b.n	800cfd2 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cea2:	7bbb      	ldrb	r3, [r7, #14]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d007      	beq.n	800ceb8 <USBD_StdEPReq+0x178>
 800cea8:	7bbb      	ldrb	r3, [r7, #14]
 800ceaa:	2b80      	cmp	r3, #128	@ 0x80
 800ceac:	d004      	beq.n	800ceb8 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 fbf8 	bl	800d6a6 <USBD_CtlError>
          break;
 800ceb6:	e091      	b.n	800cfdc <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ceb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	da0b      	bge.n	800ced8 <USBD_StdEPReq+0x198>
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cec6:	4613      	mov	r3, r2
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	4413      	add	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	3310      	adds	r3, #16
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	4413      	add	r3, r2
 800ced4:	3304      	adds	r3, #4
 800ced6:	e00b      	b.n	800cef0 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ced8:	7bbb      	ldrb	r3, [r7, #14]
 800ceda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	4413      	add	r3, r2
 800ceee:	3304      	adds	r3, #4
 800cef0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2200      	movs	r2, #0
 800cef6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2202      	movs	r2, #2
 800cefc:	4619      	mov	r1, r3
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fc42 	bl	800d788 <USBD_CtlSendData>
        break;
 800cf04:	e06a      	b.n	800cfdc <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800cf06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	da11      	bge.n	800cf32 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf0e:	7bbb      	ldrb	r3, [r7, #14]
 800cf10:	f003 020f 	and.w	r2, r3, #15
 800cf14:	6879      	ldr	r1, [r7, #4]
 800cf16:	4613      	mov	r3, r2
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	4413      	add	r3, r2
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	440b      	add	r3, r1
 800cf20:	3324      	adds	r3, #36	@ 0x24
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d117      	bne.n	800cf58 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800cf28:	6839      	ldr	r1, [r7, #0]
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 fbbb 	bl	800d6a6 <USBD_CtlError>
            break;
 800cf30:	e054      	b.n	800cfdc <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	f003 020f 	and.w	r2, r3, #15
 800cf38:	6879      	ldr	r1, [r7, #4]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	440b      	add	r3, r1
 800cf44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d104      	bne.n	800cf58 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fba8 	bl	800d6a6 <USBD_CtlError>
            break;
 800cf56:	e041      	b.n	800cfdc <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	da0b      	bge.n	800cf78 <USBD_StdEPReq+0x238>
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
 800cf62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf66:	4613      	mov	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	3310      	adds	r3, #16
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	4413      	add	r3, r2
 800cf74:	3304      	adds	r3, #4
 800cf76:	e00b      	b.n	800cf90 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cf78:	7bbb      	ldrb	r3, [r7, #14]
 800cf7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf7e:	4613      	mov	r3, r2
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	4413      	add	r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	3304      	adds	r3, #4
 800cf90:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf92:	7bbb      	ldrb	r3, [r7, #14]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <USBD_StdEPReq+0x25e>
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	2b80      	cmp	r3, #128	@ 0x80
 800cf9c:	d103      	bne.n	800cfa6 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	e00e      	b.n	800cfc4 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cfa6:	7bbb      	ldrb	r3, [r7, #14]
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7fe ff02 	bl	800bdb4 <USBD_LL_IsStallEP>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d003      	beq.n	800cfbe <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	601a      	str	r2, [r3, #0]
 800cfbc:	e002      	b.n	800cfc4 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	2202      	movs	r2, #2
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 fbdc 	bl	800d788 <USBD_CtlSendData>
          break;
 800cfd0:	e004      	b.n	800cfdc <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800cfd2:	6839      	ldr	r1, [r7, #0]
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fb66 	bl	800d6a6 <USBD_CtlError>
        break;
 800cfda:	bf00      	nop
      }
      break;
 800cfdc:	e004      	b.n	800cfe8 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800cfde:	6839      	ldr	r1, [r7, #0]
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f000 fb60 	bl	800d6a6 <USBD_CtlError>
      break;
 800cfe6:	bf00      	nop
    }
    break;
 800cfe8:	e004      	b.n	800cff4 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800cfea:	6839      	ldr	r1, [r7, #0]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fb5a 	bl	800d6a6 <USBD_CtlError>
    break;
 800cff2:	bf00      	nop
  }

  return ret;
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
	...

0800d000 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d00a:	2300      	movs	r3, #0
 800d00c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d00e:	2300      	movs	r3, #0
 800d010:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d012:	2300      	movs	r3, #0
 800d014:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	885b      	ldrh	r3, [r3, #2]
 800d01a:	0a1b      	lsrs	r3, r3, #8
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	3b01      	subs	r3, #1
 800d020:	2b0e      	cmp	r3, #14
 800d022:	f200 8152 	bhi.w	800d2ca <USBD_GetDescriptor+0x2ca>
 800d026:	a201      	add	r2, pc, #4	@ (adr r2, 800d02c <USBD_GetDescriptor+0x2c>)
 800d028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02c:	0800d09d 	.word	0x0800d09d
 800d030:	0800d0b5 	.word	0x0800d0b5
 800d034:	0800d0f5 	.word	0x0800d0f5
 800d038:	0800d2cb 	.word	0x0800d2cb
 800d03c:	0800d2cb 	.word	0x0800d2cb
 800d040:	0800d26b 	.word	0x0800d26b
 800d044:	0800d297 	.word	0x0800d297
 800d048:	0800d2cb 	.word	0x0800d2cb
 800d04c:	0800d2cb 	.word	0x0800d2cb
 800d050:	0800d2cb 	.word	0x0800d2cb
 800d054:	0800d2cb 	.word	0x0800d2cb
 800d058:	0800d2cb 	.word	0x0800d2cb
 800d05c:	0800d2cb 	.word	0x0800d2cb
 800d060:	0800d2cb 	.word	0x0800d2cb
 800d064:	0800d069 	.word	0x0800d069
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d06e:	69db      	ldr	r3, [r3, #28]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00b      	beq.n	800d08c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d07a:	69db      	ldr	r3, [r3, #28]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	7c12      	ldrb	r2, [r2, #16]
 800d080:	f107 0108 	add.w	r1, r7, #8
 800d084:	4610      	mov	r0, r2
 800d086:	4798      	blx	r3
 800d088:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d08a:	e126      	b.n	800d2da <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 fb09 	bl	800d6a6 <USBD_CtlError>
      err++;
 800d094:	7afb      	ldrb	r3, [r7, #11]
 800d096:	3301      	adds	r3, #1
 800d098:	72fb      	strb	r3, [r7, #11]
    break;
 800d09a:	e11e      	b.n	800d2da <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	7c12      	ldrb	r2, [r2, #16]
 800d0a8:	f107 0108 	add.w	r1, r7, #8
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4798      	blx	r3
 800d0b0:	60f8      	str	r0, [r7, #12]
    break;
 800d0b2:	e112      	b.n	800d2da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7c1b      	ldrb	r3, [r3, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10d      	bne.n	800d0d8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0c4:	f107 0208 	add.w	r2, r7, #8
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	4798      	blx	r3
 800d0cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d0d6:	e100      	b.n	800d2da <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0e0:	f107 0208 	add.w	r2, r7, #8
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	4798      	blx	r3
 800d0e8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	701a      	strb	r2, [r3, #0]
    break;
 800d0f2:	e0f2      	b.n	800d2da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	885b      	ldrh	r3, [r3, #2]
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	2b05      	cmp	r3, #5
 800d0fc:	f200 80ac 	bhi.w	800d258 <USBD_GetDescriptor+0x258>
 800d100:	a201      	add	r2, pc, #4	@ (adr r2, 800d108 <USBD_GetDescriptor+0x108>)
 800d102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d106:	bf00      	nop
 800d108:	0800d121 	.word	0x0800d121
 800d10c:	0800d155 	.word	0x0800d155
 800d110:	0800d189 	.word	0x0800d189
 800d114:	0800d1bd 	.word	0x0800d1bd
 800d118:	0800d1f1 	.word	0x0800d1f1
 800d11c:	0800d225 	.word	0x0800d225
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00b      	beq.n	800d144 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	7c12      	ldrb	r2, [r2, #16]
 800d138:	f107 0108 	add.w	r1, r7, #8
 800d13c:	4610      	mov	r0, r2
 800d13e:	4798      	blx	r3
 800d140:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d142:	e091      	b.n	800d268 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 faad 	bl	800d6a6 <USBD_CtlError>
        err++;
 800d14c:	7afb      	ldrb	r3, [r7, #11]
 800d14e:	3301      	adds	r3, #1
 800d150:	72fb      	strb	r3, [r7, #11]
      break;
 800d152:	e089      	b.n	800d268 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00b      	beq.n	800d178 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	7c12      	ldrb	r2, [r2, #16]
 800d16c:	f107 0108 	add.w	r1, r7, #8
 800d170:	4610      	mov	r0, r2
 800d172:	4798      	blx	r3
 800d174:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d176:	e077      	b.n	800d268 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d178:	6839      	ldr	r1, [r7, #0]
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 fa93 	bl	800d6a6 <USBD_CtlError>
        err++;
 800d180:	7afb      	ldrb	r3, [r7, #11]
 800d182:	3301      	adds	r3, #1
 800d184:	72fb      	strb	r3, [r7, #11]
      break;
 800d186:	e06f      	b.n	800d268 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00b      	beq.n	800d1ac <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	7c12      	ldrb	r2, [r2, #16]
 800d1a0:	f107 0108 	add.w	r1, r7, #8
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	4798      	blx	r3
 800d1a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1aa:	e05d      	b.n	800d268 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d1ac:	6839      	ldr	r1, [r7, #0]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fa79 	bl	800d6a6 <USBD_CtlError>
        err++;
 800d1b4:	7afb      	ldrb	r3, [r7, #11]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	72fb      	strb	r3, [r7, #11]
      break;
 800d1ba:	e055      	b.n	800d268 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00b      	beq.n	800d1e0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	7c12      	ldrb	r2, [r2, #16]
 800d1d4:	f107 0108 	add.w	r1, r7, #8
 800d1d8:	4610      	mov	r0, r2
 800d1da:	4798      	blx	r3
 800d1dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1de:	e043      	b.n	800d268 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fa5f 	bl	800d6a6 <USBD_CtlError>
        err++;
 800d1e8:	7afb      	ldrb	r3, [r7, #11]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	72fb      	strb	r3, [r7, #11]
      break;
 800d1ee:	e03b      	b.n	800d268 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00b      	beq.n	800d214 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	7c12      	ldrb	r2, [r2, #16]
 800d208:	f107 0108 	add.w	r1, r7, #8
 800d20c:	4610      	mov	r0, r2
 800d20e:	4798      	blx	r3
 800d210:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d212:	e029      	b.n	800d268 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d214:	6839      	ldr	r1, [r7, #0]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fa45 	bl	800d6a6 <USBD_CtlError>
        err++;
 800d21c:	7afb      	ldrb	r3, [r7, #11]
 800d21e:	3301      	adds	r3, #1
 800d220:	72fb      	strb	r3, [r7, #11]
      break;
 800d222:	e021      	b.n	800d268 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00b      	beq.n	800d248 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d236:	699b      	ldr	r3, [r3, #24]
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	7c12      	ldrb	r2, [r2, #16]
 800d23c:	f107 0108 	add.w	r1, r7, #8
 800d240:	4610      	mov	r0, r2
 800d242:	4798      	blx	r3
 800d244:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d246:	e00f      	b.n	800d268 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fa2b 	bl	800d6a6 <USBD_CtlError>
        err++;
 800d250:	7afb      	ldrb	r3, [r7, #11]
 800d252:	3301      	adds	r3, #1
 800d254:	72fb      	strb	r3, [r7, #11]
      break;
 800d256:	e007      	b.n	800d268 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fa23 	bl	800d6a6 <USBD_CtlError>
      err++;
 800d260:	7afb      	ldrb	r3, [r7, #11]
 800d262:	3301      	adds	r3, #1
 800d264:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800d266:	bf00      	nop
    }
    break;
 800d268:	e037      	b.n	800d2da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7c1b      	ldrb	r3, [r3, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d109      	bne.n	800d286 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d27a:	f107 0208 	add.w	r2, r7, #8
 800d27e:	4610      	mov	r0, r2
 800d280:	4798      	blx	r3
 800d282:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d284:	e029      	b.n	800d2da <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fa0c 	bl	800d6a6 <USBD_CtlError>
      err++;
 800d28e:	7afb      	ldrb	r3, [r7, #11]
 800d290:	3301      	adds	r3, #1
 800d292:	72fb      	strb	r3, [r7, #11]
    break;
 800d294:	e021      	b.n	800d2da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	7c1b      	ldrb	r3, [r3, #16]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10d      	bne.n	800d2ba <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2a6:	f107 0208 	add.w	r2, r7, #8
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	4798      	blx	r3
 800d2ae:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	2207      	movs	r2, #7
 800d2b6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d2b8:	e00f      	b.n	800d2da <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f9f2 	bl	800d6a6 <USBD_CtlError>
      err++;
 800d2c2:	7afb      	ldrb	r3, [r7, #11]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	72fb      	strb	r3, [r7, #11]
    break;
 800d2c8:	e007      	b.n	800d2da <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f9ea 	bl	800d6a6 <USBD_CtlError>
    err++;
 800d2d2:	7afb      	ldrb	r3, [r7, #11]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	72fb      	strb	r3, [r7, #11]
    break;
 800d2d8:	bf00      	nop
  }

  if (err != 0U)
 800d2da:	7afb      	ldrb	r3, [r7, #11]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d11e      	bne.n	800d31e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	88db      	ldrh	r3, [r3, #6]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d016      	beq.n	800d316 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800d2e8:	893b      	ldrh	r3, [r7, #8]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00e      	beq.n	800d30c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	88da      	ldrh	r2, [r3, #6]
 800d2f2:	893b      	ldrh	r3, [r7, #8]
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	bf28      	it	cs
 800d2f8:	4613      	movcs	r3, r2
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800d2fe:	893b      	ldrh	r3, [r7, #8]
 800d300:	461a      	mov	r2, r3
 800d302:	68f9      	ldr	r1, [r7, #12]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 fa3f 	bl	800d788 <USBD_CtlSendData>
 800d30a:	e009      	b.n	800d320 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f9c9 	bl	800d6a6 <USBD_CtlError>
 800d314:	e004      	b.n	800d320 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fa90 	bl	800d83c <USBD_CtlSendStatus>
 800d31c:	e000      	b.n	800d320 <USBD_GetDescriptor+0x320>
    return;
 800d31e:	bf00      	nop
    }
  }
}
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop

0800d328 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	889b      	ldrh	r3, [r3, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d130      	bne.n	800d39c <USBD_SetAddress+0x74>
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	88db      	ldrh	r3, [r3, #6]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d12c      	bne.n	800d39c <USBD_SetAddress+0x74>
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	885b      	ldrh	r3, [r3, #2]
 800d346:	2b7f      	cmp	r3, #127	@ 0x7f
 800d348:	d828      	bhi.n	800d39c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	885b      	ldrh	r3, [r3, #2]
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d354:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d104      	bne.n	800d36a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f99f 	bl	800d6a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d368:	e01d      	b.n	800d3a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	7bfa      	ldrb	r2, [r7, #15]
 800d36e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d372:	7bfb      	ldrb	r3, [r7, #15]
 800d374:	4619      	mov	r1, r3
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7fe fd48 	bl	800be0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 fa5d 	bl	800d83c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d382:	7bfb      	ldrb	r3, [r7, #15]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d004      	beq.n	800d392 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2202      	movs	r2, #2
 800d38c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d390:	e009      	b.n	800d3a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2201      	movs	r2, #1
 800d396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d39a:	e004      	b.n	800d3a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f981 	bl	800d6a6 <USBD_CtlError>
  }
}
 800d3a4:	bf00      	nop
 800d3a6:	bf00      	nop
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
	...

0800d3b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	885b      	ldrh	r3, [r3, #2]
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	4b4b      	ldr	r3, [pc, #300]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d3c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d3c8:	4b4a      	ldr	r3, [pc, #296]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d905      	bls.n	800d3dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d3d0:	6839      	ldr	r1, [r7, #0]
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f967 	bl	800d6a6 <USBD_CtlError>
    return USBD_FAIL;
 800d3d8:	2303      	movs	r3, #3
 800d3da:	e087      	b.n	800d4ec <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	d002      	beq.n	800d3ec <USBD_SetConfig+0x3c>
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	d025      	beq.n	800d436 <USBD_SetConfig+0x86>
 800d3ea:	e071      	b.n	800d4d0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800d3ec:	4b41      	ldr	r3, [pc, #260]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d01c      	beq.n	800d42e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800d3f4:	4b3f      	ldr	r3, [pc, #252]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3fe:	4b3d      	ldr	r3, [pc, #244]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7ff f96d 	bl	800c6e4 <USBD_SetClassConfig>
 800d40a:	4603      	mov	r3, r0
 800d40c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d004      	beq.n	800d41e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800d414:	6839      	ldr	r1, [r7, #0]
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 f945 	bl	800d6a6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d41c:	e065      	b.n	800d4ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 fa0c 	bl	800d83c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2203      	movs	r2, #3
 800d428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800d42c:	e05d      	b.n	800d4ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fa04 	bl	800d83c <USBD_CtlSendStatus>
    break;
 800d434:	e059      	b.n	800d4ea <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800d436:	4b2f      	ldr	r3, [pc, #188]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d112      	bne.n	800d464 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2202      	movs	r2, #2
 800d442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800d446:	4b2b      	ldr	r3, [pc, #172]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d450:	4b28      	ldr	r3, [pc, #160]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	4619      	mov	r1, r3
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7ff f960 	bl	800c71c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 f9ed 	bl	800d83c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d462:	e042      	b.n	800d4ea <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800d464:	4b23      	ldr	r3, [pc, #140]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	461a      	mov	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d02a      	beq.n	800d4c8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	b2db      	uxtb	r3, r3
 800d478:	4619      	mov	r1, r3
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff f94e 	bl	800c71c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800d480:	4b1c      	ldr	r3, [pc, #112]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	461a      	mov	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d48a:	4b1a      	ldr	r3, [pc, #104]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	4619      	mov	r1, r3
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7ff f927 	bl	800c6e4 <USBD_SetClassConfig>
 800d496:	4603      	mov	r3, r0
 800d498:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00f      	beq.n	800d4c0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800d4a0:	6839      	ldr	r1, [r7, #0]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f8ff 	bl	800d6a6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff f933 	bl	800c71c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800d4be:	e014      	b.n	800d4ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f9bb 	bl	800d83c <USBD_CtlSendStatus>
    break;
 800d4c6:	e010      	b.n	800d4ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f9b7 	bl	800d83c <USBD_CtlSendStatus>
    break;
 800d4ce:	e00c      	b.n	800d4ea <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800d4d0:	6839      	ldr	r1, [r7, #0]
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f8e7 	bl	800d6a6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d4d8:	4b06      	ldr	r3, [pc, #24]	@ (800d4f4 <USBD_SetConfig+0x144>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	4619      	mov	r1, r3
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff f91c 	bl	800c71c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e8:	bf00      	nop
  }

  return ret;
 800d4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	2000ebb8 	.word	0x2000ebb8

0800d4f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	88db      	ldrh	r3, [r3, #6]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d004      	beq.n	800d514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f8ca 	bl	800d6a6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800d512:	e022      	b.n	800d55a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	dc02      	bgt.n	800d524 <USBD_GetConfig+0x2c>
 800d51e:	2b00      	cmp	r3, #0
 800d520:	dc03      	bgt.n	800d52a <USBD_GetConfig+0x32>
 800d522:	e015      	b.n	800d550 <USBD_GetConfig+0x58>
 800d524:	2b03      	cmp	r3, #3
 800d526:	d00b      	beq.n	800d540 <USBD_GetConfig+0x48>
 800d528:	e012      	b.n	800d550 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3308      	adds	r3, #8
 800d534:	2201      	movs	r2, #1
 800d536:	4619      	mov	r1, r3
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f925 	bl	800d788 <USBD_CtlSendData>
      break;
 800d53e:	e00c      	b.n	800d55a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	3304      	adds	r3, #4
 800d544:	2201      	movs	r2, #1
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 f91d 	bl	800d788 <USBD_CtlSendData>
      break;
 800d54e:	e004      	b.n	800d55a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800d550:	6839      	ldr	r1, [r7, #0]
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f8a7 	bl	800d6a6 <USBD_CtlError>
      break;
 800d558:	bf00      	nop
}
 800d55a:	bf00      	nop
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b082      	sub	sp, #8
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d572:	3b01      	subs	r3, #1
 800d574:	2b02      	cmp	r3, #2
 800d576:	d81e      	bhi.n	800d5b6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	88db      	ldrh	r3, [r3, #6]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d004      	beq.n	800d58a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f88f 	bl	800d6a6 <USBD_CtlError>
      break;
 800d588:	e01a      	b.n	800d5c0 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d596:	2b00      	cmp	r3, #0
 800d598:	d005      	beq.n	800d5a6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	f043 0202 	orr.w	r2, r3, #2
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	330c      	adds	r3, #12
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f8ea 	bl	800d788 <USBD_CtlSendData>
    break;
 800d5b4:	e004      	b.n	800d5c0 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800d5b6:	6839      	ldr	r1, [r7, #0]
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f874 	bl	800d6a6 <USBD_CtlError>
    break;
 800d5be:	bf00      	nop
  }
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	885b      	ldrh	r3, [r3, #2]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d106      	bne.n	800d5e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 f92a 	bl	800d83c <USBD_CtlSendStatus>
  }
}
 800d5e8:	bf00      	nop
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d600:	3b01      	subs	r3, #1
 800d602:	2b02      	cmp	r3, #2
 800d604:	d80b      	bhi.n	800d61e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	885b      	ldrh	r3, [r3, #2]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d10c      	bne.n	800d628 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 f910 	bl	800d83c <USBD_CtlSendStatus>
      }
      break;
 800d61c:	e004      	b.n	800d628 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d61e:	6839      	ldr	r1, [r7, #0]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 f840 	bl	800d6a6 <USBD_CtlError>
      break;
 800d626:	e000      	b.n	800d62a <USBD_ClrFeature+0x3a>
      break;
 800d628:	bf00      	nop
  }
}
 800d62a:	bf00      	nop
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b084      	sub	sp, #16
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	781a      	ldrb	r2, [r3, #0]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	3301      	adds	r3, #1
 800d64c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	781a      	ldrb	r2, [r3, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3301      	adds	r3, #1
 800d65a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f7ff fa9a 	bl	800cb96 <SWAPBYTE>
 800d662:	4603      	mov	r3, r0
 800d664:	461a      	mov	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	3301      	adds	r3, #1
 800d66e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	3301      	adds	r3, #1
 800d674:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f7ff fa8d 	bl	800cb96 <SWAPBYTE>
 800d67c:	4603      	mov	r3, r0
 800d67e:	461a      	mov	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	3301      	adds	r3, #1
 800d688:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	3301      	adds	r3, #1
 800d68e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f7ff fa80 	bl	800cb96 <SWAPBYTE>
 800d696:	4603      	mov	r3, r0
 800d698:	461a      	mov	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	80da      	strh	r2, [r3, #6]
}
 800d69e:	bf00      	nop
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b082      	sub	sp, #8
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6b0:	2180      	movs	r1, #128	@ 0x80
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7fe fb40 	bl	800bd38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f7fe fb3c 	bl	800bd38 <USBD_LL_StallEP>
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b086      	sub	sp, #24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d036      	beq.n	800d74c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d6e2:	6938      	ldr	r0, [r7, #16]
 800d6e4:	f000 f836 	bl	800d754 <USBD_GetLen>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	7812      	ldrb	r2, [r2, #0]
 800d700:	701a      	strb	r2, [r3, #0]
  idx++;
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	3301      	adds	r3, #1
 800d706:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d708:	7dfb      	ldrb	r3, [r7, #23]
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	4413      	add	r3, r2
 800d70e:	2203      	movs	r2, #3
 800d710:	701a      	strb	r2, [r3, #0]
  idx++;
 800d712:	7dfb      	ldrb	r3, [r7, #23]
 800d714:	3301      	adds	r3, #1
 800d716:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d718:	e013      	b.n	800d742 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d71a:	7dfb      	ldrb	r3, [r7, #23]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	4413      	add	r3, r2
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	7812      	ldrb	r2, [r2, #0]
 800d724:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	3301      	adds	r3, #1
 800d72a:	613b      	str	r3, [r7, #16]
    idx++;
 800d72c:	7dfb      	ldrb	r3, [r7, #23]
 800d72e:	3301      	adds	r3, #1
 800d730:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d732:	7dfb      	ldrb	r3, [r7, #23]
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	4413      	add	r3, r2
 800d738:	2200      	movs	r2, #0
 800d73a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d73c:	7dfb      	ldrb	r3, [r7, #23]
 800d73e:	3301      	adds	r3, #1
 800d740:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1e7      	bne.n	800d71a <USBD_GetString+0x52>
 800d74a:	e000      	b.n	800d74e <USBD_GetString+0x86>
    return;
 800d74c:	bf00      	nop
  }
}
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d75c:	2300      	movs	r3, #0
 800d75e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d764:	e005      	b.n	800d772 <USBD_GetLen+0x1e>
  {
    len++;
 800d766:	7bfb      	ldrb	r3, [r7, #15]
 800d768:	3301      	adds	r3, #1
 800d76a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	3301      	adds	r3, #1
 800d770:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1f5      	bne.n	800d766 <USBD_GetLen+0x12>
  }

  return len;
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2202      	movs	r2, #2
 800d798:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	68ba      	ldr	r2, [r7, #8]
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f7fe fb4b 	bl	800be4a <USBD_LL_Transmit>

  return USBD_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b084      	sub	sp, #16
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	60f8      	str	r0, [r7, #12]
 800d7c6:	60b9      	str	r1, [r7, #8]
 800d7c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f7fe fb3a 	bl	800be4a <USBD_LL_Transmit>

  return USBD_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2203      	movs	r2, #3
 800d7f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	2100      	movs	r1, #0
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f7fe fb3e 	bl	800be8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	60f8      	str	r0, [r7, #12]
 800d822:	60b9      	str	r1, [r7, #8]
 800d824:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	2100      	movs	r1, #0
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f7fe fb2d 	bl	800be8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2204      	movs	r2, #4
 800d848:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d84c:	2300      	movs	r3, #0
 800d84e:	2200      	movs	r2, #0
 800d850:	2100      	movs	r1, #0
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7fe faf9 	bl	800be4a <USBD_LL_Transmit>

  return USBD_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b082      	sub	sp, #8
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2205      	movs	r2, #5
 800d86e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d872:	2300      	movs	r3, #0
 800d874:	2200      	movs	r2, #0
 800d876:	2100      	movs	r1, #0
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7fe fb07 	bl	800be8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <memset>:
 800d888:	4402      	add	r2, r0
 800d88a:	4603      	mov	r3, r0
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d100      	bne.n	800d892 <memset+0xa>
 800d890:	4770      	bx	lr
 800d892:	f803 1b01 	strb.w	r1, [r3], #1
 800d896:	e7f9      	b.n	800d88c <memset+0x4>

0800d898 <__errno>:
 800d898:	4b01      	ldr	r3, [pc, #4]	@ (800d8a0 <__errno+0x8>)
 800d89a:	6818      	ldr	r0, [r3, #0]
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	200001f0 	.word	0x200001f0

0800d8a4 <__libc_init_array>:
 800d8a4:	b570      	push	{r4, r5, r6, lr}
 800d8a6:	4d0d      	ldr	r5, [pc, #52]	@ (800d8dc <__libc_init_array+0x38>)
 800d8a8:	2600      	movs	r6, #0
 800d8aa:	4c0d      	ldr	r4, [pc, #52]	@ (800d8e0 <__libc_init_array+0x3c>)
 800d8ac:	1b64      	subs	r4, r4, r5
 800d8ae:	10a4      	asrs	r4, r4, #2
 800d8b0:	42a6      	cmp	r6, r4
 800d8b2:	d109      	bne.n	800d8c8 <__libc_init_array+0x24>
 800d8b4:	4d0b      	ldr	r5, [pc, #44]	@ (800d8e4 <__libc_init_array+0x40>)
 800d8b6:	2600      	movs	r6, #0
 800d8b8:	4c0b      	ldr	r4, [pc, #44]	@ (800d8e8 <__libc_init_array+0x44>)
 800d8ba:	f000 ffbb 	bl	800e834 <_init>
 800d8be:	1b64      	subs	r4, r4, r5
 800d8c0:	10a4      	asrs	r4, r4, #2
 800d8c2:	42a6      	cmp	r6, r4
 800d8c4:	d105      	bne.n	800d8d2 <__libc_init_array+0x2e>
 800d8c6:	bd70      	pop	{r4, r5, r6, pc}
 800d8c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8cc:	3601      	adds	r6, #1
 800d8ce:	4798      	blx	r3
 800d8d0:	e7ee      	b.n	800d8b0 <__libc_init_array+0xc>
 800d8d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8d6:	3601      	adds	r6, #1
 800d8d8:	4798      	blx	r3
 800d8da:	e7f2      	b.n	800d8c2 <__libc_init_array+0x1e>
 800d8dc:	0800e998 	.word	0x0800e998
 800d8e0:	0800e998 	.word	0x0800e998
 800d8e4:	0800e998 	.word	0x0800e998
 800d8e8:	0800e99c 	.word	0x0800e99c

0800d8ec <pow>:
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ee:	ec55 4b11 	vmov	r4, r5, d1
 800d8f2:	ed2d 8b02 	vpush	{d8}
 800d8f6:	eeb0 8a40 	vmov.f32	s16, s0
 800d8fa:	eef0 8a60 	vmov.f32	s17, s1
 800d8fe:	f000 f8b7 	bl	800da70 <__ieee754_pow>
 800d902:	4622      	mov	r2, r4
 800d904:	462b      	mov	r3, r5
 800d906:	4620      	mov	r0, r4
 800d908:	4629      	mov	r1, r5
 800d90a:	ec57 6b10 	vmov	r6, r7, d0
 800d90e:	f7f3 f909 	bl	8000b24 <__aeabi_dcmpun>
 800d912:	2800      	cmp	r0, #0
 800d914:	d13b      	bne.n	800d98e <pow+0xa2>
 800d916:	2200      	movs	r2, #0
 800d918:	2300      	movs	r3, #0
 800d91a:	ec51 0b18 	vmov	r0, r1, d8
 800d91e:	f7f3 f8cf 	bl	8000ac0 <__aeabi_dcmpeq>
 800d922:	b1b8      	cbz	r0, 800d954 <pow+0x68>
 800d924:	2200      	movs	r2, #0
 800d926:	2300      	movs	r3, #0
 800d928:	4620      	mov	r0, r4
 800d92a:	4629      	mov	r1, r5
 800d92c:	f7f3 f8c8 	bl	8000ac0 <__aeabi_dcmpeq>
 800d930:	2800      	cmp	r0, #0
 800d932:	d146      	bne.n	800d9c2 <pow+0xd6>
 800d934:	ec45 4b10 	vmov	d0, r4, r5
 800d938:	f000 f848 	bl	800d9cc <finite>
 800d93c:	b338      	cbz	r0, 800d98e <pow+0xa2>
 800d93e:	2200      	movs	r2, #0
 800d940:	2300      	movs	r3, #0
 800d942:	4620      	mov	r0, r4
 800d944:	4629      	mov	r1, r5
 800d946:	f7f3 f8c5 	bl	8000ad4 <__aeabi_dcmplt>
 800d94a:	b300      	cbz	r0, 800d98e <pow+0xa2>
 800d94c:	f7ff ffa4 	bl	800d898 <__errno>
 800d950:	2322      	movs	r3, #34	@ 0x22
 800d952:	e01b      	b.n	800d98c <pow+0xa0>
 800d954:	ec47 6b10 	vmov	d0, r6, r7
 800d958:	f000 f838 	bl	800d9cc <finite>
 800d95c:	b9e0      	cbnz	r0, 800d998 <pow+0xac>
 800d95e:	eeb0 0a48 	vmov.f32	s0, s16
 800d962:	eef0 0a68 	vmov.f32	s1, s17
 800d966:	f000 f831 	bl	800d9cc <finite>
 800d96a:	b1a8      	cbz	r0, 800d998 <pow+0xac>
 800d96c:	ec45 4b10 	vmov	d0, r4, r5
 800d970:	f000 f82c 	bl	800d9cc <finite>
 800d974:	b180      	cbz	r0, 800d998 <pow+0xac>
 800d976:	4632      	mov	r2, r6
 800d978:	463b      	mov	r3, r7
 800d97a:	4630      	mov	r0, r6
 800d97c:	4639      	mov	r1, r7
 800d97e:	f7f3 f8d1 	bl	8000b24 <__aeabi_dcmpun>
 800d982:	2800      	cmp	r0, #0
 800d984:	d0e2      	beq.n	800d94c <pow+0x60>
 800d986:	f7ff ff87 	bl	800d898 <__errno>
 800d98a:	2321      	movs	r3, #33	@ 0x21
 800d98c:	6003      	str	r3, [r0, #0]
 800d98e:	ecbd 8b02 	vpop	{d8}
 800d992:	ec47 6b10 	vmov	d0, r6, r7
 800d996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d998:	2200      	movs	r2, #0
 800d99a:	2300      	movs	r3, #0
 800d99c:	4630      	mov	r0, r6
 800d99e:	4639      	mov	r1, r7
 800d9a0:	f7f3 f88e 	bl	8000ac0 <__aeabi_dcmpeq>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d0f2      	beq.n	800d98e <pow+0xa2>
 800d9a8:	eeb0 0a48 	vmov.f32	s0, s16
 800d9ac:	eef0 0a68 	vmov.f32	s1, s17
 800d9b0:	f000 f80c 	bl	800d9cc <finite>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d0ea      	beq.n	800d98e <pow+0xa2>
 800d9b8:	ec45 4b10 	vmov	d0, r4, r5
 800d9bc:	f000 f806 	bl	800d9cc <finite>
 800d9c0:	e7c3      	b.n	800d94a <pow+0x5e>
 800d9c2:	2600      	movs	r6, #0
 800d9c4:	4f00      	ldr	r7, [pc, #0]	@ (800d9c8 <pow+0xdc>)
 800d9c6:	e7e2      	b.n	800d98e <pow+0xa2>
 800d9c8:	3ff00000 	.word	0x3ff00000

0800d9cc <finite>:
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	ed8d 0b00 	vstr	d0, [sp]
 800d9d2:	9801      	ldr	r0, [sp, #4]
 800d9d4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d9d8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d9dc:	0fc0      	lsrs	r0, r0, #31
 800d9de:	b002      	add	sp, #8
 800d9e0:	4770      	bx	lr
	...

0800d9e4 <round>:
 800d9e4:	ec51 0b10 	vmov	r0, r1, d0
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	4605      	mov	r5, r0
 800d9f2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800d9f6:	2a13      	cmp	r2, #19
 800d9f8:	dc1b      	bgt.n	800da32 <round+0x4e>
 800d9fa:	2a00      	cmp	r2, #0
 800d9fc:	da0b      	bge.n	800da16 <round+0x32>
 800d9fe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800da02:	3201      	adds	r2, #1
 800da04:	bf04      	itt	eq
 800da06:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800da0a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800da0e:	2200      	movs	r2, #0
 800da10:	4619      	mov	r1, r3
 800da12:	4610      	mov	r0, r2
 800da14:	e015      	b.n	800da42 <round+0x5e>
 800da16:	4c15      	ldr	r4, [pc, #84]	@ (800da6c <round+0x88>)
 800da18:	4114      	asrs	r4, r2
 800da1a:	ea04 0601 	and.w	r6, r4, r1
 800da1e:	4306      	orrs	r6, r0
 800da20:	d00f      	beq.n	800da42 <round+0x5e>
 800da22:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800da26:	fa41 f202 	asr.w	r2, r1, r2
 800da2a:	4413      	add	r3, r2
 800da2c:	ea23 0304 	bic.w	r3, r3, r4
 800da30:	e7ed      	b.n	800da0e <round+0x2a>
 800da32:	2a33      	cmp	r2, #51	@ 0x33
 800da34:	dd08      	ble.n	800da48 <round+0x64>
 800da36:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800da3a:	d102      	bne.n	800da42 <round+0x5e>
 800da3c:	4602      	mov	r2, r0
 800da3e:	f7f2 fc21 	bl	8000284 <__adddf3>
 800da42:	ec41 0b10 	vmov	d0, r0, r1
 800da46:	bd70      	pop	{r4, r5, r6, pc}
 800da48:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800da4c:	f04f 34ff 	mov.w	r4, #4294967295
 800da50:	40f4      	lsrs	r4, r6
 800da52:	4204      	tst	r4, r0
 800da54:	d0f5      	beq.n	800da42 <round+0x5e>
 800da56:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800da5a:	2201      	movs	r2, #1
 800da5c:	408a      	lsls	r2, r1
 800da5e:	1952      	adds	r2, r2, r5
 800da60:	bf28      	it	cs
 800da62:	3301      	addcs	r3, #1
 800da64:	ea22 0204 	bic.w	r2, r2, r4
 800da68:	e7d2      	b.n	800da10 <round+0x2c>
 800da6a:	bf00      	nop
 800da6c:	000fffff 	.word	0x000fffff

0800da70 <__ieee754_pow>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	b091      	sub	sp, #68	@ 0x44
 800da76:	ed8d 1b00 	vstr	d1, [sp]
 800da7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800da7e:	ec57 6b10 	vmov	r6, r7, d0
 800da82:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800da86:	ea5a 0001 	orrs.w	r0, sl, r1
 800da8a:	d113      	bne.n	800dab4 <__ieee754_pow+0x44>
 800da8c:	19b3      	adds	r3, r6, r6
 800da8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800da92:	4152      	adcs	r2, r2
 800da94:	4298      	cmp	r0, r3
 800da96:	4b96      	ldr	r3, [pc, #600]	@ (800dcf0 <__ieee754_pow+0x280>)
 800da98:	4193      	sbcs	r3, r2
 800da9a:	f080 84e7 	bcs.w	800e46c <__ieee754_pow+0x9fc>
 800da9e:	4630      	mov	r0, r6
 800daa0:	4639      	mov	r1, r7
 800daa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daa6:	f7f2 fbed 	bl	8000284 <__adddf3>
 800daaa:	ec41 0b10 	vmov	d0, r0, r1
 800daae:	b011      	add	sp, #68	@ 0x44
 800dab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800dab8:	4a8e      	ldr	r2, [pc, #568]	@ (800dcf4 <__ieee754_pow+0x284>)
 800daba:	463d      	mov	r5, r7
 800dabc:	4633      	mov	r3, r6
 800dabe:	4590      	cmp	r8, r2
 800dac0:	d806      	bhi.n	800dad0 <__ieee754_pow+0x60>
 800dac2:	d101      	bne.n	800dac8 <__ieee754_pow+0x58>
 800dac4:	2e00      	cmp	r6, #0
 800dac6:	d1ea      	bne.n	800da9e <__ieee754_pow+0x2e>
 800dac8:	4592      	cmp	sl, r2
 800daca:	d801      	bhi.n	800dad0 <__ieee754_pow+0x60>
 800dacc:	d10e      	bne.n	800daec <__ieee754_pow+0x7c>
 800dace:	b169      	cbz	r1, 800daec <__ieee754_pow+0x7c>
 800dad0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800dad4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800dad8:	431d      	orrs	r5, r3
 800dada:	d1e0      	bne.n	800da9e <__ieee754_pow+0x2e>
 800dadc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dae0:	18db      	adds	r3, r3, r3
 800dae2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800dae6:	4152      	adcs	r2, r2
 800dae8:	429d      	cmp	r5, r3
 800daea:	e7d4      	b.n	800da96 <__ieee754_pow+0x26>
 800daec:	2d00      	cmp	r5, #0
 800daee:	46c3      	mov	fp, r8
 800daf0:	da3a      	bge.n	800db68 <__ieee754_pow+0xf8>
 800daf2:	4a81      	ldr	r2, [pc, #516]	@ (800dcf8 <__ieee754_pow+0x288>)
 800daf4:	4592      	cmp	sl, r2
 800daf6:	d84d      	bhi.n	800db94 <__ieee754_pow+0x124>
 800daf8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800dafc:	4592      	cmp	sl, r2
 800dafe:	f240 84c4 	bls.w	800e48a <__ieee754_pow+0xa1a>
 800db02:	ea4f 522a 	mov.w	r2, sl, asr #20
 800db06:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800db0a:	2a14      	cmp	r2, #20
 800db0c:	dd0f      	ble.n	800db2e <__ieee754_pow+0xbe>
 800db0e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800db12:	fa21 f402 	lsr.w	r4, r1, r2
 800db16:	fa04 f202 	lsl.w	r2, r4, r2
 800db1a:	428a      	cmp	r2, r1
 800db1c:	f040 84b5 	bne.w	800e48a <__ieee754_pow+0xa1a>
 800db20:	f004 0401 	and.w	r4, r4, #1
 800db24:	f1c4 0402 	rsb	r4, r4, #2
 800db28:	2900      	cmp	r1, #0
 800db2a:	d158      	bne.n	800dbde <__ieee754_pow+0x16e>
 800db2c:	e00e      	b.n	800db4c <__ieee754_pow+0xdc>
 800db2e:	2900      	cmp	r1, #0
 800db30:	d154      	bne.n	800dbdc <__ieee754_pow+0x16c>
 800db32:	f1c2 0214 	rsb	r2, r2, #20
 800db36:	fa4a f402 	asr.w	r4, sl, r2
 800db3a:	fa04 f202 	lsl.w	r2, r4, r2
 800db3e:	4552      	cmp	r2, sl
 800db40:	f040 84a0 	bne.w	800e484 <__ieee754_pow+0xa14>
 800db44:	f004 0401 	and.w	r4, r4, #1
 800db48:	f1c4 0402 	rsb	r4, r4, #2
 800db4c:	4a6b      	ldr	r2, [pc, #428]	@ (800dcfc <__ieee754_pow+0x28c>)
 800db4e:	4592      	cmp	sl, r2
 800db50:	d12e      	bne.n	800dbb0 <__ieee754_pow+0x140>
 800db52:	f1b9 0f00 	cmp.w	r9, #0
 800db56:	f280 8491 	bge.w	800e47c <__ieee754_pow+0xa0c>
 800db5a:	4632      	mov	r2, r6
 800db5c:	463b      	mov	r3, r7
 800db5e:	2000      	movs	r0, #0
 800db60:	4966      	ldr	r1, [pc, #408]	@ (800dcfc <__ieee754_pow+0x28c>)
 800db62:	f7f2 fe6f 	bl	8000844 <__aeabi_ddiv>
 800db66:	e7a0      	b.n	800daaa <__ieee754_pow+0x3a>
 800db68:	2400      	movs	r4, #0
 800db6a:	bbc1      	cbnz	r1, 800dbde <__ieee754_pow+0x16e>
 800db6c:	4a61      	ldr	r2, [pc, #388]	@ (800dcf4 <__ieee754_pow+0x284>)
 800db6e:	4592      	cmp	sl, r2
 800db70:	d1ec      	bne.n	800db4c <__ieee754_pow+0xdc>
 800db72:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800db76:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800db7a:	431a      	orrs	r2, r3
 800db7c:	f000 8476 	beq.w	800e46c <__ieee754_pow+0x9fc>
 800db80:	4b5f      	ldr	r3, [pc, #380]	@ (800dd00 <__ieee754_pow+0x290>)
 800db82:	4598      	cmp	r8, r3
 800db84:	d908      	bls.n	800db98 <__ieee754_pow+0x128>
 800db86:	f1b9 0f00 	cmp.w	r9, #0
 800db8a:	f2c0 8473 	blt.w	800e474 <__ieee754_pow+0xa04>
 800db8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db92:	e78a      	b.n	800daaa <__ieee754_pow+0x3a>
 800db94:	2402      	movs	r4, #2
 800db96:	e7e8      	b.n	800db6a <__ieee754_pow+0xfa>
 800db98:	f1b9 0f00 	cmp.w	r9, #0
 800db9c:	f04f 0000 	mov.w	r0, #0
 800dba0:	f04f 0100 	mov.w	r1, #0
 800dba4:	da81      	bge.n	800daaa <__ieee754_pow+0x3a>
 800dba6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dbaa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800dbae:	e77c      	b.n	800daaa <__ieee754_pow+0x3a>
 800dbb0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800dbb4:	d106      	bne.n	800dbc4 <__ieee754_pow+0x154>
 800dbb6:	4632      	mov	r2, r6
 800dbb8:	463b      	mov	r3, r7
 800dbba:	4630      	mov	r0, r6
 800dbbc:	4639      	mov	r1, r7
 800dbbe:	f7f2 fd17 	bl	80005f0 <__aeabi_dmul>
 800dbc2:	e772      	b.n	800daaa <__ieee754_pow+0x3a>
 800dbc4:	4a4f      	ldr	r2, [pc, #316]	@ (800dd04 <__ieee754_pow+0x294>)
 800dbc6:	4591      	cmp	r9, r2
 800dbc8:	d109      	bne.n	800dbde <__ieee754_pow+0x16e>
 800dbca:	2d00      	cmp	r5, #0
 800dbcc:	db07      	blt.n	800dbde <__ieee754_pow+0x16e>
 800dbce:	ec47 6b10 	vmov	d0, r6, r7
 800dbd2:	b011      	add	sp, #68	@ 0x44
 800dbd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	f000 bd4e 	b.w	800e678 <__ieee754_sqrt>
 800dbdc:	2400      	movs	r4, #0
 800dbde:	9302      	str	r3, [sp, #8]
 800dbe0:	ec47 6b10 	vmov	d0, r6, r7
 800dbe4:	f000 fc84 	bl	800e4f0 <fabs>
 800dbe8:	9b02      	ldr	r3, [sp, #8]
 800dbea:	ec51 0b10 	vmov	r0, r1, d0
 800dbee:	bb53      	cbnz	r3, 800dc46 <__ieee754_pow+0x1d6>
 800dbf0:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800dbf4:	4b41      	ldr	r3, [pc, #260]	@ (800dcfc <__ieee754_pow+0x28c>)
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d002      	beq.n	800dc00 <__ieee754_pow+0x190>
 800dbfa:	f1b8 0f00 	cmp.w	r8, #0
 800dbfe:	d122      	bne.n	800dc46 <__ieee754_pow+0x1d6>
 800dc00:	f1b9 0f00 	cmp.w	r9, #0
 800dc04:	da05      	bge.n	800dc12 <__ieee754_pow+0x1a2>
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	493b      	ldr	r1, [pc, #236]	@ (800dcfc <__ieee754_pow+0x28c>)
 800dc0e:	f7f2 fe19 	bl	8000844 <__aeabi_ddiv>
 800dc12:	2d00      	cmp	r5, #0
 800dc14:	f6bf af49 	bge.w	800daaa <__ieee754_pow+0x3a>
 800dc18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800dc1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800dc20:	ea58 0804 	orrs.w	r8, r8, r4
 800dc24:	d108      	bne.n	800dc38 <__ieee754_pow+0x1c8>
 800dc26:	4602      	mov	r2, r0
 800dc28:	460b      	mov	r3, r1
 800dc2a:	4610      	mov	r0, r2
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	f7f2 fb27 	bl	8000280 <__aeabi_dsub>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	e794      	b.n	800db62 <__ieee754_pow+0xf2>
 800dc38:	2c01      	cmp	r4, #1
 800dc3a:	f47f af36 	bne.w	800daaa <__ieee754_pow+0x3a>
 800dc3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc42:	4619      	mov	r1, r3
 800dc44:	e731      	b.n	800daaa <__ieee754_pow+0x3a>
 800dc46:	0feb      	lsrs	r3, r5, #31
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	ea53 0204 	orrs.w	r2, r3, r4
 800dc4e:	d102      	bne.n	800dc56 <__ieee754_pow+0x1e6>
 800dc50:	4632      	mov	r2, r6
 800dc52:	463b      	mov	r3, r7
 800dc54:	e7e9      	b.n	800dc2a <__ieee754_pow+0x1ba>
 800dc56:	3c01      	subs	r4, #1
 800dc58:	431c      	orrs	r4, r3
 800dc5a:	d016      	beq.n	800dc8a <__ieee754_pow+0x21a>
 800dc5c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800dce0 <__ieee754_pow+0x270>
 800dc60:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800dc64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc68:	f240 810e 	bls.w	800de88 <__ieee754_pow+0x418>
 800dc6c:	4b26      	ldr	r3, [pc, #152]	@ (800dd08 <__ieee754_pow+0x298>)
 800dc6e:	459a      	cmp	sl, r3
 800dc70:	4b23      	ldr	r3, [pc, #140]	@ (800dd00 <__ieee754_pow+0x290>)
 800dc72:	d916      	bls.n	800dca2 <__ieee754_pow+0x232>
 800dc74:	4598      	cmp	r8, r3
 800dc76:	d80b      	bhi.n	800dc90 <__ieee754_pow+0x220>
 800dc78:	f1b9 0f00 	cmp.w	r9, #0
 800dc7c:	da0b      	bge.n	800dc96 <__ieee754_pow+0x226>
 800dc7e:	2000      	movs	r0, #0
 800dc80:	b011      	add	sp, #68	@ 0x44
 800dc82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc86:	f000 bcef 	b.w	800e668 <__math_oflow>
 800dc8a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 800dce8 <__ieee754_pow+0x278>
 800dc8e:	e7e7      	b.n	800dc60 <__ieee754_pow+0x1f0>
 800dc90:	f1b9 0f00 	cmp.w	r9, #0
 800dc94:	dcf3      	bgt.n	800dc7e <__ieee754_pow+0x20e>
 800dc96:	2000      	movs	r0, #0
 800dc98:	b011      	add	sp, #68	@ 0x44
 800dc9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9e:	f000 bcdb 	b.w	800e658 <__math_uflow>
 800dca2:	4598      	cmp	r8, r3
 800dca4:	d20c      	bcs.n	800dcc0 <__ieee754_pow+0x250>
 800dca6:	2200      	movs	r2, #0
 800dca8:	2300      	movs	r3, #0
 800dcaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcae:	f7f2 ff11 	bl	8000ad4 <__aeabi_dcmplt>
 800dcb2:	3800      	subs	r0, #0
 800dcb4:	bf18      	it	ne
 800dcb6:	2001      	movne	r0, #1
 800dcb8:	f1b9 0f00 	cmp.w	r9, #0
 800dcbc:	daec      	bge.n	800dc98 <__ieee754_pow+0x228>
 800dcbe:	e7df      	b.n	800dc80 <__ieee754_pow+0x210>
 800dcc0:	4b0e      	ldr	r3, [pc, #56]	@ (800dcfc <__ieee754_pow+0x28c>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	4598      	cmp	r8, r3
 800dcc6:	d921      	bls.n	800dd0c <__ieee754_pow+0x29c>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcce:	f7f2 ff01 	bl	8000ad4 <__aeabi_dcmplt>
 800dcd2:	3800      	subs	r0, #0
 800dcd4:	bf18      	it	ne
 800dcd6:	2001      	movne	r0, #1
 800dcd8:	f1b9 0f00 	cmp.w	r9, #0
 800dcdc:	dcd0      	bgt.n	800dc80 <__ieee754_pow+0x210>
 800dcde:	e7db      	b.n	800dc98 <__ieee754_pow+0x228>
 800dce0:	00000000 	.word	0x00000000
 800dce4:	3ff00000 	.word	0x3ff00000
 800dce8:	00000000 	.word	0x00000000
 800dcec:	bff00000 	.word	0xbff00000
 800dcf0:	fff00000 	.word	0xfff00000
 800dcf4:	7ff00000 	.word	0x7ff00000
 800dcf8:	433fffff 	.word	0x433fffff
 800dcfc:	3ff00000 	.word	0x3ff00000
 800dd00:	3fefffff 	.word	0x3fefffff
 800dd04:	3fe00000 	.word	0x3fe00000
 800dd08:	43f00000 	.word	0x43f00000
 800dd0c:	4b5a      	ldr	r3, [pc, #360]	@ (800de78 <__ieee754_pow+0x408>)
 800dd0e:	f7f2 fab7 	bl	8000280 <__aeabi_dsub>
 800dd12:	4604      	mov	r4, r0
 800dd14:	460d      	mov	r5, r1
 800dd16:	a350      	add	r3, pc, #320	@ (adr r3, 800de58 <__ieee754_pow+0x3e8>)
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	f7f2 fc68 	bl	80005f0 <__aeabi_dmul>
 800dd20:	4606      	mov	r6, r0
 800dd22:	460f      	mov	r7, r1
 800dd24:	4620      	mov	r0, r4
 800dd26:	4629      	mov	r1, r5
 800dd28:	a34d      	add	r3, pc, #308	@ (adr r3, 800de60 <__ieee754_pow+0x3f0>)
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	f7f2 fc5f 	bl	80005f0 <__aeabi_dmul>
 800dd32:	2200      	movs	r2, #0
 800dd34:	4682      	mov	sl, r0
 800dd36:	468b      	mov	fp, r1
 800dd38:	4b50      	ldr	r3, [pc, #320]	@ (800de7c <__ieee754_pow+0x40c>)
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	f7f2 fc57 	bl	80005f0 <__aeabi_dmul>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	a148      	add	r1, pc, #288	@ (adr r1, 800de68 <__ieee754_pow+0x3f8>)
 800dd48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd4c:	f7f2 fa98 	bl	8000280 <__aeabi_dsub>
 800dd50:	4622      	mov	r2, r4
 800dd52:	462b      	mov	r3, r5
 800dd54:	f7f2 fc4c 	bl	80005f0 <__aeabi_dmul>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	4948      	ldr	r1, [pc, #288]	@ (800de80 <__ieee754_pow+0x410>)
 800dd60:	f7f2 fa8e 	bl	8000280 <__aeabi_dsub>
 800dd64:	4680      	mov	r8, r0
 800dd66:	4689      	mov	r9, r1
 800dd68:	4622      	mov	r2, r4
 800dd6a:	462b      	mov	r3, r5
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	4629      	mov	r1, r5
 800dd70:	2400      	movs	r4, #0
 800dd72:	f7f2 fc3d 	bl	80005f0 <__aeabi_dmul>
 800dd76:	4602      	mov	r2, r0
 800dd78:	460b      	mov	r3, r1
 800dd7a:	4640      	mov	r0, r8
 800dd7c:	4649      	mov	r1, r9
 800dd7e:	f7f2 fc37 	bl	80005f0 <__aeabi_dmul>
 800dd82:	a33b      	add	r3, pc, #236	@ (adr r3, 800de70 <__ieee754_pow+0x400>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	f7f2 fc32 	bl	80005f0 <__aeabi_dmul>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4650      	mov	r0, sl
 800dd92:	4659      	mov	r1, fp
 800dd94:	f7f2 fa74 	bl	8000280 <__aeabi_dsub>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	4680      	mov	r8, r0
 800dd9e:	4689      	mov	r9, r1
 800dda0:	4630      	mov	r0, r6
 800dda2:	4639      	mov	r1, r7
 800dda4:	f7f2 fa6e 	bl	8000284 <__adddf3>
 800dda8:	4632      	mov	r2, r6
 800ddaa:	463b      	mov	r3, r7
 800ddac:	4620      	mov	r0, r4
 800ddae:	460d      	mov	r5, r1
 800ddb0:	f7f2 fa66 	bl	8000280 <__aeabi_dsub>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	4640      	mov	r0, r8
 800ddba:	4649      	mov	r1, r9
 800ddbc:	f7f2 fa60 	bl	8000280 <__aeabi_dsub>
 800ddc0:	4606      	mov	r6, r0
 800ddc2:	460f      	mov	r7, r1
 800ddc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9304      	str	r3, [sp, #16]
 800ddd4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ddd8:	4652      	mov	r2, sl
 800ddda:	465b      	mov	r3, fp
 800dddc:	f7f2 fa50 	bl	8000280 <__aeabi_dsub>
 800dde0:	4622      	mov	r2, r4
 800dde2:	462b      	mov	r3, r5
 800dde4:	f7f2 fc04 	bl	80005f0 <__aeabi_dmul>
 800dde8:	4680      	mov	r8, r0
 800ddea:	4689      	mov	r9, r1
 800ddec:	4630      	mov	r0, r6
 800ddee:	4639      	mov	r1, r7
 800ddf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddf4:	f7f2 fbfc 	bl	80005f0 <__aeabi_dmul>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	4649      	mov	r1, r9
 800de00:	f7f2 fa40 	bl	8000284 <__adddf3>
 800de04:	4606      	mov	r6, r0
 800de06:	460f      	mov	r7, r1
 800de08:	4652      	mov	r2, sl
 800de0a:	465b      	mov	r3, fp
 800de0c:	4620      	mov	r0, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	f7f2 fbee 	bl	80005f0 <__aeabi_dmul>
 800de14:	460b      	mov	r3, r1
 800de16:	4602      	mov	r2, r0
 800de18:	4680      	mov	r8, r0
 800de1a:	4689      	mov	r9, r1
 800de1c:	4630      	mov	r0, r6
 800de1e:	4639      	mov	r1, r7
 800de20:	f7f2 fa30 	bl	8000284 <__adddf3>
 800de24:	4b17      	ldr	r3, [pc, #92]	@ (800de84 <__ieee754_pow+0x414>)
 800de26:	4604      	mov	r4, r0
 800de28:	460d      	mov	r5, r1
 800de2a:	4299      	cmp	r1, r3
 800de2c:	468a      	mov	sl, r1
 800de2e:	468b      	mov	fp, r1
 800de30:	f340 82f0 	ble.w	800e414 <__ieee754_pow+0x9a4>
 800de34:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800de38:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800de3c:	4303      	orrs	r3, r0
 800de3e:	f000 81e8 	beq.w	800e212 <__ieee754_pow+0x7a2>
 800de42:	2200      	movs	r2, #0
 800de44:	2300      	movs	r3, #0
 800de46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de4a:	f7f2 fe43 	bl	8000ad4 <__aeabi_dcmplt>
 800de4e:	3800      	subs	r0, #0
 800de50:	bf18      	it	ne
 800de52:	2001      	movne	r0, #1
 800de54:	e714      	b.n	800dc80 <__ieee754_pow+0x210>
 800de56:	bf00      	nop
 800de58:	60000000 	.word	0x60000000
 800de5c:	3ff71547 	.word	0x3ff71547
 800de60:	f85ddf44 	.word	0xf85ddf44
 800de64:	3e54ae0b 	.word	0x3e54ae0b
 800de68:	55555555 	.word	0x55555555
 800de6c:	3fd55555 	.word	0x3fd55555
 800de70:	652b82fe 	.word	0x652b82fe
 800de74:	3ff71547 	.word	0x3ff71547
 800de78:	3ff00000 	.word	0x3ff00000
 800de7c:	3fd00000 	.word	0x3fd00000
 800de80:	3fe00000 	.word	0x3fe00000
 800de84:	408fffff 	.word	0x408fffff
 800de88:	4bd5      	ldr	r3, [pc, #852]	@ (800e1e0 <__ieee754_pow+0x770>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	402b      	ands	r3, r5
 800de8e:	b92b      	cbnz	r3, 800de9c <__ieee754_pow+0x42c>
 800de90:	4bd4      	ldr	r3, [pc, #848]	@ (800e1e4 <__ieee754_pow+0x774>)
 800de92:	f7f2 fbad 	bl	80005f0 <__aeabi_dmul>
 800de96:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800de9a:	468b      	mov	fp, r1
 800de9c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800dea0:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800dea4:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800dea8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800deac:	4413      	add	r3, r2
 800deae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800deb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800deb4:	4bcc      	ldr	r3, [pc, #816]	@ (800e1e8 <__ieee754_pow+0x778>)
 800deb6:	459b      	cmp	fp, r3
 800deb8:	dd08      	ble.n	800decc <__ieee754_pow+0x45c>
 800deba:	4bcc      	ldr	r3, [pc, #816]	@ (800e1ec <__ieee754_pow+0x77c>)
 800debc:	459b      	cmp	fp, r3
 800debe:	f340 81a5 	ble.w	800e20c <__ieee754_pow+0x79c>
 800dec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dec4:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800dec8:	3301      	adds	r3, #1
 800deca:	930a      	str	r3, [sp, #40]	@ 0x28
 800decc:	f04f 0a00 	mov.w	sl, #0
 800ded0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ded4:	4629      	mov	r1, r5
 800ded6:	106d      	asrs	r5, r5, #1
 800ded8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800deda:	4bc5      	ldr	r3, [pc, #788]	@ (800e1f0 <__ieee754_pow+0x780>)
 800dedc:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800dee0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dee4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800dee8:	ed93 7b00 	vldr	d7, [r3]
 800deec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800def0:	ec53 2b17 	vmov	r2, r3, d7
 800def4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800def8:	f7f2 f9c2 	bl	8000280 <__aeabi_dsub>
 800defc:	4606      	mov	r6, r0
 800defe:	460f      	mov	r7, r1
 800df00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800df04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df08:	f7f2 f9bc 	bl	8000284 <__adddf3>
 800df0c:	4602      	mov	r2, r0
 800df0e:	460b      	mov	r3, r1
 800df10:	2000      	movs	r0, #0
 800df12:	49b8      	ldr	r1, [pc, #736]	@ (800e1f4 <__ieee754_pow+0x784>)
 800df14:	f7f2 fc96 	bl	8000844 <__aeabi_ddiv>
 800df18:	4602      	mov	r2, r0
 800df1a:	460b      	mov	r3, r1
 800df1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800df20:	4630      	mov	r0, r6
 800df22:	4639      	mov	r1, r7
 800df24:	f7f2 fb64 	bl	80005f0 <__aeabi_dmul>
 800df28:	2200      	movs	r2, #0
 800df2a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800df2e:	4614      	mov	r4, r2
 800df30:	461d      	mov	r5, r3
 800df32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df36:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800df3a:	f04f 0b00 	mov.w	fp, #0
 800df3e:	4661      	mov	r1, ip
 800df40:	46e1      	mov	r9, ip
 800df42:	4658      	mov	r0, fp
 800df44:	46d8      	mov	r8, fp
 800df46:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800df4a:	f7f2 fb51 	bl	80005f0 <__aeabi_dmul>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4630      	mov	r0, r6
 800df54:	4639      	mov	r1, r7
 800df56:	f7f2 f993 	bl	8000280 <__aeabi_dsub>
 800df5a:	4606      	mov	r6, r0
 800df5c:	460f      	mov	r7, r1
 800df5e:	4620      	mov	r0, r4
 800df60:	4629      	mov	r1, r5
 800df62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df66:	f7f2 f98b 	bl	8000280 <__aeabi_dsub>
 800df6a:	4602      	mov	r2, r0
 800df6c:	460b      	mov	r3, r1
 800df6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df72:	f7f2 f985 	bl	8000280 <__aeabi_dsub>
 800df76:	465a      	mov	r2, fp
 800df78:	464b      	mov	r3, r9
 800df7a:	f7f2 fb39 	bl	80005f0 <__aeabi_dmul>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4630      	mov	r0, r6
 800df84:	4639      	mov	r1, r7
 800df86:	f7f2 f97b 	bl	8000280 <__aeabi_dsub>
 800df8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800df8e:	f7f2 fb2f 	bl	80005f0 <__aeabi_dmul>
 800df92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800df9a:	4610      	mov	r0, r2
 800df9c:	4619      	mov	r1, r3
 800df9e:	f7f2 fb27 	bl	80005f0 <__aeabi_dmul>
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	460d      	mov	r5, r1
 800dfa6:	a37c      	add	r3, pc, #496	@ (adr r3, 800e198 <__ieee754_pow+0x728>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	f7f2 fb20 	bl	80005f0 <__aeabi_dmul>
 800dfb0:	a37b      	add	r3, pc, #492	@ (adr r3, 800e1a0 <__ieee754_pow+0x730>)
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	f7f2 f965 	bl	8000284 <__adddf3>
 800dfba:	4622      	mov	r2, r4
 800dfbc:	462b      	mov	r3, r5
 800dfbe:	f7f2 fb17 	bl	80005f0 <__aeabi_dmul>
 800dfc2:	a379      	add	r3, pc, #484	@ (adr r3, 800e1a8 <__ieee754_pow+0x738>)
 800dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc8:	f7f2 f95c 	bl	8000284 <__adddf3>
 800dfcc:	4622      	mov	r2, r4
 800dfce:	462b      	mov	r3, r5
 800dfd0:	f7f2 fb0e 	bl	80005f0 <__aeabi_dmul>
 800dfd4:	a376      	add	r3, pc, #472	@ (adr r3, 800e1b0 <__ieee754_pow+0x740>)
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	f7f2 f953 	bl	8000284 <__adddf3>
 800dfde:	4622      	mov	r2, r4
 800dfe0:	462b      	mov	r3, r5
 800dfe2:	f7f2 fb05 	bl	80005f0 <__aeabi_dmul>
 800dfe6:	a374      	add	r3, pc, #464	@ (adr r3, 800e1b8 <__ieee754_pow+0x748>)
 800dfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfec:	f7f2 f94a 	bl	8000284 <__adddf3>
 800dff0:	4622      	mov	r2, r4
 800dff2:	462b      	mov	r3, r5
 800dff4:	f7f2 fafc 	bl	80005f0 <__aeabi_dmul>
 800dff8:	a371      	add	r3, pc, #452	@ (adr r3, 800e1c0 <__ieee754_pow+0x750>)
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	f7f2 f941 	bl	8000284 <__adddf3>
 800e002:	4606      	mov	r6, r0
 800e004:	460f      	mov	r7, r1
 800e006:	4622      	mov	r2, r4
 800e008:	462b      	mov	r3, r5
 800e00a:	4620      	mov	r0, r4
 800e00c:	4629      	mov	r1, r5
 800e00e:	f7f2 faef 	bl	80005f0 <__aeabi_dmul>
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	4630      	mov	r0, r6
 800e018:	4639      	mov	r1, r7
 800e01a:	f7f2 fae9 	bl	80005f0 <__aeabi_dmul>
 800e01e:	465a      	mov	r2, fp
 800e020:	4604      	mov	r4, r0
 800e022:	460d      	mov	r5, r1
 800e024:	464b      	mov	r3, r9
 800e026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e02a:	f7f2 f92b 	bl	8000284 <__adddf3>
 800e02e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e032:	f7f2 fadd 	bl	80005f0 <__aeabi_dmul>
 800e036:	4622      	mov	r2, r4
 800e038:	462b      	mov	r3, r5
 800e03a:	f7f2 f923 	bl	8000284 <__adddf3>
 800e03e:	465a      	mov	r2, fp
 800e040:	464b      	mov	r3, r9
 800e042:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e046:	4658      	mov	r0, fp
 800e048:	4649      	mov	r1, r9
 800e04a:	f7f2 fad1 	bl	80005f0 <__aeabi_dmul>
 800e04e:	2200      	movs	r2, #0
 800e050:	4b69      	ldr	r3, [pc, #420]	@ (800e1f8 <__ieee754_pow+0x788>)
 800e052:	4606      	mov	r6, r0
 800e054:	460f      	mov	r7, r1
 800e056:	f7f2 f915 	bl	8000284 <__adddf3>
 800e05a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e05e:	f7f2 f911 	bl	8000284 <__adddf3>
 800e062:	460d      	mov	r5, r1
 800e064:	460b      	mov	r3, r1
 800e066:	4640      	mov	r0, r8
 800e068:	4649      	mov	r1, r9
 800e06a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e06e:	465c      	mov	r4, fp
 800e070:	465a      	mov	r2, fp
 800e072:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e076:	f7f2 fabb 	bl	80005f0 <__aeabi_dmul>
 800e07a:	2200      	movs	r2, #0
 800e07c:	4680      	mov	r8, r0
 800e07e:	4689      	mov	r9, r1
 800e080:	4b5d      	ldr	r3, [pc, #372]	@ (800e1f8 <__ieee754_pow+0x788>)
 800e082:	4620      	mov	r0, r4
 800e084:	4629      	mov	r1, r5
 800e086:	f7f2 f8fb 	bl	8000280 <__aeabi_dsub>
 800e08a:	4632      	mov	r2, r6
 800e08c:	463b      	mov	r3, r7
 800e08e:	f7f2 f8f7 	bl	8000280 <__aeabi_dsub>
 800e092:	4602      	mov	r2, r0
 800e094:	460b      	mov	r3, r1
 800e096:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e09a:	f7f2 f8f1 	bl	8000280 <__aeabi_dsub>
 800e09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0a2:	f7f2 faa5 	bl	80005f0 <__aeabi_dmul>
 800e0a6:	4606      	mov	r6, r0
 800e0a8:	460f      	mov	r7, r1
 800e0aa:	4622      	mov	r2, r4
 800e0ac:	462b      	mov	r3, r5
 800e0ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0b2:	f7f2 fa9d 	bl	80005f0 <__aeabi_dmul>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	4639      	mov	r1, r7
 800e0be:	f7f2 f8e1 	bl	8000284 <__adddf3>
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	460f      	mov	r7, r1
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	4640      	mov	r0, r8
 800e0cc:	4649      	mov	r1, r9
 800e0ce:	f7f2 f8d9 	bl	8000284 <__adddf3>
 800e0d2:	460d      	mov	r5, r1
 800e0d4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e0d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800e1c8 <__ieee754_pow+0x758>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	465c      	mov	r4, fp
 800e0e0:	4658      	mov	r0, fp
 800e0e2:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e0e6:	f7f2 fa83 	bl	80005f0 <__aeabi_dmul>
 800e0ea:	4642      	mov	r2, r8
 800e0ec:	464b      	mov	r3, r9
 800e0ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	f7f2 f8c3 	bl	8000280 <__aeabi_dsub>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	4630      	mov	r0, r6
 800e100:	4639      	mov	r1, r7
 800e102:	f7f2 f8bd 	bl	8000280 <__aeabi_dsub>
 800e106:	a332      	add	r3, pc, #200	@ (adr r3, 800e1d0 <__ieee754_pow+0x760>)
 800e108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10c:	f7f2 fa70 	bl	80005f0 <__aeabi_dmul>
 800e110:	4606      	mov	r6, r0
 800e112:	460f      	mov	r7, r1
 800e114:	4620      	mov	r0, r4
 800e116:	4629      	mov	r1, r5
 800e118:	a32f      	add	r3, pc, #188	@ (adr r3, 800e1d8 <__ieee754_pow+0x768>)
 800e11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11e:	f7f2 fa67 	bl	80005f0 <__aeabi_dmul>
 800e122:	4602      	mov	r2, r0
 800e124:	460b      	mov	r3, r1
 800e126:	4630      	mov	r0, r6
 800e128:	4639      	mov	r1, r7
 800e12a:	f7f2 f8ab 	bl	8000284 <__adddf3>
 800e12e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e130:	4b32      	ldr	r3, [pc, #200]	@ (800e1fc <__ieee754_pow+0x78c>)
 800e132:	4413      	add	r3, r2
 800e134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e138:	f7f2 f8a4 	bl	8000284 <__adddf3>
 800e13c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e140:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e142:	f7f2 f9eb 	bl	800051c <__aeabi_i2d>
 800e146:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e148:	4b2d      	ldr	r3, [pc, #180]	@ (800e200 <__ieee754_pow+0x790>)
 800e14a:	4606      	mov	r6, r0
 800e14c:	460f      	mov	r7, r1
 800e14e:	4413      	add	r3, r2
 800e150:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e158:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e15c:	f7f2 f892 	bl	8000284 <__adddf3>
 800e160:	4642      	mov	r2, r8
 800e162:	464b      	mov	r3, r9
 800e164:	f7f2 f88e 	bl	8000284 <__adddf3>
 800e168:	4632      	mov	r2, r6
 800e16a:	463b      	mov	r3, r7
 800e16c:	f7f2 f88a 	bl	8000284 <__adddf3>
 800e170:	4632      	mov	r2, r6
 800e172:	463b      	mov	r3, r7
 800e174:	460d      	mov	r5, r1
 800e176:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e17a:	4658      	mov	r0, fp
 800e17c:	465c      	mov	r4, fp
 800e17e:	f7f2 f87f 	bl	8000280 <__aeabi_dsub>
 800e182:	4642      	mov	r2, r8
 800e184:	464b      	mov	r3, r9
 800e186:	f7f2 f87b 	bl	8000280 <__aeabi_dsub>
 800e18a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e18e:	f7f2 f877 	bl	8000280 <__aeabi_dsub>
 800e192:	4602      	mov	r2, r0
 800e194:	e036      	b.n	800e204 <__ieee754_pow+0x794>
 800e196:	bf00      	nop
 800e198:	4a454eef 	.word	0x4a454eef
 800e19c:	3fca7e28 	.word	0x3fca7e28
 800e1a0:	93c9db65 	.word	0x93c9db65
 800e1a4:	3fcd864a 	.word	0x3fcd864a
 800e1a8:	a91d4101 	.word	0xa91d4101
 800e1ac:	3fd17460 	.word	0x3fd17460
 800e1b0:	518f264d 	.word	0x518f264d
 800e1b4:	3fd55555 	.word	0x3fd55555
 800e1b8:	db6fabff 	.word	0xdb6fabff
 800e1bc:	3fdb6db6 	.word	0x3fdb6db6
 800e1c0:	33333303 	.word	0x33333303
 800e1c4:	3fe33333 	.word	0x3fe33333
 800e1c8:	e0000000 	.word	0xe0000000
 800e1cc:	3feec709 	.word	0x3feec709
 800e1d0:	dc3a03fd 	.word	0xdc3a03fd
 800e1d4:	3feec709 	.word	0x3feec709
 800e1d8:	145b01f5 	.word	0x145b01f5
 800e1dc:	be3e2fe0 	.word	0xbe3e2fe0
 800e1e0:	7ff00000 	.word	0x7ff00000
 800e1e4:	43400000 	.word	0x43400000
 800e1e8:	0003988e 	.word	0x0003988e
 800e1ec:	000bb679 	.word	0x000bb679
 800e1f0:	0800e988 	.word	0x0800e988
 800e1f4:	3ff00000 	.word	0x3ff00000
 800e1f8:	40080000 	.word	0x40080000
 800e1fc:	0800e968 	.word	0x0800e968
 800e200:	0800e978 	.word	0x0800e978
 800e204:	460b      	mov	r3, r1
 800e206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e20a:	e5d7      	b.n	800ddbc <__ieee754_pow+0x34c>
 800e20c:	f04f 0a01 	mov.w	sl, #1
 800e210:	e65e      	b.n	800ded0 <__ieee754_pow+0x460>
 800e212:	a3b4      	add	r3, pc, #720	@ (adr r3, 800e4e4 <__ieee754_pow+0xa74>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	4630      	mov	r0, r6
 800e21a:	4639      	mov	r1, r7
 800e21c:	f7f2 f832 	bl	8000284 <__adddf3>
 800e220:	4642      	mov	r2, r8
 800e222:	464b      	mov	r3, r9
 800e224:	e9cd 0100 	strd	r0, r1, [sp]
 800e228:	4620      	mov	r0, r4
 800e22a:	4629      	mov	r1, r5
 800e22c:	f7f2 f828 	bl	8000280 <__aeabi_dsub>
 800e230:	4602      	mov	r2, r0
 800e232:	460b      	mov	r3, r1
 800e234:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e238:	f7f2 fc6a 	bl	8000b10 <__aeabi_dcmpgt>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	f47f ae00 	bne.w	800de42 <__ieee754_pow+0x3d2>
 800e242:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e246:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e24a:	48a1      	ldr	r0, [pc, #644]	@ (800e4d0 <__ieee754_pow+0xa60>)
 800e24c:	f1bb 0f00 	cmp.w	fp, #0
 800e250:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e254:	f04f 0200 	mov.w	r2, #0
 800e258:	fa43 fa0a 	asr.w	sl, r3, sl
 800e25c:	44da      	add	sl, fp
 800e25e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e262:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e266:	fa40 f001 	asr.w	r0, r0, r1
 800e26a:	f1c1 0114 	rsb	r1, r1, #20
 800e26e:	ea00 030a 	and.w	r3, r0, sl
 800e272:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e276:	4640      	mov	r0, r8
 800e278:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e27c:	fa4a fa01 	asr.w	sl, sl, r1
 800e280:	4649      	mov	r1, r9
 800e282:	bfb8      	it	lt
 800e284:	f1ca 0a00 	rsblt	sl, sl, #0
 800e288:	f7f1 fffa 	bl	8000280 <__aeabi_dsub>
 800e28c:	4680      	mov	r8, r0
 800e28e:	4689      	mov	r9, r1
 800e290:	2400      	movs	r4, #0
 800e292:	4632      	mov	r2, r6
 800e294:	463b      	mov	r3, r7
 800e296:	4640      	mov	r0, r8
 800e298:	4649      	mov	r1, r9
 800e29a:	f7f1 fff3 	bl	8000284 <__adddf3>
 800e29e:	460d      	mov	r5, r1
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	a37b      	add	r3, pc, #492	@ (adr r3, 800e490 <__ieee754_pow+0xa20>)
 800e2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a8:	f7f2 f9a2 	bl	80005f0 <__aeabi_dmul>
 800e2ac:	4642      	mov	r2, r8
 800e2ae:	464b      	mov	r3, r9
 800e2b0:	e9cd 0100 	strd	r0, r1, [sp]
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	f7f1 ffe2 	bl	8000280 <__aeabi_dsub>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	4639      	mov	r1, r7
 800e2c4:	f7f1 ffdc 	bl	8000280 <__aeabi_dsub>
 800e2c8:	a373      	add	r3, pc, #460	@ (adr r3, 800e498 <__ieee754_pow+0xa28>)
 800e2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ce:	f7f2 f98f 	bl	80005f0 <__aeabi_dmul>
 800e2d2:	4680      	mov	r8, r0
 800e2d4:	4689      	mov	r9, r1
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	4629      	mov	r1, r5
 800e2da:	a371      	add	r3, pc, #452	@ (adr r3, 800e4a0 <__ieee754_pow+0xa30>)
 800e2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e0:	f7f2 f986 	bl	80005f0 <__aeabi_dmul>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	4640      	mov	r0, r8
 800e2ea:	4649      	mov	r1, r9
 800e2ec:	f7f1 ffca 	bl	8000284 <__adddf3>
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	460d      	mov	r5, r1
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2fc:	f7f1 ffc2 	bl	8000284 <__adddf3>
 800e300:	4680      	mov	r8, r0
 800e302:	4689      	mov	r9, r1
 800e304:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e308:	f7f1 ffba 	bl	8000280 <__aeabi_dsub>
 800e30c:	4602      	mov	r2, r0
 800e30e:	460b      	mov	r3, r1
 800e310:	4620      	mov	r0, r4
 800e312:	4629      	mov	r1, r5
 800e314:	f7f1 ffb4 	bl	8000280 <__aeabi_dsub>
 800e318:	4642      	mov	r2, r8
 800e31a:	4606      	mov	r6, r0
 800e31c:	460f      	mov	r7, r1
 800e31e:	464b      	mov	r3, r9
 800e320:	4640      	mov	r0, r8
 800e322:	4649      	mov	r1, r9
 800e324:	f7f2 f964 	bl	80005f0 <__aeabi_dmul>
 800e328:	4604      	mov	r4, r0
 800e32a:	460d      	mov	r5, r1
 800e32c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e4a8 <__ieee754_pow+0xa38>)
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	f7f2 f95d 	bl	80005f0 <__aeabi_dmul>
 800e336:	a35e      	add	r3, pc, #376	@ (adr r3, 800e4b0 <__ieee754_pow+0xa40>)
 800e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33c:	f7f1 ffa0 	bl	8000280 <__aeabi_dsub>
 800e340:	4622      	mov	r2, r4
 800e342:	462b      	mov	r3, r5
 800e344:	f7f2 f954 	bl	80005f0 <__aeabi_dmul>
 800e348:	a35b      	add	r3, pc, #364	@ (adr r3, 800e4b8 <__ieee754_pow+0xa48>)
 800e34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34e:	f7f1 ff99 	bl	8000284 <__adddf3>
 800e352:	4622      	mov	r2, r4
 800e354:	462b      	mov	r3, r5
 800e356:	f7f2 f94b 	bl	80005f0 <__aeabi_dmul>
 800e35a:	a359      	add	r3, pc, #356	@ (adr r3, 800e4c0 <__ieee754_pow+0xa50>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f7f1 ff8e 	bl	8000280 <__aeabi_dsub>
 800e364:	4622      	mov	r2, r4
 800e366:	462b      	mov	r3, r5
 800e368:	f7f2 f942 	bl	80005f0 <__aeabi_dmul>
 800e36c:	a356      	add	r3, pc, #344	@ (adr r3, 800e4c8 <__ieee754_pow+0xa58>)
 800e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e372:	f7f1 ff87 	bl	8000284 <__adddf3>
 800e376:	4622      	mov	r2, r4
 800e378:	462b      	mov	r3, r5
 800e37a:	f7f2 f939 	bl	80005f0 <__aeabi_dmul>
 800e37e:	4602      	mov	r2, r0
 800e380:	460b      	mov	r3, r1
 800e382:	4640      	mov	r0, r8
 800e384:	4649      	mov	r1, r9
 800e386:	f7f1 ff7b 	bl	8000280 <__aeabi_dsub>
 800e38a:	4604      	mov	r4, r0
 800e38c:	460d      	mov	r5, r1
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	4640      	mov	r0, r8
 800e394:	4649      	mov	r1, r9
 800e396:	f7f2 f92b 	bl	80005f0 <__aeabi_dmul>
 800e39a:	2200      	movs	r2, #0
 800e39c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e3a0:	e9cd 0100 	strd	r0, r1, [sp]
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	f7f1 ff6a 	bl	8000280 <__aeabi_dsub>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3b4:	f7f2 fa46 	bl	8000844 <__aeabi_ddiv>
 800e3b8:	4632      	mov	r2, r6
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	460d      	mov	r5, r1
 800e3be:	463b      	mov	r3, r7
 800e3c0:	4640      	mov	r0, r8
 800e3c2:	4649      	mov	r1, r9
 800e3c4:	f7f2 f914 	bl	80005f0 <__aeabi_dmul>
 800e3c8:	4632      	mov	r2, r6
 800e3ca:	463b      	mov	r3, r7
 800e3cc:	f7f1 ff5a 	bl	8000284 <__adddf3>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	4629      	mov	r1, r5
 800e3d8:	f7f1 ff52 	bl	8000280 <__aeabi_dsub>
 800e3dc:	4642      	mov	r2, r8
 800e3de:	464b      	mov	r3, r9
 800e3e0:	f7f1 ff4e 	bl	8000280 <__aeabi_dsub>
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	493a      	ldr	r1, [pc, #232]	@ (800e4d4 <__ieee754_pow+0xa64>)
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	f7f1 ff48 	bl	8000280 <__aeabi_dsub>
 800e3f0:	ec41 0b10 	vmov	d0, r0, r1
 800e3f4:	ee10 3a90 	vmov	r3, s1
 800e3f8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e3fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e400:	da30      	bge.n	800e464 <__ieee754_pow+0x9f4>
 800e402:	4650      	mov	r0, sl
 800e404:	f000 f87c 	bl	800e500 <scalbn>
 800e408:	ec51 0b10 	vmov	r0, r1, d0
 800e40c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e410:	f7ff bbd5 	b.w	800dbbe <__ieee754_pow+0x14e>
 800e414:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e418:	4c2f      	ldr	r4, [pc, #188]	@ (800e4d8 <__ieee754_pow+0xa68>)
 800e41a:	42a3      	cmp	r3, r4
 800e41c:	d91a      	bls.n	800e454 <__ieee754_pow+0x9e4>
 800e41e:	4b2f      	ldr	r3, [pc, #188]	@ (800e4dc <__ieee754_pow+0xa6c>)
 800e420:	440b      	add	r3, r1
 800e422:	4303      	orrs	r3, r0
 800e424:	d009      	beq.n	800e43a <__ieee754_pow+0x9ca>
 800e426:	2200      	movs	r2, #0
 800e428:	2300      	movs	r3, #0
 800e42a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e42e:	f7f2 fb51 	bl	8000ad4 <__aeabi_dcmplt>
 800e432:	3800      	subs	r0, #0
 800e434:	bf18      	it	ne
 800e436:	2001      	movne	r0, #1
 800e438:	e42e      	b.n	800dc98 <__ieee754_pow+0x228>
 800e43a:	4642      	mov	r2, r8
 800e43c:	464b      	mov	r3, r9
 800e43e:	f7f1 ff1f 	bl	8000280 <__aeabi_dsub>
 800e442:	4632      	mov	r2, r6
 800e444:	463b      	mov	r3, r7
 800e446:	f7f2 fb59 	bl	8000afc <__aeabi_dcmpge>
 800e44a:	2800      	cmp	r0, #0
 800e44c:	d1eb      	bne.n	800e426 <__ieee754_pow+0x9b6>
 800e44e:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800e4ec <__ieee754_pow+0xa7c>
 800e452:	e6f6      	b.n	800e242 <__ieee754_pow+0x7d2>
 800e454:	469a      	mov	sl, r3
 800e456:	4b22      	ldr	r3, [pc, #136]	@ (800e4e0 <__ieee754_pow+0xa70>)
 800e458:	459a      	cmp	sl, r3
 800e45a:	f63f aef2 	bhi.w	800e242 <__ieee754_pow+0x7d2>
 800e45e:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e462:	e715      	b.n	800e290 <__ieee754_pow+0x820>
 800e464:	ec51 0b10 	vmov	r0, r1, d0
 800e468:	4619      	mov	r1, r3
 800e46a:	e7cf      	b.n	800e40c <__ieee754_pow+0x99c>
 800e46c:	2000      	movs	r0, #0
 800e46e:	4919      	ldr	r1, [pc, #100]	@ (800e4d4 <__ieee754_pow+0xa64>)
 800e470:	f7ff bb1b 	b.w	800daaa <__ieee754_pow+0x3a>
 800e474:	2000      	movs	r0, #0
 800e476:	2100      	movs	r1, #0
 800e478:	f7ff bb17 	b.w	800daaa <__ieee754_pow+0x3a>
 800e47c:	4630      	mov	r0, r6
 800e47e:	4639      	mov	r1, r7
 800e480:	f7ff bb13 	b.w	800daaa <__ieee754_pow+0x3a>
 800e484:	460c      	mov	r4, r1
 800e486:	f7ff bb61 	b.w	800db4c <__ieee754_pow+0xdc>
 800e48a:	2400      	movs	r4, #0
 800e48c:	f7ff bb4c 	b.w	800db28 <__ieee754_pow+0xb8>
 800e490:	00000000 	.word	0x00000000
 800e494:	3fe62e43 	.word	0x3fe62e43
 800e498:	fefa39ef 	.word	0xfefa39ef
 800e49c:	3fe62e42 	.word	0x3fe62e42
 800e4a0:	0ca86c39 	.word	0x0ca86c39
 800e4a4:	be205c61 	.word	0xbe205c61
 800e4a8:	72bea4d0 	.word	0x72bea4d0
 800e4ac:	3e663769 	.word	0x3e663769
 800e4b0:	c5d26bf1 	.word	0xc5d26bf1
 800e4b4:	3ebbbd41 	.word	0x3ebbbd41
 800e4b8:	af25de2c 	.word	0xaf25de2c
 800e4bc:	3f11566a 	.word	0x3f11566a
 800e4c0:	16bebd93 	.word	0x16bebd93
 800e4c4:	3f66c16c 	.word	0x3f66c16c
 800e4c8:	5555553e 	.word	0x5555553e
 800e4cc:	3fc55555 	.word	0x3fc55555
 800e4d0:	fff00000 	.word	0xfff00000
 800e4d4:	3ff00000 	.word	0x3ff00000
 800e4d8:	4090cbff 	.word	0x4090cbff
 800e4dc:	3f6f3400 	.word	0x3f6f3400
 800e4e0:	3fe00000 	.word	0x3fe00000
 800e4e4:	652b82fe 	.word	0x652b82fe
 800e4e8:	3c971547 	.word	0x3c971547
 800e4ec:	4090cc00 	.word	0x4090cc00

0800e4f0 <fabs>:
 800e4f0:	ec51 0b10 	vmov	r0, r1, d0
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e4fa:	ec43 2b10 	vmov	d0, r2, r3
 800e4fe:	4770      	bx	lr

0800e500 <scalbn>:
 800e500:	b570      	push	{r4, r5, r6, lr}
 800e502:	ec55 4b10 	vmov	r4, r5, d0
 800e506:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e50a:	4606      	mov	r6, r0
 800e50c:	462b      	mov	r3, r5
 800e50e:	b991      	cbnz	r1, 800e536 <scalbn+0x36>
 800e510:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e514:	4323      	orrs	r3, r4
 800e516:	d03d      	beq.n	800e594 <scalbn+0x94>
 800e518:	4b35      	ldr	r3, [pc, #212]	@ (800e5f0 <scalbn+0xf0>)
 800e51a:	4620      	mov	r0, r4
 800e51c:	4629      	mov	r1, r5
 800e51e:	2200      	movs	r2, #0
 800e520:	f7f2 f866 	bl	80005f0 <__aeabi_dmul>
 800e524:	4b33      	ldr	r3, [pc, #204]	@ (800e5f4 <scalbn+0xf4>)
 800e526:	4604      	mov	r4, r0
 800e528:	460d      	mov	r5, r1
 800e52a:	429e      	cmp	r6, r3
 800e52c:	da0f      	bge.n	800e54e <scalbn+0x4e>
 800e52e:	a328      	add	r3, pc, #160	@ (adr r3, 800e5d0 <scalbn+0xd0>)
 800e530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e534:	e01e      	b.n	800e574 <scalbn+0x74>
 800e536:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e53a:	4291      	cmp	r1, r2
 800e53c:	d10b      	bne.n	800e556 <scalbn+0x56>
 800e53e:	4622      	mov	r2, r4
 800e540:	4620      	mov	r0, r4
 800e542:	4629      	mov	r1, r5
 800e544:	f7f1 fe9e 	bl	8000284 <__adddf3>
 800e548:	4604      	mov	r4, r0
 800e54a:	460d      	mov	r5, r1
 800e54c:	e022      	b.n	800e594 <scalbn+0x94>
 800e54e:	460b      	mov	r3, r1
 800e550:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e554:	3936      	subs	r1, #54	@ 0x36
 800e556:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e55a:	4296      	cmp	r6, r2
 800e55c:	dd0d      	ble.n	800e57a <scalbn+0x7a>
 800e55e:	2d00      	cmp	r5, #0
 800e560:	a11d      	add	r1, pc, #116	@ (adr r1, 800e5d8 <scalbn+0xd8>)
 800e562:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e566:	da02      	bge.n	800e56e <scalbn+0x6e>
 800e568:	a11d      	add	r1, pc, #116	@ (adr r1, 800e5e0 <scalbn+0xe0>)
 800e56a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e56e:	a31a      	add	r3, pc, #104	@ (adr r3, 800e5d8 <scalbn+0xd8>)
 800e570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e574:	f7f2 f83c 	bl	80005f0 <__aeabi_dmul>
 800e578:	e7e6      	b.n	800e548 <scalbn+0x48>
 800e57a:	1872      	adds	r2, r6, r1
 800e57c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e580:	428a      	cmp	r2, r1
 800e582:	dcec      	bgt.n	800e55e <scalbn+0x5e>
 800e584:	2a00      	cmp	r2, #0
 800e586:	dd08      	ble.n	800e59a <scalbn+0x9a>
 800e588:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e58c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e590:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e594:	ec45 4b10 	vmov	d0, r4, r5
 800e598:	bd70      	pop	{r4, r5, r6, pc}
 800e59a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e59e:	da08      	bge.n	800e5b2 <scalbn+0xb2>
 800e5a0:	2d00      	cmp	r5, #0
 800e5a2:	a10b      	add	r1, pc, #44	@ (adr r1, 800e5d0 <scalbn+0xd0>)
 800e5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5a8:	dac1      	bge.n	800e52e <scalbn+0x2e>
 800e5aa:	a10f      	add	r1, pc, #60	@ (adr r1, 800e5e8 <scalbn+0xe8>)
 800e5ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5b0:	e7bd      	b.n	800e52e <scalbn+0x2e>
 800e5b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e5b6:	3236      	adds	r2, #54	@ 0x36
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e5be:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e5f8 <scalbn+0xf8>)
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	e7d4      	b.n	800e574 <scalbn+0x74>
 800e5ca:	bf00      	nop
 800e5cc:	f3af 8000 	nop.w
 800e5d0:	c2f8f359 	.word	0xc2f8f359
 800e5d4:	01a56e1f 	.word	0x01a56e1f
 800e5d8:	8800759c 	.word	0x8800759c
 800e5dc:	7e37e43c 	.word	0x7e37e43c
 800e5e0:	8800759c 	.word	0x8800759c
 800e5e4:	fe37e43c 	.word	0xfe37e43c
 800e5e8:	c2f8f359 	.word	0xc2f8f359
 800e5ec:	81a56e1f 	.word	0x81a56e1f
 800e5f0:	43500000 	.word	0x43500000
 800e5f4:	ffff3cb0 	.word	0xffff3cb0
 800e5f8:	3c900000 	.word	0x3c900000

0800e5fc <with_errno>:
 800e5fc:	b510      	push	{r4, lr}
 800e5fe:	ed2d 8b02 	vpush	{d8}
 800e602:	eeb0 8a40 	vmov.f32	s16, s0
 800e606:	eef0 8a60 	vmov.f32	s17, s1
 800e60a:	4604      	mov	r4, r0
 800e60c:	f7ff f944 	bl	800d898 <__errno>
 800e610:	6004      	str	r4, [r0, #0]
 800e612:	eeb0 0a48 	vmov.f32	s0, s16
 800e616:	eef0 0a68 	vmov.f32	s1, s17
 800e61a:	ecbd 8b02 	vpop	{d8}
 800e61e:	bd10      	pop	{r4, pc}

0800e620 <xflow>:
 800e620:	4603      	mov	r3, r0
 800e622:	b507      	push	{r0, r1, r2, lr}
 800e624:	ec51 0b10 	vmov	r0, r1, d0
 800e628:	b183      	cbz	r3, 800e64c <xflow+0x2c>
 800e62a:	4602      	mov	r2, r0
 800e62c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e630:	e9cd 2300 	strd	r2, r3, [sp]
 800e634:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e638:	f7f1 ffda 	bl	80005f0 <__aeabi_dmul>
 800e63c:	ec41 0b10 	vmov	d0, r0, r1
 800e640:	2022      	movs	r0, #34	@ 0x22
 800e642:	b003      	add	sp, #12
 800e644:	f85d eb04 	ldr.w	lr, [sp], #4
 800e648:	f7ff bfd8 	b.w	800e5fc <with_errno>
 800e64c:	4602      	mov	r2, r0
 800e64e:	460b      	mov	r3, r1
 800e650:	e7ee      	b.n	800e630 <xflow+0x10>
 800e652:	0000      	movs	r0, r0
 800e654:	0000      	movs	r0, r0
	...

0800e658 <__math_uflow>:
 800e658:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e660 <__math_uflow+0x8>
 800e65c:	f7ff bfe0 	b.w	800e620 <xflow>
 800e660:	00000000 	.word	0x00000000
 800e664:	10000000 	.word	0x10000000

0800e668 <__math_oflow>:
 800e668:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e670 <__math_oflow+0x8>
 800e66c:	f7ff bfd8 	b.w	800e620 <xflow>
 800e670:	00000000 	.word	0x00000000
 800e674:	70000000 	.word	0x70000000

0800e678 <__ieee754_sqrt>:
 800e678:	4a6b      	ldr	r2, [pc, #428]	@ (800e828 <__ieee754_sqrt+0x1b0>)
 800e67a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67e:	ec55 4b10 	vmov	r4, r5, d0
 800e682:	43aa      	bics	r2, r5
 800e684:	462b      	mov	r3, r5
 800e686:	4621      	mov	r1, r4
 800e688:	d110      	bne.n	800e6ac <__ieee754_sqrt+0x34>
 800e68a:	4622      	mov	r2, r4
 800e68c:	4620      	mov	r0, r4
 800e68e:	4629      	mov	r1, r5
 800e690:	f7f1 ffae 	bl	80005f0 <__aeabi_dmul>
 800e694:	4602      	mov	r2, r0
 800e696:	460b      	mov	r3, r1
 800e698:	4620      	mov	r0, r4
 800e69a:	4629      	mov	r1, r5
 800e69c:	f7f1 fdf2 	bl	8000284 <__adddf3>
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	ec45 4b10 	vmov	d0, r4, r5
 800e6a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ac:	2d00      	cmp	r5, #0
 800e6ae:	dc0e      	bgt.n	800e6ce <__ieee754_sqrt+0x56>
 800e6b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e6b4:	4322      	orrs	r2, r4
 800e6b6:	d0f5      	beq.n	800e6a4 <__ieee754_sqrt+0x2c>
 800e6b8:	b19d      	cbz	r5, 800e6e2 <__ieee754_sqrt+0x6a>
 800e6ba:	4622      	mov	r2, r4
 800e6bc:	4620      	mov	r0, r4
 800e6be:	4629      	mov	r1, r5
 800e6c0:	f7f1 fdde 	bl	8000280 <__aeabi_dsub>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	f7f2 f8bc 	bl	8000844 <__aeabi_ddiv>
 800e6cc:	e7e8      	b.n	800e6a0 <__ieee754_sqrt+0x28>
 800e6ce:	152a      	asrs	r2, r5, #20
 800e6d0:	d115      	bne.n	800e6fe <__ieee754_sqrt+0x86>
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	e009      	b.n	800e6ea <__ieee754_sqrt+0x72>
 800e6d6:	0acb      	lsrs	r3, r1, #11
 800e6d8:	3a15      	subs	r2, #21
 800e6da:	0549      	lsls	r1, r1, #21
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d0fa      	beq.n	800e6d6 <__ieee754_sqrt+0x5e>
 800e6e0:	e7f7      	b.n	800e6d2 <__ieee754_sqrt+0x5a>
 800e6e2:	462a      	mov	r2, r5
 800e6e4:	e7fa      	b.n	800e6dc <__ieee754_sqrt+0x64>
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	3001      	adds	r0, #1
 800e6ea:	02dc      	lsls	r4, r3, #11
 800e6ec:	d5fb      	bpl.n	800e6e6 <__ieee754_sqrt+0x6e>
 800e6ee:	1e44      	subs	r4, r0, #1
 800e6f0:	1b12      	subs	r2, r2, r4
 800e6f2:	f1c0 0420 	rsb	r4, r0, #32
 800e6f6:	fa21 f404 	lsr.w	r4, r1, r4
 800e6fa:	4081      	lsls	r1, r0
 800e6fc:	4323      	orrs	r3, r4
 800e6fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e702:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e706:	07d2      	lsls	r2, r2, #31
 800e708:	f04f 0600 	mov.w	r6, #0
 800e70c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e710:	ea4f 0565 	mov.w	r5, r5, asr #1
 800e714:	f04f 0016 	mov.w	r0, #22
 800e718:	4632      	mov	r2, r6
 800e71a:	bf58      	it	pl
 800e71c:	005b      	lslpl	r3, r3, #1
 800e71e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e722:	bf5c      	itt	pl
 800e724:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e728:	0049      	lslpl	r1, r1, #1
 800e72a:	005b      	lsls	r3, r3, #1
 800e72c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e730:	0049      	lsls	r1, r1, #1
 800e732:	1917      	adds	r7, r2, r4
 800e734:	429f      	cmp	r7, r3
 800e736:	bfde      	ittt	le
 800e738:	193a      	addle	r2, r7, r4
 800e73a:	1bdb      	suble	r3, r3, r7
 800e73c:	1936      	addle	r6, r6, r4
 800e73e:	0fcf      	lsrs	r7, r1, #31
 800e740:	3801      	subs	r0, #1
 800e742:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e746:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e74a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e74e:	d1f0      	bne.n	800e732 <__ieee754_sqrt+0xba>
 800e750:	4604      	mov	r4, r0
 800e752:	2720      	movs	r7, #32
 800e754:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e758:	429a      	cmp	r2, r3
 800e75a:	eb00 0e0c 	add.w	lr, r0, ip
 800e75e:	db02      	blt.n	800e766 <__ieee754_sqrt+0xee>
 800e760:	d113      	bne.n	800e78a <__ieee754_sqrt+0x112>
 800e762:	458e      	cmp	lr, r1
 800e764:	d811      	bhi.n	800e78a <__ieee754_sqrt+0x112>
 800e766:	f1be 0f00 	cmp.w	lr, #0
 800e76a:	eb0e 000c 	add.w	r0, lr, ip
 800e76e:	da43      	bge.n	800e7f8 <__ieee754_sqrt+0x180>
 800e770:	2800      	cmp	r0, #0
 800e772:	db41      	blt.n	800e7f8 <__ieee754_sqrt+0x180>
 800e774:	f102 0801 	add.w	r8, r2, #1
 800e778:	1a9b      	subs	r3, r3, r2
 800e77a:	458e      	cmp	lr, r1
 800e77c:	4464      	add	r4, ip
 800e77e:	eba1 010e 	sub.w	r1, r1, lr
 800e782:	bf88      	it	hi
 800e784:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e788:	4642      	mov	r2, r8
 800e78a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e78e:	3f01      	subs	r7, #1
 800e790:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e794:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e798:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e79c:	d1dc      	bne.n	800e758 <__ieee754_sqrt+0xe0>
 800e79e:	4319      	orrs	r1, r3
 800e7a0:	d01b      	beq.n	800e7da <__ieee754_sqrt+0x162>
 800e7a2:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800e82c <__ieee754_sqrt+0x1b4>
 800e7a6:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800e830 <__ieee754_sqrt+0x1b8>
 800e7aa:	e9da 0100 	ldrd	r0, r1, [sl]
 800e7ae:	e9db 2300 	ldrd	r2, r3, [fp]
 800e7b2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e7b6:	f7f1 fd63 	bl	8000280 <__aeabi_dsub>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4640      	mov	r0, r8
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	f7f2 f991 	bl	8000ae8 <__aeabi_dcmple>
 800e7c6:	b140      	cbz	r0, 800e7da <__ieee754_sqrt+0x162>
 800e7c8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e7cc:	e9da 0100 	ldrd	r0, r1, [sl]
 800e7d0:	e9db 2300 	ldrd	r2, r3, [fp]
 800e7d4:	d112      	bne.n	800e7fc <__ieee754_sqrt+0x184>
 800e7d6:	3601      	adds	r6, #1
 800e7d8:	463c      	mov	r4, r7
 800e7da:	1072      	asrs	r2, r6, #1
 800e7dc:	07f1      	lsls	r1, r6, #31
 800e7de:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800e7e2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e7e6:	bf48      	it	mi
 800e7e8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e7ec:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e7f6:	e753      	b.n	800e6a0 <__ieee754_sqrt+0x28>
 800e7f8:	4690      	mov	r8, r2
 800e7fa:	e7bd      	b.n	800e778 <__ieee754_sqrt+0x100>
 800e7fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800e800:	f7f1 fd40 	bl	8000284 <__adddf3>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4640      	mov	r0, r8
 800e80a:	4649      	mov	r1, r9
 800e80c:	f7f2 f962 	bl	8000ad4 <__aeabi_dcmplt>
 800e810:	b128      	cbz	r0, 800e81e <__ieee754_sqrt+0x1a6>
 800e812:	1ca0      	adds	r0, r4, #2
 800e814:	f104 0402 	add.w	r4, r4, #2
 800e818:	bf08      	it	eq
 800e81a:	3601      	addeq	r6, #1
 800e81c:	e7dd      	b.n	800e7da <__ieee754_sqrt+0x162>
 800e81e:	1c63      	adds	r3, r4, #1
 800e820:	f023 0401 	bic.w	r4, r3, #1
 800e824:	e7d9      	b.n	800e7da <__ieee754_sqrt+0x162>
 800e826:	bf00      	nop
 800e828:	7ff00000 	.word	0x7ff00000
 800e82c:	20000248 	.word	0x20000248
 800e830:	20000240 	.word	0x20000240

0800e834 <_init>:
 800e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e836:	bf00      	nop
 800e838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e83a:	bc08      	pop	{r3}
 800e83c:	469e      	mov	lr, r3
 800e83e:	4770      	bx	lr

0800e840 <_fini>:
 800e840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e842:	bf00      	nop
 800e844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e846:	bc08      	pop	{r3}
 800e848:	469e      	mov	lr, r3
 800e84a:	4770      	bx	lr
