
DeviceProcessor03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd2c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800cf64  0800cf64  0000df64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d07c  0800d07c  0000e07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800d080  0800d080  0000e080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000001ef  20000000  0800d084  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000e961  200001f0  0800d273  0000f1f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000607  2000eb51  0800d273  0000fb51  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000f1ef  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002438c  00000000  00000000  0000f225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000050de  00000000  00000000  000335b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001dd8  00000000  00000000  00038690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000016d8  00000000  00000000  0003a468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037d90  00000000  00000000  0003bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00029ecd  00000000  00000000  000738d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014bcec  00000000  00000000  0009d79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e9489  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007d88  00000000  00000000  001e94cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001f1254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001f0 	.word	0x200001f0
 8000254:	00000000 	.word	0x00000000
 8000258:	0800cf4c 	.word	0x0800cf4c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f4 	.word	0x200001f4
 8000274:	0800cf4c 	.word	0x0800cf4c

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f001 fdb8 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f81c 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 fb72 	bl	800096c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000288:	f000 f87c 	bl	8000384 <MX_GPDMA1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800028c:	f000 fb3c 	bl	8000908 <MX_USB_OTG_FS_PCD_Init>
  MX_ICACHE_Init();
 8000290:	f000 f996 	bl	80005c0 <MX_ICACHE_Init>
  MX_TIM8_Init();
 8000294:	f000 fa88 	bl	80007a8 <MX_TIM8_Init>
  MX_I2C2_Init();
 8000298:	f000 f916 	bl	80004c8 <MX_I2C2_Init>
  MX_I2C3_Init();
 800029c:	f000 f952 	bl	8000544 <MX_I2C3_Init>
  MX_SPI2_Init();
 80002a0:	f000 fa12 	bl	80006c8 <MX_SPI2_Init>
  MX_SPI1_Init();
 80002a4:	f000 f9a0 	bl	80005e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 80002a8:	f00a fc7e 	bl	800aba8 <MX_USB_Device_Init>
  HAL_Delay(2000);
 80002ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002b0:	f001 fe64 	bl	8001f7c <HAL_Delay>
  run_device();
 80002b4:	f001 fa8a 	bl	80017cc <run_device>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	bf00      	nop
 80002ba:	e7fd      	b.n	80002b8 <main+0x40>

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b09e      	sub	sp, #120	@ 0x78
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2260      	movs	r2, #96	@ 0x60
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f00c fe12 	bl	800cef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	463b      	mov	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]
 80002de:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80002e4:	f005 f80e 	bl	8005304 <HAL_PWREx_ControlVoltageScaling>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002ee:	f000 fc1d 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 80002f2:	2370      	movs	r3, #112	@ 0x70
 80002f4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000300:	2310      	movs	r3, #16
 8000302:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000304:	2300      	movs	r3, #0
 8000306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 8000308:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800030c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 800030e:	2310      	movs	r3, #16
 8000310:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000316:	2301      	movs	r3, #1
 8000318:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800031a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800031e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000320:	2303      	movs	r3, #3
 8000322:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000324:	230a      	movs	r3, #10
 8000326:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000328:	2302      	movs	r3, #2
 800032a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800032c:	2302      	movs	r3, #2
 800032e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000330:	2301      	movs	r3, #1
 8000332:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000334:	230c      	movs	r3, #12
 8000336:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4618      	mov	r0, r3
 8000342:	f005 f88b 	bl	800545c <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800034c:	f000 fbee 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	231f      	movs	r3, #31
 8000352:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2303      	movs	r3, #3
 8000356:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	2104      	movs	r1, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f005 ff51 	bl	8006214 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000378:	f000 fbd8 	bl	8000b2c <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3778      	adds	r7, #120	@ 0x78
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800038a:	4b4a      	ldr	r3, [pc, #296]	@ (80004b4 <MX_GPDMA1_Init+0x130>)
 800038c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000390:	4a48      	ldr	r2, [pc, #288]	@ (80004b4 <MX_GPDMA1_Init+0x130>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800039a:	4b46      	ldr	r3, [pc, #280]	@ (80004b4 <MX_GPDMA1_Init+0x130>)
 800039c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2054      	movs	r0, #84	@ 0x54
 80003ae:	f001 fec1 	bl	8002134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80003b2:	2054      	movs	r0, #84	@ 0x54
 80003b4:	f001 fed8 	bl	8002168 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel14.Instance = GPDMA1_Channel14;
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003ba:	4a40      	ldr	r2, [pc, #256]	@ (80004bc <MX_GPDMA1_Init+0x138>)
 80003bc:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel14.Init.Request = DMA_REQUEST_SW;
 80003be:	4b3e      	ldr	r3, [pc, #248]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003c4:	605a      	str	r2, [r3, #4]
  handle_GPDMA1_Channel14.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80003c6:	4b3c      	ldr	r3, [pc, #240]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  handle_GPDMA1_Channel14.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003d2:	60da      	str	r2, [r3, #12]
  handle_GPDMA1_Channel14.Init.SrcInc = DMA_SINC_FIXED;
 80003d4:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  handle_GPDMA1_Channel14.Init.DestInc = DMA_DINC_FIXED;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  handle_GPDMA1_Channel14.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80003e0:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  handle_GPDMA1_Channel14.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80003e6:	4b34      	ldr	r3, [pc, #208]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	61da      	str	r2, [r3, #28]
  handle_GPDMA1_Channel14.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80003ec:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
  handle_GPDMA1_Channel14.Init.SrcBurstLength = 1;
 80003f2:	4b31      	ldr	r3, [pc, #196]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA1_Channel14.Init.DestBurstLength = 1;
 80003f8:	4b2f      	ldr	r3, [pc, #188]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA1_Channel14.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80003fe:	4b2e      	ldr	r3, [pc, #184]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 8000400:	2200      	movs	r2, #0
 8000402:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA1_Channel14.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 8000406:	2200      	movs	r2, #0
 8000408:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA1_Channel14.Init.Mode = DMA_NORMAL;
 800040a:	4b2b      	ldr	r3, [pc, #172]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 800040c:	2200      	movs	r2, #0
 800040e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA1_Channel14) != HAL_OK)
 8000410:	4829      	ldr	r0, [pc, #164]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 8000412:	f001 ff6b 	bl	80022ec <HAL_DMA_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_GPDMA1_Init+0x9c>
  {
    Error_Handler();
 800041c:	f000 fb86 	bl	8000b2c <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel14, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000420:	2110      	movs	r1, #16
 8000422:	4825      	ldr	r0, [pc, #148]	@ (80004b8 <MX_GPDMA1_Init+0x134>)
 8000424:	f002 fb91 	bl	8002b4a <HAL_DMA_ConfigChannelAttributes>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_GPDMA1_Init+0xae>
  {
    Error_Handler();
 800042e:	f000 fb7d 	bl	8000b2c <Error_Handler>
  }
  handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 8000432:	4b23      	ldr	r3, [pc, #140]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000434:	4a23      	ldr	r2, [pc, #140]	@ (80004c4 <MX_GPDMA1_Init+0x140>)
 8000436:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel13.Init.Request = DMA_REQUEST_SW;
 8000438:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 800043a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800043e:	605a      	str	r2, [r3, #4]
  handle_GPDMA1_Channel13.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  handle_GPDMA1_Channel13.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000446:	4b1e      	ldr	r3, [pc, #120]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800044c:	60da      	str	r2, [r3, #12]
  handle_GPDMA1_Channel13.Init.SrcInc = DMA_SINC_FIXED;
 800044e:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  handle_GPDMA1_Channel13.Init.DestInc = DMA_DINC_FIXED;
 8000454:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000456:	2200      	movs	r2, #0
 8000458:	615a      	str	r2, [r3, #20]
  handle_GPDMA1_Channel13.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  handle_GPDMA1_Channel13.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000460:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  handle_GPDMA1_Channel13.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000466:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  handle_GPDMA1_Channel13.Init.SrcBurstLength = 1;
 800046c:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 800046e:	2201      	movs	r2, #1
 8000470:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA1_Channel13.Init.DestBurstLength = 1;
 8000472:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000474:	2201      	movs	r2, #1
 8000476:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA1_Channel13.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000478:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 800047a:	2200      	movs	r2, #0
 800047c:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA1_Channel13.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800047e:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000480:	2200      	movs	r2, #0
 8000482:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA1_Channel13.Init.Mode = DMA_NORMAL;
 8000484:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 8000486:	2200      	movs	r2, #0
 8000488:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 800048a:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 800048c:	f001 ff2e 	bl	80022ec <HAL_DMA_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_GPDMA1_Init+0x116>
  {
    Error_Handler();
 8000496:	f000 fb49 	bl	8000b2c <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 800049a:	2110      	movs	r1, #16
 800049c:	4808      	ldr	r0, [pc, #32]	@ (80004c0 <MX_GPDMA1_Init+0x13c>)
 800049e:	f002 fb54 	bl	8002b4a <HAL_DMA_ConfigChannelAttributes>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_GPDMA1_Init+0x128>
  {
    Error_Handler();
 80004a8:	f000 fb40 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	46020c00 	.word	0x46020c00
 80004b8:	2000020c 	.word	0x2000020c
 80004bc:	40020750 	.word	0x40020750
 80004c0:	20000284 	.word	0x20000284
 80004c4:	400206d0 	.word	0x400206d0

080004c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004cc:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <MX_I2C2_Init+0x74>)
 80004ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000540 <MX_I2C2_Init+0x78>)
 80004d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <MX_I2C2_Init+0x74>)
 80004d4:	f640 6214 	movw	r2, #3604	@ 0xe14
 80004d8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004da:	4b18      	ldr	r3, [pc, #96]	@ (800053c <MX_I2C2_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e0:	4b16      	ldr	r3, [pc, #88]	@ (800053c <MX_I2C2_Init+0x74>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <MX_I2C2_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004ec:	4b13      	ldr	r3, [pc, #76]	@ (800053c <MX_I2C2_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004f2:	4b12      	ldr	r3, [pc, #72]	@ (800053c <MX_I2C2_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004f8:	4b10      	ldr	r3, [pc, #64]	@ (800053c <MX_I2C2_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <MX_I2C2_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000504:	480d      	ldr	r0, [pc, #52]	@ (800053c <MX_I2C2_Init+0x74>)
 8000506:	f002 fff1 	bl	80034ec <HAL_I2C_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000510:	f000 fb0c 	bl	8000b2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000514:	2100      	movs	r1, #0
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <MX_I2C2_Init+0x74>)
 8000518:	f003 fb92 	bl	8003c40 <HAL_I2CEx_ConfigAnalogFilter>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000522:	f000 fb03 	bl	8000b2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000526:	2100      	movs	r1, #0
 8000528:	4804      	ldr	r0, [pc, #16]	@ (800053c <MX_I2C2_Init+0x74>)
 800052a:	f003 fbd4 	bl	8003cd6 <HAL_I2CEx_ConfigDigitalFilter>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 fafa 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200002fc 	.word	0x200002fc
 8000540:	40005800 	.word	0x40005800

08000544 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000548:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <MX_I2C3_Init+0x74>)
 800054a:	4a1c      	ldr	r2, [pc, #112]	@ (80005bc <MX_I2C3_Init+0x78>)
 800054c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800054e:	4b1a      	ldr	r3, [pc, #104]	@ (80005b8 <MX_I2C3_Init+0x74>)
 8000550:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000554:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000556:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <MX_I2C3_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800055c:	4b16      	ldr	r3, [pc, #88]	@ (80005b8 <MX_I2C3_Init+0x74>)
 800055e:	2201      	movs	r2, #1
 8000560:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000562:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <MX_I2C3_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000568:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <MX_I2C3_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <MX_I2C3_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000574:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <MX_I2C3_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800057a:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <MX_I2C3_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000580:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <MX_I2C3_Init+0x74>)
 8000582:	f002 ffb3 	bl	80034ec <HAL_I2C_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800058c:	f000 face 	bl	8000b2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000590:	2100      	movs	r1, #0
 8000592:	4809      	ldr	r0, [pc, #36]	@ (80005b8 <MX_I2C3_Init+0x74>)
 8000594:	f003 fb54 	bl	8003c40 <HAL_I2CEx_ConfigAnalogFilter>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800059e:	f000 fac5 	bl	8000b2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <MX_I2C3_Init+0x74>)
 80005a6:	f003 fb96 	bl	8003cd6 <HAL_I2CEx_ConfigDigitalFilter>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80005b0:	f000 fabc 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000350 	.word	0x20000350
 80005bc:	46002800 	.word	0x46002800

080005c0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f003 fbd3 	bl	8003d70 <HAL_ICACHE_ConfigAssociativityMode>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80005d0:	f000 faac 	bl	8000b2c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80005d4:	f003 fbec 	bl	8003db0 <HAL_ICACHE_Enable>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80005de:	f000 faa5 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005f8:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 80005fa:	4a32      	ldr	r2, [pc, #200]	@ (80006c4 <MX_SPI1_Init+0xdc>)
 80005fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005fe:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000600:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000606:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800060c:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 800060e:	2207      	movs	r2, #7
 8000610:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000614:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000618:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800061a:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000622:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000626:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800062e:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 800063c:	2200      	movs	r2, #0
 800063e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000642:	2207      	movs	r2, #7
 8000644:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000648:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800064c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000650:	2200      	movs	r2, #0
 8000652:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000656:	2200      	movs	r2, #0
 8000658:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000662:	2200      	movs	r2, #0
 8000664:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 800066e:	2200      	movs	r2, #0
 8000670:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000674:	2200      	movs	r2, #0
 8000676:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 800067a:	2200      	movs	r2, #0
 800067c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000680:	2200      	movs	r2, #0
 8000682:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000684:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 8000686:	f007 f82d 	bl	80076e4 <HAL_SPI_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000690:	f000 fa4c 	bl	8000b2c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000698:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <MX_SPI1_Init+0xd8>)
 80006a8:	f007 fc2f 	bl	8007f0a <HAL_SPIEx_SetConfigAutonomousMode>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80006b2:	f000 fa3b 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200003a4 	.word	0x200003a4
 80006c4:	40013000 	.word	0x40013000

080006c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006d8:	4b31      	ldr	r3, [pc, #196]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 80006da:	4a32      	ldr	r2, [pc, #200]	@ (80007a4 <MX_SPI2_Init+0xdc>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b30      	ldr	r3, [pc, #192]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 80006e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b2e      	ldr	r3, [pc, #184]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 80006ee:	2207      	movs	r2, #7
 80006f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006f2:	4b2b      	ldr	r3, [pc, #172]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 80006f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80006f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000702:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000706:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000708:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070e:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000714:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000722:	2207      	movs	r2, #7
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000728:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800072c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800072e:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000730:	2200      	movs	r2, #0
 8000732:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000736:	2200      	movs	r2, #0
 8000738:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 800073c:	2200      	movs	r2, #0
 800073e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000740:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000742:	2200      	movs	r2, #0
 8000744:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000748:	2200      	movs	r2, #0
 800074a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 800074e:	2200      	movs	r2, #0
 8000750:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000754:	2200      	movs	r2, #0
 8000756:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 800075a:	2200      	movs	r2, #0
 800075c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000760:	2200      	movs	r2, #0
 8000762:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000764:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000766:	f006 ffbd 	bl	80076e4 <HAL_SPI_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8000770:	f000 f9dc 	bl	8000b2c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000778:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <MX_SPI2_Init+0xd8>)
 8000788:	f007 fbbf 	bl	8007f0a <HAL_SPIEx_SetConfigAutonomousMode>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8000792:	f000 f9cb 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000434 	.word	0x20000434
 80007a4:	40003800 	.word	0x40003800

080007a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	@ 0x70
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2234      	movs	r2, #52	@ 0x34
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00c fb86 	bl	800cef4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007e8:	4b45      	ldr	r3, [pc, #276]	@ (8000900 <MX_TIM8_Init+0x158>)
 80007ea:	4a46      	ldr	r2, [pc, #280]	@ (8000904 <MX_TIM8_Init+0x15c>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80007ee:	4b44      	ldr	r3, [pc, #272]	@ (8000900 <MX_TIM8_Init+0x158>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b42      	ldr	r3, [pc, #264]	@ (8000900 <MX_TIM8_Init+0x158>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80007fa:	4b41      	ldr	r3, [pc, #260]	@ (8000900 <MX_TIM8_Init+0x158>)
 80007fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000800:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b3f      	ldr	r3, [pc, #252]	@ (8000900 <MX_TIM8_Init+0x158>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000808:	4b3d      	ldr	r3, [pc, #244]	@ (8000900 <MX_TIM8_Init+0x158>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800080e:	4b3c      	ldr	r3, [pc, #240]	@ (8000900 <MX_TIM8_Init+0x158>)
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000814:	483a      	ldr	r0, [pc, #232]	@ (8000900 <MX_TIM8_Init+0x158>)
 8000816:	f007 fbb9 	bl	8007f8c <HAL_TIM_Base_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000820:	f000 f984 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000828:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800082a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800082e:	4619      	mov	r1, r3
 8000830:	4833      	ldr	r0, [pc, #204]	@ (8000900 <MX_TIM8_Init+0x158>)
 8000832:	f007 fec9 	bl	80085c8 <HAL_TIM_ConfigClockSource>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800083c:	f000 f976 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000840:	482f      	ldr	r0, [pc, #188]	@ (8000900 <MX_TIM8_Init+0x158>)
 8000842:	f007 fbfa 	bl	800803a <HAL_TIM_PWM_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800084c:	f000 f96e 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800085c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000860:	4619      	mov	r1, r3
 8000862:	4827      	ldr	r0, [pc, #156]	@ (8000900 <MX_TIM8_Init+0x158>)
 8000864:	f008 fd4a 	bl	80092fc <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800086e:	f000 f95d 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000872:	2360      	movs	r3, #96	@ 0x60
 8000874:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087a:	2300      	movs	r3, #0
 800087c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000892:	2204      	movs	r2, #4
 8000894:	4619      	mov	r1, r3
 8000896:	481a      	ldr	r0, [pc, #104]	@ (8000900 <MX_TIM8_Init+0x158>)
 8000898:	f007 fd82 	bl	80083a0 <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80008a2:	f000 f943 	bl	8000b2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4807      	ldr	r0, [pc, #28]	@ (8000900 <MX_TIM8_Init+0x158>)
 80008e4:	f008 fdcc 	bl	8009480 <HAL_TIMEx_ConfigBreakDeadTime>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80008ee:	f000 f91d 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80008f2:	4803      	ldr	r0, [pc, #12]	@ (8000900 <MX_TIM8_Init+0x158>)
 80008f4:	f000 fb56 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 80008f8:	bf00      	nop
 80008fa:	3770      	adds	r7, #112	@ 0x70
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200004c4 	.word	0x200004c4
 8000904:	40013400 	.word	0x40013400

08000908 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090e:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000910:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000914:	2206      	movs	r2, #6
 8000916:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091a:	2202      	movs	r2, #2
 800091c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000920:	2202      	movs	r2, #2
 8000922:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000926:	2200      	movs	r2, #0
 8000928:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092c:	2200      	movs	r2, #0
 800092e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000938:	2200      	movs	r2, #0
 800093a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093e:	2200      	movs	r2, #0
 8000940:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000944:	2200      	movs	r2, #0
 8000946:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094a:	2200      	movs	r2, #0
 800094c:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000950:	f003 fa3e 	bl	8003dd0 <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800095a:	f000 f8e7 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000588 	.word	0x20000588
 8000968:	42040000 	.word	0x42040000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	@ 0x30
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	4b65      	ldr	r3, [pc, #404]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000988:	4a63      	ldr	r2, [pc, #396]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000992:	4b61      	ldr	r3, [pc, #388]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a0:	4b5d      	ldr	r3, [pc, #372]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009b0:	4b59      	ldr	r3, [pc, #356]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b6:	f003 0320 	and.w	r3, r3, #32
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b56      	ldr	r3, [pc, #344]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c4:	4a54      	ldr	r2, [pc, #336]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ce:	4b52      	ldr	r3, [pc, #328]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b4e      	ldr	r3, [pc, #312]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e2:	4a4d      	ldr	r2, [pc, #308]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fa:	4b47      	ldr	r3, [pc, #284]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 80009fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a00:	4a45      	ldr	r2, [pc, #276]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a0a:	4b43      	ldr	r3, [pc, #268]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	4b3f      	ldr	r3, [pc, #252]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a28:	4b3b      	ldr	r3, [pc, #236]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a3c:	4a36      	ldr	r2, [pc, #216]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a46:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <MX_GPIO_Init+0x1ac>)
 8000a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000a54:	2200      	movs	r2, #0
 8000a56:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a5a:	4830      	ldr	r0, [pc, #192]	@ (8000b1c <MX_GPIO_Init+0x1b0>)
 8000a5c:	f002 fd2e 	bl	80034bc <HAL_GPIO_WritePin>
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000a66:	482e      	ldr	r0, [pc, #184]	@ (8000b20 <MX_GPIO_Init+0x1b4>)
 8000a68:	f002 fd28 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADCV1_D13_Pin ADCV1_D12_Pin ADCV1_D11_Pin ADCV1_D10_Pin
                           ADCV1_D09_Pin ADCV1_D08_Pin ADCV1_D07_Pin ADCV1_D06_Pin
                           ADCV1_D05_Pin ADCV1_D04_Pin ADCV1_D03_Pin ADCV1_D02_Pin
                           ADCV1_D01_Pin ADCV1_D00_Pin ADCV1_D15_Pin ADCV1_D14_Pin */
  GPIO_InitStruct.Pin = ADCV1_D13_Pin|ADCV1_D12_Pin|ADCV1_D11_Pin|ADCV1_D10_Pin
 8000a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a70:	61fb      	str	r3, [r7, #28]
                          |ADCV1_D09_Pin|ADCV1_D08_Pin|ADCV1_D07_Pin|ADCV1_D06_Pin
                          |ADCV1_D05_Pin|ADCV1_D04_Pin|ADCV1_D03_Pin|ADCV1_D02_Pin
                          |ADCV1_D01_Pin|ADCV1_D00_Pin|ADCV1_D15_Pin|ADCV1_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4828      	ldr	r0, [pc, #160]	@ (8000b24 <MX_GPIO_Init+0x1b8>)
 8000a82:	f002 fb43 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D00_Pin ADCV2_D01_Pin ADCV2_D02_Pin ADCV2_D03_Pin
                           ADCV2_D04_Pin ADCV2_D05_Pin ADCV2_D06_Pin ADCV2_D07_Pin
                           ADCV2_D08_Pin ADCV2_D09_Pin ADCV2_D10_Pin ADCV2_D11_Pin */
  GPIO_InitStruct.Pin = ADCV2_D00_Pin|ADCV2_D01_Pin|ADCV2_D02_Pin|ADCV2_D03_Pin
 8000a86:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000a8a:	61fb      	str	r3, [r7, #28]
                          |ADCV2_D04_Pin|ADCV2_D05_Pin|ADCV2_D06_Pin|ADCV2_D07_Pin
                          |ADCV2_D08_Pin|ADCV2_D09_Pin|ADCV2_D10_Pin|ADCV2_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4823      	ldr	r0, [pc, #140]	@ (8000b28 <MX_GPIO_Init+0x1bc>)
 8000a9c:	f002 fb36 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D12_Pin ADCV2_D13_Pin ADCV2_D14_Pin ADCV2_D15_Pin */
  GPIO_InitStruct.Pin = ADCV2_D12_Pin|ADCV2_D13_Pin|ADCV2_D14_Pin|ADCV2_D15_Pin;
 8000aa0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481c      	ldr	r0, [pc, #112]	@ (8000b28 <MX_GPIO_Init+0x1bc>)
 8000ab6:	f002 fb29 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_01_Pin SWNT_CTRL_02_Pin SWNT_CTRL_03_Pin SWNT_CTRL_04_Pin
                           SWNT_CTRL_05_Pin SWNT_CTRL_06_Pin SWNT_CTRL_07_Pin SWNT_CTRL_08_Pin
                           SWNT_CTRL_09_Pin SWNT_CTRL_10_Pin SWNT_CTRL_11_Pin SWNT_CTRL_12_Pin
                           SWNT_CTRL_13_Pin SWNT_CTRL_14_Pin SWNT_CTRL_15_Pin SWNT_CTRL_16_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000aba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000abe:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4812      	ldr	r0, [pc, #72]	@ (8000b1c <MX_GPIO_Init+0x1b0>)
 8000ad4:	f002 fb1a 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_20_Pin SWNT_CTRL_21_Pin SWNT_CTRL_17_Pin SWNT_CTRL_18_Pin
                           SWNT_CTRL_19_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 8000ad8:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000adc:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	480b      	ldr	r0, [pc, #44]	@ (8000b20 <MX_GPIO_Init+0x1b4>)
 8000af2:	f002 fb0b 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV1_OTR_Pin ADCV2_OTR_Pin */
  GPIO_InitStruct.Pin = ADCV1_OTR_Pin|ADCV2_OTR_Pin;
 8000af6:	2306      	movs	r3, #6
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_GPIO_Init+0x1b4>)
 8000b0a:	f002 faff 	bl	800310c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	@ 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	46020c00 	.word	0x46020c00
 8000b1c:	42021800 	.word	0x42021800
 8000b20:	42020c00 	.word	0x42020c00
 8000b24:	42021000 	.word	0x42021000
 8000b28:	42021400 	.word	0x42021400

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <Error_Handler+0x8>

08000b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_MspInit+0x34>)
 8000b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b44:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <HAL_MspInit+0x34>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <HAL_MspInit+0x34>)
 8000b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000b5c:	f004 fc5e 	bl	800541c <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8000b60:	f004 fc6c 	bl	800543c <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	46020c00 	.word	0x46020c00

08000b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0bc      	sub	sp, #240	@ 0xf0
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b88:	f107 0318 	add.w	r3, r7, #24
 8000b8c:	22c0      	movs	r2, #192	@ 0xc0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f00c f9af 	bl	800cef4 <memset>
  if(hi2c->Instance==I2C2)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a4d      	ldr	r2, [pc, #308]	@ (8000cd0 <HAL_I2C_MspInit+0x160>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d148      	bne.n	8000c32 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ba0:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_MSIK;
 8000bac:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0318 	add.w	r3, r7, #24
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f005 febf 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000bc4:	f7ff ffb2 	bl	8000b2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b42      	ldr	r3, [pc, #264]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bce:	4a41      	ldr	r2, [pc, #260]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_DAC2_CURR_POT_SCL_Pin|I2C_DAC2_CURR_POT_SDA_Pin;
 8000be6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000bea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c00:	2304      	movs	r3, #4
 8000c02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4832      	ldr	r0, [pc, #200]	@ (8000cd8 <HAL_I2C_MspInit+0x168>)
 8000c0e:	f002 fa7d 	bl	800310c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c12:	4b30      	ldr	r3, [pc, #192]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c18:	4a2e      	ldr	r2, [pc, #184]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000c1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c1e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c22:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000c24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c30:	e04a      	b.n	8000cc8 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C3)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a29      	ldr	r2, [pc, #164]	@ (8000cdc <HAL_I2C_MspInit+0x16c>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d145      	bne.n	8000cc8 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_MSIK;
 8000c48:	23c0      	movs	r3, #192	@ 0xc0
 8000c4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	4618      	mov	r0, r3
 8000c54:	f005 fe72 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8000c5e:	f7ff ff65 	bl	8000b2c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c68:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_DAC1_POT_SCL_Pin|I2C_DAC1_POT_SDA_Pin;
 8000c80:	2303      	movs	r3, #3
 8000c82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c86:	2312      	movs	r3, #18
 8000c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480e      	ldr	r0, [pc, #56]	@ (8000ce0 <HAL_I2C_MspInit+0x170>)
 8000ca6:	f002 fa31 	bl	800310c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000cac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000cb0:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_I2C_MspInit+0x164>)
 8000cbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
}
 8000cc8:	bf00      	nop
 8000cca:	37f0      	adds	r7, #240	@ 0xf0
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40005800 	.word	0x40005800
 8000cd4:	46020c00 	.word	0x46020c00
 8000cd8:	42020400 	.word	0x42020400
 8000cdc:	46002800 	.word	0x46002800
 8000ce0:	42020800 	.word	0x42020800

08000ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0be      	sub	sp, #248	@ 0xf8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	22c0      	movs	r2, #192	@ 0xc0
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f00c f8f5 	bl	800cef4 <memset>
  if(hspi->Instance==SPI1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a6a      	ldr	r2, [pc, #424]	@ (8000eb8 <HAL_SPI_MspInit+0x1d4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d147      	bne.n	8000da4 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d14:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 8000d20:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000d24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 fe05 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000d38:	f7ff fef8 	bl	8000b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000d3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d42:	4a5e      	ldr	r2, [pc, #376]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d48:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d4c:	4b5b      	ldr	r3, [pc, #364]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b58      	ldr	r3, [pc, #352]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d60:	4a56      	ldr	r2, [pc, #344]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d6a:	4b54      	ldr	r3, [pc, #336]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_DAC2_SCK_Pin|SPI_DAC2_NSS_Pin|SPI_DAC2_MISO_Pin|SPI_DAC2_MOSI_Pin;
 8000d78:	23d2      	movs	r3, #210	@ 0xd2
 8000d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d90:	2305      	movs	r3, #5
 8000d92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4848      	ldr	r0, [pc, #288]	@ (8000ec0 <HAL_SPI_MspInit+0x1dc>)
 8000d9e:	f002 f9b5 	bl	800310c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000da2:	e084      	b.n	8000eae <HAL_SPI_MspInit+0x1ca>
  else if(hspi->Instance==SPI2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a46      	ldr	r2, [pc, #280]	@ (8000ec4 <HAL_SPI_MspInit+0x1e0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d17f      	bne.n	8000eae <HAL_SPI_MspInit+0x1ca>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000dae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_MSIK;
 8000dba:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	f107 0320 	add.w	r3, r7, #32
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f005 fdb8 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 8000dd2:	f7ff feab 	bl	8000b2c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dd6:	4b39      	ldr	r3, [pc, #228]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ddc:	4a37      	ldr	r2, [pc, #220]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000de6:	4b35      	ldr	r3, [pc, #212]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	4b31      	ldr	r3, [pc, #196]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dfa:	4a30      	ldr	r2, [pc, #192]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e04:	4b2d      	ldr	r3, [pc, #180]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b2a      	ldr	r3, [pc, #168]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e18:	4a28      	ldr	r2, [pc, #160]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <HAL_SPI_MspInit+0x1d8>)
 8000e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_DAC1_MISO_Pin;
 8000e30:	2304      	movs	r3, #4
 8000e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e52:	4619      	mov	r1, r3
 8000e54:	481c      	ldr	r0, [pc, #112]	@ (8000ec8 <HAL_SPI_MspInit+0x1e4>)
 8000e56:	f002 f959 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_NSS_Pin|SPI_DAC1_MOSI_Pin;
 8000e5a:	2311      	movs	r3, #17
 8000e5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e72:	2305      	movs	r3, #5
 8000e74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e78:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <HAL_SPI_MspInit+0x1e8>)
 8000e80:	f002 f944 	bl	800310c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_DAC1_SCK_Pin;
 8000e84:	2308      	movs	r3, #8
 8000e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SPI_DAC1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4808      	ldr	r0, [pc, #32]	@ (8000ecc <HAL_SPI_MspInit+0x1e8>)
 8000eaa:	f002 f92f 	bl	800310c <HAL_GPIO_Init>
}
 8000eae:	bf00      	nop
 8000eb0:	37f8      	adds	r7, #248	@ 0xf8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	46020c00 	.word	0x46020c00
 8000ec0:	42020000 	.word	0x42020000
 8000ec4:	40003800 	.word	0x40003800
 8000ec8:	42020800 	.word	0x42020800
 8000ecc:	42020c00 	.word	0x42020c00

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f94 <HAL_TIM_Base_MspInit+0xc4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d153      	bne.n	8000f8a <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <HAL_TIM_Base_MspInit+0xc8>)
 8000ee4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8000f98 <HAL_TIM_Base_MspInit+0xc8>)
 8000eea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000ef2:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <HAL_TIM_Base_MspInit+0xc8>)
 8000ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* GPDMA1_REQUEST_TIM8_UP Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8000f00:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f02:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <HAL_TIM_Base_MspInit+0xd0>)
 8000f04:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM8_UP;
 8000f06:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f08:	2235      	movs	r2, #53	@ 0x35
 8000f0a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000f12:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f18:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 8000f20:	4b1e      	ldr	r3, [pc, #120]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f22:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f26:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f30:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f34:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f3c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 8000f44:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 8000f56:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8000f5c:	480f      	ldr	r0, [pc, #60]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f5e:	f001 f9c5 	bl	80022ec <HAL_DMA_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_TIM_Base_MspInit+0x9c>
    {
      Error_Handler();
 8000f68:	f7ff fde0 	bl	8000b2c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel12);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f70:	621a      	str	r2, [r3, #32]
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f78:	2110      	movs	r1, #16
 8000f7a:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f7c:	f001 fde5 	bl	8002b4a <HAL_DMA_ConfigChannelAttributes>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 8000f86:	f7ff fdd1 	bl	8000b2c <Error_Handler>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40013400 	.word	0x40013400
 8000f98:	46020c00 	.word	0x46020c00
 8000f9c:	20000510 	.word	0x20000510
 8000fa0:	40020650 	.word	0x40020650

08000fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a12      	ldr	r2, [pc, #72]	@ (800100c <HAL_TIM_MspPostInit+0x68>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d11e      	bne.n	8001004 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_TIM_MspPostInit+0x6c>)
 8000fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fcc:	4a10      	ldr	r2, [pc, #64]	@ (8001010 <HAL_TIM_MspPostInit+0x6c>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_TIM_MspPostInit+0x6c>)
 8000fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ADC_CLK_DVC_Pin;
 8000fe4:	2380      	movs	r3, #128	@ 0x80
 8000fe6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CLK_DVC_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <HAL_TIM_MspPostInit+0x70>)
 8001000:	f002 f884 	bl	800310c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40013400 	.word	0x40013400
 8001010:	46020c00 	.word	0x46020c00
 8001014:	42020800 	.word	0x42020800

08001018 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0bc      	sub	sp, #240	@ 0xf0
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00b ff5b 	bl	800cef4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a3c      	ldr	r2, [pc, #240]	@ (8001134 <HAL_PCD_MspInit+0x11c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d171      	bne.n	800112c <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001048:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4618      	mov	r0, r3
 8001060:	f005 fc6c 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 800106a:	f7ff fd5f 	bl	8000b2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b32      	ldr	r3, [pc, #200]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 8001070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001074:	4a30      	ldr	r2, [pc, #192]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800107e:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 8001080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800108c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001090:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80010a6:	230a      	movs	r3, #10
 80010a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010b0:	4619      	mov	r1, r3
 80010b2:	4822      	ldr	r0, [pc, #136]	@ (800113c <HAL_PCD_MspInit+0x124>)
 80010b4:	f002 f82a 	bl	800310c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 80010ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010be:	4a1e      	ldr	r2, [pc, #120]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 80010ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 80010d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d119      	bne.n	8001118 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 80010e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ea:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 80010f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001102:	f004 f98b 	bl	800541c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 8001108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <HAL_PCD_MspInit+0x120>)
 800110e:	f023 0304 	bic.w	r3, r3, #4
 8001112:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001116:	e001      	b.n	800111c <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001118:	f004 f980 	bl	800541c <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2049      	movs	r0, #73	@ 0x49
 8001122:	f001 f807 	bl	8002134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001126:	2049      	movs	r0, #73	@ 0x49
 8001128:	f001 f81e 	bl	8002168 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800112c:	bf00      	nop
 800112e:	37f0      	adds	r7, #240	@ 0xf0
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	42040000 	.word	0x42040000
 8001138:	46020c00 	.word	0x46020c00
 800113c:	42020000 	.word	0x42020000

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <NMI_Handler+0x4>

08001148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <MemManage_Handler+0x4>

08001158 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <UsageFault_Handler+0x4>

08001168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001196:	f000 fed1 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <OTG_FS_IRQHandler+0x10>)
 80011a6:	f002 ff5a 	bl	800405e <HAL_PCD_IRQHandler>
  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000e44c 	.word	0x2000e44c

080011b4 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <GPDMA1_Channel12_IRQHandler+0x10>)
 80011ba:	f001 fb65 	bl	8002888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000510 	.word	0x20000510

080011c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <SystemInit+0x68>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d2:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <SystemInit+0x68>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <SystemInit+0x6c>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <SystemInit+0x6c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <SystemInit+0x6c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <SystemInit+0x6c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <SystemInit+0x6c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001234 <SystemInit+0x6c>)
 80011fa:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80011fe:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001202:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <SystemInit+0x6c>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <SystemInit+0x6c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <SystemInit+0x6c>)
 8001210:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001214:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <SystemInit+0x6c>)
 8001218:	2200      	movs	r2, #0
 800121a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <SystemInit+0x68>)
 800121e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001222:	609a      	str	r2, [r3, #8]
  #endif
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	46020c00 	.word	0x46020c00

08001238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001270 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800123c:	f7ff ffc4 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001240:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001242:	e003      	b.n	800124c <LoopCopyDataInit>

08001244 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001246:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001248:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800124a:	3104      	adds	r1, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800124c:	480a      	ldr	r0, [pc, #40]	@ (8001278 <LoopForever+0xa>)
	ldr	r3, =_edata
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001250:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001252:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001254:	d3f6      	bcc.n	8001244 <CopyDataInit>
	ldr	r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001258:	e002      	b.n	8001260 <LoopFillZerobss>

0800125a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800125a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800125c:	f842 3b04 	str.w	r3, [r2], #4

08001260 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <LoopForever+0x16>)
	cmp	r2, r3
 8001262:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001264:	d3f9      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f00b fe4d 	bl	800cf04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126a:	f7ff f805 	bl	8000278 <main>

0800126e <LoopForever>:

LoopForever:
    b LoopForever
 800126e:	e7fe      	b.n	800126e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001270:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001274:	0800d084 	.word	0x0800d084
	ldr	r0, =_sdata
 8001278:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800127c:	200001ef 	.word	0x200001ef
	ldr	r2, =_sbss
 8001280:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8001284:	2000eb51 	.word	0x2000eb51

08001288 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_IRQHandler>
	...

0800128c <set_adc_sampling_freq>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel13;
extern uint16_t adc_samples_1[DVC_MAX_NUM_ADC_SAMPLES];
extern uint16_t adc_samples_2[DVC_MAX_NUM_ADC_SAMPLES];
extern uint16_t adc_samples_3[DVC_MAX_NUM_ADC_SAMPLES];

void set_adc_sampling_freq(uint32_t sample_freq){
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	uint32_t sample_freq_div;
	sample_freq_div = 160000000UL / sample_freq;
 8001294:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <set_adc_sampling_freq+0x48>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	fbb2 f3f3 	udiv	r3, r2, r3
 800129c:	60fb      	str	r3, [r7, #12]
	TIM8->ARR = sample_freq_div-1;
 800129e:	4a0e      	ldr	r2, [pc, #56]	@ (80012d8 <set_adc_sampling_freq+0x4c>)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM8->CCR1 = TIM8->ARR/2;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <set_adc_sampling_freq+0x4c>)
 80012a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012aa:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <set_adc_sampling_freq+0x4c>)
 80012ac:	085b      	lsrs	r3, r3, #1
 80012ae:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM8->CCR2 = TIM8->ARR/2;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <set_adc_sampling_freq+0x4c>)
 80012b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b4:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <set_adc_sampling_freq+0x4c>)
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM8->DIER = TIM_DIER_UDE;
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <set_adc_sampling_freq+0x4c>)
 80012bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012c0:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80012c2:	2104      	movs	r1, #4
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <set_adc_sampling_freq+0x50>)
 80012c6:	f006 ff19 	bl	80080fc <HAL_TIM_PWM_Start>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	09896800 	.word	0x09896800
 80012d8:	40013400 	.word	0x40013400
 80012dc:	200004c4 	.word	0x200004c4

080012e0 <collect_adc_samples>:

HAL_StatusTypeDef collect_adc_samples(DMA_HandleTypeDef *dma_ptr, uint8_t adc_num, uint16_t *sample_buf){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	460b      	mov	r3, r1
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef result;
    HAL_DMA_Abort(dma_ptr);
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f001 f968 	bl	80025c4 <HAL_DMA_Abort>
	if(adc_num == 1){
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d116      	bne.n	8001328 <collect_adc_samples+0x48>
		HAL_DMA_Start(dma_ptr,(uint32_t)&GPIOE->IDR,(uint32_t)sample_buf,DVC_MAX_NUM_ADC_SAMPLES*sizeof(uint16_t));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001300:	491d      	ldr	r1, [pc, #116]	@ (8001378 <collect_adc_samples+0x98>)
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f001 f91e 	bl	8002544 <HAL_DMA_Start>
		while(HAL_DMA_PollForTransfer(dma_ptr, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK)
 8001308:	e000      	b.n	800130c <collect_adc_samples+0x2c>
		{
		  __NOP();
 800130a:	bf00      	nop
		while(HAL_DMA_PollForTransfer(dma_ptr, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK)
 800130c:	2264      	movs	r2, #100	@ 0x64
 800130e:	2100      	movs	r1, #0
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f001 f9d3 	bl	80026bc <HAL_DMA_PollForTransfer>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f6      	bne.n	800130a <collect_adc_samples+0x2a>
		}
		reverse_buffer_bits_16(sample_buf, DVC_MAX_NUM_ADC_SAMPLES);
 800131c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f855 	bl	80013d0 <reverse_buffer_bits_16>
 8001326:	e01b      	b.n	8001360 <collect_adc_samples+0x80>
	}
	else if(adc_num == 2){
 8001328:	7afb      	ldrb	r3, [r7, #11]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d113      	bne.n	8001356 <collect_adc_samples+0x76>
		result = HAL_DMA_Start(dma_ptr,(uint32_t)&GPIOF->IDR,(uint32_t)sample_buf,DVC_MAX_NUM_ADC_SAMPLES*sizeof(uint16_t));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001334:	4911      	ldr	r1, [pc, #68]	@ (800137c <collect_adc_samples+0x9c>)
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f001 f904 	bl	8002544 <HAL_DMA_Start>
 800133c:	4603      	mov	r3, r0
 800133e:	75fb      	strb	r3, [r7, #23]
		while(HAL_DMA_PollForTransfer(dma_ptr, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK)
 8001340:	e000      	b.n	8001344 <collect_adc_samples+0x64>
		{
		  __NOP();
 8001342:	bf00      	nop
		while(HAL_DMA_PollForTransfer(dma_ptr, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK)
 8001344:	2264      	movs	r2, #100	@ 0x64
 8001346:	2100      	movs	r1, #0
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f001 f9b7 	bl	80026bc <HAL_DMA_PollForTransfer>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f6      	bne.n	8001342 <collect_adc_samples+0x62>
 8001354:	e004      	b.n	8001360 <collect_adc_samples+0x80>
		}
	}
	else if(adc_num == 3){
 8001356:	7afb      	ldrb	r3, [r7, #11]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d101      	bne.n	8001360 <collect_adc_samples+0x80>
		result = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	75fb      	strb	r3, [r7, #23]
	}
    if(result == HAL_OK) {
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <collect_adc_samples+0x8c>
        HAL_DMA_Abort(dma_ptr);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f001 f92c 	bl	80025c4 <HAL_DMA_Abort>
    }
	return result;
 800136c:	7dfb      	ldrb	r3, [r7, #23]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	42021010 	.word	0x42021010
 800137c:	42021410 	.word	0x42021410

08001380 <reverse_bits_16>:

	}
	return result;
}

uint16_t reverse_bits_16(uint16_t num) {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
    uint16_t reversed = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	e013      	b.n	80013bc <reverse_bits_16+0x3c>
        reversed |= ((num >> i) & 1) << (15 - i);
 8001394:	88fa      	ldrh	r2, [r7, #6]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	fa42 f303 	asr.w	r3, r2, r3
 800139c:	f003 0201 	and.w	r2, r3, #1
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f1c3 030f 	rsb	r3, r3, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; i++) {
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	dde8      	ble.n	8001394 <reverse_bits_16+0x14>
    }
    return reversed;
 80013c2:	89fb      	ldrh	r3, [r7, #14]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <reverse_buffer_bits_16>:

void reverse_buffer_bits_16(uint16_t *buffer, size_t size) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < size; i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e010      	b.n	8001402 <reverse_buffer_bits_16+0x32>
        buffer[i] = reverse_bits_16(buffer[i]);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	8819      	ldrh	r1, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	18d4      	adds	r4, r2, r3
 80013f2:	4608      	mov	r0, r1
 80013f4:	f7ff ffc4 	bl	8001380 <reverse_bits_16>
 80013f8:	4603      	mov	r3, r0
 80013fa:	8023      	strh	r3, [r4, #0]
    for (size_t i = 0; i < size; i++) {
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d3ea      	bcc.n	80013e0 <reverse_buffer_bits_16+0x10>
    }
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bd90      	pop	{r4, r7, pc}

08001414 <init_register_map>:
 *      Author: User
 */

#include "../Inc/device_registers.h"

void init_register_map(RegisterMap_TypeDef* RegMap){
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e007      	b.n	8001432 <init_register_map+0x1e>
		RegMap->RegisterArray[i].RegData = 0;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	2100      	movs	r1, #0
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < DVC_TOTAL_REGISTER_NUMBER; i++){
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2bff      	cmp	r3, #255	@ 0xff
 8001436:	ddf4      	ble.n	8001422 <init_register_map+0xe>
	}
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <get_register>:

uint32_t get_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr){
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
	return (REG_DATA_MASK & RegMap->RegisterArray[reg_addr].RegData);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001458:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <set_register>:

void set_register(RegisterMap_TypeDef* RegMap, uint32_t reg_addr, uint32_t data){
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	RegMap->RegisterArray[reg_addr].RegData = (REG_DATA_MASK & data);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <set_ad9833_dds_buffer>:
 *      Author: User
 */
#include "main.h"
#include "device_sourcing.h"

void set_ad9833_dds_buffer(uint8_t *buffer, uint32_t freq_28b) {
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
	// Combine 14 MSBs and 14 LSBs
//    uint32_t freq_28b = ((freq_14msb & 0x3FFF) << 14) | (freq_14lsb & 0x3FFF);
    // Populate the buffer according to the command sequence
    buffer[0] = 0x21; buffer[1] = 0x00; // Control Register
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2221      	movs	r2, #33	@ 0x21
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3301      	adds	r3, #1
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x40 | ((freq_28b >> 8) & 0x3F); // Frequency Register 0 LSB
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3302      	adds	r3, #2
 80014b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
    buffer[3] = freq_28b & 0xFF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3303      	adds	r3, #3
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x40 | ((freq_28b >> 22) & 0x3F); // Frequency Register 0 MSB
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	0d9b      	lsrs	r3, r3, #22
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3304      	adds	r3, #4
 80014d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
    buffer[5] = (freq_28b >> 14) & 0xFF;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	0b9a      	lsrs	r2, r3, #14
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3305      	adds	r3, #5
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
    buffer[6] = 0xC0; buffer[7] = 0x00; // Phase Register 0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3306      	adds	r3, #6
 80014f0:	22c0      	movs	r2, #192	@ 0xc0
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3307      	adds	r3, #7
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
    buffer[8] = 0x20; buffer[9] = 0x00; // Exit Reset
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3308      	adds	r3, #8
 8001500:	2220      	movs	r2, #32
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3309      	adds	r3, #9
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <set_pot_buffer>:

void set_pot_buffer(uint8_t *buffer, uint32_t cmd, uint32_t value) {
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
    buffer[0] = cmd;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	701a      	strb	r2, [r3, #0]
    buffer[1] = value;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3301      	adds	r3, #1
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <config_dds_freq>:

HAL_StatusTypeDef config_dds_freq(SPI_HandleTypeDef *hspi, uint8_t *buffer){
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	result = HAL_SPI_Transmit(hspi, buffer, 10, 1000);
 800154c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001550:	220a      	movs	r2, #10
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f006 f9db 	bl	8007910 <HAL_SPI_Transmit>
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 800155e:	2064      	movs	r0, #100	@ 0x64
 8001560:	f000 fd0c 	bl	8001f7c <HAL_Delay>
	return result;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <config_volt_src_gain>:

HAL_StatusTypeDef config_volt_src_gain(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 800156e:	b580      	push	{r7, lr}
 8001570:	b088      	sub	sp, #32
 8001572:	af02      	add	r7, sp, #8
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	460b      	mov	r3, r1
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 800157c:	8979      	ldrh	r1, [r7, #10]
 800157e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2302      	movs	r3, #2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f002 f84b 	bl	8003624 <HAL_I2C_Master_Transmit>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8001592:	2064      	movs	r0, #100	@ 0x64
 8001594:	f000 fcf2 	bl	8001f7c <HAL_Delay>
	return result;
 8001598:	7dfb      	ldrb	r3, [r7, #23]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <config_volt_src_offset>:

HAL_StatusTypeDef config_volt_src_offset(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b088      	sub	sp, #32
 80015a6:	af02      	add	r7, sp, #8
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	460b      	mov	r3, r1
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 80015b0:	8979      	ldrh	r1, [r7, #10]
 80015b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2302      	movs	r3, #2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f002 f831 	bl	8003624 <HAL_I2C_Master_Transmit>
 80015c2:	4603      	mov	r3, r0
 80015c4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80015c6:	2064      	movs	r0, #100	@ 0x64
 80015c8:	f000 fcd8 	bl	8001f7c <HAL_Delay>
	return result;
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <config_current_mirror>:

HAL_StatusTypeDef config_current_mirror(I2C_HandleTypeDef *hi2c, uint16_t pot_addr, uint8_t *buffer){
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b088      	sub	sp, #32
 80015da:	af02      	add	r7, sp, #8
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	460b      	mov	r3, r1
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(hi2c, pot_addr, buffer, 2, 1000);
 80015e4:	8979      	ldrh	r1, [r7, #10]
 80015e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2302      	movs	r3, #2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f002 f817 	bl	8003624 <HAL_I2C_Master_Transmit>
 80015f6:	4603      	mov	r3, r0
 80015f8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80015fa:	2064      	movs	r0, #100	@ 0x64
 80015fc:	f000 fcbe 	bl	8001f7c <HAL_Delay>
	return result;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <dvc_exec_msr_dc_resistance_2p>:
extern uint16_t adc_samples_3[DVC_MAX_NUM_ADC_SAMPLES];

extern RegisterMap_TypeDef device_registers;
extern SwitchNetwork_TypeDef device_switch_network;

void dvc_exec_msr_dc_resistance_2p(void){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	uint32_t pot_val;
	pot_val = get_register(&device_registers,DVC_2PM_DCRESISTANCE_1);
 8001612:	2103      	movs	r1, #3
 8001614:	4814      	ldr	r0, [pc, #80]	@ (8001668 <dvc_exec_msr_dc_resistance_2p+0x5c>)
 8001616:	f7ff ff16 	bl	8001446 <get_register>
 800161a:	6078      	str	r0, [r7, #4]
	set_pot_buffer(curr_mrr_i2c_tx_buf,DVC_POT_AD5245_WP_WR_CMD,pot_val);
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	2100      	movs	r1, #0
 8001620:	4812      	ldr	r0, [pc, #72]	@ (800166c <dvc_exec_msr_dc_resistance_2p+0x60>)
 8001622:	f7ff ff79 	bl	8001518 <set_pot_buffer>
	map_switch_network(&device_switch_network,get_register(&device_registers,DVC_PROBE_CONFIG));
 8001626:	2102      	movs	r1, #2
 8001628:	480f      	ldr	r0, [pc, #60]	@ (8001668 <dvc_exec_msr_dc_resistance_2p+0x5c>)
 800162a:	f7ff ff0c 	bl	8001446 <get_register>
 800162e:	4603      	mov	r3, r0
 8001630:	4619      	mov	r1, r3
 8001632:	480f      	ldr	r0, [pc, #60]	@ (8001670 <dvc_exec_msr_dc_resistance_2p+0x64>)
 8001634:	f000 fa2a 	bl	8001a8c <map_switch_network>
	set_switch_network(&device_switch_network);
 8001638:	480d      	ldr	r0, [pc, #52]	@ (8001670 <dvc_exec_msr_dc_resistance_2p+0x64>)
 800163a:	f000 f9f1 	bl	8001a20 <set_switch_network>
	config_current_mirror(&hi2c2,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
 800163e:	4a0b      	ldr	r2, [pc, #44]	@ (800166c <dvc_exec_msr_dc_resistance_2p+0x60>)
 8001640:	2158      	movs	r1, #88	@ 0x58
 8001642:	480c      	ldr	r0, [pc, #48]	@ (8001674 <dvc_exec_msr_dc_resistance_2p+0x68>)
 8001644:	f7ff ffc7 	bl	80015d6 <config_current_mirror>
	HAL_Delay(2000);
 8001648:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800164c:	f000 fc96 	bl	8001f7c <HAL_Delay>
	collect_adc_samples(&handle_GPDMA1_Channel12,2,adc_samples_2);
 8001650:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <dvc_exec_msr_dc_resistance_2p+0x6c>)
 8001652:	2102      	movs	r1, #2
 8001654:	4809      	ldr	r0, [pc, #36]	@ (800167c <dvc_exec_msr_dc_resistance_2p+0x70>)
 8001656:	f7ff fe43 	bl	80012e0 <collect_adc_samples>
	clear_switch_network(&device_switch_network);
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <dvc_exec_msr_dc_resistance_2p+0x64>)
 800165c:	f000 f9a6 	bl	80019ac <clear_switch_network>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000ca6c 	.word	0x2000ca6c
 800166c:	20000018 	.word	0x20000018
 8001670:	2000ce6c 	.word	0x2000ce6c
 8001674:	200002fc 	.word	0x200002fc
 8001678:	20004a6c 	.word	0x20004a6c
 800167c:	20000510 	.word	0x20000510

08001680 <dvc_exec_msr_current_voltage>:

void dvc_exec_msr_current_voltage(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	uint32_t pot_val_gain, pot_val_offset, dac_sel, dds_val;

	dac_sel = get_register(&device_registers,DVC_2PM_CURRVOLT_1);
 8001686:	2104      	movs	r1, #4
 8001688:	4828      	ldr	r0, [pc, #160]	@ (800172c <dvc_exec_msr_current_voltage+0xac>)
 800168a:	f7ff fedc 	bl	8001446 <get_register>
 800168e:	6178      	str	r0, [r7, #20]
	pot_val_gain = get_register(&device_registers,DVC_2PM_CURRVOLT_2);
 8001690:	2105      	movs	r1, #5
 8001692:	4826      	ldr	r0, [pc, #152]	@ (800172c <dvc_exec_msr_current_voltage+0xac>)
 8001694:	f7ff fed7 	bl	8001446 <get_register>
 8001698:	6138      	str	r0, [r7, #16]
	pot_val_offset = get_register(&device_registers,DVC_2PM_CURRVOLT_3);
 800169a:	2106      	movs	r1, #6
 800169c:	4823      	ldr	r0, [pc, #140]	@ (800172c <dvc_exec_msr_current_voltage+0xac>)
 800169e:	f7ff fed2 	bl	8001446 <get_register>
 80016a2:	60f8      	str	r0, [r7, #12]
	dds_val = get_register(&device_registers,DVC_2PM_CURRVOLT_4);
 80016a4:	2107      	movs	r1, #7
 80016a6:	4821      	ldr	r0, [pc, #132]	@ (800172c <dvc_exec_msr_current_voltage+0xac>)
 80016a8:	f7ff fecd 	bl	8001446 <get_register>
 80016ac:	60b8      	str	r0, [r7, #8]

	set_ad9833_dds_buffer(volt_src_dds_spi_tx_buf,dds_val);
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	481f      	ldr	r0, [pc, #124]	@ (8001730 <dvc_exec_msr_current_voltage+0xb0>)
 80016b2:	f7ff feec 	bl	800148e <set_ad9833_dds_buffer>
	set_pot_buffer(volt_src_gain_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_gain);
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	2100      	movs	r1, #0
 80016ba:	481e      	ldr	r0, [pc, #120]	@ (8001734 <dvc_exec_msr_current_voltage+0xb4>)
 80016bc:	f7ff ff2c 	bl	8001518 <set_pot_buffer>
	set_pot_buffer(volt_src_offset_i2c_tx_buf,DVC_POT_MCP4531_WP0_WR_CMD,pot_val_offset);
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	2100      	movs	r1, #0
 80016c4:	481c      	ldr	r0, [pc, #112]	@ (8001738 <dvc_exec_msr_current_voltage+0xb8>)
 80016c6:	f7ff ff27 	bl	8001518 <set_pot_buffer>
	if(dac_sel){
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d014      	beq.n	80016fa <dvc_exec_msr_current_voltage+0x7a>
		result = config_volt_src_gain(&hi2c3,DVC_VOLT_SRC_1_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 80016d0:	4a18      	ldr	r2, [pc, #96]	@ (8001734 <dvc_exec_msr_current_voltage+0xb4>)
 80016d2:	215e      	movs	r1, #94	@ 0x5e
 80016d4:	4819      	ldr	r0, [pc, #100]	@ (800173c <dvc_exec_msr_current_voltage+0xbc>)
 80016d6:	f7ff ff4a 	bl	800156e <config_volt_src_gain>
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
		result = config_volt_src_offset(&hi2c3,DVC_VOLT_SRC_1_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 80016de:	4a16      	ldr	r2, [pc, #88]	@ (8001738 <dvc_exec_msr_current_voltage+0xb8>)
 80016e0:	215c      	movs	r1, #92	@ 0x5c
 80016e2:	4816      	ldr	r0, [pc, #88]	@ (800173c <dvc_exec_msr_current_voltage+0xbc>)
 80016e4:	f7ff ff5d 	bl	80015a2 <config_volt_src_offset>
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
		result = config_dds_freq(&hspi2,volt_src_dds_spi_tx_buf);
 80016ec:	4910      	ldr	r1, [pc, #64]	@ (8001730 <dvc_exec_msr_current_voltage+0xb0>)
 80016ee:	4814      	ldr	r0, [pc, #80]	@ (8001740 <dvc_exec_msr_current_voltage+0xc0>)
 80016f0:	f7ff ff27 	bl	8001542 <config_dds_freq>
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
//	set_switch_network(&device_switch_network);
//	config_current_mirror(&hi2c2,DVC_CURR_MRR_POT_I2C_ADDR,curr_mrr_i2c_tx_buf);
//	HAL_Delay(5000);
//	collect_adc_samples(&handle_GPDMA1_Channel12,2,adc_samples_2);
//	clear_switch_network(&device_switch_network);
}
 80016f8:	e013      	b.n	8001722 <dvc_exec_msr_current_voltage+0xa2>
		result = config_volt_src_gain(&hi2c2,DVC_VOLT_SRC_2_AMP_POT_I2C_ADDR,volt_src_gain_i2c_tx_buf);
 80016fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001734 <dvc_exec_msr_current_voltage+0xb4>)
 80016fc:	215c      	movs	r1, #92	@ 0x5c
 80016fe:	4811      	ldr	r0, [pc, #68]	@ (8001744 <dvc_exec_msr_current_voltage+0xc4>)
 8001700:	f7ff ff35 	bl	800156e <config_volt_src_gain>
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
		result = config_volt_src_offset(&hi2c2,DVC_VOLT_SRC_2_OFS_POT_I2C_ADDR,volt_src_offset_i2c_tx_buf);
 8001708:	4a0b      	ldr	r2, [pc, #44]	@ (8001738 <dvc_exec_msr_current_voltage+0xb8>)
 800170a:	215e      	movs	r1, #94	@ 0x5e
 800170c:	480d      	ldr	r0, [pc, #52]	@ (8001744 <dvc_exec_msr_current_voltage+0xc4>)
 800170e:	f7ff ff48 	bl	80015a2 <config_volt_src_offset>
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
		result = config_dds_freq(&hspi1,volt_src_dds_spi_tx_buf);
 8001716:	4906      	ldr	r1, [pc, #24]	@ (8001730 <dvc_exec_msr_current_voltage+0xb0>)
 8001718:	480b      	ldr	r0, [pc, #44]	@ (8001748 <dvc_exec_msr_current_voltage+0xc8>)
 800171a:	f7ff ff12 	bl	8001542 <config_dds_freq>
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000ca6c 	.word	0x2000ca6c
 8001730:	20000004 	.word	0x20000004
 8001734:	20000010 	.word	0x20000010
 8001738:	20000014 	.word	0x20000014
 800173c:	20000350 	.word	0x20000350
 8001740:	20000434 	.word	0x20000434
 8001744:	200002fc 	.word	0x200002fc
 8001748:	200003a4 	.word	0x200003a4

0800174c <dvc_exec_msr_capacitance_voltage_2p>:

void dvc_exec_msr_capacitance_voltage_2p(void){
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <dvc_exec_msr_impedance_spectroscopy_2p>:

void dvc_exec_msr_impedance_spectroscopy_2p(void){
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <dvc_exec_msr_transfer_characteristics>:

void dvc_exec_msr_transfer_characteristics(void){
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <dvc_exec_msr_output_characteristics>:

void dvc_exec_msr_output_characteristics(void){
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <dvc_exec_msr_capacitance_voltage_3p>:

void dvc_exec_msr_capacitance_voltage_3p(void){
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <dvc_exec_msr_electrochemical>:

void dvc_exec_msr_electrochemical(void){
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <dvc_exec_msr_low_resistance>:

void dvc_exec_msr_low_resistance(void){
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <dvc_exec_msr_dc_resistance_4p>:

void dvc_exec_msr_dc_resistance_4p(void){
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <dvc_exec_msr_impedance_spectroscopy_4p>:

void dvc_exec_msr_impedance_spectroscopy_4p(void){
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <run_device>:
uint8_t spi_tx_buf_dac_2_freq[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

RegisterMap_TypeDef device_registers;
SwitchNetwork_TypeDef device_switch_network;

void run_device(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	MeasurementCfg_Type measurement_type = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	70fb      	strb	r3, [r7, #3]

	init_register_map(&device_registers);
 80017d6:	4843      	ldr	r0, [pc, #268]	@ (80018e4 <run_device+0x118>)
 80017d8:	f7ff fe1c 	bl	8001414 <init_register_map>
	init_switch_network(&device_switch_network);
 80017dc:	4842      	ldr	r0, [pc, #264]	@ (80018e8 <run_device+0x11c>)
 80017de:	f000 f88d 	bl	80018fc <init_switch_network>
	clear_switch_network(&device_switch_network);
 80017e2:	4841      	ldr	r0, [pc, #260]	@ (80018e8 <run_device+0x11c>)
 80017e4:	f000 f8e2 	bl	80019ac <clear_switch_network>
	set_adc_sampling_freq(5000000UL);
 80017e8:	4840      	ldr	r0, [pc, #256]	@ (80018ec <run_device+0x120>)
 80017ea:	f7ff fd4f 	bl	800128c <set_adc_sampling_freq>
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	e014      	b.n	800181e <run_device+0x52>
		adc_samples_1[i] = 0xdead;
 80017f4:	4a3e      	ldr	r2, [pc, #248]	@ (80018f0 <run_device+0x124>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 80017fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_2[i] = 0xdead;
 8001800:	4a3c      	ldr	r2, [pc, #240]	@ (80018f4 <run_device+0x128>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 8001808:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_samples_3[i] = 0xdead;
 800180c:	4a3a      	ldr	r2, [pc, #232]	@ (80018f8 <run_device+0x12c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f64d 61ad 	movw	r1, #57005	@ 0xdead
 8001814:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < DVC_MAX_NUM_ADC_SAMPLES; i++){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3301      	adds	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001824:	dbe6      	blt.n	80017f4 <run_device+0x28>
//			for(int i = 0; i < 500; i++){
//				CDC_Transmit_FS(&dmaValCheck[i],sizeof(dmaValCheck[i]));
//				HAL_Delay(100);
//			}
//		}
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 8001826:	2101      	movs	r1, #1
 8001828:	482e      	ldr	r0, [pc, #184]	@ (80018e4 <run_device+0x118>)
 800182a:	f7ff fe0c 	bl	8001446 <get_register>
 800182e:	4603      	mov	r3, r0
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f6      	beq.n	8001826 <run_device+0x5a>
			measurement_type = (get_register(&device_registers,DVC_MEASUREMENT_CONFIG)>>6) & 0xF;
 8001838:	2101      	movs	r1, #1
 800183a:	482a      	ldr	r0, [pc, #168]	@ (80018e4 <run_device+0x118>)
 800183c:	f7ff fe03 	bl	8001446 <get_register>
 8001840:	4603      	mov	r3, r0
 8001842:	099b      	lsrs	r3, r3, #6
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	70fb      	strb	r3, [r7, #3]
			switch (measurement_type) {
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	3b01      	subs	r3, #1
 8001850:	2b0a      	cmp	r3, #10
 8001852:	d844      	bhi.n	80018de <run_device+0x112>
 8001854:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <run_device+0x90>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	08001889 	.word	0x08001889
 8001860:	08001899 	.word	0x08001899
 8001864:	080018a9 	.word	0x080018a9
 8001868:	080018af 	.word	0x080018af
 800186c:	080018b5 	.word	0x080018b5
 8001870:	080018bb 	.word	0x080018bb
 8001874:	080018c1 	.word	0x080018c1
 8001878:	080018c7 	.word	0x080018c7
 800187c:	080018cd 	.word	0x080018cd
 8001880:	080018d3 	.word	0x080018d3
 8001884:	080018d9 	.word	0x080018d9
				case DC_RESISTANCE:
					dvc_exec_msr_dc_resistance_2p();
 8001888:	f7ff fec0 	bl	800160c <dvc_exec_msr_dc_resistance_2p>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 800188c:	2200      	movs	r2, #0
 800188e:	2101      	movs	r1, #1
 8001890:	4814      	ldr	r0, [pc, #80]	@ (80018e4 <run_device+0x118>)
 8001892:	f7ff fde9 	bl	8001468 <set_register>
					break;
 8001896:	e023      	b.n	80018e0 <run_device+0x114>
				case CURRENT_VOLTAGE:
					dvc_exec_msr_current_voltage();
 8001898:	f7ff fef2 	bl	8001680 <dvc_exec_msr_current_voltage>
					set_register(&device_registers,DVC_MEASUREMENT_CONFIG,0);
 800189c:	2200      	movs	r2, #0
 800189e:	2101      	movs	r1, #1
 80018a0:	4810      	ldr	r0, [pc, #64]	@ (80018e4 <run_device+0x118>)
 80018a2:	f7ff fde1 	bl	8001468 <set_register>
					break;
 80018a6:	e01b      	b.n	80018e0 <run_device+0x114>
				case CAPACITANCE_VOLTAGE_2P:
					dvc_exec_msr_capacitance_voltage_2p();
 80018a8:	f7ff ff50 	bl	800174c <dvc_exec_msr_capacitance_voltage_2p>
					break;
 80018ac:	e018      	b.n	80018e0 <run_device+0x114>
				case IMPEDANCE_SPECTROSCOPY_2P:
					dvc_exec_msr_impedance_spectroscopy_2p();
 80018ae:	f7ff ff54 	bl	800175a <dvc_exec_msr_impedance_spectroscopy_2p>
					break;
 80018b2:	e015      	b.n	80018e0 <run_device+0x114>
				case TRANSFER_CHARACTERISTICS:
					dvc_exec_msr_transfer_characteristics();
 80018b4:	f7ff ff58 	bl	8001768 <dvc_exec_msr_transfer_characteristics>
					break;
 80018b8:	e012      	b.n	80018e0 <run_device+0x114>
				case OUTPUT_CHARACTERISTICS:
					dvc_exec_msr_output_characteristics();
 80018ba:	f7ff ff5c 	bl	8001776 <dvc_exec_msr_output_characteristics>
					break;
 80018be:	e00f      	b.n	80018e0 <run_device+0x114>
				case CAPACITANCE_VOLTAGE_3P:
					dvc_exec_msr_capacitance_voltage_3p();
 80018c0:	f7ff ff60 	bl	8001784 <dvc_exec_msr_capacitance_voltage_3p>
					break;
 80018c4:	e00c      	b.n	80018e0 <run_device+0x114>
				case ELECTROCHEMICAL:
					dvc_exec_msr_electrochemical();
 80018c6:	f7ff ff64 	bl	8001792 <dvc_exec_msr_electrochemical>
					break;
 80018ca:	e009      	b.n	80018e0 <run_device+0x114>
				case LOW_RESISTANCE:
					dvc_exec_msr_low_resistance();
 80018cc:	f7ff ff68 	bl	80017a0 <dvc_exec_msr_low_resistance>
					break;
 80018d0:	e006      	b.n	80018e0 <run_device+0x114>
				case PROBE_RESISTANCE:
					dvc_exec_msr_dc_resistance_4p();
 80018d2:	f7ff ff6c 	bl	80017ae <dvc_exec_msr_dc_resistance_4p>
					break;
 80018d6:	e003      	b.n	80018e0 <run_device+0x114>
				case IMPEDANCE_SPECTROSCOPY_4P:
					dvc_exec_msr_impedance_spectroscopy_4p();
 80018d8:	f7ff ff70 	bl	80017bc <dvc_exec_msr_impedance_spectroscopy_4p>
					break;
 80018dc:	e000      	b.n	80018e0 <run_device+0x114>
				default:
					break;
 80018de:	bf00      	nop
		if(get_register(&device_registers,DVC_MEASUREMENT_CONFIG)%2){
 80018e0:	e7a1      	b.n	8001826 <run_device+0x5a>
 80018e2:	bf00      	nop
 80018e4:	2000ca6c 	.word	0x2000ca6c
 80018e8:	2000ce6c 	.word	0x2000ce6c
 80018ec:	004c4b40 	.word	0x004c4b40
 80018f0:	20000a6c 	.word	0x20000a6c
 80018f4:	20004a6c 	.word	0x20004a6c
 80018f8:	20008a6c 	.word	0x20008a6c

080018fc <init_switch_network>:
        ,SWNT_CTRL_09_Pin,SWNT_CTRL_10_Pin,SWNT_CTRL_11_Pin,SWNT_CTRL_12_Pin
        ,SWNT_CTRL_13_Pin,SWNT_CTRL_14_Pin,SWNT_CTRL_15_Pin,SWNT_CTRL_16_Pin
		,SWNT_CTRL_17_Pin,SWNT_CTRL_18_Pin,SWNT_CTRL_19_Pin,SWNT_CTRL_20_Pin
		,SWNT_CTRL_21_Pin};

void init_switch_network(SwitchNetwork_TypeDef* switch_network){
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001904:	2301      	movs	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	e040      	b.n	800198c <init_switch_network+0x90>
		switch_network->Relays[i].RelayId = i;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	b2d8      	uxtb	r0, r3
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	4602      	mov	r2, r0
 800191e:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].AssociatedProbe = 0;
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3301      	adds	r3, #1
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3302      	adds	r3, #2
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
		switch_network->Relays[i].AssociatedGPIOPort = (i < 17) ? GPIOG : GPIOD;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b10      	cmp	r3, #16
 800194c:	dc01      	bgt.n	8001952 <init_switch_network+0x56>
 800194e:	4914      	ldr	r1, [pc, #80]	@ (80019a0 <init_switch_network+0xa4>)
 8001950:	e000      	b.n	8001954 <init_switch_network+0x58>
 8001952:	4914      	ldr	r1, [pc, #80]	@ (80019a4 <init_switch_network+0xa8>)
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4403      	add	r3, r0
 8001962:	3304      	adds	r3, #4
 8001964:	6019      	str	r1, [r3, #0]
		switch_network->Relays[i].AssociatedGPIO = swnt_pin_list[i-1];
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3b01      	subs	r3, #1
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <init_switch_network+0xac>)
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	b298      	uxth	r0, r3
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	3308      	adds	r3, #8
 8001982:	4602      	mov	r2, r0
 8001984:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3301      	adds	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b15      	cmp	r3, #21
 8001990:	ddbb      	ble.n	800190a <init_switch_network+0xe>
	}
	return;
 8001992:	bf00      	nop
}
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	42021800 	.word	0x42021800
 80019a4:	42020c00 	.word	0x42020c00
 80019a8:	2000001c 	.word	0x2000001c

080019ac <clear_switch_network>:

void clear_switch_network(SwitchNetwork_TypeDef* switch_network){
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 80019b4:	2301      	movs	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e02b      	b.n	8001a12 <clear_switch_network+0x66>
		switch_network->Relays[i].RelayState = GPIO_PIN_RESET;
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	3302      	adds	r3, #2
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(switch_network->Relays[i].AssociatedGPIOPort,
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	3304      	adds	r3, #4
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	3308      	adds	r3, #8
 80019f0:	881c      	ldrh	r4, [r3, #0]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3302      	adds	r3, #2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f001 fd58 	bl	80034bc <HAL_GPIO_WritePin>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b15      	cmp	r3, #21
 8001a16:	ddd0      	ble.n	80019ba <clear_switch_network+0xe>
						  switch_network->Relays[i].AssociatedGPIO,
						  switch_network->Relays[i].RelayState);
	}
	return;
 8001a18:	bf00      	nop
}
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}

08001a20 <set_switch_network>:
void set_switch_network(SwitchNetwork_TypeDef* switch_network){
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	if(!switch_network->ValidSwitchNetwork) return;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d028      	beq.n	8001a84 <set_switch_network+0x64>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001a32:	2301      	movs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	e021      	b.n	8001a7c <set_switch_network+0x5c>
		HAL_GPIO_WritePin(switch_network->Relays[i].AssociatedGPIOPort,
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	3304      	adds	r3, #4
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	3308      	adds	r3, #8
 8001a5a:	881c      	ldrh	r4, [r3, #0]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	f001 fd23 	bl	80034bc <HAL_GPIO_WritePin>
	for(int i = 1; i <= DVC_TOTAL_RELAY_COUNT; i++){
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b15      	cmp	r3, #21
 8001a80:	ddda      	ble.n	8001a38 <set_switch_network+0x18>
						  switch_network->Relays[i].AssociatedGPIO,
						  switch_network->Relays[i].RelayState);
	}
	return;
 8001a82:	e000      	b.n	8001a86 <set_switch_network+0x66>
	if(!switch_network->ValidSwitchNetwork) return;
 8001a84:	bf00      	nop
}
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <map_switch_network>:
void map_switch_network(SwitchNetwork_TypeDef* switch_network, uint32_t switch_network_config){
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
	// set the basic flags
	switch_network->ValidSwitchNetwork = 1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	uint8_t volt_src_1_used = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	77fb      	strb	r3, [r7, #31]
	uint8_t adc_1_used = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	777b      	strb	r3, [r7, #29]
	uint8_t adc_2_used = 0;	// only ADC2 can do current sensing and has prio over adc1
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	77bb      	strb	r3, [r7, #30]
	uint8_t adc_3_used = 0; // not populated on PCB yet
 8001aaa:	2300      	movs	r3, #0
 8001aac:	773b      	strb	r3, [r7, #28]
	uint8_t used_probes = switch_network_config & 0x0F;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	76fb      	strb	r3, [r7, #27]

	// decode configuration values
	uint8_t probe_1_cfg = (switch_network_config >> 4) & 0x1F;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	76bb      	strb	r3, [r7, #26]
	uint8_t probe_2_cfg = (switch_network_config >> 9) & 0x1F;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	767b      	strb	r3, [r7, #25]
	uint8_t probe_3_cfg = (switch_network_config >> 14)& 0x1F;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	0b9b      	lsrs	r3, r3, #14
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	763b      	strb	r3, [r7, #24]
	uint8_t probe_4_cfg = (switch_network_config >> 19)& 0x1F;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	0cdb      	lsrs	r3, r3, #19
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	75fb      	strb	r3, [r7, #23]

	// decode source configurations
	uint8_t probe_1_cfg_src = (probe_1_cfg >> 2) & 0x07;
 8001ae8:	7ebb      	ldrb	r3, [r7, #26]
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	75bb      	strb	r3, [r7, #22]
	uint8_t probe_2_cfg_src = (probe_2_cfg >> 2) & 0x07;
 8001af4:	7e7b      	ldrb	r3, [r7, #25]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	757b      	strb	r3, [r7, #21]
	uint8_t probe_3_cfg_src = (probe_3_cfg >> 2) & 0x07;
 8001b00:	7e3b      	ldrb	r3, [r7, #24]
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	753b      	strb	r3, [r7, #20]
	uint8_t probe_4_cfg_src = (probe_4_cfg >> 2) & 0x07;
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	74fb      	strb	r3, [r7, #19]

	// decode monitor configurations
	uint8_t probe_1_cfg_mon = (probe_1_cfg) & 0x03;
 8001b18:	7ebb      	ldrb	r3, [r7, #26]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	74bb      	strb	r3, [r7, #18]
	uint8_t probe_2_cfg_mon = (probe_2_cfg) & 0x03;
 8001b20:	7e7b      	ldrb	r3, [r7, #25]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	747b      	strb	r3, [r7, #17]
	uint8_t probe_3_cfg_mon = (probe_3_cfg) & 0x03;
 8001b28:	7e3b      	ldrb	r3, [r7, #24]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	743b      	strb	r3, [r7, #16]
	uint8_t probe_4_cfg_mon = (probe_4_cfg) & 0x03;
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	73fb      	strb	r3, [r7, #15]

	// --------------------------------------------------------------------
	// PROBE 1 CFG
	if(used_probes & 0x01){
 8001b38:	7efb      	ldrb	r3, [r7, #27]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d041      	beq.n	8001bc6 <map_switch_network+0x13a>
		if(probe_1_cfg_src == 0){}
 8001b42:	7dbb      	ldrb	r3, [r7, #22]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d02e      	beq.n	8001ba6 <map_switch_network+0x11a>
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_DCV){
 8001b48:	7dbb      	ldrb	r3, [r7, #22]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d10c      	bne.n	8001b68 <map_switch_network+0xdc>
			if(!volt_src_1_used){
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <map_switch_network+0xd4>
				switch_network->Relays[1].RelayState = GPIO_PIN_SET;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	739a      	strb	r2, [r3, #14]
				volt_src_1_used = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	77fb      	strb	r3, [r7, #31]
 8001b5e:	e022      	b.n	8001ba6 <map_switch_network+0x11a>
			}
			else{
				switch_network->Relays[2].RelayState = GPIO_PIN_SET;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	769a      	strb	r2, [r3, #26]
 8001b66:	e01e      	b.n	8001ba6 <map_switch_network+0x11a>
			}
		}
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_ACV){
 8001b68:	7dbb      	ldrb	r3, [r7, #22]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d10c      	bne.n	8001b88 <map_switch_network+0xfc>
			if(!volt_src_1_used){
 8001b6e:	7ffb      	ldrb	r3, [r7, #31]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <map_switch_network+0xf4>
				switch_network->Relays[1].RelayState = GPIO_PIN_SET;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	739a      	strb	r2, [r3, #14]
				volt_src_1_used = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	77fb      	strb	r3, [r7, #31]
 8001b7e:	e012      	b.n	8001ba6 <map_switch_network+0x11a>
			}
			else{
				switch_network->Relays[2].RelayState = GPIO_PIN_SET;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	769a      	strb	r2, [r3, #26]
 8001b86:	e00e      	b.n	8001ba6 <map_switch_network+0x11a>
			}
		}
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_CUR){
 8001b88:	7dbb      	ldrb	r3, [r7, #22]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d104      	bne.n	8001b98 <map_switch_network+0x10c>
			switch_network->Relays[3].RelayState = GPIO_PIN_SET;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8001b96:	e006      	b.n	8001ba6 <map_switch_network+0x11a>
		}
		else if(probe_1_cfg_src == DVC_PROBE_SUPPLY_GND){
 8001b98:	7dbb      	ldrb	r3, [r7, #22]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d103      	bne.n	8001ba6 <map_switch_network+0x11a>
			switch_network->Relays[4].RelayState = GPIO_PIN_SET;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		}

		if(probe_1_cfg_mon == 0){}
 8001ba6:	7cbb      	ldrb	r3, [r7, #18]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00c      	beq.n	8001bc6 <map_switch_network+0x13a>
		else if(probe_1_cfg_mon == DVC_PROBE_MEASURE_VOL){
 8001bac:	7cbb      	ldrb	r3, [r7, #18]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <map_switch_network+0x12c>
			adc_2_used = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	77bb      	strb	r3, [r7, #30]
 8001bb6:	e006      	b.n	8001bc6 <map_switch_network+0x13a>
		}
		else if(probe_1_cfg_mon == DVC_PROBE_MEASURE_CUR){
 8001bb8:	7cbb      	ldrb	r3, [r7, #18]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d103      	bne.n	8001bc6 <map_switch_network+0x13a>
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	}
	// --------------------------------------------------------------------

	// --------------------------------------------------------------------
	// PROBE 2 CFG
	if(used_probes & 0x02){
 8001bc6:	7efb      	ldrb	r3, [r7, #27]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d051      	beq.n	8001c74 <map_switch_network+0x1e8>
		if(probe_2_cfg_src == 0){}
 8001bd0:	7d7b      	ldrb	r3, [r7, #21]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d032      	beq.n	8001c3c <map_switch_network+0x1b0>
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_DCV){
 8001bd6:	7d7b      	ldrb	r3, [r7, #21]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10e      	bne.n	8001bfa <map_switch_network+0x16e>
			if(!volt_src_1_used){
 8001bdc:	7ffb      	ldrb	r3, [r7, #31]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <map_switch_network+0x164>
				switch_network->Relays[5].RelayState = GPIO_PIN_SET;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
				volt_src_1_used = 1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	77fb      	strb	r3, [r7, #31]
 8001bee:	e025      	b.n	8001c3c <map_switch_network+0x1b0>
			}
			else{
				switch_network->Relays[6].RelayState = GPIO_PIN_SET;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8001bf8:	e020      	b.n	8001c3c <map_switch_network+0x1b0>
			}
		}
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_ACV){
 8001bfa:	7d7b      	ldrb	r3, [r7, #21]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d10e      	bne.n	8001c1e <map_switch_network+0x192>
			if(!volt_src_1_used){
 8001c00:	7ffb      	ldrb	r3, [r7, #31]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <map_switch_network+0x188>
				switch_network->Relays[5].RelayState = GPIO_PIN_SET;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
				volt_src_1_used = 1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	77fb      	strb	r3, [r7, #31]
 8001c12:	e013      	b.n	8001c3c <map_switch_network+0x1b0>
			}
			else{
				switch_network->Relays[6].RelayState = GPIO_PIN_SET;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8001c1c:	e00e      	b.n	8001c3c <map_switch_network+0x1b0>
			}
		}
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_CUR){
 8001c1e:	7d7b      	ldrb	r3, [r7, #21]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d104      	bne.n	8001c2e <map_switch_network+0x1a2>
			switch_network->Relays[7].RelayState = GPIO_PIN_SET;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
 8001c2c:	e006      	b.n	8001c3c <map_switch_network+0x1b0>
		}
		else if(probe_2_cfg_src == DVC_PROBE_SUPPLY_GND){
 8001c2e:	7d7b      	ldrb	r3, [r7, #21]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d103      	bne.n	8001c3c <map_switch_network+0x1b0>
			switch_network->Relays[8].RelayState = GPIO_PIN_SET;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
		}

		if(probe_2_cfg_mon == 0){}
 8001c3c:	7c7b      	ldrb	r3, [r7, #17]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d018      	beq.n	8001c74 <map_switch_network+0x1e8>
		else if(probe_2_cfg_mon == DVC_PROBE_MEASURE_VOL){
 8001c42:	7c7b      	ldrb	r3, [r7, #17]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d10e      	bne.n	8001c66 <map_switch_network+0x1da>
			if(!adc_2_used){
 8001c48:	7fbb      	ldrb	r3, [r7, #30]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <map_switch_network+0x1d0>
				switch_network->Relays[18].RelayState = GPIO_PIN_SET;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				adc_2_used = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	77bb      	strb	r3, [r7, #30]
 8001c5a:	e00b      	b.n	8001c74 <map_switch_network+0x1e8>
			}
			else{
				switch_network->Relays[17].RelayState = GPIO_PIN_SET;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
 8001c64:	e006      	b.n	8001c74 <map_switch_network+0x1e8>
			}
		}
		else if(probe_2_cfg_mon == DVC_PROBE_MEASURE_CUR){
 8001c66:	7c7b      	ldrb	r3, [r7, #17]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d103      	bne.n	8001c74 <map_switch_network+0x1e8>
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	}
	// --------------------------------------------------------------------

	// --------------------------------------------------------------------
	// PROBE 3 CFG
	if(used_probes & 0x04){
 8001c74:	7efb      	ldrb	r3, [r7, #27]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d051      	beq.n	8001d22 <map_switch_network+0x296>
		if(probe_3_cfg_src == 0){}
 8001c7e:	7d3b      	ldrb	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d032      	beq.n	8001cea <map_switch_network+0x25e>
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_DCV){
 8001c84:	7d3b      	ldrb	r3, [r7, #20]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10e      	bne.n	8001ca8 <map_switch_network+0x21c>
			if(!volt_src_1_used){
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <map_switch_network+0x212>
				switch_network->Relays[9].RelayState = GPIO_PIN_SET;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
				volt_src_1_used = 1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
 8001c9c:	e025      	b.n	8001cea <map_switch_network+0x25e>
			}
			else{
				switch_network->Relays[10].RelayState = GPIO_PIN_SET;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 8001ca6:	e020      	b.n	8001cea <map_switch_network+0x25e>
			}
		}
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_ACV){
 8001ca8:	7d3b      	ldrb	r3, [r7, #20]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d10e      	bne.n	8001ccc <map_switch_network+0x240>
			if(!volt_src_1_used){
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d106      	bne.n	8001cc2 <map_switch_network+0x236>
				switch_network->Relays[9].RelayState = GPIO_PIN_SET;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
				volt_src_1_used = 1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	77fb      	strb	r3, [r7, #31]
 8001cc0:	e013      	b.n	8001cea <map_switch_network+0x25e>
			}
			else{
				switch_network->Relays[10].RelayState = GPIO_PIN_SET;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
 8001cca:	e00e      	b.n	8001cea <map_switch_network+0x25e>
			}
		}
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_CUR){
 8001ccc:	7d3b      	ldrb	r3, [r7, #20]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d104      	bne.n	8001cdc <map_switch_network+0x250>
			switch_network->Relays[11].RelayState = GPIO_PIN_SET;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001cda:	e006      	b.n	8001cea <map_switch_network+0x25e>
		}
		else if(probe_3_cfg_src == DVC_PROBE_SUPPLY_GND){
 8001cdc:	7d3b      	ldrb	r3, [r7, #20]
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d103      	bne.n	8001cea <map_switch_network+0x25e>
			switch_network->Relays[12].RelayState = GPIO_PIN_SET;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
		}

		if(probe_3_cfg_mon == 0){}
 8001cea:	7c3b      	ldrb	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d018      	beq.n	8001d22 <map_switch_network+0x296>
		else if(probe_3_cfg_mon == DVC_PROBE_MEASURE_VOL){
 8001cf0:	7c3b      	ldrb	r3, [r7, #16]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10e      	bne.n	8001d14 <map_switch_network+0x288>
			if(!adc_2_used){
 8001cf6:	7fbb      	ldrb	r3, [r7, #30]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d106      	bne.n	8001d0a <map_switch_network+0x27e>
				switch_network->Relays[20].RelayState = GPIO_PIN_SET;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
				adc_2_used = 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	77bb      	strb	r3, [r7, #30]
 8001d08:	e00b      	b.n	8001d22 <map_switch_network+0x296>
			}
			else{
				switch_network->Relays[19].RelayState = GPIO_PIN_SET;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
 8001d12:	e006      	b.n	8001d22 <map_switch_network+0x296>
			}
		}
		else if(probe_3_cfg_mon == DVC_PROBE_MEASURE_CUR){
 8001d14:	7c3b      	ldrb	r3, [r7, #16]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d103      	bne.n	8001d22 <map_switch_network+0x296>
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	}
	// --------------------------------------------------------------------

	// --------------------------------------------------------------------
	// PROBE 4 CFG
	if(used_probes & 0x08){
 8001d22:	7efb      	ldrb	r3, [r7, #27]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d05a      	beq.n	8001de2 <map_switch_network+0x356>
		if(probe_4_cfg_src == 0){}
 8001d2c:	7cfb      	ldrb	r3, [r7, #19]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d032      	beq.n	8001d98 <map_switch_network+0x30c>
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_DCV){
 8001d32:	7cfb      	ldrb	r3, [r7, #19]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10e      	bne.n	8001d56 <map_switch_network+0x2ca>
			if(!volt_src_1_used){
 8001d38:	7ffb      	ldrb	r3, [r7, #31]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <map_switch_network+0x2c0>
				switch_network->Relays[13].RelayState = GPIO_PIN_SET;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
				volt_src_1_used = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]
 8001d4a:	e025      	b.n	8001d98 <map_switch_network+0x30c>
			}
			else{
				switch_network->Relays[14].RelayState = GPIO_PIN_SET;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 8001d54:	e020      	b.n	8001d98 <map_switch_network+0x30c>
			}
		}
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_ACV){
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d10e      	bne.n	8001d7a <map_switch_network+0x2ee>
			if(!volt_src_1_used){
 8001d5c:	7ffb      	ldrb	r3, [r7, #31]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <map_switch_network+0x2e4>
				switch_network->Relays[13].RelayState = GPIO_PIN_SET;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
				volt_src_1_used = 1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	77fb      	strb	r3, [r7, #31]
 8001d6e:	e013      	b.n	8001d98 <map_switch_network+0x30c>
			}
			else{
				switch_network->Relays[14].RelayState = GPIO_PIN_SET;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 8001d78:	e00e      	b.n	8001d98 <map_switch_network+0x30c>
			}
		}
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_CUR){
 8001d7a:	7cfb      	ldrb	r3, [r7, #19]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d104      	bne.n	8001d8a <map_switch_network+0x2fe>
			switch_network->Relays[15].RelayState = GPIO_PIN_SET;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
 8001d88:	e006      	b.n	8001d98 <map_switch_network+0x30c>
		}
		else if(probe_4_cfg_src == DVC_PROBE_SUPPLY_GND){
 8001d8a:	7cfb      	ldrb	r3, [r7, #19]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d103      	bne.n	8001d98 <map_switch_network+0x30c>
			switch_network->Relays[16].RelayState = GPIO_PIN_SET;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		}

		if(probe_4_cfg_mon == 0){}
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d021      	beq.n	8001de2 <map_switch_network+0x356>
		else if(probe_4_cfg_mon == DVC_PROBE_MEASURE_VOL){
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d116      	bne.n	8001dd2 <map_switch_network+0x346>
			if(!adc_2_used){
 8001da4:	7fbb      	ldrb	r3, [r7, #30]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10a      	bne.n	8001dc0 <map_switch_network+0x334>
				switch_network->Relays[18].RelayState = GPIO_PIN_SET;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				switch_network->Relays[20].RelayState = GPIO_PIN_SET;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
				adc_2_used = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	77bb      	strb	r3, [r7, #30]
		else if(probe_4_cfg_mon == DVC_PROBE_MEASURE_CUR){
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
		}
	}
	// --------------------------------------------------------------------
	return;
 8001dbe:	e010      	b.n	8001de2 <map_switch_network+0x356>
				switch_network->Relays[17].RelayState = GPIO_PIN_SET;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
				switch_network->Relays[19].RelayState = GPIO_PIN_SET;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
	return;
 8001dd0:	e007      	b.n	8001de2 <map_switch_network+0x356>
		else if(probe_4_cfg_mon == DVC_PROBE_MEASURE_CUR){
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d104      	bne.n	8001de2 <map_switch_network+0x356>
			switch_network->Relays[21].RelayState = GPIO_PIN_SET;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	return;
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
}
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_Init+0x50>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a11      	ldr	r2, [pc, #68]	@ (8001e40 <HAL_Init+0x50>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 f98c 	bl	800211e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e06:	f004 fbf7 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_Init+0x54>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	490c      	ldr	r1, [pc, #48]	@ (8001e48 <HAL_Init+0x58>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e4c <HAL_Init+0x5c>)
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e20:	2004      	movs	r0, #4
 8001e22:	f000 f9d1 	bl	80021c8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e26:	200f      	movs	r0, #15
 8001e28:	f000 f812 	bl	8001e50 <HAL_InitTick>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e002      	b.n	8001e3c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e36:	f7fe fe7f 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40022000 	.word	0x40022000
 8001e44:	46020c00 	.word	0x46020c00
 8001e48:	0800cfac 	.word	0x0800cfac
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001e5c:	4b33      	ldr	r3, [pc, #204]	@ (8001f2c <HAL_InitTick+0xdc>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e05c      	b.n	8001f22 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001e68:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <HAL_InitTick+0xe0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d10c      	bne.n	8001e8e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001e74:	4b2f      	ldr	r3, [pc, #188]	@ (8001f34 <HAL_InitTick+0xe4>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b2c      	ldr	r3, [pc, #176]	@ (8001f2c <HAL_InitTick+0xdc>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e037      	b.n	8001efe <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001e8e:	f000 f9f3 	bl	8002278 <HAL_SYSTICK_GetCLKSourceConfig>
 8001e92:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d023      	beq.n	8001ee2 <HAL_InitTick+0x92>
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d82d      	bhi.n	8001efc <HAL_InitTick+0xac>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_InitTick+0x5e>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001eac:	e026      	b.n	8001efc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001eae:	4b21      	ldr	r3, [pc, #132]	@ (8001f34 <HAL_InitTick+0xe4>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <HAL_InitTick+0xdc>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ebc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	60fb      	str	r3, [r7, #12]
        break;
 8001ec6:	e01a      	b.n	8001efe <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ec8:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <HAL_InitTick+0xdc>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ed6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	60fb      	str	r3, [r7, #12]
        break;
 8001ee0:	e00d      	b.n	8001efe <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <HAL_InitTick+0xdc>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ef0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	60fb      	str	r3, [r7, #12]
        break;
 8001efa:	e000      	b.n	8001efe <HAL_InitTick+0xae>
        break;
 8001efc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f940 	bl	8002184 <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e009      	b.n	8001f22 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	f04f 30ff 	mov.w	r0, #4294967295
 8001f16:	f000 f90d 	bl	8002134 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001f1a:	4a07      	ldr	r2, [pc, #28]	@ (8001f38 <HAL_InitTick+0xe8>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000074 	.word	0x20000074
 8001f30:	e000e010 	.word	0xe000e010
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000070 	.word	0x20000070

08001f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000074 	.word	0x20000074
 8001f60:	2000cf78 	.word	0x2000cf78

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	2000cf78 	.word	0x2000cf78

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000074 	.word	0x20000074

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4907      	ldr	r1, [pc, #28]	@ (8002060 <__NVIC_EnableIRQ+0x38>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	@ (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	@ (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	@ 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	@ 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff4c 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002142:	f7ff ff63 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002146:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7ff ffb3 	bl	80020b8 <NVIC_EncodePriority>
 8002152:	4602      	mov	r2, r0
 8002154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff82 	bl	8002064 <__NVIC_SetPriority>
}
 8002160:	bf00      	nop
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff56 	bl	8002028 <__NVIC_EnableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002194:	d301      	bcc.n	800219a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002196:	2301      	movs	r3, #1
 8002198:	e00d      	b.n	80021b6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <HAL_SYSTICK_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <HAL_SYSTICK_Config+0x40>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_SYSTICK_Config+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <HAL_SYSTICK_Config+0x40>)
 80021ae:	f043 0303 	orr.w	r3, r3, #3
 80021b2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d844      	bhi.n	8002260 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80021d6:	a201      	add	r2, pc, #4	@ (adr r2, 80021dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	080021ff 	.word	0x080021ff
 80021e0:	0800221d 	.word	0x0800221d
 80021e4:	0800223f 	.word	0x0800223f
 80021e8:	08002261 	.word	0x08002261
 80021ec:	080021f1 	.word	0x080021f1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80021f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002270 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002270 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6013      	str	r3, [r2, #0]
      break;
 80021fc:	e031      	b.n	8002262 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800220a:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800220c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002210:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002212:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002216:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800221a:	e022      	b.n	8002262 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a13      	ldr	r2, [pc, #76]	@ (8002270 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002222:	f023 0304 	bic.w	r3, r3, #4
 8002226:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002232:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002234:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800223c:	e011      	b.n	8002262 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a0b      	ldr	r2, [pc, #44]	@ (8002270 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800224c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002250:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002254:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002256:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800225a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800225e:	e000      	b.n	8002262 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002260:	bf00      	nop
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010
 8002274:	46020c00 	.word	0x46020c00

08002278 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800227e:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800228a:	2304      	movs	r3, #4
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	e021      	b.n	80022d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002290:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002296:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800229a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022a2:	d011      	beq.n	80022c8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022aa:	d810      	bhi.n	80022ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022b8:	d003      	beq.n	80022c2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80022ba:	e008      	b.n	80022ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
        break;
 80022c0:	e008      	b.n	80022d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80022c2:	2301      	movs	r3, #1
 80022c4:	607b      	str	r3, [r7, #4]
        break;
 80022c6:	e005      	b.n	80022d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80022c8:	2302      	movs	r3, #2
 80022ca:	607b      	str	r3, [r7, #4]
        break;
 80022cc:	e002      	b.n	80022d4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
        break;
 80022d2:	bf00      	nop
    }
  }
  return systick_source;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010
 80022e8:	46020c00 	.word	0x46020c00

080022ec <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff fe36 	bl	8001f64 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0db      	b.n	80024bc <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6e      	ldr	r2, [pc, #440]	@ (80024c4 <HAL_DMA_Init+0x1d8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	f000 809f 	beq.w	800244e <HAL_DMA_Init+0x162>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a6c      	ldr	r2, [pc, #432]	@ (80024c8 <HAL_DMA_Init+0x1dc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	f000 8099 	beq.w	800244e <HAL_DMA_Init+0x162>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a6a      	ldr	r2, [pc, #424]	@ (80024cc <HAL_DMA_Init+0x1e0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	f000 8093 	beq.w	800244e <HAL_DMA_Init+0x162>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a68      	ldr	r2, [pc, #416]	@ (80024d0 <HAL_DMA_Init+0x1e4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	f000 808d 	beq.w	800244e <HAL_DMA_Init+0x162>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a66      	ldr	r2, [pc, #408]	@ (80024d4 <HAL_DMA_Init+0x1e8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	f000 8087 	beq.w	800244e <HAL_DMA_Init+0x162>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a64      	ldr	r2, [pc, #400]	@ (80024d8 <HAL_DMA_Init+0x1ec>)
 8002346:	4293      	cmp	r3, r2
 8002348:	f000 8081 	beq.w	800244e <HAL_DMA_Init+0x162>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a62      	ldr	r2, [pc, #392]	@ (80024dc <HAL_DMA_Init+0x1f0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d07b      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a61      	ldr	r2, [pc, #388]	@ (80024e0 <HAL_DMA_Init+0x1f4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d076      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5f      	ldr	r2, [pc, #380]	@ (80024e4 <HAL_DMA_Init+0x1f8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d071      	beq.n	800244e <HAL_DMA_Init+0x162>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a5e      	ldr	r2, [pc, #376]	@ (80024e8 <HAL_DMA_Init+0x1fc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d06c      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a5c      	ldr	r2, [pc, #368]	@ (80024ec <HAL_DMA_Init+0x200>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d067      	beq.n	800244e <HAL_DMA_Init+0x162>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a5b      	ldr	r2, [pc, #364]	@ (80024f0 <HAL_DMA_Init+0x204>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d062      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a59      	ldr	r2, [pc, #356]	@ (80024f4 <HAL_DMA_Init+0x208>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d05d      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a58      	ldr	r2, [pc, #352]	@ (80024f8 <HAL_DMA_Init+0x20c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d058      	beq.n	800244e <HAL_DMA_Init+0x162>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a56      	ldr	r2, [pc, #344]	@ (80024fc <HAL_DMA_Init+0x210>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d053      	beq.n	800244e <HAL_DMA_Init+0x162>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a55      	ldr	r2, [pc, #340]	@ (8002500 <HAL_DMA_Init+0x214>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d04e      	beq.n	800244e <HAL_DMA_Init+0x162>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a53      	ldr	r2, [pc, #332]	@ (8002504 <HAL_DMA_Init+0x218>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d049      	beq.n	800244e <HAL_DMA_Init+0x162>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <HAL_DMA_Init+0x21c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d044      	beq.n	800244e <HAL_DMA_Init+0x162>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a50      	ldr	r2, [pc, #320]	@ (800250c <HAL_DMA_Init+0x220>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d03f      	beq.n	800244e <HAL_DMA_Init+0x162>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002510 <HAL_DMA_Init+0x224>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d03a      	beq.n	800244e <HAL_DMA_Init+0x162>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002514 <HAL_DMA_Init+0x228>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d035      	beq.n	800244e <HAL_DMA_Init+0x162>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002518 <HAL_DMA_Init+0x22c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d030      	beq.n	800244e <HAL_DMA_Init+0x162>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a4a      	ldr	r2, [pc, #296]	@ (800251c <HAL_DMA_Init+0x230>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02b      	beq.n	800244e <HAL_DMA_Init+0x162>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a49      	ldr	r2, [pc, #292]	@ (8002520 <HAL_DMA_Init+0x234>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d026      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a47      	ldr	r2, [pc, #284]	@ (8002524 <HAL_DMA_Init+0x238>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d021      	beq.n	800244e <HAL_DMA_Init+0x162>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a46      	ldr	r2, [pc, #280]	@ (8002528 <HAL_DMA_Init+0x23c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d01c      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a44      	ldr	r2, [pc, #272]	@ (800252c <HAL_DMA_Init+0x240>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d017      	beq.n	800244e <HAL_DMA_Init+0x162>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a43      	ldr	r2, [pc, #268]	@ (8002530 <HAL_DMA_Init+0x244>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d012      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a41      	ldr	r2, [pc, #260]	@ (8002534 <HAL_DMA_Init+0x248>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a40      	ldr	r2, [pc, #256]	@ (8002538 <HAL_DMA_Init+0x24c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d008      	beq.n	800244e <HAL_DMA_Init+0x162>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3e      	ldr	r2, [pc, #248]	@ (800253c <HAL_DMA_Init+0x250>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d003      	beq.n	800244e <HAL_DMA_Init+0x162>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3d      	ldr	r2, [pc, #244]	@ (8002540 <HAL_DMA_Init+0x254>)
 800244c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0206 	orr.w	r2, r2, #6
 800246c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800246e:	e00f      	b.n	8002490 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002470:	f7ff fd78 	bl	8001f64 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b05      	cmp	r3, #5
 800247c:	d908      	bls.n	8002490 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2210      	movs	r2, #16
 8002482:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2203      	movs	r2, #3
 8002488:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e015      	b.n	80024bc <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e8      	bne.n	8002470 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fbb4 	bl	8002c0c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40020050 	.word	0x40020050
 80024c8:	50020050 	.word	0x50020050
 80024cc:	400200d0 	.word	0x400200d0
 80024d0:	500200d0 	.word	0x500200d0
 80024d4:	40020150 	.word	0x40020150
 80024d8:	50020150 	.word	0x50020150
 80024dc:	400201d0 	.word	0x400201d0
 80024e0:	500201d0 	.word	0x500201d0
 80024e4:	40020250 	.word	0x40020250
 80024e8:	50020250 	.word	0x50020250
 80024ec:	400202d0 	.word	0x400202d0
 80024f0:	500202d0 	.word	0x500202d0
 80024f4:	40020350 	.word	0x40020350
 80024f8:	50020350 	.word	0x50020350
 80024fc:	400203d0 	.word	0x400203d0
 8002500:	500203d0 	.word	0x500203d0
 8002504:	40020450 	.word	0x40020450
 8002508:	50020450 	.word	0x50020450
 800250c:	400204d0 	.word	0x400204d0
 8002510:	500204d0 	.word	0x500204d0
 8002514:	40020550 	.word	0x40020550
 8002518:	50020550 	.word	0x50020550
 800251c:	400205d0 	.word	0x400205d0
 8002520:	500205d0 	.word	0x500205d0
 8002524:	40020650 	.word	0x40020650
 8002528:	50020650 	.word	0x50020650
 800252c:	400206d0 	.word	0x400206d0
 8002530:	500206d0 	.word	0x500206d0
 8002534:	40020750 	.word	0x40020750
 8002538:	50020750 	.word	0x50020750
 800253c:	400207d0 	.word	0x400207d0
 8002540:	500207d0 	.word	0x500207d0

08002544 <HAL_DMA_Start>:
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *const hdma,
                                uint32_t SrcAddress,
                                uint32_t DstAddress,
                                uint32_t SrcDataSize)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_DMA_Start+0x18>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e02f      	b.n	80025bc <HAL_DMA_Start+0x78>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_DMA_Start+0x26>
 8002566:	2302      	movs	r3, #2
 8002568:	e028      	b.n	80025bc <HAL_DMA_Start+0x78>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d116      	bne.n	80025ac <HAL_DMA_Start+0x68>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2202      	movs	r2, #2
 8002582:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fb15 	bl	8002bc2 <DMA_SetConfig>

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e007      	b.n	80025bc <HAL_DMA_Start+0x78>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2240      	movs	r2, #64	@ 0x40
 80025b0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80025cc:	f7ff fcca 	bl	8001f64 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e06b      	b.n	80026b4 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d008      	beq.n	80025fa <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e05c      	b.n	80026b4 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0204 	orr.w	r2, r2, #4
 8002608:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2205      	movs	r2, #5
 800260e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002612:	e020      	b.n	8002656 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002614:	f7ff fca6 	bl	8001f64 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b05      	cmp	r3, #5
 8002620:	d919      	bls.n	8002656 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	2201      	movs	r2, #1
 8002648:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e02e      	b.n	80026b4 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0d7      	beq.n	8002614 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0202 	orr.w	r2, r2, #2
 8002672:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2204      	movs	r2, #4
 8002678:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002684:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269e:	2201      	movs	r2, #1
 80026a0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_DMA_PollForTransfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *const hdma,
                                          HAL_DMA_LevelCompleteTypeDef CompleteLevel,
                                          uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	460b      	mov	r3, r1
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	72fb      	strb	r3, [r7, #11]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80026ca:	f7ff fc4b 	bl	8001f64 <HAL_GetTick>
 80026ce:	61b8      	str	r0, [r7, #24]
  uint32_t level_flag;
  uint32_t tmp_csr;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_DMA_PollForTransfer+0x1e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0d2      	b.n	8002880 <HAL_DMA_PollForTransfer+0x1c4>

  /* Check the parameters */
  assert_param(IS_DMA_LEVEL_COMPLETE(CompleteLevel));

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d008      	beq.n	80026f8 <HAL_DMA_PollForTransfer+0x3c>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0c3      	b.n	8002880 <HAL_DMA_PollForTransfer+0x1c4>
  }

  /* Polling mode is not supported in circular mode */
  if ((hdma->Mode & DMA_LINKEDLIST_CIRCULAR) == DMA_LINKEDLIST_CIRCULAR)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026fc:	f003 0381 	and.w	r3, r3, #129	@ 0x81
 8002700:	2b81      	cmp	r3, #129	@ 0x81
 8002702:	d105      	bne.n	8002710 <HAL_DMA_PollForTransfer+0x54>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800270a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0b7      	b.n	8002880 <HAL_DMA_PollForTransfer+0x1c4>
  }

  /* Get the level transfer complete flag */
  level_flag = ((CompleteLevel == HAL_DMA_FULL_TRANSFER) ? DMA_FLAG_IDLE : DMA_FLAG_HT);
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_DMA_PollForTransfer+0x5e>
 8002716:	2301      	movs	r3, #1
 8002718:	e001      	b.n	800271e <HAL_DMA_PollForTransfer+0x62>
 800271a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800271e:	617b      	str	r3, [r7, #20]

  /* Get DMA channel status */
  tmp_csr = hdma->Instance->CSR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	61fb      	str	r3, [r7, #28]

  while ((tmp_csr & level_flag) == 0U)
 8002728:	e01d      	b.n	8002766 <HAL_DMA_PollForTransfer+0xaa>
  {
    /* Check for the timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d015      	beq.n	800275e <HAL_DMA_PollForTransfer+0xa2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7ff fc17 	bl	8001f64 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <HAL_DMA_PollForTransfer+0x8c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_DMA_PollForTransfer+0xa2>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	f043 0210 	orr.w	r2, r3, #16
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	659a      	str	r2, [r3, #88]	@ 0x58
          Note that the Abort function will
          - Clear all transfer flags.
          - Unlock.
          - Set the State.
        */
        (void)HAL_DMA_Abort(hdma);
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f7ff ff35 	bl	80025c4 <HAL_DMA_Abort>

        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e090      	b.n	8002880 <HAL_DMA_PollForTransfer+0x1c4>
      }
    }

    /* Get a newer CSR register value */
    tmp_csr = hdma->Instance->CSR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	61fb      	str	r3, [r7, #28]
  while ((tmp_csr & level_flag) == 0U)
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0dc      	beq.n	800272a <HAL_DMA_PollForTransfer+0x6e>
  }

  /* Check trigger overrun flag */
  if ((tmp_csr & DMA_FLAG_TO) != 0U)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_DMA_PollForTransfer+0xd4>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f043 0208 	orr.w	r2, r3, #8
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the error flag */
    __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800278e:	60da      	str	r2, [r3, #12]
  }

  /* Check error flags */
  if ((tmp_csr & (DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE)) != 0U)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002796:	2b00      	cmp	r3, #0
 8002798:	d04b      	beq.n	8002832 <HAL_DMA_PollForTransfer+0x176>
  {
    /* Check the data transfer error flag */
    if ((tmp_csr & DMA_FLAG_DTE) != 0U)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_DMA_PollForTransfer+0xfe>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027b8:	60da      	str	r2, [r3, #12]
    }

    /* Check the update link error flag */
    if ((tmp_csr & DMA_FLAG_ULE) != 0U)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_DMA_PollForTransfer+0x11e>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c8:	f043 0202 	orr.w	r2, r3, #2
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027d8:	60da      	str	r2, [r3, #12]
    }

    /* Check the user setting error flag */
    if ((tmp_csr & DMA_FLAG_USE) != 0U)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_DMA_PollForTransfer+0x13e>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e8:	f043 0204 	orr.w	r2, r3, #4
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0202 	orr.w	r2, r2, #2
 8002808:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_DMA_PollForTransfer+0x16a>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	2201      	movs	r2, #1
 8002824:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e026      	b.n	8002880 <HAL_DMA_PollForTransfer+0x1c4>
  }

  /* Clear the transfer level flag */
  if (CompleteLevel == HAL_DMA_HALF_TRANSFER)
 8002832:	7afb      	ldrb	r3, [r7, #11]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_DMA_PollForTransfer+0x188>
  {
    /* Clear the Half Transfer flag */
    __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	e01c      	b.n	800287e <HAL_DMA_PollForTransfer+0x1c2>
  }
  else if (CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d117      	bne.n	800287a <HAL_DMA_PollForTransfer+0x1be>
  {
    /* Clear the transfer flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002852:	60da      	str	r2, [r3, #12]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_DMA_PollForTransfer+0x1b4>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286c:	2201      	movs	r2, #1
 800286e:	731a      	strb	r2, [r3, #12]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8002878:	e001      	b.n	800287e <HAL_DMA_PollForTransfer+0x1c2>
  }
  else
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_DMA_PollForTransfer+0x1c4>
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002898:	f023 030f 	bic.w	r3, r3, #15
 800289c:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	3b50      	subs	r3, #80	@ 0x50
 80028a8:	09db      	lsrs	r3, r3, #7
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2201      	movs	r2, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 813b 	beq.w	8002b3e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d011      	beq.n	80028fa <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ec:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002904:	2b00      	cmp	r3, #0
 8002906:	d011      	beq.n	800292c <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800291e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002924:	f043 0202 	orr.w	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d011      	beq.n	800295e <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002950:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f043 0204 	orr.w	r2, r3, #4
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d011      	beq.n	8002990 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002982:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002988:	f043 0208 	orr.w	r2, r3, #8
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800299a:	2b00      	cmp	r3, #0
 800299c:	d013      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00c      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029b4:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d04c      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029ea:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d12e      	bne.n	8002a56 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a06:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0202 	orr.w	r2, r2, #2
 8002a16:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a30:	2201      	movs	r2, #1
 8002a32:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d07a      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
        }

        return;
 8002a54:	e075      	b.n	8002b42 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2205      	movs	r2, #5
 8002a5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d039      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d032      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d012      	beq.n	8002abc <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d116      	bne.n	8002ace <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d111      	bne.n	8002ace <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	731a      	strb	r2, [r3, #12]
 8002aba:	e008      	b.n	8002ace <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002ad6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d025      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0202 	orr.w	r2, r2, #2
 8002b06:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b20:	2201      	movs	r2, #1
 8002b22:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
 8002b3c:	e002      	b.n	8002b44 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002b42:	bf00      	nop
    }
  }
}
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e02b      	b.n	8002bb6 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002b66:	f023 030f 	bic.w	r3, r3, #15
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	3b50      	subs	r3, #80	@ 0x50
 8002b76:	09db      	lsrs	r3, r3, #7
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d012      	beq.n	8002bb4 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f003 0311 	and.w	r3, r3, #17
 8002b94:	2b11      	cmp	r3, #17
 8002b96:	d106      	bne.n	8002ba6 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	e006      	b.n	8002bb4 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	b291      	uxth	r1, r2
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	430b      	orrs	r3, r1
 8002be4:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002bee:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a53      	ldr	r2, [pc, #332]	@ (8002d98 <DMA_Init+0x18c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	f000 80a0 	beq.w	8002d92 <DMA_Init+0x186>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a51      	ldr	r2, [pc, #324]	@ (8002d9c <DMA_Init+0x190>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	f000 809a 	beq.w	8002d92 <DMA_Init+0x186>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a4f      	ldr	r2, [pc, #316]	@ (8002da0 <DMA_Init+0x194>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	f000 8094 	beq.w	8002d92 <DMA_Init+0x186>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8002da4 <DMA_Init+0x198>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	f000 808e 	beq.w	8002d92 <DMA_Init+0x186>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4b      	ldr	r2, [pc, #300]	@ (8002da8 <DMA_Init+0x19c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	f000 8088 	beq.w	8002d92 <DMA_Init+0x186>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a49      	ldr	r2, [pc, #292]	@ (8002dac <DMA_Init+0x1a0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	f000 8082 	beq.w	8002d92 <DMA_Init+0x186>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a47      	ldr	r2, [pc, #284]	@ (8002db0 <DMA_Init+0x1a4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d07c      	beq.n	8002d92 <DMA_Init+0x186>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a45      	ldr	r2, [pc, #276]	@ (8002db4 <DMA_Init+0x1a8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d077      	beq.n	8002d92 <DMA_Init+0x186>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a44      	ldr	r2, [pc, #272]	@ (8002db8 <DMA_Init+0x1ac>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d072      	beq.n	8002d92 <DMA_Init+0x186>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a42      	ldr	r2, [pc, #264]	@ (8002dbc <DMA_Init+0x1b0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d06d      	beq.n	8002d92 <DMA_Init+0x186>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a41      	ldr	r2, [pc, #260]	@ (8002dc0 <DMA_Init+0x1b4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d068      	beq.n	8002d92 <DMA_Init+0x186>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8002dc4 <DMA_Init+0x1b8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d063      	beq.n	8002d92 <DMA_Init+0x186>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3e      	ldr	r2, [pc, #248]	@ (8002dc8 <DMA_Init+0x1bc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d05e      	beq.n	8002d92 <DMA_Init+0x186>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dcc <DMA_Init+0x1c0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d059      	beq.n	8002d92 <DMA_Init+0x186>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8002dd0 <DMA_Init+0x1c4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d054      	beq.n	8002d92 <DMA_Init+0x186>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a39      	ldr	r2, [pc, #228]	@ (8002dd4 <DMA_Init+0x1c8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d04f      	beq.n	8002d92 <DMA_Init+0x186>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a38      	ldr	r2, [pc, #224]	@ (8002dd8 <DMA_Init+0x1cc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d04a      	beq.n	8002d92 <DMA_Init+0x186>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a36      	ldr	r2, [pc, #216]	@ (8002ddc <DMA_Init+0x1d0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d045      	beq.n	8002d92 <DMA_Init+0x186>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a35      	ldr	r2, [pc, #212]	@ (8002de0 <DMA_Init+0x1d4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d040      	beq.n	8002d92 <DMA_Init+0x186>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a33      	ldr	r2, [pc, #204]	@ (8002de4 <DMA_Init+0x1d8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d03b      	beq.n	8002d92 <DMA_Init+0x186>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a32      	ldr	r2, [pc, #200]	@ (8002de8 <DMA_Init+0x1dc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d036      	beq.n	8002d92 <DMA_Init+0x186>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a30      	ldr	r2, [pc, #192]	@ (8002dec <DMA_Init+0x1e0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d031      	beq.n	8002d92 <DMA_Init+0x186>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2f      	ldr	r2, [pc, #188]	@ (8002df0 <DMA_Init+0x1e4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d02c      	beq.n	8002d92 <DMA_Init+0x186>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002df4 <DMA_Init+0x1e8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d027      	beq.n	8002d92 <DMA_Init+0x186>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2c      	ldr	r2, [pc, #176]	@ (8002df8 <DMA_Init+0x1ec>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d022      	beq.n	8002d92 <DMA_Init+0x186>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	@ (8002dfc <DMA_Init+0x1f0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01d      	beq.n	8002d92 <DMA_Init+0x186>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a29      	ldr	r2, [pc, #164]	@ (8002e00 <DMA_Init+0x1f4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d018      	beq.n	8002d92 <DMA_Init+0x186>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a27      	ldr	r2, [pc, #156]	@ (8002e04 <DMA_Init+0x1f8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <DMA_Init+0x186>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a26      	ldr	r2, [pc, #152]	@ (8002e08 <DMA_Init+0x1fc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00e      	beq.n	8002d92 <DMA_Init+0x186>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a24      	ldr	r2, [pc, #144]	@ (8002e0c <DMA_Init+0x200>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <DMA_Init+0x186>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a23      	ldr	r2, [pc, #140]	@ (8002e10 <DMA_Init+0x204>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d004      	beq.n	8002d92 <DMA_Init+0x186>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a21      	ldr	r2, [pc, #132]	@ (8002e14 <DMA_Init+0x208>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d142      	bne.n	8002e18 <DMA_Init+0x20c>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e041      	b.n	8002e1a <DMA_Init+0x20e>
 8002d96:	bf00      	nop
 8002d98:	40020050 	.word	0x40020050
 8002d9c:	50020050 	.word	0x50020050
 8002da0:	400200d0 	.word	0x400200d0
 8002da4:	500200d0 	.word	0x500200d0
 8002da8:	40020150 	.word	0x40020150
 8002dac:	50020150 	.word	0x50020150
 8002db0:	400201d0 	.word	0x400201d0
 8002db4:	500201d0 	.word	0x500201d0
 8002db8:	40020250 	.word	0x40020250
 8002dbc:	50020250 	.word	0x50020250
 8002dc0:	400202d0 	.word	0x400202d0
 8002dc4:	500202d0 	.word	0x500202d0
 8002dc8:	40020350 	.word	0x40020350
 8002dcc:	50020350 	.word	0x50020350
 8002dd0:	400203d0 	.word	0x400203d0
 8002dd4:	500203d0 	.word	0x500203d0
 8002dd8:	40020450 	.word	0x40020450
 8002ddc:	50020450 	.word	0x50020450
 8002de0:	400204d0 	.word	0x400204d0
 8002de4:	500204d0 	.word	0x500204d0
 8002de8:	40020550 	.word	0x40020550
 8002dec:	50020550 	.word	0x50020550
 8002df0:	400205d0 	.word	0x400205d0
 8002df4:	500205d0 	.word	0x500205d0
 8002df8:	40020650 	.word	0x40020650
 8002dfc:	50020650 	.word	0x50020650
 8002e00:	400206d0 	.word	0x400206d0
 8002e04:	500206d0 	.word	0x500206d0
 8002e08:	40020750 	.word	0x40020750
 8002e0c:	50020750 	.word	0x50020750
 8002e10:	400207d0 	.word	0x400207d0
 8002e14:	500207d0 	.word	0x500207d0
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d012      	beq.n	8002e44 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	3b01      	subs	r3, #1
 8002e28:	051b      	lsls	r3, r3, #20
 8002e2a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002e2e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	3b01      	subs	r3, #1
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002e3c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e76:	f040 80b0 	bne.w	8002fda <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a82      	ldr	r2, [pc, #520]	@ (8003088 <DMA_Init+0x47c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	f000 80a0 	beq.w	8002fc6 <DMA_Init+0x3ba>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a80      	ldr	r2, [pc, #512]	@ (800308c <DMA_Init+0x480>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	f000 809a 	beq.w	8002fc6 <DMA_Init+0x3ba>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a7e      	ldr	r2, [pc, #504]	@ (8003090 <DMA_Init+0x484>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	f000 8094 	beq.w	8002fc6 <DMA_Init+0x3ba>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8003094 <DMA_Init+0x488>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	f000 808e 	beq.w	8002fc6 <DMA_Init+0x3ba>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7a      	ldr	r2, [pc, #488]	@ (8003098 <DMA_Init+0x48c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	f000 8088 	beq.w	8002fc6 <DMA_Init+0x3ba>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a78      	ldr	r2, [pc, #480]	@ (800309c <DMA_Init+0x490>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	f000 8082 	beq.w	8002fc6 <DMA_Init+0x3ba>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a76      	ldr	r2, [pc, #472]	@ (80030a0 <DMA_Init+0x494>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d07c      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a74      	ldr	r2, [pc, #464]	@ (80030a4 <DMA_Init+0x498>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d077      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a73      	ldr	r2, [pc, #460]	@ (80030a8 <DMA_Init+0x49c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d072      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a71      	ldr	r2, [pc, #452]	@ (80030ac <DMA_Init+0x4a0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d06d      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a70      	ldr	r2, [pc, #448]	@ (80030b0 <DMA_Init+0x4a4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d068      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6e      	ldr	r2, [pc, #440]	@ (80030b4 <DMA_Init+0x4a8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d063      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6d      	ldr	r2, [pc, #436]	@ (80030b8 <DMA_Init+0x4ac>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d05e      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6b      	ldr	r2, [pc, #428]	@ (80030bc <DMA_Init+0x4b0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d059      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6a      	ldr	r2, [pc, #424]	@ (80030c0 <DMA_Init+0x4b4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d054      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a68      	ldr	r2, [pc, #416]	@ (80030c4 <DMA_Init+0x4b8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d04f      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a67      	ldr	r2, [pc, #412]	@ (80030c8 <DMA_Init+0x4bc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d04a      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a65      	ldr	r2, [pc, #404]	@ (80030cc <DMA_Init+0x4c0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d045      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a64      	ldr	r2, [pc, #400]	@ (80030d0 <DMA_Init+0x4c4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d040      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a62      	ldr	r2, [pc, #392]	@ (80030d4 <DMA_Init+0x4c8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d03b      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a61      	ldr	r2, [pc, #388]	@ (80030d8 <DMA_Init+0x4cc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d036      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5f      	ldr	r2, [pc, #380]	@ (80030dc <DMA_Init+0x4d0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d031      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5e      	ldr	r2, [pc, #376]	@ (80030e0 <DMA_Init+0x4d4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d02c      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5c      	ldr	r2, [pc, #368]	@ (80030e4 <DMA_Init+0x4d8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d027      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80030e8 <DMA_Init+0x4dc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d022      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a59      	ldr	r2, [pc, #356]	@ (80030ec <DMA_Init+0x4e0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01d      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a58      	ldr	r2, [pc, #352]	@ (80030f0 <DMA_Init+0x4e4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d018      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a56      	ldr	r2, [pc, #344]	@ (80030f4 <DMA_Init+0x4e8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a55      	ldr	r2, [pc, #340]	@ (80030f8 <DMA_Init+0x4ec>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00e      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a53      	ldr	r2, [pc, #332]	@ (80030fc <DMA_Init+0x4f0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a52      	ldr	r2, [pc, #328]	@ (8003100 <DMA_Init+0x4f4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <DMA_Init+0x3ba>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a50      	ldr	r2, [pc, #320]	@ (8003104 <DMA_Init+0x4f8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <DMA_Init+0x3be>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <DMA_Init+0x3c0>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e008      	b.n	8002fec <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fe2:	d103      	bne.n	8002fec <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fea:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ff2:	4b45      	ldr	r3, [pc, #276]	@ (8003108 <DMA_Init+0x4fc>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a36      	ldr	r2, [pc, #216]	@ (80030e8 <DMA_Init+0x4dc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <DMA_Init+0x44c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a35      	ldr	r2, [pc, #212]	@ (80030ec <DMA_Init+0x4e0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <DMA_Init+0x44c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a33      	ldr	r2, [pc, #204]	@ (80030f0 <DMA_Init+0x4e4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <DMA_Init+0x44c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a32      	ldr	r2, [pc, #200]	@ (80030f4 <DMA_Init+0x4e8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <DMA_Init+0x44c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a30      	ldr	r2, [pc, #192]	@ (80030f8 <DMA_Init+0x4ec>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <DMA_Init+0x44c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2f      	ldr	r2, [pc, #188]	@ (80030fc <DMA_Init+0x4f0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <DMA_Init+0x44c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2d      	ldr	r2, [pc, #180]	@ (8003100 <DMA_Init+0x4f4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <DMA_Init+0x44c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2c      	ldr	r2, [pc, #176]	@ (8003104 <DMA_Init+0x4f8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <DMA_Init+0x450>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <DMA_Init+0x452>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2200      	movs	r2, #0
 8003070:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40020050 	.word	0x40020050
 800308c:	50020050 	.word	0x50020050
 8003090:	400200d0 	.word	0x400200d0
 8003094:	500200d0 	.word	0x500200d0
 8003098:	40020150 	.word	0x40020150
 800309c:	50020150 	.word	0x50020150
 80030a0:	400201d0 	.word	0x400201d0
 80030a4:	500201d0 	.word	0x500201d0
 80030a8:	40020250 	.word	0x40020250
 80030ac:	50020250 	.word	0x50020250
 80030b0:	400202d0 	.word	0x400202d0
 80030b4:	500202d0 	.word	0x500202d0
 80030b8:	40020350 	.word	0x40020350
 80030bc:	50020350 	.word	0x50020350
 80030c0:	400203d0 	.word	0x400203d0
 80030c4:	500203d0 	.word	0x500203d0
 80030c8:	40020450 	.word	0x40020450
 80030cc:	50020450 	.word	0x50020450
 80030d0:	400204d0 	.word	0x400204d0
 80030d4:	500204d0 	.word	0x500204d0
 80030d8:	40020550 	.word	0x40020550
 80030dc:	50020550 	.word	0x50020550
 80030e0:	400205d0 	.word	0x400205d0
 80030e4:	500205d0 	.word	0x500205d0
 80030e8:	40020650 	.word	0x40020650
 80030ec:	50020650 	.word	0x50020650
 80030f0:	400206d0 	.word	0x400206d0
 80030f4:	500206d0 	.word	0x500206d0
 80030f8:	40020750 	.word	0x40020750
 80030fc:	50020750 	.word	0x50020750
 8003100:	400207d0 	.word	0x400207d0
 8003104:	500207d0 	.word	0x500207d0
 8003108:	3cc03180 	.word	0x3cc03180

0800310c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	@ 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800311e:	e1ba      	b.n	8003496 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 81aa 	beq.w	8003490 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a55      	ldr	r2, [pc, #340]	@ (8003294 <HAL_GPIO_Init+0x188>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d15d      	bne.n	8003200 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800314a:	2201      	movs	r2, #1
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	4013      	ands	r3, r2
 8003158:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0201 	and.w	r2, r3, #1
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	4313      	orrs	r3, r2
 800316c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003174:	4a48      	ldr	r2, [pc, #288]	@ (8003298 <HAL_GPIO_Init+0x18c>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800317c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800317e:	4a46      	ldr	r2, [pc, #280]	@ (8003298 <HAL_GPIO_Init+0x18c>)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	08da      	lsrs	r2, r3, #3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3208      	adds	r2, #8
 8003192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003196:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220b      	movs	r2, #11
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	08da      	lsrs	r2, r3, #3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	3208      	adds	r2, #8
 80031ca:	69f9      	ldr	r1, [r7, #28]
 80031cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	2202      	movs	r2, #2
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e067      	b.n	80032d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x104>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b12      	cmp	r3, #18
 800320e:	d145      	bne.n	800329c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	220f      	movs	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	4013      	ands	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f003 020f 	and.w	r2, r3, #15
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	4313      	orrs	r3, r2
 800324c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	69f9      	ldr	r1, [r7, #28]
 8003258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	4013      	ands	r3, r2
 8003272:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0203 	and.w	r2, r3, #3
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	4313      	orrs	r3, r2
 8003288:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e01e      	b.n	80032d0 <HAL_GPIO_Init+0x1c4>
 8003292:	bf00      	nop
 8003294:	46020000 	.word	0x46020000
 8003298:	0800cffc 	.word	0x0800cffc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d00b      	beq.n	80032f0 <HAL_GPIO_Init+0x1e4>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d007      	beq.n	80032f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032e4:	2b11      	cmp	r3, #17
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b12      	cmp	r3, #18
 80032ee:	d130      	bne.n	8003352 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	2203      	movs	r2, #3
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	4013      	ands	r3, r2
 8003306:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	4313      	orrs	r3, r2
 8003318:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003326:	2201      	movs	r2, #1
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	4013      	ands	r3, r2
 8003334:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0201 	and.w	r2, r3, #1
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	4313      	orrs	r3, r2
 800334a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d017      	beq.n	800338a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	4013      	ands	r3, r2
 8003370:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	4313      	orrs	r3, r2
 8003382:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d07c      	beq.n	8003490 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003396:	4a47      	ldr	r2, [pc, #284]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3318      	adds	r3, #24
 800339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	0a9a      	lsrs	r2, r3, #10
 80033be:	4b3e      	ldr	r3, [pc, #248]	@ (80034b8 <HAL_GPIO_Init+0x3ac>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	f002 0203 	and.w	r2, r2, #3
 80033c8:	00d2      	lsls	r2, r2, #3
 80033ca:	4093      	lsls	r3, r2
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80033d2:	4938      	ldr	r1, [pc, #224]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	3318      	adds	r3, #24
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80033e0:	4b34      	ldr	r3, [pc, #208]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003404:	4a2b      	ldr	r2, [pc, #172]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800340a:	4b2a      	ldr	r3, [pc, #168]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	43db      	mvns	r3, r3
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	4013      	ands	r3, r2
 8003418:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800342e:	4a21      	ldr	r2, [pc, #132]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003434:	4b1f      	ldr	r3, [pc, #124]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800343a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	4013      	ands	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800345a:	4a16      	ldr	r2, [pc, #88]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003462:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 8003464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003468:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	43db      	mvns	r3, r3
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	4013      	ands	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003488:	4a0a      	ldr	r2, [pc, #40]	@ (80034b4 <HAL_GPIO_Init+0x3a8>)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	3301      	adds	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f47f ae3d 	bne.w	8003120 <HAL_GPIO_Init+0x14>
  }
}
 80034a6:	bf00      	nop
 80034a8:	bf00      	nop
 80034aa:	3724      	adds	r7, #36	@ 0x24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	46022000 	.word	0x46022000
 80034b8:	002f7f7f 	.word	0x002f7f7f

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e08d      	b.n	800361a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fb2c 	bl	8000b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	@ 0x24
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800353c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800354c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	e006      	b.n	8003574 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003572:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d108      	bne.n	800358e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	e007      	b.n	800359e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800359c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	461a      	mov	r2, r3
 8003630:	460b      	mov	r3, r1
 8003632:	817b      	strh	r3, [r7, #10]
 8003634:	4613      	mov	r3, r2
 8003636:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b20      	cmp	r3, #32
 8003642:	f040 80da 	bne.w	80037fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_I2C_Master_Transmit+0x30>
 8003650:	2302      	movs	r3, #2
 8003652:	e0d3      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1d8>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800365c:	f7fe fc82 	bl	8001f64 <HAL_GetTick>
 8003660:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	2319      	movs	r3, #25
 8003668:	2201      	movs	r2, #1
 800366a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f8f0 	bl	8003854 <I2C_WaitOnFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0be      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2221      	movs	r2, #33	@ 0x21
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2210      	movs	r2, #16
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	893a      	ldrh	r2, [r7, #8]
 800369e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2bff      	cmp	r3, #255	@ 0xff
 80036ae:	d90e      	bls.n	80036ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	22ff      	movs	r2, #255	@ 0xff
 80036b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	8979      	ldrh	r1, [r7, #10]
 80036be:	4b51      	ldr	r3, [pc, #324]	@ (8003804 <HAL_I2C_Master_Transmit+0x1e0>)
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fa88 	bl	8003bdc <I2C_TransferConfig>
 80036cc:	e06c      	b.n	80037a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	8979      	ldrh	r1, [r7, #10]
 80036e0:	4b48      	ldr	r3, [pc, #288]	@ (8003804 <HAL_I2C_Master_Transmit+0x1e0>)
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fa77 	bl	8003bdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036ee:	e05b      	b.n	80037a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	6a39      	ldr	r1, [r7, #32]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f906 	bl	8003906 <I2C_WaitOnTXISFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e07b      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d034      	beq.n	80037a8 <HAL_I2C_Master_Transmit+0x184>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d130      	bne.n	80037a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	2200      	movs	r2, #0
 800374e:	2180      	movs	r1, #128	@ 0x80
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f87f 	bl	8003854 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e04d      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2bff      	cmp	r3, #255	@ 0xff
 8003768:	d90e      	bls.n	8003788 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	22ff      	movs	r2, #255	@ 0xff
 800376e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003774:	b2da      	uxtb	r2, r3
 8003776:	8979      	ldrh	r1, [r7, #10]
 8003778:	2300      	movs	r3, #0
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 fa2b 	bl	8003bdc <I2C_TransferConfig>
 8003786:	e00f      	b.n	80037a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003796:	b2da      	uxtb	r2, r3
 8003798:	8979      	ldrh	r1, [r7, #10]
 800379a:	2300      	movs	r3, #0
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fa1a 	bl	8003bdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d19e      	bne.n	80036f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	6a39      	ldr	r1, [r7, #32]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f8ec 	bl	8003994 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e01a      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2220      	movs	r2, #32
 80037cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <HAL_I2C_Master_Transmit+0x1e4>)
 80037da:	400b      	ands	r3, r1
 80037dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	80002000 	.word	0x80002000
 8003808:	fe00e800 	.word	0xfe00e800

0800380c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d103      	bne.n	800382a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2200      	movs	r2, #0
 8003828:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d007      	beq.n	8003848 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	619a      	str	r2, [r3, #24]
  }
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003864:	e03b      	b.n	80038de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f8d6 	bl	8003a1c <I2C_IsErrorOccurred>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e041      	b.n	80038fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d02d      	beq.n	80038de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fe fb6f 	bl	8001f64 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d122      	bne.n	80038de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4013      	ands	r3, r2
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d113      	bne.n	80038de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e00f      	b.n	80038fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699a      	ldr	r2, [r3, #24]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4013      	ands	r3, r2
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	bf0c      	ite	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	2300      	movne	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d0b4      	beq.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003912:	e033      	b.n	800397c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f87f 	bl	8003a1c <I2C_IsErrorOccurred>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e031      	b.n	800398c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d025      	beq.n	800397c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7fe fb18 	bl	8001f64 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d11a      	bne.n	800397c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d013      	beq.n	800397c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e007      	b.n	800398c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b02      	cmp	r3, #2
 8003988:	d1c4      	bne.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a0:	e02f      	b.n	8003a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f838 	bl	8003a1c <I2C_IsErrorOccurred>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e02d      	b.n	8003a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fe fad5 	bl	8001f64 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11a      	bne.n	8003a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d013      	beq.n	8003a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e007      	b.n	8003a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d1c8      	bne.n	80039a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d068      	beq.n	8003b1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a50:	e049      	b.n	8003ae6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d045      	beq.n	8003ae6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fe fa83 	bl	8001f64 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_IsErrorOccurred+0x54>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d13a      	bne.n	8003ae6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a92:	d121      	bne.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a9a:	d01d      	beq.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d01a      	beq.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ab0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ab2:	f7fe fa57 	bl	8001f64 <HAL_GetTick>
 8003ab6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab8:	e00e      	b.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003aba:	f7fe fa53 	bl	8001f64 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b19      	cmp	r3, #25
 8003ac6:	d907      	bls.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f043 0320 	orr.w	r3, r3, #32
 8003ace:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003ad6:	e006      	b.n	8003ae6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d1e9      	bne.n	8003aba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d003      	beq.n	8003afc <I2C_IsErrorOccurred+0xe0>
 8003af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0aa      	beq.n	8003a52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f043 0308 	orr.w	r3, r3, #8
 8003b54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00b      	beq.n	8003b88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	f043 0302 	orr.w	r3, r3, #2
 8003b76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01c      	beq.n	8003bca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fe3b 	bl	800380c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <I2C_IsErrorOccurred+0x1bc>)
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003bca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3728      	adds	r7, #40	@ 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	fe00e800 	.word	0xfe00e800

08003bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	817b      	strh	r3, [r7, #10]
 8003bea:	4613      	mov	r3, r2
 8003bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bf4:	7a7b      	ldrb	r3, [r7, #9]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bfc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c0a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	0d5b      	lsrs	r3, r3, #21
 8003c16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c1a:	4b08      	ldr	r3, [pc, #32]	@ (8003c3c <I2C_TransferConfig+0x60>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	ea02 0103 	and.w	r1, r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	03ff63ff 	.word	0x03ff63ff

08003c40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d138      	bne.n	8003cc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e032      	b.n	8003cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	@ 0x24
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d139      	bne.n	8003d60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e033      	b.n	8003d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2224      	movs	r2, #36	@ 0x24
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	e007      	b.n	8003d9e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003d8e:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 0204 	bic.w	r2, r3, #4
 8003d96:	4905      	ldr	r1, [pc, #20]	@ (8003dac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40030400 	.word	0x40030400

08003db0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003db4:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_ICACHE_Enable+0x1c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a04      	ldr	r2, [pc, #16]	@ (8003dcc <HAL_ICACHE_Enable+0x1c>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	40030400 	.word	0x40030400

08003dd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e108      	b.n	8003ff4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fd f90b 	bl	8001018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2203      	movs	r2, #3
 8003e06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4a7b      	ldr	r2, [pc, #492]	@ (8003ffc <HAL_PCD_Init+0x22c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d102      	bne.n	8003e18 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f005 fcaa 	bl	8009776 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	7c1a      	ldrb	r2, [r3, #16]
 8003e2a:	f88d 2000 	strb.w	r2, [sp]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e32:	f005 fbbf 	bl	80095b4 <USB_CoreInit>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0d5      	b.n	8003ff4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f005 fca2 	bl	8009798 <USB_SetCurrentMode>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0c6      	b.n	8003ff4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	e04a      	b.n	8003f02 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3315      	adds	r3, #21
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e80:	7bfa      	ldrb	r2, [r7, #15]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3314      	adds	r3, #20
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	b298      	uxth	r0, r3
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	332e      	adds	r3, #46	@ 0x2e
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3318      	adds	r3, #24
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	331c      	adds	r3, #28
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3320      	adds	r3, #32
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3324      	adds	r3, #36	@ 0x24
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	3301      	adds	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	791b      	ldrb	r3, [r3, #4]
 8003f06:	7bfa      	ldrb	r2, [r7, #15]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d3af      	bcc.n	8003e6c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	e044      	b.n	8003f9c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f12:	7bfa      	ldrb	r2, [r7, #15]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f3e:	7bfa      	ldrb	r2, [r7, #15]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f54:	7bfa      	ldrb	r2, [r7, #15]
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f6a:	7bfa      	ldrb	r2, [r7, #15]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	791b      	ldrb	r3, [r3, #4]
 8003fa0:	7bfa      	ldrb	r2, [r7, #15]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d3b5      	bcc.n	8003f12 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7c1a      	ldrb	r2, [r3, #16]
 8003fae:	f88d 2000 	strb.w	r2, [sp]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fb6:	f005 fc3b 	bl	8009830 <USB_DevInit>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e013      	b.n	8003ff4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	7b1b      	ldrb	r3, [r3, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d102      	bne.n	8003fe8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f001 f96a 	bl	80052bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f006 fc66 	bl	800a8be <USB_DevDisconnect>

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	42040000 	.word	0x42040000

08004000 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_PCD_Start+0x1c>
 8004018:	2302      	movs	r3, #2
 800401a:	e01c      	b.n	8004056 <HAL_PCD_Start+0x56>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	7b5b      	ldrb	r3, [r3, #13]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f005 fb89 	bl	8009754 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f006 fc18 	bl	800a87c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800405e:	b590      	push	{r4, r7, lr}
 8004060:	b08d      	sub	sp, #52	@ 0x34
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f006 fcd6 	bl	800aa26 <USB_GetMode>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 84b9 	bne.w	80049f4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f006 fc3a 	bl	800a900 <USB_ReadInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 84af 	beq.w	80049f2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f006 fc27 	bl	800a900 <USB_ReadInterrupts>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d107      	bne.n	80040cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f002 0202 	and.w	r2, r2, #2
 80040ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f006 fc15 	bl	800a900 <USB_ReadInterrupts>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d161      	bne.n	80041a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0210 	bic.w	r2, r2, #16
 80040ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 020f 	and.w	r2, r3, #15
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	3304      	adds	r3, #4
 800410e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	0c5b      	lsrs	r3, r3, #17
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	2b02      	cmp	r3, #2
 800411a:	d124      	bne.n	8004166 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d035      	beq.n	8004194 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004136:	b29b      	uxth	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	6a38      	ldr	r0, [r7, #32]
 800413c:	f006 fa4c 	bl	800a5d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800414c:	441a      	add	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800415e:	441a      	add	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	615a      	str	r2, [r3, #20]
 8004164:	e016      	b.n	8004194 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	0c5b      	lsrs	r3, r3, #17
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	2b06      	cmp	r3, #6
 8004170:	d110      	bne.n	8004194 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004178:	2208      	movs	r2, #8
 800417a:	4619      	mov	r1, r3
 800417c:	6a38      	ldr	r0, [r7, #32]
 800417e:	f006 fa2b 	bl	800a5d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800418e:	441a      	add	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0210 	orr.w	r2, r2, #16
 80041a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f006 fba9 	bl	800a900 <USB_ReadInterrupts>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041b8:	f040 80a7 	bne.w	800430a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f006 fbae 	bl	800a926 <USB_ReadDevAllOutEpInterrupt>
 80041ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80041cc:	e099      	b.n	8004302 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 808e 	beq.w	80042f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f006 fbd2 	bl	800a98e <USB_ReadDevOutEPInterrupt>
 80041ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004202:	461a      	mov	r2, r3
 8004204:	2301      	movs	r3, #1
 8004206:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004208:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fed0 	bl	8004fb0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	2308      	movs	r3, #8
 800422a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800422c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 ffa6 	bl	8005180 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424a:	461a      	mov	r2, r3
 800424c:	2310      	movs	r3, #16
 800424e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d030      	beq.n	80042bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b80      	cmp	r3, #128	@ 0x80
 8004264:	d109      	bne.n	800427a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004274:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004278:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800427a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	78db      	ldrb	r3, [r3, #3]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d108      	bne.n	80042aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f006 ff8b 	bl	800b1c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b6:	461a      	mov	r2, r3
 80042b8:	2302      	movs	r3, #2
 80042ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d2:	461a      	mov	r2, r3
 80042d4:	2320      	movs	r3, #32
 80042d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	3301      	adds	r3, #1
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	f47f af62 	bne.w	80041ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f006 faf6 	bl	800a900 <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800431a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800431e:	f040 80db 	bne.w	80044d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f006 fb17 	bl	800a95a <USB_ReadDevAllInEpInterrupt>
 800432c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004332:	e0cd      	b.n	80044d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80c2 	beq.w	80044c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f006 fb3d 	bl	800a9ca <USB_ReadDevInEPInterrupt>
 8004350:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d057      	beq.n	800440c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	2201      	movs	r2, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43db      	mvns	r3, r3
 8004376:	69f9      	ldr	r1, [r7, #28]
 8004378:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800437c:	4013      	ands	r3, r2
 800437e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800438c:	461a      	mov	r2, r3
 800438e:	2301      	movs	r3, #1
 8004390:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	799b      	ldrb	r3, [r3, #6]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d132      	bne.n	8004400 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439e:	4613      	mov	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3320      	adds	r3, #32
 80043aa:	6819      	ldr	r1, [r3, #0]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4403      	add	r3, r0
 80043ba:	331c      	adds	r3, #28
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4419      	add	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4403      	add	r3, r0
 80043ce:	3320      	adds	r3, #32
 80043d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d113      	bne.n	8004400 <HAL_PCD_IRQHandler+0x3a2>
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3324      	adds	r3, #36	@ 0x24
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043f8:	461a      	mov	r2, r3
 80043fa:	2101      	movs	r1, #1
 80043fc:	f006 fb44 	bl	800aa88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	b2db      	uxtb	r3, r3
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f006 fe5e 	bl	800b0c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004422:	461a      	mov	r2, r3
 8004424:	2308      	movs	r3, #8
 8004426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800443e:	461a      	mov	r2, r3
 8004440:	2310      	movs	r3, #16
 8004442:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800445a:	461a      	mov	r2, r3
 800445c:	2340      	movs	r3, #64	@ 0x40
 800445e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d023      	beq.n	80044b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800446a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800446c:	6a38      	ldr	r0, [r7, #32]
 800446e:	f005 fb2b 	bl	8009ac8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	3310      	adds	r3, #16
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	78db      	ldrb	r3, [r3, #3]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d108      	bne.n	80044a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f006 fea2 	bl	800b1e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ac:	461a      	mov	r2, r3
 80044ae:	2302      	movs	r3, #2
 80044b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fcea 	bl	8004e98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	3301      	adds	r3, #1
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80044ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f47f af2e 	bne.w	8004334 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f006 fa0f 	bl	800a900 <USB_ReadInterrupts>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ec:	d122      	bne.n	8004534 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004508:	2b01      	cmp	r3, #1
 800450a:	d108      	bne.n	800451e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004514:	2100      	movs	r1, #0
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f007 f822 	bl	800b560 <HAL_PCDEx_LPM_Callback>
 800451c:	e002      	b.n	8004524 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f006 fe32 	bl	800b188 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f006 f9e1 	bl	800a900 <USB_ReadInterrupts>
 800453e:	4603      	mov	r3, r0
 8004540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004548:	d112      	bne.n	8004570 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d102      	bne.n	8004560 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f006 fdfa 	bl	800b154 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800456e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f006 f9c3 	bl	800a900 <USB_ReadInterrupts>
 800457a:	4603      	mov	r3, r0
 800457c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004580:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004584:	d121      	bne.n	80045ca <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004594:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800459c:	2b00      	cmp	r3, #0
 800459e:	d111      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	f003 020f 	and.w	r2, r3, #15
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80045ba:	2101      	movs	r1, #1
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f006 ffcf 	bl	800b560 <HAL_PCDEx_LPM_Callback>
 80045c2:	e002      	b.n	80045ca <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f006 fdc5 	bl	800b154 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f006 f996 	bl	800a900 <USB_ReadInterrupts>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045de:	f040 80b7 	bne.w	8004750 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2110      	movs	r1, #16
 80045fc:	4618      	mov	r0, r3
 80045fe:	f005 fa63 	bl	8009ac8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004602:	2300      	movs	r3, #0
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004606:	e046      	b.n	8004696 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004614:	461a      	mov	r2, r3
 8004616:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800461a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800461c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004636:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800463a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800463c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004648:	461a      	mov	r2, r3
 800464a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800464e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800466a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800466e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800468a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800468e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004692:	3301      	adds	r3, #1
 8004694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	791b      	ldrb	r3, [r3, #4]
 800469a:	461a      	mov	r2, r3
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469e:	4293      	cmp	r3, r2
 80046a0:	d3b2      	bcc.n	8004608 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046b0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80046b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	7bdb      	ldrb	r3, [r3, #15]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046ce:	f043 030b 	orr.w	r3, r3, #11
 80046d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046e4:	f043 030b 	orr.w	r3, r3, #11
 80046e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ea:	e015      	b.n	8004718 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046fe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004702:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004712:	f043 030b 	orr.w	r3, r3, #11
 8004716:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004726:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800472a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800473a:	461a      	mov	r2, r3
 800473c:	f006 f9a4 	bl	800aa88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800474e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f006 f8d3 	bl	800a900 <USB_ReadInterrupts>
 800475a:	4603      	mov	r3, r0
 800475c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004764:	d123      	bne.n	80047ae <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f006 f969 	bl	800aa42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f005 fa20 	bl	8009bba <USB_GetDevSpeed>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681c      	ldr	r4, [r3, #0]
 8004786:	f002 f839 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 800478a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004790:	461a      	mov	r2, r3
 8004792:	4620      	mov	r0, r4
 8004794:	f004 ff3c 	bl	8009610 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f006 fcbd 	bl	800b118 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80047ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f006 f8a4 	bl	800a900 <USB_ReadInterrupts>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d10a      	bne.n	80047d8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f006 fc9a 	bl	800b0fc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f002 0208 	and.w	r2, r2, #8
 80047d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f006 f88f 	bl	800a900 <USB_ReadInterrupts>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e8:	2b80      	cmp	r3, #128	@ 0x80
 80047ea:	d123      	bne.n	8004834 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f8:	2301      	movs	r3, #1
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fc:	e014      	b.n	8004828 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d105      	bne.n	8004822 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	b2db      	uxtb	r3, r3
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fb0a 	bl	8004e36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	3301      	adds	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	791b      	ldrb	r3, [r3, #4]
 800482c:	461a      	mov	r2, r3
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	4293      	cmp	r3, r2
 8004832:	d3e4      	bcc.n	80047fe <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f006 f861 	bl	800a900 <USB_ReadInterrupts>
 800483e:	4603      	mov	r3, r0
 8004840:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004848:	d13c      	bne.n	80048c4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800484a:	2301      	movs	r3, #1
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
 800484e:	e02b      	b.n	80048a8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	3318      	adds	r3, #24
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d115      	bne.n	80048a2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004876:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004878:	2b00      	cmp	r3, #0
 800487a:	da12      	bge.n	80048a2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	3317      	adds	r3, #23
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004898:	b2db      	uxtb	r3, r3
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 faca 	bl	8004e36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	3301      	adds	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	791b      	ldrb	r3, [r3, #4]
 80048ac:	461a      	mov	r2, r3
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d3cd      	bcc.n	8004850 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80048c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f006 f819 	bl	800a900 <USB_ReadInterrupts>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048d8:	d156      	bne.n	8004988 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048da:	2301      	movs	r3, #1
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048de:	e045      	b.n	800496c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d12e      	bne.n	8004966 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004908:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800490a:	2b00      	cmp	r3, #0
 800490c:	da2b      	bge.n	8004966 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	0c1a      	lsrs	r2, r3, #16
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004918:	4053      	eors	r3, r2
 800491a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800491e:	2b00      	cmp	r3, #0
 8004920:	d121      	bne.n	8004966 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004934:	2201      	movs	r2, #1
 8004936:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800495e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004962:	6053      	str	r3, [r2, #4]
            break;
 8004964:	e008      	b.n	8004978 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	3301      	adds	r3, #1
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	791b      	ldrb	r3, [r3, #4]
 8004970:	461a      	mov	r2, r3
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	4293      	cmp	r3, r2
 8004976:	d3b3      	bcc.n	80048e0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f005 ffb7 	bl	800a900 <USB_ReadInterrupts>
 8004992:	4603      	mov	r3, r0
 8004994:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499c:	d10a      	bne.n	80049b4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f006 fc32 	bl	800b208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80049b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f005 ffa1 	bl	800a900 <USB_ReadInterrupts>
 80049be:	4603      	mov	r3, r0
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d115      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f006 fc22 	bl	800b224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
 80049f0:	e000      	b.n	80049f4 <HAL_PCD_IRQHandler+0x996>
      return;
 80049f2:	bf00      	nop
    }
  }
}
 80049f4:	3734      	adds	r7, #52	@ 0x34
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd90      	pop	{r4, r7, pc}

080049fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_PCD_SetAddress+0x1a>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e012      	b.n	8004a3a <HAL_PCD_SetAddress+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f005 ff00 	bl	800a830 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	4608      	mov	r0, r1
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4603      	mov	r3, r0
 8004a52:	70fb      	strb	r3, [r7, #3]
 8004a54:	460b      	mov	r3, r1
 8004a56:	803b      	strh	r3, [r7, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	da0f      	bge.n	8004a88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	f003 020f 	and.w	r2, r3, #15
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	3310      	adds	r3, #16
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2201      	movs	r2, #1
 8004a84:	705a      	strb	r2, [r3, #1]
 8004a86:	e00f      	b.n	8004aa8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	f003 020f 	and.w	r2, r3, #15
 8004a8e:	4613      	mov	r3, r2
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004ab4:	883b      	ldrh	r3, [r7, #0]
 8004ab6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	78ba      	ldrb	r2, [r7, #2]
 8004ac2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ad6:	78bb      	ldrb	r3, [r7, #2]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d102      	bne.n	8004ae2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_PCD_EP_Open+0xae>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e00e      	b.n	8004b0e <HAL_PCD_EP_Open+0xcc>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f005 f880 	bl	8009c04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004b0c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da0f      	bge.n	8004b4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	f003 020f 	and.w	r2, r3, #15
 8004b30:	4613      	mov	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	3310      	adds	r3, #16
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3304      	adds	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	705a      	strb	r2, [r3, #1]
 8004b48:	e00f      	b.n	8004b6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	4413      	add	r3, r2
 8004b60:	3304      	adds	r3, #4
 8004b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_PCD_EP_Close+0x6e>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e00e      	b.n	8004ba2 <HAL_PCD_EP_Close+0x8c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68f9      	ldr	r1, [r7, #12]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f005 f8be 	bl	8009d14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bba:	7afb      	ldrb	r3, [r7, #11]
 8004bbc:	f003 020f 	and.w	r2, r3, #15
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2200      	movs	r2, #0
 8004be4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bec:	7afb      	ldrb	r3, [r7, #11]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	799b      	ldrb	r3, [r3, #6]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	799b      	ldrb	r3, [r3, #6]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	f005 f95b 	bl	8009ecc <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	7afb      	ldrb	r3, [r7, #11]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	3310      	adds	r3, #16
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	3304      	adds	r3, #4
 8004c76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2200      	movs	r2, #0
 8004c88:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c90:	7afb      	ldrb	r3, [r7, #11]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	799b      	ldrb	r3, [r3, #6]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d102      	bne.n	8004caa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	799b      	ldrb	r3, [r3, #6]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6979      	ldr	r1, [r7, #20]
 8004cb6:	f005 f909 	bl	8009ecc <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	7912      	ldrb	r2, [r2, #4]
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e04f      	b.n	8004d82 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	da0f      	bge.n	8004d0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	f003 020f 	and.w	r2, r3, #15
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3304      	adds	r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	705a      	strb	r2, [r3, #1]
 8004d08:	e00d      	b.n	8004d26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_PCD_EP_SetStall+0x82>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e01d      	b.n	8004d82 <HAL_PCD_EP_SetStall+0xbe>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f005 fc97 	bl	800a688 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	7999      	ldrb	r1, [r3, #6]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d72:	461a      	mov	r2, r3
 8004d74:	f005 fe88 	bl	800aa88 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	7912      	ldrb	r2, [r2, #4]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e042      	b.n	8004e2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da0f      	bge.n	8004dd0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	f003 020f 	and.w	r2, r3, #15
 8004db6:	4613      	mov	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	3310      	adds	r3, #16
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	705a      	strb	r2, [r3, #1]
 8004dce:	e00f      	b.n	8004df0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	f003 020f 	and.w	r2, r3, #15
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	3304      	adds	r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_PCD_EP_ClrStall+0x86>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e00e      	b.n	8004e2e <HAL_PCD_EP_ClrStall+0xa4>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f005 fca0 	bl	800a764 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da0c      	bge.n	8004e64 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	f003 020f 	and.w	r2, r3, #15
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	3310      	adds	r3, #16
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3304      	adds	r3, #4
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e00c      	b.n	8004e7e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	f003 020f 	and.w	r2, r3, #15
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f005 fabf 	bl	800a408 <USB_EPStopXfer>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	@ 0x28
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	3310      	adds	r3, #16
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4413      	add	r3, r2
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d901      	bls.n	8004ed0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e06b      	b.n	8004fa8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d902      	bls.n	8004eec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	3303      	adds	r3, #3
 8004ef0:	089b      	lsrs	r3, r3, #2
 8004ef2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ef4:	e02a      	b.n	8004f4c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d902      	bls.n	8004f12 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3303      	adds	r3, #3
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68d9      	ldr	r1, [r3, #12]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	6978      	ldr	r0, [r7, #20]
 8004f30:	f005 fb14 	bl	800a55c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	441a      	add	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	441a      	add	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d809      	bhi.n	8004f76 <PCD_WriteEmptyTxFifo+0xde>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d203      	bcs.n	8004f76 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1bf      	bne.n	8004ef6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d811      	bhi.n	8004fa6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	2201      	movs	r2, #1
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	6939      	ldr	r1, [r7, #16]
 8004f9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	333c      	adds	r3, #60	@ 0x3c
 8004fc8:	3304      	adds	r3, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	799b      	ldrb	r3, [r3, #6]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d17b      	bne.n	80050de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d015      	beq.n	800501c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4a61      	ldr	r2, [pc, #388]	@ (8005178 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	f240 80b9 	bls.w	800516c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80b3 	beq.w	800516c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005012:	461a      	mov	r2, r3
 8005014:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005018:	6093      	str	r3, [r2, #8]
 800501a:	e0a7      	b.n	800516c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005032:	461a      	mov	r2, r3
 8005034:	2320      	movs	r3, #32
 8005036:	6093      	str	r3, [r2, #8]
 8005038:	e098      	b.n	800516c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005040:	2b00      	cmp	r3, #0
 8005042:	f040 8093 	bne.w	800516c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4a4b      	ldr	r2, [pc, #300]	@ (8005178 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d90f      	bls.n	800506e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005064:	461a      	mov	r2, r3
 8005066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800506a:	6093      	str	r3, [r2, #8]
 800506c:	e07e      	b.n	800516c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4413      	add	r3, r2
 8005080:	3304      	adds	r3, #4
 8005082:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1a      	ldr	r2, [r3, #32]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	0159      	lsls	r1, r3, #5
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	440b      	add	r3, r1
 8005090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d114      	bne.n	80050d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050b8:	461a      	mov	r2, r3
 80050ba:	2101      	movs	r1, #1
 80050bc:	f005 fce4 	bl	800aa88 <USB_EP0_OutStart>
 80050c0:	e006      	b.n	80050d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	441a      	add	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f005 ffdb 	bl	800b092 <HAL_PCD_DataOutStageCallback>
 80050dc:	e046      	b.n	800516c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	4a26      	ldr	r2, [pc, #152]	@ (800517c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d124      	bne.n	8005130 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005102:	6093      	str	r3, [r2, #8]
 8005104:	e032      	b.n	800516c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511c:	461a      	mov	r2, r3
 800511e:	2320      	movs	r3, #32
 8005120:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f005 ffb2 	bl	800b092 <HAL_PCD_DataOutStageCallback>
 800512e:	e01d      	b.n	800516c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d114      	bne.n	8005160 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	4613      	mov	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005158:	461a      	mov	r2, r3
 800515a:	2100      	movs	r1, #0
 800515c:	f005 fc94 	bl	800aa88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f005 ff93 	bl	800b092 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	4f54300a 	.word	0x4f54300a
 800517c:	4f54310a 	.word	0x4f54310a

08005180 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	333c      	adds	r3, #60	@ 0x3c
 8005198:	3304      	adds	r3, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a15      	ldr	r2, [pc, #84]	@ (8005208 <PCD_EP_OutSetupPacket_int+0x88>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d90e      	bls.n	80051d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051cc:	461a      	mov	r2, r3
 80051ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f005 ff4a 	bl	800b06e <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005208 <PCD_EP_OutSetupPacket_int+0x88>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d90c      	bls.n	80051fc <PCD_EP_OutSetupPacket_int+0x7c>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	799b      	ldrb	r3, [r3, #6]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d108      	bne.n	80051fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051f4:	461a      	mov	r2, r3
 80051f6:	2101      	movs	r1, #1
 80051f8:	f005 fc46 	bl	800aa88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	4f54300a 	.word	0x4f54300a

0800520c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
 8005218:	4613      	mov	r3, r2
 800521a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d107      	bne.n	800523a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800522a:	883b      	ldrh	r3, [r7, #0]
 800522c:	0419      	lsls	r1, r3, #16
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	430a      	orrs	r2, r1
 8005236:	629a      	str	r2, [r3, #40]	@ 0x28
 8005238:	e028      	b.n	800528c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	0c1b      	lsrs	r3, r3, #16
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	4413      	add	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	e00d      	b.n	800526a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	3340      	adds	r3, #64	@ 0x40
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	3301      	adds	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
 800526a:	7bfa      	ldrb	r2, [r7, #15]
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	3b01      	subs	r3, #1
 8005270:	429a      	cmp	r2, r3
 8005272:	d3ec      	bcc.n	800524e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005274:	883b      	ldrh	r3, [r7, #0]
 8005276:	0418      	lsls	r0, r3, #16
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6819      	ldr	r1, [r3, #0]
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	3b01      	subs	r3, #1
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	4302      	orrs	r2, r0
 8005284:	3340      	adds	r3, #64	@ 0x40
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	460b      	mov	r3, r1
 80052a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ee:	f043 0303 	orr.w	r3, r3, #3
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800530c:	4b39      	ldr	r3, [pc, #228]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800530e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005310:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005314:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	429a      	cmp	r2, r3
 800531c:	d10b      	bne.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005324:	d905      	bls.n	8005332 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005326:	4b33      	ldr	r3, [pc, #204]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4a32      	ldr	r2, [pc, #200]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800532c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005330:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e057      	b.n	80053e6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533c:	d90a      	bls.n	8005354 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800533e:	4b2d      	ldr	r3, [pc, #180]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4313      	orrs	r3, r2
 800534a:	4a2a      	ldr	r2, [pc, #168]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800534c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005350:	60d3      	str	r3, [r2, #12]
 8005352:	e007      	b.n	8005364 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005354:	4b27      	ldr	r3, [pc, #156]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800535c:	4925      	ldr	r1, [pc, #148]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4313      	orrs	r3, r2
 8005362:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005364:	4b24      	ldr	r3, [pc, #144]	@ (80053f8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a24      	ldr	r2, [pc, #144]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	099b      	lsrs	r3, r3, #6
 8005370:	2232      	movs	r2, #50	@ 0x32
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	4a21      	ldr	r2, [pc, #132]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	099b      	lsrs	r3, r3, #6
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005382:	e002      	b.n	800538a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3b01      	subs	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800538a:	4b1a      	ldr	r3, [pc, #104]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <HAL_PWREx_ControlVoltageScaling+0x98>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f3      	bne.n	8005384 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01b      	beq.n	80053da <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80053a2:	4b15      	ldr	r3, [pc, #84]	@ (80053f8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a15      	ldr	r2, [pc, #84]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	099b      	lsrs	r3, r3, #6
 80053ae:	2232      	movs	r2, #50	@ 0x32
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	4a11      	ldr	r2, [pc, #68]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	099b      	lsrs	r3, r3, #6
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80053c0:	e002      	b.n	80053c8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80053c8:	4b0a      	ldr	r3, [pc, #40]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80053ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_PWREx_ControlVoltageScaling+0xd6>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f3      	bne.n	80053c2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e000      	b.n	80053e6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	46020800 	.word	0x46020800
 80053f8:	20000000 	.word	0x20000000
 80053fc:	10624dd3 	.word	0x10624dd3

08005400 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005404:	4b04      	ldr	r3, [pc, #16]	@ (8005418 <HAL_PWREx_GetVoltageRange+0x18>)
 8005406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800540c:	4618      	mov	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	46020800 	.word	0x46020800

0800541c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8005420:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	4a04      	ldr	r2, [pc, #16]	@ (8005438 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800542a:	6113      	str	r3, [r2, #16]
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	46020800 	.word	0x46020800

0800543c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005440:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	4a04      	ldr	r2, [pc, #16]	@ (8005458 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005446:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800544a:	6113      	str	r3, [r2, #16]
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	46020800 	.word	0x46020800

0800545c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08e      	sub	sp, #56	@ 0x38
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f000 bec8 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005476:	4b99      	ldr	r3, [pc, #612]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005480:	4b96      	ldr	r3, [pc, #600]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 816c 	beq.w	8005770 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <HAL_RCC_OscConfig+0x52>
 800549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	f040 80de 	bne.w	8005662 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	f040 80da 	bne.w	8005662 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f000 bea5 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054c0:	4b86      	ldr	r3, [pc, #536]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <HAL_RCC_OscConfig+0x7a>
 80054cc:	4b83      	ldr	r3, [pc, #524]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80054d4:	e005      	b.n	80054e2 <HAL_RCC_OscConfig+0x86>
 80054d6:	4b81      	ldr	r3, [pc, #516]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80054d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d255      	bcs.n	8005592 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 f99d 	bl	8006830 <RCC_SetFlashLatencyFromMSIRange>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f000 be82 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005502:	4b76      	ldr	r3, [pc, #472]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	4a75      	ldr	r2, [pc, #468]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005508:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800550c:	6093      	str	r3, [r2, #8]
 800550e:	4b73      	ldr	r3, [pc, #460]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	4970      	ldr	r1, [pc, #448]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 800551c:	4313      	orrs	r3, r2
 800551e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005528:	d309      	bcc.n	800553e <HAL_RCC_OscConfig+0xe2>
 800552a:	4b6c      	ldr	r3, [pc, #432]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f023 021f 	bic.w	r2, r3, #31
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	4969      	ldr	r1, [pc, #420]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005538:	4313      	orrs	r3, r2
 800553a:	60cb      	str	r3, [r1, #12]
 800553c:	e07e      	b.n	800563c <HAL_RCC_OscConfig+0x1e0>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	da0a      	bge.n	800555c <HAL_RCC_OscConfig+0x100>
 8005546:	4b65      	ldr	r3, [pc, #404]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	015b      	lsls	r3, r3, #5
 8005554:	4961      	ldr	r1, [pc, #388]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005556:	4313      	orrs	r3, r2
 8005558:	60cb      	str	r3, [r1, #12]
 800555a:	e06f      	b.n	800563c <HAL_RCC_OscConfig+0x1e0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005564:	d30a      	bcc.n	800557c <HAL_RCC_OscConfig+0x120>
 8005566:	4b5d      	ldr	r3, [pc, #372]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	029b      	lsls	r3, r3, #10
 8005574:	4959      	ldr	r1, [pc, #356]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005576:	4313      	orrs	r3, r2
 8005578:	60cb      	str	r3, [r1, #12]
 800557a:	e05f      	b.n	800563c <HAL_RCC_OscConfig+0x1e0>
 800557c:	4b57      	ldr	r3, [pc, #348]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	03db      	lsls	r3, r3, #15
 800558a:	4954      	ldr	r1, [pc, #336]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 800558c:	4313      	orrs	r3, r2
 800558e:	60cb      	str	r3, [r1, #12]
 8005590:	e054      	b.n	800563c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005592:	4b52      	ldr	r3, [pc, #328]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	4a51      	ldr	r2, [pc, #324]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005598:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800559c:	6093      	str	r3, [r2, #8]
 800559e:	4b4f      	ldr	r3, [pc, #316]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055aa:	494c      	ldr	r1, [pc, #304]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80055b8:	d309      	bcc.n	80055ce <HAL_RCC_OscConfig+0x172>
 80055ba:	4b48      	ldr	r3, [pc, #288]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f023 021f 	bic.w	r2, r3, #31
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	4945      	ldr	r1, [pc, #276]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60cb      	str	r3, [r1, #12]
 80055cc:	e028      	b.n	8005620 <HAL_RCC_OscConfig+0x1c4>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da0a      	bge.n	80055ec <HAL_RCC_OscConfig+0x190>
 80055d6:	4b41      	ldr	r3, [pc, #260]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	015b      	lsls	r3, r3, #5
 80055e4:	493d      	ldr	r1, [pc, #244]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60cb      	str	r3, [r1, #12]
 80055ea:	e019      	b.n	8005620 <HAL_RCC_OscConfig+0x1c4>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f4:	d30a      	bcc.n	800560c <HAL_RCC_OscConfig+0x1b0>
 80055f6:	4b39      	ldr	r3, [pc, #228]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	029b      	lsls	r3, r3, #10
 8005604:	4935      	ldr	r1, [pc, #212]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005606:	4313      	orrs	r3, r2
 8005608:	60cb      	str	r3, [r1, #12]
 800560a:	e009      	b.n	8005620 <HAL_RCC_OscConfig+0x1c4>
 800560c:	4b33      	ldr	r3, [pc, #204]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	03db      	lsls	r3, r3, #15
 800561a:	4930      	ldr	r1, [pc, #192]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 800561c:	4313      	orrs	r3, r2
 800561e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f001 f900 	bl	8006830 <RCC_SetFlashLatencyFromMSIRange>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f000 bde5 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800563c:	f001 f8de 	bl	80067fc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005640:	4b27      	ldr	r3, [pc, #156]	@ (80056e0 <HAL_RCC_OscConfig+0x284>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f7fc fc03 	bl	8001e50 <HAL_InitTick>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 808a 	beq.w	800576e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800565a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800565e:	f000 bdd2 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d066      	beq.n	8005738 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800566a:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1b      	ldr	r2, [pc, #108]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005676:	f7fc fc75 	bl	8001f64 <HAL_GetTick>
 800567a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800567c:	e009      	b.n	8005692 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800567e:	f7fc fc71 	bl	8001f64 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d902      	bls.n	8005692 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	f000 bdba 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005692:	4b12      	ldr	r3, [pc, #72]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0ef      	beq.n	800567e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800569e:	4b0f      	ldr	r3, [pc, #60]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	4a0e      	ldr	r2, [pc, #56]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80056a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056a8:	6093      	str	r3, [r2, #8]
 80056aa:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	4909      	ldr	r1, [pc, #36]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80056c4:	d30e      	bcc.n	80056e4 <HAL_RCC_OscConfig+0x288>
 80056c6:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f023 021f 	bic.w	r2, r3, #31
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	4902      	ldr	r1, [pc, #8]	@ (80056dc <HAL_RCC_OscConfig+0x280>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60cb      	str	r3, [r1, #12]
 80056d8:	e04a      	b.n	8005770 <HAL_RCC_OscConfig+0x314>
 80056da:	bf00      	nop
 80056dc:	46020c00 	.word	0x46020c00
 80056e0:	20000070 	.word	0x20000070
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da0a      	bge.n	8005702 <HAL_RCC_OscConfig+0x2a6>
 80056ec:	4b98      	ldr	r3, [pc, #608]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	015b      	lsls	r3, r3, #5
 80056fa:	4995      	ldr	r1, [pc, #596]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60cb      	str	r3, [r1, #12]
 8005700:	e036      	b.n	8005770 <HAL_RCC_OscConfig+0x314>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800570a:	d30a      	bcc.n	8005722 <HAL_RCC_OscConfig+0x2c6>
 800570c:	4b90      	ldr	r3, [pc, #576]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	029b      	lsls	r3, r3, #10
 800571a:	498d      	ldr	r1, [pc, #564]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800571c:	4313      	orrs	r3, r2
 800571e:	60cb      	str	r3, [r1, #12]
 8005720:	e026      	b.n	8005770 <HAL_RCC_OscConfig+0x314>
 8005722:	4b8b      	ldr	r3, [pc, #556]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	03db      	lsls	r3, r3, #15
 8005730:	4987      	ldr	r1, [pc, #540]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005732:	4313      	orrs	r3, r2
 8005734:	60cb      	str	r3, [r1, #12]
 8005736:	e01b      	b.n	8005770 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005738:	4b85      	ldr	r3, [pc, #532]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a84      	ldr	r2, [pc, #528]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800573e:	f023 0301 	bic.w	r3, r3, #1
 8005742:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005744:	f7fc fc0e 	bl	8001f64 <HAL_GetTick>
 8005748:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800574a:	e009      	b.n	8005760 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800574c:	f7fc fc0a 	bl	8001f64 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d902      	bls.n	8005760 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	f000 bd53 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005760:	4b7b      	ldr	r3, [pc, #492]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ef      	bne.n	800574c <HAL_RCC_OscConfig+0x2f0>
 800576c:	e000      	b.n	8005770 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800576e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 808b 	beq.w	8005894 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	2b08      	cmp	r3, #8
 8005782:	d005      	beq.n	8005790 <HAL_RCC_OscConfig+0x334>
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	2b0c      	cmp	r3, #12
 8005788:	d109      	bne.n	800579e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	2b03      	cmp	r3, #3
 800578e:	d106      	bne.n	800579e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d17d      	bne.n	8005894 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f000 bd34 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a6:	d106      	bne.n	80057b6 <HAL_RCC_OscConfig+0x35a>
 80057a8:	4b69      	ldr	r3, [pc, #420]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a68      	ldr	r2, [pc, #416]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e041      	b.n	800583a <HAL_RCC_OscConfig+0x3de>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057be:	d112      	bne.n	80057e6 <HAL_RCC_OscConfig+0x38a>
 80057c0:	4b63      	ldr	r3, [pc, #396]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a62      	ldr	r2, [pc, #392]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4b60      	ldr	r3, [pc, #384]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057d2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	4b5d      	ldr	r3, [pc, #372]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a5c      	ldr	r2, [pc, #368]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e029      	b.n	800583a <HAL_RCC_OscConfig+0x3de>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80057ee:	d112      	bne.n	8005816 <HAL_RCC_OscConfig+0x3ba>
 80057f0:	4b57      	ldr	r3, [pc, #348]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a56      	ldr	r2, [pc, #344]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	4b54      	ldr	r3, [pc, #336]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a53      	ldr	r2, [pc, #332]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	4b51      	ldr	r3, [pc, #324]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a50      	ldr	r2, [pc, #320]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800580e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	e011      	b.n	800583a <HAL_RCC_OscConfig+0x3de>
 8005816:	4b4e      	ldr	r3, [pc, #312]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a4d      	ldr	r2, [pc, #308]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800581c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	4b4b      	ldr	r3, [pc, #300]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a4a      	ldr	r2, [pc, #296]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005828:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	4b48      	ldr	r3, [pc, #288]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a47      	ldr	r2, [pc, #284]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005834:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005838:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d014      	beq.n	800586c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005842:	f7fc fb8f 	bl	8001f64 <HAL_GetTick>
 8005846:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005848:	e009      	b.n	800585e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800584a:	f7fc fb8b 	bl	8001f64 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b64      	cmp	r3, #100	@ 0x64
 8005856:	d902      	bls.n	800585e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	f000 bcd4 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800585e:	4b3c      	ldr	r3, [pc, #240]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0ef      	beq.n	800584a <HAL_RCC_OscConfig+0x3ee>
 800586a:	e013      	b.n	8005894 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800586c:	f7fc fb7a 	bl	8001f64 <HAL_GetTick>
 8005870:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005872:	e009      	b.n	8005888 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005874:	f7fc fb76 	bl	8001f64 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b64      	cmp	r3, #100	@ 0x64
 8005880:	d902      	bls.n	8005888 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	f000 bcbf 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005888:	4b31      	ldr	r3, [pc, #196]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ef      	bne.n	8005874 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d05f      	beq.n	8005960 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d005      	beq.n	80058b2 <HAL_RCC_OscConfig+0x456>
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	2b0c      	cmp	r3, #12
 80058aa:	d114      	bne.n	80058d6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d111      	bne.n	80058d6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f000 bca3 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b23      	ldr	r3, [pc, #140]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	041b      	lsls	r3, r3, #16
 80058ce:	4920      	ldr	r1, [pc, #128]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80058d4:	e044      	b.n	8005960 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d024      	beq.n	8005928 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80058de:	4b1c      	ldr	r3, [pc, #112]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 80058e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80058ea:	f7fc fb3b 	bl	8001f64 <HAL_GetTick>
 80058ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058f0:	e009      	b.n	8005906 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f2:	f7fc fb37 	bl	8001f64 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d902      	bls.n	8005906 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	f000 bc80 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005906:	4b12      	ldr	r3, [pc, #72]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0ef      	beq.n	80058f2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005912:	4b0f      	ldr	r3, [pc, #60]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	041b      	lsls	r3, r3, #16
 8005920:	490b      	ldr	r1, [pc, #44]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 8005922:	4313      	orrs	r3, r2
 8005924:	610b      	str	r3, [r1, #16]
 8005926:	e01b      	b.n	8005960 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005928:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a08      	ldr	r2, [pc, #32]	@ (8005950 <HAL_RCC_OscConfig+0x4f4>)
 800592e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005932:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005934:	f7fc fb16 	bl	8001f64 <HAL_GetTick>
 8005938:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800593a:	e00b      	b.n	8005954 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800593c:	f7fc fb12 	bl	8001f64 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d904      	bls.n	8005954 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	f000 bc5b 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
 8005950:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005954:	4baf      	ldr	r3, [pc, #700]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ed      	bne.n	800593c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80c8 	beq.w	8005afe <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005974:	4ba7      	ldr	r3, [pc, #668]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d111      	bne.n	80059a6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005982:	4ba4      	ldr	r3, [pc, #656]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005988:	4aa2      	ldr	r2, [pc, #648]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 800598a:	f043 0304 	orr.w	r3, r3, #4
 800598e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005992:	4ba0      	ldr	r3, [pc, #640]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80059a6:	4b9c      	ldr	r3, [pc, #624]	@ (8005c18 <HAL_RCC_OscConfig+0x7bc>)
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d119      	bne.n	80059e6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80059b2:	4b99      	ldr	r3, [pc, #612]	@ (8005c18 <HAL_RCC_OscConfig+0x7bc>)
 80059b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b6:	4a98      	ldr	r2, [pc, #608]	@ (8005c18 <HAL_RCC_OscConfig+0x7bc>)
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059be:	f7fc fad1 	bl	8001f64 <HAL_GetTick>
 80059c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80059c4:	e009      	b.n	80059da <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c6:	f7fc facd 	bl	8001f64 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d902      	bls.n	80059da <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	f000 bc16 	b.w	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80059da:	4b8f      	ldr	r3, [pc, #572]	@ (8005c18 <HAL_RCC_OscConfig+0x7bc>)
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0ef      	beq.n	80059c6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d05f      	beq.n	8005aae <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80059ee:	4b89      	ldr	r3, [pc, #548]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 80059f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059f4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d037      	beq.n	8005a74 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e3f4      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01b      	beq.n	8005a5e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005a26:	4b7b      	ldr	r3, [pc, #492]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a2c:	4a79      	ldr	r2, [pc, #484]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005a2e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005a32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005a36:	f7fc fa95 	bl	8001f64 <HAL_GetTick>
 8005a3a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3e:	f7fc fa91 	bl	8001f64 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e3da      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005a50:	4b70      	ldr	r3, [pc, #448]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1ef      	bne.n	8005a3e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a64:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	4969      	ldr	r1, [pc, #420]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005a74:	4b67      	ldr	r3, [pc, #412]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a7a:	4a66      	ldr	r2, [pc, #408]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005a7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005a84:	f7fc fa6e 	bl	8001f64 <HAL_GetTick>
 8005a88:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a8c:	f7fc fa6a 	bl	8001f64 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b05      	cmp	r3, #5
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e3b3      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0ef      	beq.n	8005a8c <HAL_RCC_OscConfig+0x630>
 8005aac:	e01b      	b.n	8005ae6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005aae:	4b59      	ldr	r3, [pc, #356]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ab4:	4a57      	ldr	r2, [pc, #348]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005ab6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005aba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005abe:	f7fc fa51 	bl	8001f64 <HAL_GetTick>
 8005ac2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac6:	f7fc fa4d 	bl	8001f64 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b05      	cmp	r3, #5
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e396      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ade:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1ef      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ae6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d107      	bne.n	8005afe <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aee:	4b49      	ldr	r3, [pc, #292]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005af4:	4a47      	ldr	r2, [pc, #284]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005af6:	f023 0304 	bic.w	r3, r3, #4
 8005afa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8111 	beq.w	8005d2e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b12:	4b40      	ldr	r3, [pc, #256]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d111      	bne.n	8005b44 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b20:	4b3c      	ldr	r3, [pc, #240]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b26:	4a3b      	ldr	r2, [pc, #236]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005b28:	f043 0304 	orr.w	r3, r3, #4
 8005b2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005b30:	4b38      	ldr	r3, [pc, #224]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b44:	4b34      	ldr	r3, [pc, #208]	@ (8005c18 <HAL_RCC_OscConfig+0x7bc>)
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d118      	bne.n	8005b82 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005b50:	4b31      	ldr	r3, [pc, #196]	@ (8005c18 <HAL_RCC_OscConfig+0x7bc>)
 8005b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b54:	4a30      	ldr	r2, [pc, #192]	@ (8005c18 <HAL_RCC_OscConfig+0x7bc>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b5c:	f7fc fa02 	bl	8001f64 <HAL_GetTick>
 8005b60:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b64:	f7fc f9fe 	bl	8001f64 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e347      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b76:	4b28      	ldr	r3, [pc, #160]	@ (8005c18 <HAL_RCC_OscConfig+0x7bc>)
 8005b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01f      	beq.n	8005bce <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d010      	beq.n	8005bbc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005ba2:	f043 0304 	orr.w	r3, r3, #4
 8005ba6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005baa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bb0:	4a18      	ldr	r2, [pc, #96]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005bba:	e018      	b.n	8005bee <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005bbc:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bc2:	4a14      	ldr	r2, [pc, #80]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005bcc:	e00f      	b.n	8005bee <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005bce:	4b11      	ldr	r3, [pc, #68]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005bde:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005be4:	4a0b      	ldr	r2, [pc, #44]	@ (8005c14 <HAL_RCC_OscConfig+0x7b8>)
 8005be6:	f023 0304 	bic.w	r3, r3, #4
 8005bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d057      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005bf6:	f7fc f9b5 	bl	8001f64 <HAL_GetTick>
 8005bfa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bfc:	e00e      	b.n	8005c1c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfe:	f7fc f9b1 	bl	8001f64 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d905      	bls.n	8005c1c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e2f8      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
 8005c14:	46020c00 	.word	0x46020c00
 8005c18:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c1c:	4b9c      	ldr	r3, [pc, #624]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0e9      	beq.n	8005bfe <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01b      	beq.n	8005c6e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c36:	4b96      	ldr	r3, [pc, #600]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c3c:	4a94      	ldr	r2, [pc, #592]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c48:	f7fc f98c 	bl	8001f64 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e2d3      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005c5e:	4b8c      	ldr	r3, [pc, #560]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ed      	beq.n	8005c48 <HAL_RCC_OscConfig+0x7ec>
 8005c6c:	e053      	b.n	8005d16 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c6e:	4b88      	ldr	r3, [pc, #544]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c74:	4a86      	ldr	r2, [pc, #536]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c7e:	e00a      	b.n	8005c96 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c80:	f7fc f970 	bl	8001f64 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e2b7      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c96:	4b7e      	ldr	r3, [pc, #504]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1ed      	bne.n	8005c80 <HAL_RCC_OscConfig+0x824>
 8005ca4:	e037      	b.n	8005d16 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005ca6:	f7fc f95d 	bl	8001f64 <HAL_GetTick>
 8005caa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cac:	e00a      	b.n	8005cc4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cae:	f7fc f959 	bl	8001f64 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e2a0      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cc4:	4b72      	ldr	r3, [pc, #456]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1ed      	bne.n	8005cae <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005cd2:	4b6f      	ldr	r3, [pc, #444]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01a      	beq.n	8005d16 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ce6:	4a6a      	ldr	r2, [pc, #424]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005cf0:	e00a      	b.n	8005d08 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf2:	f7fc f937 	bl	8001f64 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e27e      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005d08:	4b61      	ldr	r3, [pc, #388]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1ed      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d16:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d24:	4a5a      	ldr	r2, [pc, #360]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005d26:	f023 0304 	bic.w	r3, r3, #4
 8005d2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d036      	beq.n	8005da8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d019      	beq.n	8005d76 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005d42:	4b53      	ldr	r3, [pc, #332]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a52      	ldr	r2, [pc, #328]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005d48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d4c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005d4e:	f7fc f909 	bl	8001f64 <HAL_GetTick>
 8005d52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d56:	f7fc f905 	bl	8001f64 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e24e      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005d68:	4b49      	ldr	r3, [pc, #292]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <HAL_RCC_OscConfig+0x8fa>
 8005d74:	e018      	b.n	8005da8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005d76:	4b46      	ldr	r3, [pc, #280]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a45      	ldr	r2, [pc, #276]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d80:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005d82:	f7fc f8ef 	bl	8001f64 <HAL_GetTick>
 8005d86:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d8a:	f7fc f8eb 	bl	8001f64 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e234      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f0      	bne.n	8005d8a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d036      	beq.n	8005e22 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d019      	beq.n	8005df0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005dbc:	4b34      	ldr	r3, [pc, #208]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a33      	ldr	r2, [pc, #204]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dc6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005dc8:	f7fc f8cc 	bl	8001f64 <HAL_GetTick>
 8005dcc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005dd0:	f7fc f8c8 	bl	8001f64 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e211      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005de2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0f0      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x974>
 8005dee:	e018      	b.n	8005e22 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005df0:	4b27      	ldr	r3, [pc, #156]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a26      	ldr	r2, [pc, #152]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dfa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005dfc:	f7fc f8b2 	bl	8001f64 <HAL_GetTick>
 8005e00:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005e04:	f7fc f8ae 	bl	8001f64 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e1f7      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005e16:	4b1e      	ldr	r3, [pc, #120]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d07f      	beq.n	8005f2e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d062      	beq.n	8005efc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005e36:	4b16      	ldr	r3, [pc, #88]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005e3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e40:	6093      	str	r3, [r2, #8]
 8005e42:	4b13      	ldr	r3, [pc, #76]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	4910      	ldr	r1, [pc, #64]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005e5c:	d309      	bcc.n	8005e72 <HAL_RCC_OscConfig+0xa16>
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f023 021f 	bic.w	r2, r3, #31
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	4909      	ldr	r1, [pc, #36]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60cb      	str	r3, [r1, #12]
 8005e70:	e02a      	b.n	8005ec8 <HAL_RCC_OscConfig+0xa6c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	da0c      	bge.n	8005e94 <HAL_RCC_OscConfig+0xa38>
 8005e7a:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	015b      	lsls	r3, r3, #5
 8005e88:	4901      	ldr	r1, [pc, #4]	@ (8005e90 <HAL_RCC_OscConfig+0xa34>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60cb      	str	r3, [r1, #12]
 8005e8e:	e01b      	b.n	8005ec8 <HAL_RCC_OscConfig+0xa6c>
 8005e90:	46020c00 	.word	0x46020c00
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9c:	d30a      	bcc.n	8005eb4 <HAL_RCC_OscConfig+0xa58>
 8005e9e:	4ba1      	ldr	r3, [pc, #644]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	029b      	lsls	r3, r3, #10
 8005eac:	499d      	ldr	r1, [pc, #628]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60cb      	str	r3, [r1, #12]
 8005eb2:	e009      	b.n	8005ec8 <HAL_RCC_OscConfig+0xa6c>
 8005eb4:	4b9b      	ldr	r3, [pc, #620]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	03db      	lsls	r3, r3, #15
 8005ec2:	4998      	ldr	r1, [pc, #608]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005ec8:	4b96      	ldr	r3, [pc, #600]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a95      	ldr	r2, [pc, #596]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005ece:	f043 0310 	orr.w	r3, r3, #16
 8005ed2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005ed4:	f7fc f846 	bl	8001f64 <HAL_GetTick>
 8005ed8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005edc:	f7fc f842 	bl	8001f64 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e18b      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005eee:	4b8d      	ldr	r3, [pc, #564]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0xa80>
 8005efa:	e018      	b.n	8005f2e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005efc:	4b89      	ldr	r3, [pc, #548]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a88      	ldr	r2, [pc, #544]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005f02:	f023 0310 	bic.w	r3, r3, #16
 8005f06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005f08:	f7fc f82c 	bl	8001f64 <HAL_GetTick>
 8005f0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005f10:	f7fc f828 	bl	8001f64 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e171      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005f22:	4b80      	ldr	r3, [pc, #512]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8166 	beq.w	8006204 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f3e:	4b79      	ldr	r3, [pc, #484]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	f000 80f2 	beq.w	8006130 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f040 80c5 	bne.w	80060e0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005f56:	4b73      	ldr	r3, [pc, #460]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a72      	ldr	r2, [pc, #456]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005f5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005f62:	f7fb ffff 	bl	8001f64 <HAL_GetTick>
 8005f66:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6a:	f7fb fffb 	bl	8001f64 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e144      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005f7c:	4b69      	ldr	r3, [pc, #420]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f0      	bne.n	8005f6a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f88:	4b66      	ldr	r3, [pc, #408]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d111      	bne.n	8005fba <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005f96:	4b63      	ldr	r3, [pc, #396]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f9c:	4a61      	ldr	r2, [pc, #388]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005f9e:	f043 0304 	orr.w	r3, r3, #4
 8005fa2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005fa6:	4b5f      	ldr	r3, [pc, #380]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005fba:	4b5b      	ldr	r3, [pc, #364]	@ (8006128 <HAL_RCC_OscConfig+0xccc>)
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fc6:	d102      	bne.n	8005fce <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005fce:	4b56      	ldr	r3, [pc, #344]	@ (8006128 <HAL_RCC_OscConfig+0xccc>)
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	4a55      	ldr	r2, [pc, #340]	@ (8006128 <HAL_RCC_OscConfig+0xccc>)
 8005fd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fd8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005fda:	4b52      	ldr	r3, [pc, #328]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fe2:	f023 0303 	bic.w	r3, r3, #3
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005fee:	3a01      	subs	r2, #1
 8005ff0:	0212      	lsls	r2, r2, #8
 8005ff2:	4311      	orrs	r1, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	494a      	ldr	r1, [pc, #296]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006000:	4b48      	ldr	r3, [pc, #288]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006004:	4b49      	ldr	r3, [pc, #292]	@ (800612c <HAL_RCC_OscConfig+0xcd0>)
 8006006:	4013      	ands	r3, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800600c:	3a01      	subs	r2, #1
 800600e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006016:	3a01      	subs	r2, #1
 8006018:	0252      	lsls	r2, r2, #9
 800601a:	b292      	uxth	r2, r2
 800601c:	4311      	orrs	r1, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006022:	3a01      	subs	r2, #1
 8006024:	0412      	lsls	r2, r2, #16
 8006026:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800602a:	4311      	orrs	r1, r2
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006030:	3a01      	subs	r2, #1
 8006032:	0612      	lsls	r2, r2, #24
 8006034:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006038:	430a      	orrs	r2, r1
 800603a:	493a      	ldr	r1, [pc, #232]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 800603c:	4313      	orrs	r3, r2
 800603e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006040:	4b38      	ldr	r3, [pc, #224]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006044:	4a37      	ldr	r2, [pc, #220]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006050:	4a34      	ldr	r2, [pc, #208]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006056:	4b33      	ldr	r3, [pc, #204]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605a:	4a32      	ldr	r2, [pc, #200]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 800605c:	f043 0310 	orr.w	r3, r3, #16
 8006060:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006062:	4b30      	ldr	r3, [pc, #192]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006066:	f023 020c 	bic.w	r2, r3, #12
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606e:	492d      	ldr	r1, [pc, #180]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006070:	4313      	orrs	r3, r2
 8006072:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006074:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006078:	2b01      	cmp	r3, #1
 800607a:	d105      	bne.n	8006088 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800607c:	4b2a      	ldr	r3, [pc, #168]	@ (8006128 <HAL_RCC_OscConfig+0xccc>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a29      	ldr	r2, [pc, #164]	@ (8006128 <HAL_RCC_OscConfig+0xccc>)
 8006082:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006086:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006088:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800608c:	2b01      	cmp	r3, #1
 800608e:	d107      	bne.n	80060a0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006090:	4b24      	ldr	r3, [pc, #144]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006096:	4a23      	ldr	r2, [pc, #140]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006098:	f023 0304 	bic.w	r3, r3, #4
 800609c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80060a0:	4b20      	ldr	r3, [pc, #128]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 80060a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80060ac:	f7fb ff5a 	bl	8001f64 <HAL_GetTick>
 80060b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b4:	f7fb ff56 	bl	8001f64 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e09f      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80060c6:	4b17      	ldr	r3, [pc, #92]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060d2:	4b14      	ldr	r3, [pc, #80]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 80060d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d6:	4a13      	ldr	r2, [pc, #76]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 80060d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060dc:	6293      	str	r3, [r2, #40]	@ 0x28
 80060de:	e091      	b.n	8006204 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80060e0:	4b10      	ldr	r3, [pc, #64]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 80060e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80060ec:	f7fb ff3a 	bl	8001f64 <HAL_GetTick>
 80060f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f4:	f7fb ff36 	bl	8001f64 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e07f      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006106:	4b07      	ldr	r3, [pc, #28]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006112:	4b04      	ldr	r3, [pc, #16]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006116:	4a03      	ldr	r2, [pc, #12]	@ (8006124 <HAL_RCC_OscConfig+0xcc8>)
 8006118:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800611c:	f023 0303 	bic.w	r3, r3, #3
 8006120:	6293      	str	r3, [r2, #40]	@ 0x28
 8006122:	e06f      	b.n	8006204 <HAL_RCC_OscConfig+0xda8>
 8006124:	46020c00 	.word	0x46020c00
 8006128:	46020800 	.word	0x46020800
 800612c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006130:	4b37      	ldr	r3, [pc, #220]	@ (8006210 <HAL_RCC_OscConfig+0xdb4>)
 8006132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006134:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006136:	4b36      	ldr	r3, [pc, #216]	@ (8006210 <HAL_RCC_OscConfig+0xdb4>)
 8006138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006140:	2b01      	cmp	r3, #1
 8006142:	d039      	beq.n	80061b8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f003 0203 	and.w	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614e:	429a      	cmp	r2, r3
 8006150:	d132      	bne.n	80061b8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d129      	bne.n	80061b8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800616e:	429a      	cmp	r2, r3
 8006170:	d122      	bne.n	80061b8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800617c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800617e:	429a      	cmp	r2, r3
 8006180:	d11a      	bne.n	80061b8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	0a5b      	lsrs	r3, r3, #9
 8006186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d111      	bne.n	80061b8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d108      	bne.n	80061b8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	0e1b      	lsrs	r3, r3, #24
 80061aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d001      	beq.n	80061bc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e024      	b.n	8006206 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80061bc:	4b14      	ldr	r3, [pc, #80]	@ (8006210 <HAL_RCC_OscConfig+0xdb4>)
 80061be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c0:	08db      	lsrs	r3, r3, #3
 80061c2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d01a      	beq.n	8006204 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80061ce:	4b10      	ldr	r3, [pc, #64]	@ (8006210 <HAL_RCC_OscConfig+0xdb4>)
 80061d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d2:	4a0f      	ldr	r2, [pc, #60]	@ (8006210 <HAL_RCC_OscConfig+0xdb4>)
 80061d4:	f023 0310 	bic.w	r3, r3, #16
 80061d8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061da:	f7fb fec3 	bl	8001f64 <HAL_GetTick>
 80061de:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80061e0:	bf00      	nop
 80061e2:	f7fb febf 	bl	8001f64 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d0f9      	beq.n	80061e2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f2:	4a07      	ldr	r2, [pc, #28]	@ (8006210 <HAL_RCC_OscConfig+0xdb4>)
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80061f8:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <HAL_RCC_OscConfig+0xdb4>)
 80061fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fc:	4a04      	ldr	r2, [pc, #16]	@ (8006210 <HAL_RCC_OscConfig+0xdb4>)
 80061fe:	f043 0310 	orr.w	r3, r3, #16
 8006202:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3738      	adds	r7, #56	@ 0x38
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	46020c00 	.word	0x46020c00

08006214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e1d9      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006228:	4b9b      	ldr	r3, [pc, #620]	@ (8006498 <HAL_RCC_ClockConfig+0x284>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d910      	bls.n	8006258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006236:	4b98      	ldr	r3, [pc, #608]	@ (8006498 <HAL_RCC_ClockConfig+0x284>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f023 020f 	bic.w	r2, r3, #15
 800623e:	4996      	ldr	r1, [pc, #600]	@ (8006498 <HAL_RCC_ClockConfig+0x284>)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	4313      	orrs	r3, r2
 8006244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006246:	4b94      	ldr	r3, [pc, #592]	@ (8006498 <HAL_RCC_ClockConfig+0x284>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e1c1      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d010      	beq.n	8006286 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	4b8c      	ldr	r3, [pc, #560]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006270:	429a      	cmp	r2, r3
 8006272:	d908      	bls.n	8006286 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006274:	4b89      	ldr	r3, [pc, #548]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	4986      	ldr	r1, [pc, #536]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006282:	4313      	orrs	r3, r2
 8006284:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d012      	beq.n	80062b8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	4b81      	ldr	r3, [pc, #516]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	091b      	lsrs	r3, r3, #4
 800629c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d909      	bls.n	80062b8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80062a4:	4b7d      	ldr	r3, [pc, #500]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	497a      	ldr	r1, [pc, #488]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d010      	beq.n	80062e6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	4b74      	ldr	r3, [pc, #464]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d908      	bls.n	80062e6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80062d4:	4b71      	ldr	r3, [pc, #452]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	496e      	ldr	r1, [pc, #440]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d010      	beq.n	8006314 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	4b69      	ldr	r3, [pc, #420]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	429a      	cmp	r2, r3
 8006300:	d908      	bls.n	8006314 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006302:	4b66      	ldr	r3, [pc, #408]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 020f 	bic.w	r2, r3, #15
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	4963      	ldr	r1, [pc, #396]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006310:	4313      	orrs	r3, r2
 8006312:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80d2 	beq.w	80064c6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006322:	2300      	movs	r3, #0
 8006324:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b03      	cmp	r3, #3
 800632c:	d143      	bne.n	80063b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800632e:	4b5b      	ldr	r3, [pc, #364]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d110      	bne.n	800635e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800633c:	4b57      	ldr	r3, [pc, #348]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 800633e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006342:	4a56      	ldr	r2, [pc, #344]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006344:	f043 0304 	orr.w	r3, r3, #4
 8006348:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800634c:	4b53      	ldr	r3, [pc, #332]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 800634e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	60bb      	str	r3, [r7, #8]
 8006358:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800635a:	2301      	movs	r3, #1
 800635c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800635e:	f7fb fe01 	bl	8001f64 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006364:	4b4e      	ldr	r3, [pc, #312]	@ (80064a0 <HAL_RCC_ClockConfig+0x28c>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00f      	beq.n	8006390 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006372:	f7fb fdf7 	bl	8001f64 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e12b      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006384:	4b46      	ldr	r3, [pc, #280]	@ (80064a0 <HAL_RCC_ClockConfig+0x28c>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006396:	4b41      	ldr	r3, [pc, #260]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800639c:	4a3f      	ldr	r2, [pc, #252]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 800639e:	f023 0304 	bic.w	r3, r3, #4
 80063a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80063a6:	4b3d      	ldr	r3, [pc, #244]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d121      	bne.n	80063f6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e112      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d107      	bne.n	80063ce <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063be:	4b37      	ldr	r3, [pc, #220]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d115      	bne.n	80063f6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e106      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d107      	bne.n	80063e6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80063d6:	4b31      	ldr	r3, [pc, #196]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0fa      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063e6:	4b2d      	ldr	r3, [pc, #180]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e0f2      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80063f6:	4b29      	ldr	r3, [pc, #164]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f023 0203 	bic.w	r2, r3, #3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4926      	ldr	r1, [pc, #152]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006404:	4313      	orrs	r3, r2
 8006406:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006408:	f7fb fdac 	bl	8001f64 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b03      	cmp	r3, #3
 8006414:	d112      	bne.n	800643c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006416:	e00a      	b.n	800642e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006418:	f7fb fda4 	bl	8001f64 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0d6      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800642e:	4b1b      	ldr	r3, [pc, #108]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 030c 	and.w	r3, r3, #12
 8006436:	2b0c      	cmp	r3, #12
 8006438:	d1ee      	bne.n	8006418 <HAL_RCC_ClockConfig+0x204>
 800643a:	e044      	b.n	80064c6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b02      	cmp	r3, #2
 8006442:	d112      	bne.n	800646a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006444:	e00a      	b.n	800645c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006446:	f7fb fd8d 	bl	8001f64 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006454:	4293      	cmp	r3, r2
 8006456:	d901      	bls.n	800645c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e0bf      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800645c:	4b0f      	ldr	r3, [pc, #60]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b08      	cmp	r3, #8
 8006466:	d1ee      	bne.n	8006446 <HAL_RCC_ClockConfig+0x232>
 8006468:	e02d      	b.n	80064c6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d123      	bne.n	80064ba <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006472:	e00a      	b.n	800648a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006474:	f7fb fd76 	bl	8001f64 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e0a8      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800648a:	4b04      	ldr	r3, [pc, #16]	@ (800649c <HAL_RCC_ClockConfig+0x288>)
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1ee      	bne.n	8006474 <HAL_RCC_ClockConfig+0x260>
 8006496:	e016      	b.n	80064c6 <HAL_RCC_ClockConfig+0x2b2>
 8006498:	40022000 	.word	0x40022000
 800649c:	46020c00 	.word	0x46020c00
 80064a0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a4:	f7fb fd5e 	bl	8001f64 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e090      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80064ba:	4b4a      	ldr	r3, [pc, #296]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d1ee      	bne.n	80064a4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d010      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	4b43      	ldr	r3, [pc, #268]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	429a      	cmp	r2, r3
 80064e0:	d208      	bcs.n	80064f4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80064e2:	4b40      	ldr	r3, [pc, #256]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	f023 020f 	bic.w	r2, r3, #15
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	493d      	ldr	r1, [pc, #244]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064f4:	4b3c      	ldr	r3, [pc, #240]	@ (80065e8 <HAL_RCC_ClockConfig+0x3d4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d210      	bcs.n	8006524 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006502:	4b39      	ldr	r3, [pc, #228]	@ (80065e8 <HAL_RCC_ClockConfig+0x3d4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f023 020f 	bic.w	r2, r3, #15
 800650a:	4937      	ldr	r1, [pc, #220]	@ (80065e8 <HAL_RCC_ClockConfig+0x3d4>)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	4313      	orrs	r3, r2
 8006510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006512:	4b35      	ldr	r3, [pc, #212]	@ (80065e8 <HAL_RCC_ClockConfig+0x3d4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d001      	beq.n	8006524 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e05b      	b.n	80065dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d010      	beq.n	8006552 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	4b2b      	ldr	r3, [pc, #172]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800653c:	429a      	cmp	r2, r3
 800653e:	d208      	bcs.n	8006552 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006540:	4b28      	ldr	r3, [pc, #160]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4925      	ldr	r1, [pc, #148]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 800654e:	4313      	orrs	r3, r2
 8006550:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d012      	beq.n	8006584 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	4b20      	ldr	r3, [pc, #128]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800656c:	429a      	cmp	r2, r3
 800656e:	d209      	bcs.n	8006584 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006570:	4b1c      	ldr	r3, [pc, #112]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	4919      	ldr	r1, [pc, #100]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 8006580:	4313      	orrs	r3, r2
 8006582:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	d010      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	4b13      	ldr	r3, [pc, #76]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 8006596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006598:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800659c:	429a      	cmp	r2, r3
 800659e:	d208      	bcs.n	80065b2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80065a0:	4b10      	ldr	r3, [pc, #64]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	490d      	ldr	r1, [pc, #52]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80065b2:	f000 f821 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <HAL_RCC_ClockConfig+0x3d0>)
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	490a      	ldr	r1, [pc, #40]	@ (80065ec <HAL_RCC_ClockConfig+0x3d8>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
 80065c8:	4a09      	ldr	r2, [pc, #36]	@ (80065f0 <HAL_RCC_ClockConfig+0x3dc>)
 80065ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80065cc:	4b09      	ldr	r3, [pc, #36]	@ (80065f4 <HAL_RCC_ClockConfig+0x3e0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fb fc3d 	bl	8001e50 <HAL_InitTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80065da:	7bfb      	ldrb	r3, [r7, #15]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	46020c00 	.word	0x46020c00
 80065e8:	40022000 	.word	0x40022000
 80065ec:	0800cfac 	.word	0x0800cfac
 80065f0:	20000000 	.word	0x20000000
 80065f4:	20000070 	.word	0x20000070

080065f8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b08b      	sub	sp, #44	@ 0x2c
 80065fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006606:	4b78      	ldr	r3, [pc, #480]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 030c 	and.w	r3, r3, #12
 800660e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006610:	4b75      	ldr	r3, [pc, #468]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_RCC_GetSysClockFreq+0x34>
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b0c      	cmp	r3, #12
 8006624:	d121      	bne.n	800666a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d11e      	bne.n	800666a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800662c:	4b6e      	ldr	r3, [pc, #440]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d107      	bne.n	8006648 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006638:	4b6b      	ldr	r3, [pc, #428]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800663a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800663e:	0b1b      	lsrs	r3, r3, #12
 8006640:	f003 030f 	and.w	r3, r3, #15
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
 8006646:	e005      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006648:	4b67      	ldr	r3, [pc, #412]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	0f1b      	lsrs	r3, r3, #28
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006654:	4a65      	ldr	r2, [pc, #404]	@ (80067ec <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d110      	bne.n	8006686 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006668:	e00d      	b.n	8006686 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800666a:	4b5f      	ldr	r3, [pc, #380]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f003 030c 	and.w	r3, r3, #12
 8006672:	2b04      	cmp	r3, #4
 8006674:	d102      	bne.n	800667c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006676:	4b5e      	ldr	r3, [pc, #376]	@ (80067f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006678:	623b      	str	r3, [r7, #32]
 800667a:	e004      	b.n	8006686 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	2b08      	cmp	r3, #8
 8006680:	d101      	bne.n	8006686 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006682:	4b5b      	ldr	r3, [pc, #364]	@ (80067f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006684:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	f040 80a5 	bne.w	80067d8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800668e:	4b56      	ldr	r3, [pc, #344]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006698:	4b53      	ldr	r3, [pc, #332]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800669a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669c:	0a1b      	lsrs	r3, r3, #8
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	3301      	adds	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80066a6:	4b50      	ldr	r3, [pc, #320]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80066a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066aa:	091b      	lsrs	r3, r3, #4
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80066b2:	4b4d      	ldr	r3, [pc, #308]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80066b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b6:	08db      	lsrs	r3, r3, #3
 80066b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ca:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d003      	beq.n	80066dc <HAL_RCC_GetSysClockFreq+0xe4>
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d022      	beq.n	8006720 <HAL_RCC_GetSysClockFreq+0x128>
 80066da:	e043      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80067f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80066ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ee:	4b3e      	ldr	r3, [pc, #248]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80066f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80066fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8006702:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80067f8 <HAL_RCC_GetSysClockFreq+0x200>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800670e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800671e:	e046      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80067f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 800672e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006732:	4b2d      	ldr	r3, [pc, #180]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006742:	ed97 6a01 	vldr	s12, [r7, #4]
 8006746:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80067f8 <HAL_RCC_GetSysClockFreq+0x200>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006762:	e024      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	ee07 3a90 	vmov	s15, r3
 8006774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800677c:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800677e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800678c:	ed97 6a01 	vldr	s12, [r7, #4]
 8006790:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80067f8 <HAL_RCC_GetSysClockFreq+0x200>
 8006794:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006798:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800679c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ac:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80067ae:	4b0e      	ldr	r3, [pc, #56]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80067b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b2:	0e1b      	lsrs	r3, r3, #24
 80067b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067b8:	3301      	adds	r3, #1
 80067ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067d2:	ee17 3a90 	vmov	r3, s15
 80067d6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80067d8:	6a3b      	ldr	r3, [r7, #32]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	372c      	adds	r7, #44	@ 0x2c
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	46020c00 	.word	0x46020c00
 80067ec:	0800cfbc 	.word	0x0800cfbc
 80067f0:	00f42400 	.word	0x00f42400
 80067f4:	4b742400 	.word	0x4b742400
 80067f8:	46000000 	.word	0x46000000

080067fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006800:	f7ff fefa 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 8006804:	4602      	mov	r2, r0
 8006806:	4b07      	ldr	r3, [pc, #28]	@ (8006824 <HAL_RCC_GetHCLKFreq+0x28>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	4906      	ldr	r1, [pc, #24]	@ (8006828 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006810:	5ccb      	ldrb	r3, [r1, r3]
 8006812:	fa22 f303 	lsr.w	r3, r2, r3
 8006816:	4a05      	ldr	r2, [pc, #20]	@ (800682c <HAL_RCC_GetHCLKFreq+0x30>)
 8006818:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800681a:	4b04      	ldr	r3, [pc, #16]	@ (800682c <HAL_RCC_GetHCLKFreq+0x30>)
 800681c:	681b      	ldr	r3, [r3, #0]
}
 800681e:	4618      	mov	r0, r3
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	46020c00 	.word	0x46020c00
 8006828:	0800cfac 	.word	0x0800cfac
 800682c:	20000000 	.word	0x20000000

08006830 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006838:	4b3e      	ldr	r3, [pc, #248]	@ (8006934 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800683a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006846:	f7fe fddb 	bl	8005400 <HAL_PWREx_GetVoltageRange>
 800684a:	6178      	str	r0, [r7, #20]
 800684c:	e019      	b.n	8006882 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800684e:	4b39      	ldr	r3, [pc, #228]	@ (8006934 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006854:	4a37      	ldr	r2, [pc, #220]	@ (8006934 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006856:	f043 0304 	orr.w	r3, r3, #4
 800685a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800685e:	4b35      	ldr	r3, [pc, #212]	@ (8006934 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800686c:	f7fe fdc8 	bl	8005400 <HAL_PWREx_GetVoltageRange>
 8006870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006872:	4b30      	ldr	r3, [pc, #192]	@ (8006934 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006878:	4a2e      	ldr	r2, [pc, #184]	@ (8006934 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800687a:	f023 0304 	bic.w	r3, r3, #4
 800687e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006888:	d003      	beq.n	8006892 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006890:	d109      	bne.n	80068a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006898:	d202      	bcs.n	80068a0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800689a:	2301      	movs	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800689e:	e033      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80068a4:	e030      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068ac:	d208      	bcs.n	80068c0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b4:	d102      	bne.n	80068bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80068b6:	2303      	movs	r3, #3
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	e025      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e035      	b.n	800692c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068c6:	d90f      	bls.n	80068e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068d4:	d902      	bls.n	80068dc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	e015      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80068dc:	2301      	movs	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	e012      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80068e2:	2300      	movs	r3, #0
 80068e4:	613b      	str	r3, [r7, #16]
 80068e6:	e00f      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068ee:	d109      	bne.n	8006904 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f6:	d102      	bne.n	80068fe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80068f8:	2301      	movs	r3, #1
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	e004      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80068fe:	2302      	movs	r3, #2
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	e001      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006904:	2301      	movs	r3, #1
 8006906:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006908:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f023 020f 	bic.w	r2, r3, #15
 8006910:	4909      	ldr	r1, [pc, #36]	@ (8006938 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006918:	4b07      	ldr	r3, [pc, #28]	@ (8006938 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d001      	beq.n	800692a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	46020c00 	.word	0x46020c00
 8006938:	40022000 	.word	0x40022000

0800693c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800693c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006940:	b0b8      	sub	sp, #224	@ 0xe0
 8006942:	af00      	add	r7, sp, #0
 8006944:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006948:	2300      	movs	r3, #0
 800694a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800694e:	2300      	movs	r3, #0
 8006950:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f002 0401 	and.w	r4, r2, #1
 8006960:	2500      	movs	r5, #0
 8006962:	ea54 0305 	orrs.w	r3, r4, r5
 8006966:	d00b      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006968:	4bca      	ldr	r3, [pc, #808]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800696a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800696e:	f023 0103 	bic.w	r1, r3, #3
 8006972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006978:	4ac6      	ldr	r2, [pc, #792]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800697a:	430b      	orrs	r3, r1
 800697c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f002 0802 	and.w	r8, r2, #2
 800698c:	f04f 0900 	mov.w	r9, #0
 8006990:	ea58 0309 	orrs.w	r3, r8, r9
 8006994:	d00b      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006996:	4bbf      	ldr	r3, [pc, #764]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800699c:	f023 010c 	bic.w	r1, r3, #12
 80069a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a6:	4abb      	ldr	r2, [pc, #748]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80069a8:	430b      	orrs	r3, r1
 80069aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	f002 0a04 	and.w	sl, r2, #4
 80069ba:	f04f 0b00 	mov.w	fp, #0
 80069be:	ea5a 030b 	orrs.w	r3, sl, fp
 80069c2:	d00b      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80069c4:	4bb3      	ldr	r3, [pc, #716]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80069c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069ca:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80069ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d4:	4aaf      	ldr	r2, [pc, #700]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80069d6:	430b      	orrs	r3, r1
 80069d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	f002 0308 	and.w	r3, r2, #8
 80069e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069ec:	2300      	movs	r3, #0
 80069ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4313      	orrs	r3, r2
 80069fa:	d00b      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80069fc:	4ba5      	ldr	r3, [pc, #660]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80069fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006a06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0c:	4aa1      	ldr	r2, [pc, #644]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f002 0310 	and.w	r3, r2, #16
 8006a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a24:	2300      	movs	r3, #0
 8006a26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4313      	orrs	r3, r2
 8006a32:	d00b      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006a34:	4b97      	ldr	r3, [pc, #604]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a44:	4a93      	ldr	r2, [pc, #588]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006a46:	430b      	orrs	r3, r1
 8006a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f002 0320 	and.w	r3, r2, #32
 8006a58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	d00b      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006a6c:	4b89      	ldr	r3, [pc, #548]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006a6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a72:	f023 0107 	bic.w	r1, r3, #7
 8006a76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a7c:	4a85      	ldr	r2, [pc, #532]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006a7e:	430b      	orrs	r3, r1
 8006a80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006a90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a94:	2300      	movs	r3, #0
 8006a96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a9a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aaa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ab4:	4a77      	ldr	r2, [pc, #476]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006acc:	2300      	movs	r3, #0
 8006ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ad2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	d00b      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006adc:	4b6d      	ldr	r3, [pc, #436]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ae2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aec:	4a69      	ldr	r2, [pc, #420]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006aee:	430b      	orrs	r3, r1
 8006af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b04:	2300      	movs	r3, #0
 8006b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4313      	orrs	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006b14:	4b5f      	ldr	r3, [pc, #380]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006b1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b24:	4a5b      	ldr	r2, [pc, #364]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006b26:	430b      	orrs	r3, r1
 8006b28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006b38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b46:	460b      	mov	r3, r1
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006b4c:	4b51      	ldr	r3, [pc, #324]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b52:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8006b56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006b70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b74:	2300      	movs	r3, #0
 8006b76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b7a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4313      	orrs	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006b84:	4b43      	ldr	r3, [pc, #268]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b8a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006b8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b94:	4a3f      	ldr	r2, [pc, #252]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006b96:	430b      	orrs	r3, r1
 8006b98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bac:	2300      	movs	r3, #0
 8006bae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bb2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006bbc:	4b35      	ldr	r3, [pc, #212]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bc2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006bc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bcc:	4a31      	ldr	r2, [pc, #196]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006be0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006be2:	2300      	movs	r3, #0
 8006be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006be6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006bea:	460b      	mov	r3, r1
 8006bec:	4313      	orrs	r3, r2
 8006bee:	d00c      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006bf0:	4b28      	ldr	r3, [pc, #160]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bf6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c02:	4a24      	ldr	r2, [pc, #144]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006c04:	430b      	orrs	r3, r1
 8006c06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c16:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c18:	2300      	movs	r3, #0
 8006c1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c20:	460b      	mov	r3, r1
 8006c22:	4313      	orrs	r3, r2
 8006c24:	d04f      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006c26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2e:	2b80      	cmp	r3, #128	@ 0x80
 8006c30:	d02d      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006c32:	2b80      	cmp	r3, #128	@ 0x80
 8006c34:	d827      	bhi.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c36:	2b60      	cmp	r3, #96	@ 0x60
 8006c38:	d02e      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006c3a:	2b60      	cmp	r3, #96	@ 0x60
 8006c3c:	d823      	bhi.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c3e:	2b40      	cmp	r3, #64	@ 0x40
 8006c40:	d006      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006c42:	2b40      	cmp	r3, #64	@ 0x40
 8006c44:	d81f      	bhi.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d011      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006c4e:	e01a      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c50:	4b10      	ldr	r3, [pc, #64]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	4a0f      	ldr	r2, [pc, #60]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c5a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c5c:	e01d      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c62:	3308      	adds	r3, #8
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fc0d 	bl	8007484 <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c70:	e013      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c76:	332c      	adds	r3, #44	@ 0x2c
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fc9b 	bl	80075b4 <RCCEx_PLL3_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c84:	e009      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006c8c:	e005      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8006c8e:	bf00      	nop
 8006c90:	e003      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006c92:	bf00      	nop
 8006c94:	46020c00 	.word	0x46020c00
        break;
 8006c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10d      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006ca2:	4bb6      	ldr	r3, [pc, #728]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ca4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ca8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006cac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb4:	4ab1      	ldr	r2, [pc, #708]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006cbc:	e003      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006cc2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006cc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cd8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	d053      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006ce2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cee:	d033      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf4:	d82c      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cfa:	d02f      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006cfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d00:	d826      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d06:	d008      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d0c:	d820      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d16:	d011      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006d18:	e01a      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d1a:	4b98      	ldr	r3, [pc, #608]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1e:	4a97      	ldr	r2, [pc, #604]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d24:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006d26:	e01a      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fba8 	bl	8007484 <RCCEx_PLL2_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006d3a:	e010      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d40:	332c      	adds	r3, #44	@ 0x2c
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fc36 	bl	80075b4 <RCCEx_PLL3_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006d4e:	e006      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006d56:	e002      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006d66:	4b85      	ldr	r3, [pc, #532]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006d68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d6c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d78:	4a80      	ldr	r2, [pc, #512]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006d80:	e003      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d82:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d86:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006d8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006d96:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d98:	2300      	movs	r3, #0
 8006d9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006da0:	460b      	mov	r3, r1
 8006da2:	4313      	orrs	r3, r2
 8006da4:	d046      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006da6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006daa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006dae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006db2:	d028      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006db4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006db8:	d821      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006dba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dbe:	d022      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dc4:	d81b      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006dc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dca:	d01c      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006dcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dd0:	d815      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd6:	d008      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ddc:	d80f      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d011      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de6:	d00e      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006de8:	e009      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dee:	3308      	adds	r3, #8
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fb47 	bl	8007484 <RCCEx_PLL2_Config>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006dfc:	e004      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006e04:	e000      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8006e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e08:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10d      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006e10:	4b5a      	ldr	r3, [pc, #360]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e16:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e22:	4a56      	ldr	r2, [pc, #344]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006e24:	430b      	orrs	r3, r1
 8006e26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006e2a:	e003      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006e30:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006e40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e42:	2300      	movs	r3, #0
 8006e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	d03f      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d81e      	bhi.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8006e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006ea3 	.word	0x08006ea3
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e87 	.word	0x08006e87
 8006e70:	08006ea3 	.word	0x08006ea3
 8006e74:	08006ea3 	.word	0x08006ea3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e78:	4b40      	ldr	r3, [pc, #256]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e82:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006e84:	e00e      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e8a:	332c      	adds	r3, #44	@ 0x2c
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fb91 	bl	80075b4 <RCCEx_PLL3_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006e98:	e004      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8006ea2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ea4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10d      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006eac:	4b33      	ldr	r3, [pc, #204]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006eae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006eb2:	f023 0107 	bic.w	r1, r3, #7
 8006eb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ec6:	e003      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ecc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006edc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ede:	2300      	movs	r3, #0
 8006ee0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ee2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	d04d      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ef4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ef8:	d028      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8006efa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006efe:	d821      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006f00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f04:	d024      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006f06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f0a:	d81b      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f10:	d00e      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f16:	d815      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01b      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f20:	d110      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f22:	4b16      	ldr	r3, [pc, #88]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f26:	4a15      	ldr	r2, [pc, #84]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f2c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006f2e:	e012      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f34:	332c      	adds	r3, #44	@ 0x2c
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fb3c 	bl	80075b4 <RCCEx_PLL3_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006f42:	e008      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006f4a:	e004      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006f4c:	bf00      	nop
 8006f4e:	e002      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006f50:	bf00      	nop
 8006f52:	e000      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006f54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006f56:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d110      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006f5e:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f64:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f70:	4a02      	ldr	r2, [pc, #8]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006f72:	430b      	orrs	r3, r1
 8006f74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006f78:	e006      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006f7a:	bf00      	nop
 8006f7c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f80:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006f84:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f96:	2300      	movs	r3, #0
 8006f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	f000 80b5 	beq.w	8007110 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fac:	4b9d      	ldr	r3, [pc, #628]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d113      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fba:	4b9a      	ldr	r3, [pc, #616]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fc0:	4a98      	ldr	r2, [pc, #608]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006fc2:	f043 0304 	orr.w	r3, r3, #4
 8006fc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006fca:	4b96      	ldr	r3, [pc, #600]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006fe2:	4b91      	ldr	r3, [pc, #580]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe6:	4a90      	ldr	r2, [pc, #576]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fee:	f7fa ffb9 	bl	8001f64 <HAL_GetTick>
 8006ff2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ff6:	e00b      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff8:	f7fa ffb4 	bl	8001f64 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d903      	bls.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800700e:	e005      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007010:	4b85      	ldr	r3, [pc, #532]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0ed      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800701c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007020:	2b00      	cmp	r3, #0
 8007022:	d165      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007024:	4b7f      	ldr	r3, [pc, #508]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800702a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800702e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007036:	2b00      	cmp	r3, #0
 8007038:	d023      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800703a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800703e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8007042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007046:	4293      	cmp	r3, r2
 8007048:	d01b      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800704a:	4b76      	ldr	r3, [pc, #472]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800704c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007054:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007058:	4b72      	ldr	r3, [pc, #456]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800705a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800705e:	4a71      	ldr	r2, [pc, #452]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007064:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007068:	4b6e      	ldr	r3, [pc, #440]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800706a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800706e:	4a6d      	ldr	r2, [pc, #436]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007074:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007078:	4a6a      	ldr	r2, [pc, #424]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800707a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800707e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d019      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708e:	f7fa ff69 	bl	8001f64 <HAL_GetTick>
 8007092:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007096:	e00d      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007098:	f7fa ff64 	bl	8001f64 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070a2:	1ad2      	subs	r2, r2, r3
 80070a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d903      	bls.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80070b2:	e006      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80070b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0ea      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80070c2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10d      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80070ca:	4b56      	ldr	r3, [pc, #344]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80070cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80070dc:	4a51      	ldr	r2, [pc, #324]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80070de:	430b      	orrs	r3, r1
 80070e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80070e4:	e008      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070e6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80070ea:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80070ee:	e003      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80070f4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070f8:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d107      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007100:	4b48      	ldr	r3, [pc, #288]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007106:	4a47      	ldr	r2, [pc, #284]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007108:	f023 0304 	bic.w	r3, r3, #4
 800710c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800711c:	643b      	str	r3, [r7, #64]	@ 0x40
 800711e:	2300      	movs	r3, #0
 8007120:	647b      	str	r3, [r7, #68]	@ 0x44
 8007122:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007126:	460b      	mov	r3, r1
 8007128:	4313      	orrs	r3, r2
 800712a:	d042      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800712c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007130:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007134:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007138:	d022      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800713a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800713e:	d81b      	bhi.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007140:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007144:	d011      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800714a:	d815      	bhi.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d019      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007150:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007154:	d110      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007156:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800715a:	3308      	adds	r3, #8
 800715c:	4618      	mov	r0, r3
 800715e:	f000 f991 	bl	8007484 <RCCEx_PLL2_Config>
 8007162:	4603      	mov	r3, r0
 8007164:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007168:	e00d      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800716a:	4b2e      	ldr	r3, [pc, #184]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800716c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716e:	4a2d      	ldr	r2, [pc, #180]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007174:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007176:	e006      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800717e:	e002      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007180:	bf00      	nop
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007184:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007186:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10d      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800718e:	4b25      	ldr	r3, [pc, #148]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007194:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800719c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071a0:	4a20      	ldr	r2, [pc, #128]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80071a2:	430b      	orrs	r3, r1
 80071a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80071a8:	e003      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80071ae:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80071be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071c0:	2300      	movs	r3, #0
 80071c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80071c8:	460b      	mov	r3, r1
 80071ca:	4313      	orrs	r3, r2
 80071cc:	d032      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80071ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80071d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071da:	d00b      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80071dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071e0:	d804      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d008      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80071e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ea:	d007      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80071f2:	e004      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80071f4:	bf00      	nop
 80071f6:	e002      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80071fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80071fe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007202:	2b00      	cmp	r3, #0
 8007204:	d112      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007206:	4b07      	ldr	r3, [pc, #28]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007208:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800720c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007218:	4a02      	ldr	r2, [pc, #8]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800721a:	430b      	orrs	r3, r1
 800721c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007220:	e008      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8007222:	bf00      	nop
 8007224:	46020c00 	.word	0x46020c00
 8007228:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007230:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007234:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007240:	633b      	str	r3, [r7, #48]	@ 0x30
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	@ 0x34
 8007246:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800724a:	460b      	mov	r3, r1
 800724c:	4313      	orrs	r3, r2
 800724e:	d019      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800725c:	d105      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800725e:	4b88      	ldr	r3, [pc, #544]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	4a87      	ldr	r2, [pc, #540]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007268:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800726a:	4b85      	ldr	r3, [pc, #532]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800726c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007270:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007278:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800727c:	4a80      	ldr	r2, [pc, #512]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800727e:	430b      	orrs	r3, r1
 8007280:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007292:	2300      	movs	r3, #0
 8007294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007296:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d00c      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80072a0:	4b77      	ldr	r3, [pc, #476]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80072a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072b2:	4973      	ldr	r1, [pc, #460]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80072ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80072c6:	623b      	str	r3, [r7, #32]
 80072c8:	2300      	movs	r3, #0
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80072cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072d0:	460b      	mov	r3, r1
 80072d2:	4313      	orrs	r3, r2
 80072d4:	d00c      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80072d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80072d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072e8:	4965      	ldr	r1, [pc, #404]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80072f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	2300      	movs	r3, #0
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007306:	460b      	mov	r3, r1
 8007308:	4313      	orrs	r3, r2
 800730a:	d00c      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800730c:	4b5c      	ldr	r3, [pc, #368]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800730e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007312:	f023 0218 	bic.w	r2, r3, #24
 8007316:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800731a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800731e:	4958      	ldr	r1, [pc, #352]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007326:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800733c:	460b      	mov	r3, r1
 800733e:	4313      	orrs	r3, r2
 8007340:	d032      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007346:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800734a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800734e:	d105      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007350:	4b4b      	ldr	r3, [pc, #300]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007354:	4a4a      	ldr	r2, [pc, #296]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800735a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800735c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007360:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007364:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007368:	d108      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800736a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800736e:	3308      	adds	r3, #8
 8007370:	4618      	mov	r0, r3
 8007372:	f000 f887 	bl	8007484 <RCCEx_PLL2_Config>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 800737c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10d      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007384:	4b3e      	ldr	r3, [pc, #248]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800738a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800738e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007392:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007396:	493a      	ldr	r1, [pc, #232]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800739e:	e003      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80073a4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80073a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80073be:	460b      	mov	r3, r1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	d03a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80073c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073d0:	d00e      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80073d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073d6:	d815      	bhi.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d017      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80073dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073e0:	d110      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e2:	4b27      	ldr	r3, [pc, #156]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80073e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e6:	4a26      	ldr	r2, [pc, #152]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80073e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80073ee:	e00e      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073f4:	3308      	adds	r3, #8
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 f844 	bl	8007484 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007402:	e004      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800740a:	e000      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800740c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800740e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10d      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007416:	4b1a      	ldr	r3, [pc, #104]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800741c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007428:	4915      	ldr	r1, [pc, #84]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007430:	e003      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007436:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800743a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	2300      	movs	r3, #0
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007450:	460b      	mov	r3, r1
 8007452:	4313      	orrs	r3, r2
 8007454:	d00c      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007456:	4b0a      	ldr	r3, [pc, #40]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800745c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007464:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007468:	4905      	ldr	r1, [pc, #20]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800746a:	4313      	orrs	r3, r2
 800746c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007470:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8007474:	4618      	mov	r0, r3
 8007476:	37e0      	adds	r7, #224	@ 0xe0
 8007478:	46bd      	mov	sp, r7
 800747a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800747e:	bf00      	nop
 8007480:	46020c00 	.word	0x46020c00

08007484 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800748c:	4b47      	ldr	r3, [pc, #284]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a46      	ldr	r2, [pc, #280]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007492:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007496:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007498:	f7fa fd64 	bl	8001f64 <HAL_GetTick>
 800749c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800749e:	e008      	b.n	80074b2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074a0:	f7fa fd60 	bl	8001f64 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e077      	b.n	80075a2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074b2:	4b3e      	ldr	r3, [pc, #248]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1f0      	bne.n	80074a0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80074be:	4b3b      	ldr	r3, [pc, #236]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 80074c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80074c6:	f023 0303 	bic.w	r3, r3, #3
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6811      	ldr	r1, [r2, #0]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6852      	ldr	r2, [r2, #4]
 80074d2:	3a01      	subs	r2, #1
 80074d4:	0212      	lsls	r2, r2, #8
 80074d6:	430a      	orrs	r2, r1
 80074d8:	4934      	ldr	r1, [pc, #208]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80074de:	4b33      	ldr	r3, [pc, #204]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 80074e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074e2:	4b33      	ldr	r3, [pc, #204]	@ (80075b0 <RCCEx_PLL2_Config+0x12c>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6892      	ldr	r2, [r2, #8]
 80074ea:	3a01      	subs	r2, #1
 80074ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68d2      	ldr	r2, [r2, #12]
 80074f4:	3a01      	subs	r2, #1
 80074f6:	0252      	lsls	r2, r2, #9
 80074f8:	b292      	uxth	r2, r2
 80074fa:	4311      	orrs	r1, r2
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6912      	ldr	r2, [r2, #16]
 8007500:	3a01      	subs	r2, #1
 8007502:	0412      	lsls	r2, r2, #16
 8007504:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007508:	4311      	orrs	r1, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6952      	ldr	r2, [r2, #20]
 800750e:	3a01      	subs	r2, #1
 8007510:	0612      	lsls	r2, r2, #24
 8007512:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007516:	430a      	orrs	r2, r1
 8007518:	4924      	ldr	r1, [pc, #144]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 800751a:	4313      	orrs	r3, r2
 800751c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800751e:	4b23      	ldr	r3, [pc, #140]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007522:	f023 020c 	bic.w	r2, r3, #12
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	4920      	ldr	r1, [pc, #128]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 800752c:	4313      	orrs	r3, r2
 800752e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007530:	4b1e      	ldr	r3, [pc, #120]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	491c      	ldr	r1, [pc, #112]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 800753a:	4313      	orrs	r3, r2
 800753c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800753e:	4b1b      	ldr	r3, [pc, #108]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007542:	4a1a      	ldr	r2, [pc, #104]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007544:	f023 0310 	bic.w	r3, r3, #16
 8007548:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800754a:	4b18      	ldr	r3, [pc, #96]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007552:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	69d2      	ldr	r2, [r2, #28]
 800755a:	00d2      	lsls	r2, r2, #3
 800755c:	4913      	ldr	r1, [pc, #76]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 800755e:	4313      	orrs	r3, r2
 8007560:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007562:	4b12      	ldr	r3, [pc, #72]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007566:	4a11      	ldr	r2, [pc, #68]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007568:	f043 0310 	orr.w	r3, r3, #16
 800756c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800756e:	4b0f      	ldr	r3, [pc, #60]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a0e      	ldr	r2, [pc, #56]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007574:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007578:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800757a:	f7fa fcf3 	bl	8001f64 <HAL_GetTick>
 800757e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007580:	e008      	b.n	8007594 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007582:	f7fa fcef 	bl	8001f64 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e006      	b.n	80075a2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007594:	4b05      	ldr	r3, [pc, #20]	@ (80075ac <RCCEx_PLL2_Config+0x128>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0f0      	beq.n	8007582 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0

}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	46020c00 	.word	0x46020c00
 80075b0:	80800000 	.word	0x80800000

080075b4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80075bc:	4b47      	ldr	r3, [pc, #284]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a46      	ldr	r2, [pc, #280]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 80075c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075c8:	f7fa fccc 	bl	8001f64 <HAL_GetTick>
 80075cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075ce:	e008      	b.n	80075e2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075d0:	f7fa fcc8 	bl	8001f64 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d901      	bls.n	80075e2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e077      	b.n	80076d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075e2:	4b3e      	ldr	r3, [pc, #248]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1f0      	bne.n	80075d0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80075ee:	4b3b      	ldr	r3, [pc, #236]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 80075f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80075f6:	f023 0303 	bic.w	r3, r3, #3
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	6811      	ldr	r1, [r2, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6852      	ldr	r2, [r2, #4]
 8007602:	3a01      	subs	r2, #1
 8007604:	0212      	lsls	r2, r2, #8
 8007606:	430a      	orrs	r2, r1
 8007608:	4934      	ldr	r1, [pc, #208]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 800760a:	4313      	orrs	r3, r2
 800760c:	630b      	str	r3, [r1, #48]	@ 0x30
 800760e:	4b33      	ldr	r3, [pc, #204]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 8007610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007612:	4b33      	ldr	r3, [pc, #204]	@ (80076e0 <RCCEx_PLL3_Config+0x12c>)
 8007614:	4013      	ands	r3, r2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6892      	ldr	r2, [r2, #8]
 800761a:	3a01      	subs	r2, #1
 800761c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	68d2      	ldr	r2, [r2, #12]
 8007624:	3a01      	subs	r2, #1
 8007626:	0252      	lsls	r2, r2, #9
 8007628:	b292      	uxth	r2, r2
 800762a:	4311      	orrs	r1, r2
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6912      	ldr	r2, [r2, #16]
 8007630:	3a01      	subs	r2, #1
 8007632:	0412      	lsls	r2, r2, #16
 8007634:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007638:	4311      	orrs	r1, r2
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6952      	ldr	r2, [r2, #20]
 800763e:	3a01      	subs	r2, #1
 8007640:	0612      	lsls	r2, r2, #24
 8007642:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007646:	430a      	orrs	r2, r1
 8007648:	4924      	ldr	r1, [pc, #144]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 800764a:	4313      	orrs	r3, r2
 800764c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800764e:	4b23      	ldr	r3, [pc, #140]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	f023 020c 	bic.w	r2, r3, #12
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	4920      	ldr	r1, [pc, #128]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 800765c:	4313      	orrs	r3, r2
 800765e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007660:	4b1e      	ldr	r3, [pc, #120]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 8007662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	491c      	ldr	r1, [pc, #112]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 800766a:	4313      	orrs	r3, r2
 800766c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800766e:	4b1b      	ldr	r3, [pc, #108]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007672:	4a1a      	ldr	r2, [pc, #104]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 8007674:	f023 0310 	bic.w	r3, r3, #16
 8007678:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800767a:	4b18      	ldr	r3, [pc, #96]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 800767c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800767e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007682:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	69d2      	ldr	r2, [r2, #28]
 800768a:	00d2      	lsls	r2, r2, #3
 800768c:	4913      	ldr	r1, [pc, #76]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 800768e:	4313      	orrs	r3, r2
 8007690:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007692:	4b12      	ldr	r3, [pc, #72]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 8007694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007696:	4a11      	ldr	r2, [pc, #68]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 8007698:	f043 0310 	orr.w	r3, r3, #16
 800769c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800769e:	4b0f      	ldr	r3, [pc, #60]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a0e      	ldr	r2, [pc, #56]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 80076a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076aa:	f7fa fc5b 	bl	8001f64 <HAL_GetTick>
 80076ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076b0:	e008      	b.n	80076c4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076b2:	f7fa fc57 	bl	8001f64 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e006      	b.n	80076d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076c4:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <RCCEx_PLL3_Config+0x128>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0f0      	beq.n	80076b2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	46020c00 	.word	0x46020c00
 80076e0:	80800000 	.word	0x80800000

080076e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e0fb      	b.n	80078ee <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a7f      	ldr	r2, [pc, #508]	@ (80078f8 <HAL_SPI_Init+0x214>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d004      	beq.n	800770a <HAL_SPI_Init+0x26>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a7d      	ldr	r2, [pc, #500]	@ (80078fc <HAL_SPI_Init+0x218>)
 8007706:	4293      	cmp	r3, r2
 8007708:	e000      	b.n	800770c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800770a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a78      	ldr	r2, [pc, #480]	@ (80078f8 <HAL_SPI_Init+0x214>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d004      	beq.n	8007726 <HAL_SPI_Init+0x42>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a76      	ldr	r2, [pc, #472]	@ (80078fc <HAL_SPI_Init+0x218>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d105      	bne.n	8007732 <HAL_SPI_Init+0x4e>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	2b0f      	cmp	r3, #15
 800772c:	d901      	bls.n	8007732 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e0dd      	b.n	80078ee <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fbce 	bl	8007ed4 <SPI_GetPacketSize>
 8007738:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a6e      	ldr	r2, [pc, #440]	@ (80078f8 <HAL_SPI_Init+0x214>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d004      	beq.n	800774e <HAL_SPI_Init+0x6a>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a6c      	ldr	r2, [pc, #432]	@ (80078fc <HAL_SPI_Init+0x218>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d102      	bne.n	8007754 <HAL_SPI_Init+0x70>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b08      	cmp	r3, #8
 8007752:	d816      	bhi.n	8007782 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007758:	4a69      	ldr	r2, [pc, #420]	@ (8007900 <HAL_SPI_Init+0x21c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00e      	beq.n	800777c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a68      	ldr	r2, [pc, #416]	@ (8007904 <HAL_SPI_Init+0x220>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d009      	beq.n	800777c <HAL_SPI_Init+0x98>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a66      	ldr	r2, [pc, #408]	@ (8007908 <HAL_SPI_Init+0x224>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d004      	beq.n	800777c <HAL_SPI_Init+0x98>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a65      	ldr	r2, [pc, #404]	@ (800790c <HAL_SPI_Init+0x228>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d104      	bne.n	8007786 <HAL_SPI_Init+0xa2>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b10      	cmp	r3, #16
 8007780:	d901      	bls.n	8007786 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e0b3      	b.n	80078ee <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7f9 faa2 	bl	8000ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80077c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077cc:	d119      	bne.n	8007802 <HAL_SPI_Init+0x11e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077d6:	d103      	bne.n	80077e0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d008      	beq.n	80077f2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10c      	bne.n	8007802 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077f0:	d107      	bne.n	8007802 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007800:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00f      	beq.n	800782e <HAL_SPI_Init+0x14a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	2b06      	cmp	r3, #6
 8007814:	d90b      	bls.n	800782e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	e007      	b.n	800783e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800783c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69da      	ldr	r2, [r3, #28]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007846:	431a      	orrs	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007850:	ea42 0103 	orr.w	r1, r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007868:	431a      	orrs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	431a      	orrs	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078aa:	ea42 0103 	orr.w	r1, r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	46002000 	.word	0x46002000
 80078fc:	56002000 	.word	0x56002000
 8007900:	40013000 	.word	0x40013000
 8007904:	50013000 	.word	0x50013000
 8007908:	40003800 	.word	0x40003800
 800790c:	50003800 	.word	0x50003800

08007910 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af02      	add	r7, sp, #8
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3320      	adds	r3, #32
 8007926:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a90      	ldr	r2, [pc, #576]	@ (8007b70 <HAL_SPI_Transmit+0x260>)
 800792e:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007930:	f7fa fb18 	bl	8001f64 <HAL_GetTick>
 8007934:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b01      	cmp	r3, #1
 8007940:	d001      	beq.n	8007946 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8007942:	2302      	movs	r3, #2
 8007944:	e1f4      	b.n	8007d30 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <HAL_SPI_Transmit+0x42>
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e1ec      	b.n	8007d30 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_SPI_Transmit+0x54>
 8007960:	2302      	movs	r3, #2
 8007962:	e1e5      	b.n	8007d30 <HAL_SPI_Transmit+0x420>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2203      	movs	r2, #3
 8007970:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80079bc:	d108      	bne.n	80079d0 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	e009      	b.n	80079e4 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80079e2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	0c1b      	lsrs	r3, r3, #16
 80079ec:	041b      	lsls	r3, r3, #16
 80079ee:	88f9      	ldrh	r1, [r7, #6]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	6812      	ldr	r2, [r2, #0]
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10c      	bne.n	8007a30 <HAL_SPI_Transmit+0x120>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a1e:	d107      	bne.n	8007a30 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b0f      	cmp	r3, #15
 8007a36:	d95b      	bls.n	8007af0 <HAL_SPI_Transmit+0x1e0>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8007b74 <HAL_SPI_Transmit+0x264>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d04f      	beq.n	8007ae2 <HAL_SPI_Transmit+0x1d2>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a4c      	ldr	r2, [pc, #304]	@ (8007b78 <HAL_SPI_Transmit+0x268>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d04a      	beq.n	8007ae2 <HAL_SPI_Transmit+0x1d2>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a4a      	ldr	r2, [pc, #296]	@ (8007b7c <HAL_SPI_Transmit+0x26c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d045      	beq.n	8007ae2 <HAL_SPI_Transmit+0x1d2>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a49      	ldr	r2, [pc, #292]	@ (8007b80 <HAL_SPI_Transmit+0x270>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d147      	bne.n	8007af0 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007a60:	e03f      	b.n	8007ae2 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d114      	bne.n	8007a9a <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a80:	1d1a      	adds	r2, r3, #4
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a98:	e023      	b.n	8007ae2 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a9a:	f7fa fa63 	bl	8001f64 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d803      	bhi.n	8007ab2 <HAL_SPI_Transmit+0x1a2>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d102      	bne.n	8007ab8 <HAL_SPI_Transmit+0x1a8>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d114      	bne.n	8007ae2 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f93d 	bl	8007d38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ac4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e126      	b.n	8007d30 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1b9      	bne.n	8007a62 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007aee:	e0f9      	b.n	8007ce4 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	2b07      	cmp	r3, #7
 8007af6:	f240 80ee 	bls.w	8007cd6 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007afa:	e067      	b.n	8007bcc <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d13c      	bne.n	8007b84 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d918      	bls.n	8007b48 <HAL_SPI_Transmit+0x238>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d014      	beq.n	8007b48 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b2e:	1d1a      	adds	r2, r3, #4
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b02      	subs	r3, #2
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b46:	e041      	b.n	8007bcc <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b4c:	881a      	ldrh	r2, [r3, #0]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b56:	1c9a      	adds	r2, r3, #2
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b6e:	e02d      	b.n	8007bcc <HAL_SPI_Transmit+0x2bc>
 8007b70:	46002000 	.word	0x46002000
 8007b74:	40013000 	.word	0x40013000
 8007b78:	50013000 	.word	0x50013000
 8007b7c:	40003800 	.word	0x40003800
 8007b80:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b84:	f7fa f9ee 	bl	8001f64 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d803      	bhi.n	8007b9c <HAL_SPI_Transmit+0x28c>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_Transmit+0x292>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d114      	bne.n	8007bcc <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f8c8 	bl	8007d38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e0b1      	b.n	8007d30 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d191      	bne.n	8007afc <HAL_SPI_Transmit+0x1ec>
 8007bd8:	e084      	b.n	8007ce4 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d152      	bne.n	8007c8e <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d918      	bls.n	8007c26 <HAL_SPI_Transmit+0x316>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf8:	2b40      	cmp	r3, #64	@ 0x40
 8007bfa:	d914      	bls.n	8007c26 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c0c:	1d1a      	adds	r2, r3, #4
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b04      	subs	r3, #4
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c24:	e057      	b.n	8007cd6 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d917      	bls.n	8007c62 <HAL_SPI_Transmit+0x352>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d013      	beq.n	8007c62 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c3e:	881a      	ldrh	r2, [r3, #0]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c48:	1c9a      	adds	r2, r3, #2
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3b02      	subs	r3, #2
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c60:	e039      	b.n	8007cd6 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3320      	adds	r3, #32
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c8c:	e023      	b.n	8007cd6 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c8e:	f7fa f969 	bl	8001f64 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d803      	bhi.n	8007ca6 <HAL_SPI_Transmit+0x396>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d102      	bne.n	8007cac <HAL_SPI_Transmit+0x39c>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d114      	bne.n	8007cd6 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 f843 	bl	8007d38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e02c      	b.n	8007d30 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f47f af7b 	bne.w	8007bda <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2200      	movs	r2, #0
 8007cec:	2108      	movs	r1, #8
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f8c2 	bl	8007e78 <SPI_WaitOnFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d00:	f043 0220 	orr.w	r2, r3, #32
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f814 	bl	8007d38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e000      	b.n	8007d30 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
  }
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699a      	ldr	r2, [r3, #24]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0208 	orr.w	r2, r2, #8
 8007d56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0210 	orr.w	r2, r2, #16
 8007d66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0201 	bic.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007d9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d014      	beq.n	8007dd2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f003 0320 	and.w	r3, r3, #32
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00f      	beq.n	8007dd2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007db8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	699a      	ldr	r2, [r3, #24]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0220 	orr.w	r2, r2, #32
 8007dd0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d014      	beq.n	8007e08 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00f      	beq.n	8007e08 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dee:	f043 0204 	orr.w	r2, r3, #4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00f      	beq.n	8007e32 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e18:	f043 0201 	orr.w	r2, r3, #1
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00f      	beq.n	8007e5c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e42:	f043 0208 	orr.w	r2, r3, #8
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007e6c:	bf00      	nop
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007e88:	e010      	b.n	8007eac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e8a:	f7fa f86b 	bl	8001f64 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d803      	bhi.n	8007ea2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea0:	d102      	bne.n	8007ea8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e00f      	b.n	8007ecc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695a      	ldr	r2, [r3, #20]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d0df      	beq.n	8007e8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	3307      	adds	r3, #7
 8007ef2:	08db      	lsrs	r3, r3, #3
 8007ef4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	fb02 f303 	mul.w	r3, r2, r3
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d12e      	bne.n	8007f7e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e028      	b.n	8007f80 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0201 	bic.w	r2, r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007f5a:	ea42 0103 	orr.w	r1, r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e000      	b.n	8007f80 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
  }
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e049      	b.n	8008032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d106      	bne.n	8007fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7f8 ff8c 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f000 fbfe 	bl	80087cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e049      	b.n	80080e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d106      	bne.n	8008066 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f841 	bl	80080e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2202      	movs	r2, #2
 800806a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3304      	adds	r3, #4
 8008076:	4619      	mov	r1, r3
 8008078:	4610      	mov	r0, r2
 800807a:	f000 fba7 	bl	80087cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d109      	bne.n	8008120 <HAL_TIM_PWM_Start+0x24>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	bf14      	ite	ne
 8008118:	2301      	movne	r3, #1
 800811a:	2300      	moveq	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	e03c      	b.n	800819a <HAL_TIM_PWM_Start+0x9e>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b04      	cmp	r3, #4
 8008124:	d109      	bne.n	800813a <HAL_TIM_PWM_Start+0x3e>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b01      	cmp	r3, #1
 8008130:	bf14      	ite	ne
 8008132:	2301      	movne	r3, #1
 8008134:	2300      	moveq	r3, #0
 8008136:	b2db      	uxtb	r3, r3
 8008138:	e02f      	b.n	800819a <HAL_TIM_PWM_Start+0x9e>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b08      	cmp	r3, #8
 800813e:	d109      	bne.n	8008154 <HAL_TIM_PWM_Start+0x58>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	bf14      	ite	ne
 800814c:	2301      	movne	r3, #1
 800814e:	2300      	moveq	r3, #0
 8008150:	b2db      	uxtb	r3, r3
 8008152:	e022      	b.n	800819a <HAL_TIM_PWM_Start+0x9e>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b0c      	cmp	r3, #12
 8008158:	d109      	bne.n	800816e <HAL_TIM_PWM_Start+0x72>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b01      	cmp	r3, #1
 8008164:	bf14      	ite	ne
 8008166:	2301      	movne	r3, #1
 8008168:	2300      	moveq	r3, #0
 800816a:	b2db      	uxtb	r3, r3
 800816c:	e015      	b.n	800819a <HAL_TIM_PWM_Start+0x9e>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b10      	cmp	r3, #16
 8008172:	d109      	bne.n	8008188 <HAL_TIM_PWM_Start+0x8c>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b01      	cmp	r3, #1
 800817e:	bf14      	ite	ne
 8008180:	2301      	movne	r3, #1
 8008182:	2300      	moveq	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	e008      	b.n	800819a <HAL_TIM_PWM_Start+0x9e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b01      	cmp	r3, #1
 8008192:	bf14      	ite	ne
 8008194:	2301      	movne	r3, #1
 8008196:	2300      	moveq	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e0d8      	b.n	8008354 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d104      	bne.n	80081b2 <HAL_TIM_PWM_Start+0xb6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b0:	e023      	b.n	80081fa <HAL_TIM_PWM_Start+0xfe>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d104      	bne.n	80081c2 <HAL_TIM_PWM_Start+0xc6>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081c0:	e01b      	b.n	80081fa <HAL_TIM_PWM_Start+0xfe>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d104      	bne.n	80081d2 <HAL_TIM_PWM_Start+0xd6>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081d0:	e013      	b.n	80081fa <HAL_TIM_PWM_Start+0xfe>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b0c      	cmp	r3, #12
 80081d6:	d104      	bne.n	80081e2 <HAL_TIM_PWM_Start+0xe6>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081e0:	e00b      	b.n	80081fa <HAL_TIM_PWM_Start+0xfe>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d104      	bne.n	80081f2 <HAL_TIM_PWM_Start+0xf6>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081f0:	e003      	b.n	80081fa <HAL_TIM_PWM_Start+0xfe>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2202      	movs	r2, #2
 80081f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2201      	movs	r2, #1
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f001 f854 	bl	80092b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a53      	ldr	r2, [pc, #332]	@ (800835c <HAL_TIM_PWM_Start+0x260>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d02c      	beq.n	800826c <HAL_TIM_PWM_Start+0x170>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a52      	ldr	r2, [pc, #328]	@ (8008360 <HAL_TIM_PWM_Start+0x264>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d027      	beq.n	800826c <HAL_TIM_PWM_Start+0x170>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a50      	ldr	r2, [pc, #320]	@ (8008364 <HAL_TIM_PWM_Start+0x268>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d022      	beq.n	800826c <HAL_TIM_PWM_Start+0x170>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a4f      	ldr	r2, [pc, #316]	@ (8008368 <HAL_TIM_PWM_Start+0x26c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d01d      	beq.n	800826c <HAL_TIM_PWM_Start+0x170>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a4d      	ldr	r2, [pc, #308]	@ (800836c <HAL_TIM_PWM_Start+0x270>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d018      	beq.n	800826c <HAL_TIM_PWM_Start+0x170>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a4c      	ldr	r2, [pc, #304]	@ (8008370 <HAL_TIM_PWM_Start+0x274>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d013      	beq.n	800826c <HAL_TIM_PWM_Start+0x170>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a4a      	ldr	r2, [pc, #296]	@ (8008374 <HAL_TIM_PWM_Start+0x278>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d00e      	beq.n	800826c <HAL_TIM_PWM_Start+0x170>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a49      	ldr	r2, [pc, #292]	@ (8008378 <HAL_TIM_PWM_Start+0x27c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d009      	beq.n	800826c <HAL_TIM_PWM_Start+0x170>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a47      	ldr	r2, [pc, #284]	@ (800837c <HAL_TIM_PWM_Start+0x280>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d004      	beq.n	800826c <HAL_TIM_PWM_Start+0x170>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a46      	ldr	r2, [pc, #280]	@ (8008380 <HAL_TIM_PWM_Start+0x284>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d101      	bne.n	8008270 <HAL_TIM_PWM_Start+0x174>
 800826c:	2301      	movs	r3, #1
 800826e:	e000      	b.n	8008272 <HAL_TIM_PWM_Start+0x176>
 8008270:	2300      	movs	r3, #0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008284:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a34      	ldr	r2, [pc, #208]	@ (800835c <HAL_TIM_PWM_Start+0x260>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d040      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a32      	ldr	r2, [pc, #200]	@ (8008360 <HAL_TIM_PWM_Start+0x264>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d03b      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a2:	d036      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082ac:	d031      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a34      	ldr	r2, [pc, #208]	@ (8008384 <HAL_TIM_PWM_Start+0x288>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d02c      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a32      	ldr	r2, [pc, #200]	@ (8008388 <HAL_TIM_PWM_Start+0x28c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d027      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a31      	ldr	r2, [pc, #196]	@ (800838c <HAL_TIM_PWM_Start+0x290>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d022      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a2f      	ldr	r2, [pc, #188]	@ (8008390 <HAL_TIM_PWM_Start+0x294>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d01d      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a2e      	ldr	r2, [pc, #184]	@ (8008394 <HAL_TIM_PWM_Start+0x298>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d018      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a2c      	ldr	r2, [pc, #176]	@ (8008398 <HAL_TIM_PWM_Start+0x29c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d013      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008364 <HAL_TIM_PWM_Start+0x268>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00e      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008368 <HAL_TIM_PWM_Start+0x26c>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d009      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1a      	ldr	r2, [pc, #104]	@ (800836c <HAL_TIM_PWM_Start+0x270>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_TIM_PWM_Start+0x216>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a18      	ldr	r2, [pc, #96]	@ (8008370 <HAL_TIM_PWM_Start+0x274>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d115      	bne.n	800833e <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	4b20      	ldr	r3, [pc, #128]	@ (800839c <HAL_TIM_PWM_Start+0x2a0>)
 800831a:	4013      	ands	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b06      	cmp	r3, #6
 8008322:	d015      	beq.n	8008350 <HAL_TIM_PWM_Start+0x254>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800832a:	d011      	beq.n	8008350 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833c:	e008      	b.n	8008350 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0201 	orr.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e000      	b.n	8008352 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008350:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	40012c00 	.word	0x40012c00
 8008360:	50012c00 	.word	0x50012c00
 8008364:	40013400 	.word	0x40013400
 8008368:	50013400 	.word	0x50013400
 800836c:	40014000 	.word	0x40014000
 8008370:	50014000 	.word	0x50014000
 8008374:	40014400 	.word	0x40014400
 8008378:	50014400 	.word	0x50014400
 800837c:	40014800 	.word	0x40014800
 8008380:	50014800 	.word	0x50014800
 8008384:	40000400 	.word	0x40000400
 8008388:	50000400 	.word	0x50000400
 800838c:	40000800 	.word	0x40000800
 8008390:	50000800 	.word	0x50000800
 8008394:	40000c00 	.word	0x40000c00
 8008398:	50000c00 	.word	0x50000c00
 800839c:	00010007 	.word	0x00010007

080083a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083ba:	2302      	movs	r3, #2
 80083bc:	e0ff      	b.n	80085be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b14      	cmp	r3, #20
 80083ca:	f200 80f0 	bhi.w	80085ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083ce:	a201      	add	r2, pc, #4	@ (adr r2, 80083d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	08008429 	.word	0x08008429
 80083d8:	080085af 	.word	0x080085af
 80083dc:	080085af 	.word	0x080085af
 80083e0:	080085af 	.word	0x080085af
 80083e4:	08008469 	.word	0x08008469
 80083e8:	080085af 	.word	0x080085af
 80083ec:	080085af 	.word	0x080085af
 80083f0:	080085af 	.word	0x080085af
 80083f4:	080084ab 	.word	0x080084ab
 80083f8:	080085af 	.word	0x080085af
 80083fc:	080085af 	.word	0x080085af
 8008400:	080085af 	.word	0x080085af
 8008404:	080084eb 	.word	0x080084eb
 8008408:	080085af 	.word	0x080085af
 800840c:	080085af 	.word	0x080085af
 8008410:	080085af 	.word	0x080085af
 8008414:	0800852d 	.word	0x0800852d
 8008418:	080085af 	.word	0x080085af
 800841c:	080085af 	.word	0x080085af
 8008420:	080085af 	.word	0x080085af
 8008424:	0800856d 	.word	0x0800856d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 facc 	bl	80089cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0208 	orr.w	r2, r2, #8
 8008442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 0204 	bic.w	r2, r2, #4
 8008452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6999      	ldr	r1, [r3, #24]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	691a      	ldr	r2, [r3, #16]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	619a      	str	r2, [r3, #24]
      break;
 8008466:	e0a5      	b.n	80085b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68b9      	ldr	r1, [r7, #8]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 fb6e 	bl	8008b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	699a      	ldr	r2, [r3, #24]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6999      	ldr	r1, [r3, #24]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	021a      	lsls	r2, r3, #8
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	619a      	str	r2, [r3, #24]
      break;
 80084a8:	e084      	b.n	80085b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fbfd 	bl	8008cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69da      	ldr	r2, [r3, #28]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0208 	orr.w	r2, r2, #8
 80084c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69da      	ldr	r2, [r3, #28]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 0204 	bic.w	r2, r2, #4
 80084d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69d9      	ldr	r1, [r3, #28]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	61da      	str	r2, [r3, #28]
      break;
 80084e8:	e064      	b.n	80085b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68b9      	ldr	r1, [r7, #8]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fc8b 	bl	8008e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69da      	ldr	r2, [r3, #28]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69da      	ldr	r2, [r3, #28]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69d9      	ldr	r1, [r3, #28]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	021a      	lsls	r2, r3, #8
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	61da      	str	r2, [r3, #28]
      break;
 800852a:	e043      	b.n	80085b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fd1a 	bl	8008f6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0208 	orr.w	r2, r2, #8
 8008546:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0204 	bic.w	r2, r2, #4
 8008556:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	691a      	ldr	r2, [r3, #16]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800856a:	e023      	b.n	80085b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68b9      	ldr	r1, [r7, #8]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fd7c 	bl	8009070 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008586:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008596:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	021a      	lsls	r2, r3, #8
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80085ac:	e002      	b.n	80085b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	75fb      	strb	r3, [r7, #23]
      break;
 80085b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop

080085c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d101      	bne.n	80085e4 <HAL_TIM_ConfigClockSource+0x1c>
 80085e0:	2302      	movs	r3, #2
 80085e2:	e0e6      	b.n	80087b2 <HAL_TIM_ConfigClockSource+0x1ea>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008602:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800860e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a67      	ldr	r2, [pc, #412]	@ (80087bc <HAL_TIM_ConfigClockSource+0x1f4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	f000 80b1 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 8008624:	4a65      	ldr	r2, [pc, #404]	@ (80087bc <HAL_TIM_ConfigClockSource+0x1f4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	f200 80b6 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 800862c:	4a64      	ldr	r2, [pc, #400]	@ (80087c0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	f000 80a9 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 8008634:	4a62      	ldr	r2, [pc, #392]	@ (80087c0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	f200 80ae 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 800863c:	4a61      	ldr	r2, [pc, #388]	@ (80087c4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	f000 80a1 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 8008644:	4a5f      	ldr	r2, [pc, #380]	@ (80087c4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008646:	4293      	cmp	r3, r2
 8008648:	f200 80a6 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 800864c:	4a5e      	ldr	r2, [pc, #376]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x200>)
 800864e:	4293      	cmp	r3, r2
 8008650:	f000 8099 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 8008654:	4a5c      	ldr	r2, [pc, #368]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x200>)
 8008656:	4293      	cmp	r3, r2
 8008658:	f200 809e 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 800865c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008660:	f000 8091 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 8008664:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008668:	f200 8096 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 800866c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008670:	f000 8089 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 8008674:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008678:	f200 808e 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 800867c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008680:	d03e      	beq.n	8008700 <HAL_TIM_ConfigClockSource+0x138>
 8008682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008686:	f200 8087 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 800868a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800868e:	f000 8086 	beq.w	800879e <HAL_TIM_ConfigClockSource+0x1d6>
 8008692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008696:	d87f      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 8008698:	2b70      	cmp	r3, #112	@ 0x70
 800869a:	d01a      	beq.n	80086d2 <HAL_TIM_ConfigClockSource+0x10a>
 800869c:	2b70      	cmp	r3, #112	@ 0x70
 800869e:	d87b      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 80086a0:	2b60      	cmp	r3, #96	@ 0x60
 80086a2:	d050      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x17e>
 80086a4:	2b60      	cmp	r3, #96	@ 0x60
 80086a6:	d877      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 80086a8:	2b50      	cmp	r3, #80	@ 0x50
 80086aa:	d03c      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x15e>
 80086ac:	2b50      	cmp	r3, #80	@ 0x50
 80086ae:	d873      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 80086b0:	2b40      	cmp	r3, #64	@ 0x40
 80086b2:	d058      	beq.n	8008766 <HAL_TIM_ConfigClockSource+0x19e>
 80086b4:	2b40      	cmp	r3, #64	@ 0x40
 80086b6:	d86f      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 80086b8:	2b30      	cmp	r3, #48	@ 0x30
 80086ba:	d064      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 80086bc:	2b30      	cmp	r3, #48	@ 0x30
 80086be:	d86b      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d060      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d867      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d05c      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d05a      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x1be>
 80086d0:	e062      	b.n	8008798 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086e2:	f000 fdc5 	bl	8009270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	609a      	str	r2, [r3, #8]
      break;
 80086fe:	e04f      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008710:	f000 fdae 	bl	8009270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008722:	609a      	str	r2, [r3, #8]
      break;
 8008724:	e03c      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008732:	461a      	mov	r2, r3
 8008734:	f000 fd20 	bl	8009178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2150      	movs	r1, #80	@ 0x50
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fd79 	bl	8009236 <TIM_ITRx_SetConfig>
      break;
 8008744:	e02c      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008752:	461a      	mov	r2, r3
 8008754:	f000 fd3f 	bl	80091d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2160      	movs	r1, #96	@ 0x60
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fd69 	bl	8009236 <TIM_ITRx_SetConfig>
      break;
 8008764:	e01c      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008772:	461a      	mov	r2, r3
 8008774:	f000 fd00 	bl	8009178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2140      	movs	r1, #64	@ 0x40
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fd59 	bl	8009236 <TIM_ITRx_SetConfig>
      break;
 8008784:	e00c      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4619      	mov	r1, r3
 8008790:	4610      	mov	r0, r2
 8008792:	f000 fd50 	bl	8009236 <TIM_ITRx_SetConfig>
      break;
 8008796:	e003      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]
      break;
 800879c:	e000      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800879e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	00100070 	.word	0x00100070
 80087c0:	00100040 	.word	0x00100040
 80087c4:	00100030 	.word	0x00100030
 80087c8:	00100020 	.word	0x00100020

080087cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a6b      	ldr	r2, [pc, #428]	@ (800898c <TIM_Base_SetConfig+0x1c0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d02b      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a6a      	ldr	r2, [pc, #424]	@ (8008990 <TIM_Base_SetConfig+0x1c4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d027      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087f2:	d023      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087fa:	d01f      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a65      	ldr	r2, [pc, #404]	@ (8008994 <TIM_Base_SetConfig+0x1c8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d01b      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a64      	ldr	r2, [pc, #400]	@ (8008998 <TIM_Base_SetConfig+0x1cc>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d017      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a63      	ldr	r2, [pc, #396]	@ (800899c <TIM_Base_SetConfig+0x1d0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d013      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a62      	ldr	r2, [pc, #392]	@ (80089a0 <TIM_Base_SetConfig+0x1d4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d00f      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a61      	ldr	r2, [pc, #388]	@ (80089a4 <TIM_Base_SetConfig+0x1d8>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00b      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a60      	ldr	r2, [pc, #384]	@ (80089a8 <TIM_Base_SetConfig+0x1dc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d007      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a5f      	ldr	r2, [pc, #380]	@ (80089ac <TIM_Base_SetConfig+0x1e0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d003      	beq.n	800883c <TIM_Base_SetConfig+0x70>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a5e      	ldr	r2, [pc, #376]	@ (80089b0 <TIM_Base_SetConfig+0x1e4>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d108      	bne.n	800884e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a4e      	ldr	r2, [pc, #312]	@ (800898c <TIM_Base_SetConfig+0x1c0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d043      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a4d      	ldr	r2, [pc, #308]	@ (8008990 <TIM_Base_SetConfig+0x1c4>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d03f      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008864:	d03b      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800886c:	d037      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a48      	ldr	r2, [pc, #288]	@ (8008994 <TIM_Base_SetConfig+0x1c8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d033      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a47      	ldr	r2, [pc, #284]	@ (8008998 <TIM_Base_SetConfig+0x1cc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d02f      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a46      	ldr	r2, [pc, #280]	@ (800899c <TIM_Base_SetConfig+0x1d0>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d02b      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a45      	ldr	r2, [pc, #276]	@ (80089a0 <TIM_Base_SetConfig+0x1d4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d027      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a44      	ldr	r2, [pc, #272]	@ (80089a4 <TIM_Base_SetConfig+0x1d8>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d023      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a43      	ldr	r2, [pc, #268]	@ (80089a8 <TIM_Base_SetConfig+0x1dc>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d01f      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a42      	ldr	r2, [pc, #264]	@ (80089ac <TIM_Base_SetConfig+0x1e0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d01b      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a41      	ldr	r2, [pc, #260]	@ (80089b0 <TIM_Base_SetConfig+0x1e4>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d017      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a40      	ldr	r2, [pc, #256]	@ (80089b4 <TIM_Base_SetConfig+0x1e8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d013      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a3f      	ldr	r2, [pc, #252]	@ (80089b8 <TIM_Base_SetConfig+0x1ec>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d00f      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a3e      	ldr	r2, [pc, #248]	@ (80089bc <TIM_Base_SetConfig+0x1f0>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00b      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a3d      	ldr	r2, [pc, #244]	@ (80089c0 <TIM_Base_SetConfig+0x1f4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d007      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a3c      	ldr	r2, [pc, #240]	@ (80089c4 <TIM_Base_SetConfig+0x1f8>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d003      	beq.n	80088de <TIM_Base_SetConfig+0x112>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a3b      	ldr	r2, [pc, #236]	@ (80089c8 <TIM_Base_SetConfig+0x1fc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d108      	bne.n	80088f0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a1e      	ldr	r2, [pc, #120]	@ (800898c <TIM_Base_SetConfig+0x1c0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d023      	beq.n	800895e <TIM_Base_SetConfig+0x192>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a1d      	ldr	r2, [pc, #116]	@ (8008990 <TIM_Base_SetConfig+0x1c4>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d01f      	beq.n	800895e <TIM_Base_SetConfig+0x192>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a22      	ldr	r2, [pc, #136]	@ (80089ac <TIM_Base_SetConfig+0x1e0>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d01b      	beq.n	800895e <TIM_Base_SetConfig+0x192>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a21      	ldr	r2, [pc, #132]	@ (80089b0 <TIM_Base_SetConfig+0x1e4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d017      	beq.n	800895e <TIM_Base_SetConfig+0x192>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a20      	ldr	r2, [pc, #128]	@ (80089b4 <TIM_Base_SetConfig+0x1e8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d013      	beq.n	800895e <TIM_Base_SetConfig+0x192>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a1f      	ldr	r2, [pc, #124]	@ (80089b8 <TIM_Base_SetConfig+0x1ec>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00f      	beq.n	800895e <TIM_Base_SetConfig+0x192>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a1e      	ldr	r2, [pc, #120]	@ (80089bc <TIM_Base_SetConfig+0x1f0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d00b      	beq.n	800895e <TIM_Base_SetConfig+0x192>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a1d      	ldr	r2, [pc, #116]	@ (80089c0 <TIM_Base_SetConfig+0x1f4>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d007      	beq.n	800895e <TIM_Base_SetConfig+0x192>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a1c      	ldr	r2, [pc, #112]	@ (80089c4 <TIM_Base_SetConfig+0x1f8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_Base_SetConfig+0x192>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1b      	ldr	r2, [pc, #108]	@ (80089c8 <TIM_Base_SetConfig+0x1fc>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d103      	bne.n	8008966 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	691a      	ldr	r2, [r3, #16]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f043 0204 	orr.w	r2, r3, #4
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]
}
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	40012c00 	.word	0x40012c00
 8008990:	50012c00 	.word	0x50012c00
 8008994:	40000400 	.word	0x40000400
 8008998:	50000400 	.word	0x50000400
 800899c:	40000800 	.word	0x40000800
 80089a0:	50000800 	.word	0x50000800
 80089a4:	40000c00 	.word	0x40000c00
 80089a8:	50000c00 	.word	0x50000c00
 80089ac:	40013400 	.word	0x40013400
 80089b0:	50013400 	.word	0x50013400
 80089b4:	40014000 	.word	0x40014000
 80089b8:	50014000 	.word	0x50014000
 80089bc:	40014400 	.word	0x40014400
 80089c0:	50014400 	.word	0x50014400
 80089c4:	40014800 	.word	0x40014800
 80089c8:	50014800 	.word	0x50014800

080089cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	f023 0201 	bic.w	r2, r3, #1
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f023 0302 	bic.w	r3, r3, #2
 8008a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a40      	ldr	r2, [pc, #256]	@ (8008b28 <TIM_OC1_SetConfig+0x15c>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d023      	beq.n	8008a74 <TIM_OC1_SetConfig+0xa8>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8008b2c <TIM_OC1_SetConfig+0x160>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d01f      	beq.n	8008a74 <TIM_OC1_SetConfig+0xa8>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a3e      	ldr	r2, [pc, #248]	@ (8008b30 <TIM_OC1_SetConfig+0x164>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d01b      	beq.n	8008a74 <TIM_OC1_SetConfig+0xa8>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8008b34 <TIM_OC1_SetConfig+0x168>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d017      	beq.n	8008a74 <TIM_OC1_SetConfig+0xa8>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a3c      	ldr	r2, [pc, #240]	@ (8008b38 <TIM_OC1_SetConfig+0x16c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d013      	beq.n	8008a74 <TIM_OC1_SetConfig+0xa8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8008b3c <TIM_OC1_SetConfig+0x170>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d00f      	beq.n	8008a74 <TIM_OC1_SetConfig+0xa8>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a3a      	ldr	r2, [pc, #232]	@ (8008b40 <TIM_OC1_SetConfig+0x174>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00b      	beq.n	8008a74 <TIM_OC1_SetConfig+0xa8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a39      	ldr	r2, [pc, #228]	@ (8008b44 <TIM_OC1_SetConfig+0x178>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d007      	beq.n	8008a74 <TIM_OC1_SetConfig+0xa8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a38      	ldr	r2, [pc, #224]	@ (8008b48 <TIM_OC1_SetConfig+0x17c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d003      	beq.n	8008a74 <TIM_OC1_SetConfig+0xa8>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a37      	ldr	r2, [pc, #220]	@ (8008b4c <TIM_OC1_SetConfig+0x180>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d10c      	bne.n	8008a8e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f023 0308 	bic.w	r3, r3, #8
 8008a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f023 0304 	bic.w	r3, r3, #4
 8008a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a25      	ldr	r2, [pc, #148]	@ (8008b28 <TIM_OC1_SetConfig+0x15c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d023      	beq.n	8008ade <TIM_OC1_SetConfig+0x112>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a24      	ldr	r2, [pc, #144]	@ (8008b2c <TIM_OC1_SetConfig+0x160>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d01f      	beq.n	8008ade <TIM_OC1_SetConfig+0x112>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a23      	ldr	r2, [pc, #140]	@ (8008b30 <TIM_OC1_SetConfig+0x164>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d01b      	beq.n	8008ade <TIM_OC1_SetConfig+0x112>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a22      	ldr	r2, [pc, #136]	@ (8008b34 <TIM_OC1_SetConfig+0x168>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d017      	beq.n	8008ade <TIM_OC1_SetConfig+0x112>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a21      	ldr	r2, [pc, #132]	@ (8008b38 <TIM_OC1_SetConfig+0x16c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d013      	beq.n	8008ade <TIM_OC1_SetConfig+0x112>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a20      	ldr	r2, [pc, #128]	@ (8008b3c <TIM_OC1_SetConfig+0x170>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d00f      	beq.n	8008ade <TIM_OC1_SetConfig+0x112>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8008b40 <TIM_OC1_SetConfig+0x174>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00b      	beq.n	8008ade <TIM_OC1_SetConfig+0x112>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8008b44 <TIM_OC1_SetConfig+0x178>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d007      	beq.n	8008ade <TIM_OC1_SetConfig+0x112>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b48 <TIM_OC1_SetConfig+0x17c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d003      	beq.n	8008ade <TIM_OC1_SetConfig+0x112>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8008b4c <TIM_OC1_SetConfig+0x180>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d111      	bne.n	8008b02 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	621a      	str	r2, [r3, #32]
}
 8008b1c:	bf00      	nop
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	40012c00 	.word	0x40012c00
 8008b2c:	50012c00 	.word	0x50012c00
 8008b30:	40013400 	.word	0x40013400
 8008b34:	50013400 	.word	0x50013400
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	50014000 	.word	0x50014000
 8008b40:	40014400 	.word	0x40014400
 8008b44:	50014400 	.word	0x50014400
 8008b48:	40014800 	.word	0x40014800
 8008b4c:	50014800 	.word	0x50014800

08008b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	f023 0210 	bic.w	r2, r3, #16
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f023 0320 	bic.w	r3, r3, #32
 8008b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a36      	ldr	r2, [pc, #216]	@ (8008c88 <TIM_OC2_SetConfig+0x138>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d00b      	beq.n	8008bcc <TIM_OC2_SetConfig+0x7c>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a35      	ldr	r2, [pc, #212]	@ (8008c8c <TIM_OC2_SetConfig+0x13c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d007      	beq.n	8008bcc <TIM_OC2_SetConfig+0x7c>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a34      	ldr	r2, [pc, #208]	@ (8008c90 <TIM_OC2_SetConfig+0x140>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d003      	beq.n	8008bcc <TIM_OC2_SetConfig+0x7c>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a33      	ldr	r2, [pc, #204]	@ (8008c94 <TIM_OC2_SetConfig+0x144>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d10d      	bne.n	8008be8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a27      	ldr	r2, [pc, #156]	@ (8008c88 <TIM_OC2_SetConfig+0x138>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d023      	beq.n	8008c38 <TIM_OC2_SetConfig+0xe8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a26      	ldr	r2, [pc, #152]	@ (8008c8c <TIM_OC2_SetConfig+0x13c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d01f      	beq.n	8008c38 <TIM_OC2_SetConfig+0xe8>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a25      	ldr	r2, [pc, #148]	@ (8008c90 <TIM_OC2_SetConfig+0x140>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d01b      	beq.n	8008c38 <TIM_OC2_SetConfig+0xe8>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a24      	ldr	r2, [pc, #144]	@ (8008c94 <TIM_OC2_SetConfig+0x144>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d017      	beq.n	8008c38 <TIM_OC2_SetConfig+0xe8>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a23      	ldr	r2, [pc, #140]	@ (8008c98 <TIM_OC2_SetConfig+0x148>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d013      	beq.n	8008c38 <TIM_OC2_SetConfig+0xe8>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a22      	ldr	r2, [pc, #136]	@ (8008c9c <TIM_OC2_SetConfig+0x14c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00f      	beq.n	8008c38 <TIM_OC2_SetConfig+0xe8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a21      	ldr	r2, [pc, #132]	@ (8008ca0 <TIM_OC2_SetConfig+0x150>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00b      	beq.n	8008c38 <TIM_OC2_SetConfig+0xe8>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a20      	ldr	r2, [pc, #128]	@ (8008ca4 <TIM_OC2_SetConfig+0x154>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d007      	beq.n	8008c38 <TIM_OC2_SetConfig+0xe8>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ca8 <TIM_OC2_SetConfig+0x158>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_OC2_SetConfig+0xe8>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a1e      	ldr	r2, [pc, #120]	@ (8008cac <TIM_OC2_SetConfig+0x15c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d113      	bne.n	8008c60 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	621a      	str	r2, [r3, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	40012c00 	.word	0x40012c00
 8008c8c:	50012c00 	.word	0x50012c00
 8008c90:	40013400 	.word	0x40013400
 8008c94:	50013400 	.word	0x50013400
 8008c98:	40014000 	.word	0x40014000
 8008c9c:	50014000 	.word	0x50014000
 8008ca0:	40014400 	.word	0x40014400
 8008ca4:	50014400 	.word	0x50014400
 8008ca8:	40014800 	.word	0x40014800
 8008cac:	50014800 	.word	0x50014800

08008cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	021b      	lsls	r3, r3, #8
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a35      	ldr	r2, [pc, #212]	@ (8008de4 <TIM_OC3_SetConfig+0x134>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00b      	beq.n	8008d2a <TIM_OC3_SetConfig+0x7a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a34      	ldr	r2, [pc, #208]	@ (8008de8 <TIM_OC3_SetConfig+0x138>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d007      	beq.n	8008d2a <TIM_OC3_SetConfig+0x7a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a33      	ldr	r2, [pc, #204]	@ (8008dec <TIM_OC3_SetConfig+0x13c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_OC3_SetConfig+0x7a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a32      	ldr	r2, [pc, #200]	@ (8008df0 <TIM_OC3_SetConfig+0x140>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d10d      	bne.n	8008d46 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a26      	ldr	r2, [pc, #152]	@ (8008de4 <TIM_OC3_SetConfig+0x134>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d023      	beq.n	8008d96 <TIM_OC3_SetConfig+0xe6>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a25      	ldr	r2, [pc, #148]	@ (8008de8 <TIM_OC3_SetConfig+0x138>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d01f      	beq.n	8008d96 <TIM_OC3_SetConfig+0xe6>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a24      	ldr	r2, [pc, #144]	@ (8008dec <TIM_OC3_SetConfig+0x13c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d01b      	beq.n	8008d96 <TIM_OC3_SetConfig+0xe6>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a23      	ldr	r2, [pc, #140]	@ (8008df0 <TIM_OC3_SetConfig+0x140>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d017      	beq.n	8008d96 <TIM_OC3_SetConfig+0xe6>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a22      	ldr	r2, [pc, #136]	@ (8008df4 <TIM_OC3_SetConfig+0x144>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d013      	beq.n	8008d96 <TIM_OC3_SetConfig+0xe6>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a21      	ldr	r2, [pc, #132]	@ (8008df8 <TIM_OC3_SetConfig+0x148>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00f      	beq.n	8008d96 <TIM_OC3_SetConfig+0xe6>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a20      	ldr	r2, [pc, #128]	@ (8008dfc <TIM_OC3_SetConfig+0x14c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00b      	beq.n	8008d96 <TIM_OC3_SetConfig+0xe6>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a1f      	ldr	r2, [pc, #124]	@ (8008e00 <TIM_OC3_SetConfig+0x150>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d007      	beq.n	8008d96 <TIM_OC3_SetConfig+0xe6>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a1e      	ldr	r2, [pc, #120]	@ (8008e04 <TIM_OC3_SetConfig+0x154>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d003      	beq.n	8008d96 <TIM_OC3_SetConfig+0xe6>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a1d      	ldr	r2, [pc, #116]	@ (8008e08 <TIM_OC3_SetConfig+0x158>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d113      	bne.n	8008dbe <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	621a      	str	r2, [r3, #32]
}
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	40012c00 	.word	0x40012c00
 8008de8:	50012c00 	.word	0x50012c00
 8008dec:	40013400 	.word	0x40013400
 8008df0:	50013400 	.word	0x50013400
 8008df4:	40014000 	.word	0x40014000
 8008df8:	50014000 	.word	0x50014000
 8008dfc:	40014400 	.word	0x40014400
 8008e00:	50014400 	.word	0x50014400
 8008e04:	40014800 	.word	0x40014800
 8008e08:	50014800 	.word	0x50014800

08008e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	031b      	lsls	r3, r3, #12
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a36      	ldr	r2, [pc, #216]	@ (8008f44 <TIM_OC4_SetConfig+0x138>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00b      	beq.n	8008e88 <TIM_OC4_SetConfig+0x7c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a35      	ldr	r2, [pc, #212]	@ (8008f48 <TIM_OC4_SetConfig+0x13c>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d007      	beq.n	8008e88 <TIM_OC4_SetConfig+0x7c>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a34      	ldr	r2, [pc, #208]	@ (8008f4c <TIM_OC4_SetConfig+0x140>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d003      	beq.n	8008e88 <TIM_OC4_SetConfig+0x7c>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a33      	ldr	r2, [pc, #204]	@ (8008f50 <TIM_OC4_SetConfig+0x144>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d10d      	bne.n	8008ea4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	031b      	lsls	r3, r3, #12
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ea2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a27      	ldr	r2, [pc, #156]	@ (8008f44 <TIM_OC4_SetConfig+0x138>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d023      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xe8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a26      	ldr	r2, [pc, #152]	@ (8008f48 <TIM_OC4_SetConfig+0x13c>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d01f      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xe8>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a25      	ldr	r2, [pc, #148]	@ (8008f4c <TIM_OC4_SetConfig+0x140>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d01b      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xe8>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a24      	ldr	r2, [pc, #144]	@ (8008f50 <TIM_OC4_SetConfig+0x144>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d017      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xe8>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a23      	ldr	r2, [pc, #140]	@ (8008f54 <TIM_OC4_SetConfig+0x148>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d013      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xe8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a22      	ldr	r2, [pc, #136]	@ (8008f58 <TIM_OC4_SetConfig+0x14c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d00f      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xe8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a21      	ldr	r2, [pc, #132]	@ (8008f5c <TIM_OC4_SetConfig+0x150>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00b      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xe8>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a20      	ldr	r2, [pc, #128]	@ (8008f60 <TIM_OC4_SetConfig+0x154>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d007      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xe8>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8008f64 <TIM_OC4_SetConfig+0x158>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d003      	beq.n	8008ef4 <TIM_OC4_SetConfig+0xe8>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a1e      	ldr	r2, [pc, #120]	@ (8008f68 <TIM_OC4_SetConfig+0x15c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d113      	bne.n	8008f1c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008efa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f02:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	019b      	lsls	r3, r3, #6
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	019b      	lsls	r3, r3, #6
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	621a      	str	r2, [r3, #32]
}
 8008f36:	bf00      	nop
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	40012c00 	.word	0x40012c00
 8008f48:	50012c00 	.word	0x50012c00
 8008f4c:	40013400 	.word	0x40013400
 8008f50:	50013400 	.word	0x50013400
 8008f54:	40014000 	.word	0x40014000
 8008f58:	50014000 	.word	0x50014000
 8008f5c:	40014400 	.word	0x40014400
 8008f60:	50014400 	.word	0x50014400
 8008f64:	40014800 	.word	0x40014800
 8008f68:	50014800 	.word	0x50014800

08008f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008fb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	041b      	lsls	r3, r3, #16
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a21      	ldr	r2, [pc, #132]	@ (8009048 <TIM_OC5_SetConfig+0xdc>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d023      	beq.n	800900e <TIM_OC5_SetConfig+0xa2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a20      	ldr	r2, [pc, #128]	@ (800904c <TIM_OC5_SetConfig+0xe0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d01f      	beq.n	800900e <TIM_OC5_SetConfig+0xa2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8009050 <TIM_OC5_SetConfig+0xe4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d01b      	beq.n	800900e <TIM_OC5_SetConfig+0xa2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8009054 <TIM_OC5_SetConfig+0xe8>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d017      	beq.n	800900e <TIM_OC5_SetConfig+0xa2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8009058 <TIM_OC5_SetConfig+0xec>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d013      	beq.n	800900e <TIM_OC5_SetConfig+0xa2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800905c <TIM_OC5_SetConfig+0xf0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d00f      	beq.n	800900e <TIM_OC5_SetConfig+0xa2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8009060 <TIM_OC5_SetConfig+0xf4>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00b      	beq.n	800900e <TIM_OC5_SetConfig+0xa2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8009064 <TIM_OC5_SetConfig+0xf8>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d007      	beq.n	800900e <TIM_OC5_SetConfig+0xa2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a19      	ldr	r2, [pc, #100]	@ (8009068 <TIM_OC5_SetConfig+0xfc>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d003      	beq.n	800900e <TIM_OC5_SetConfig+0xa2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a18      	ldr	r2, [pc, #96]	@ (800906c <TIM_OC5_SetConfig+0x100>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d109      	bne.n	8009022 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009014:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	021b      	lsls	r3, r3, #8
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	621a      	str	r2, [r3, #32]
}
 800903c:	bf00      	nop
 800903e:	371c      	adds	r7, #28
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	40012c00 	.word	0x40012c00
 800904c:	50012c00 	.word	0x50012c00
 8009050:	40013400 	.word	0x40013400
 8009054:	50013400 	.word	0x50013400
 8009058:	40014000 	.word	0x40014000
 800905c:	50014000 	.word	0x50014000
 8009060:	40014400 	.word	0x40014400
 8009064:	50014400 	.word	0x50014400
 8009068:	40014800 	.word	0x40014800
 800906c:	50014800 	.word	0x50014800

08009070 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800909e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	021b      	lsls	r3, r3, #8
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80090b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	051b      	lsls	r3, r3, #20
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a22      	ldr	r2, [pc, #136]	@ (8009150 <TIM_OC6_SetConfig+0xe0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d023      	beq.n	8009114 <TIM_OC6_SetConfig+0xa4>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a21      	ldr	r2, [pc, #132]	@ (8009154 <TIM_OC6_SetConfig+0xe4>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d01f      	beq.n	8009114 <TIM_OC6_SetConfig+0xa4>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a20      	ldr	r2, [pc, #128]	@ (8009158 <TIM_OC6_SetConfig+0xe8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d01b      	beq.n	8009114 <TIM_OC6_SetConfig+0xa4>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a1f      	ldr	r2, [pc, #124]	@ (800915c <TIM_OC6_SetConfig+0xec>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d017      	beq.n	8009114 <TIM_OC6_SetConfig+0xa4>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a1e      	ldr	r2, [pc, #120]	@ (8009160 <TIM_OC6_SetConfig+0xf0>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <TIM_OC6_SetConfig+0xa4>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a1d      	ldr	r2, [pc, #116]	@ (8009164 <TIM_OC6_SetConfig+0xf4>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00f      	beq.n	8009114 <TIM_OC6_SetConfig+0xa4>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009168 <TIM_OC6_SetConfig+0xf8>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d00b      	beq.n	8009114 <TIM_OC6_SetConfig+0xa4>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a1b      	ldr	r2, [pc, #108]	@ (800916c <TIM_OC6_SetConfig+0xfc>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d007      	beq.n	8009114 <TIM_OC6_SetConfig+0xa4>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a1a      	ldr	r2, [pc, #104]	@ (8009170 <TIM_OC6_SetConfig+0x100>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d003      	beq.n	8009114 <TIM_OC6_SetConfig+0xa4>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a19      	ldr	r2, [pc, #100]	@ (8009174 <TIM_OC6_SetConfig+0x104>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d109      	bne.n	8009128 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800911a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	029b      	lsls	r3, r3, #10
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	4313      	orrs	r3, r2
 8009126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	621a      	str	r2, [r3, #32]
}
 8009142:	bf00      	nop
 8009144:	371c      	adds	r7, #28
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	40012c00 	.word	0x40012c00
 8009154:	50012c00 	.word	0x50012c00
 8009158:	40013400 	.word	0x40013400
 800915c:	50013400 	.word	0x50013400
 8009160:	40014000 	.word	0x40014000
 8009164:	50014000 	.word	0x50014000
 8009168:	40014400 	.word	0x40014400
 800916c:	50014400 	.word	0x50014400
 8009170:	40014800 	.word	0x40014800
 8009174:	50014800 	.word	0x50014800

08009178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	f023 0201 	bic.w	r2, r3, #1
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f023 030a 	bic.w	r3, r3, #10
 80091b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	621a      	str	r2, [r3, #32]
}
 80091ca:	bf00      	nop
 80091cc:	371c      	adds	r7, #28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b087      	sub	sp, #28
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	f023 0210 	bic.w	r2, r3, #16
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	031b      	lsls	r3, r3, #12
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	4313      	orrs	r3, r2
 800920a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009212:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	4313      	orrs	r3, r2
 800921c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	621a      	str	r2, [r3, #32]
}
 800922a:	bf00      	nop
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009236:	b480      	push	{r7}
 8009238:	b085      	sub	sp, #20
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800924c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4313      	orrs	r3, r2
 8009258:	f043 0307 	orr.w	r3, r3, #7
 800925c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	609a      	str	r2, [r3, #8]
}
 8009264:	bf00      	nop
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800928a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	021a      	lsls	r2, r3, #8
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	431a      	orrs	r2, r3
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4313      	orrs	r3, r2
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	4313      	orrs	r3, r2
 800929c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	609a      	str	r2, [r3, #8]
}
 80092a4:	bf00      	nop
 80092a6:	371c      	adds	r7, #28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f003 031f 	and.w	r3, r3, #31
 80092c2:	2201      	movs	r2, #1
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a1a      	ldr	r2, [r3, #32]
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	43db      	mvns	r3, r3
 80092d2:	401a      	ands	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a1a      	ldr	r2, [r3, #32]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f003 031f 	and.w	r3, r3, #31
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	fa01 f303 	lsl.w	r3, r1, r3
 80092e8:	431a      	orrs	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	621a      	str	r2, [r3, #32]
}
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009310:	2302      	movs	r3, #2
 8009312:	e097      	b.n	8009444 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a45      	ldr	r2, [pc, #276]	@ (8009450 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00e      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a44      	ldr	r2, [pc, #272]	@ (8009454 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d009      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a42      	ldr	r2, [pc, #264]	@ (8009458 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d004      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a41      	ldr	r2, [pc, #260]	@ (800945c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d108      	bne.n	800936e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009362:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4313      	orrs	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009378:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	4313      	orrs	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a2f      	ldr	r2, [pc, #188]	@ (8009450 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d040      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a2e      	ldr	r2, [pc, #184]	@ (8009454 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d03b      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a8:	d036      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093b2:	d031      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a29      	ldr	r2, [pc, #164]	@ (8009460 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d02c      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a28      	ldr	r2, [pc, #160]	@ (8009464 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d027      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a26      	ldr	r2, [pc, #152]	@ (8009468 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d022      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a25      	ldr	r2, [pc, #148]	@ (800946c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d01d      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a23      	ldr	r2, [pc, #140]	@ (8009470 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d018      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a22      	ldr	r2, [pc, #136]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d013      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a18      	ldr	r2, [pc, #96]	@ (8009458 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d00e      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a17      	ldr	r2, [pc, #92]	@ (800945c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d009      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a1b      	ldr	r2, [pc, #108]	@ (8009478 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d004      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a1a      	ldr	r2, [pc, #104]	@ (800947c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d10c      	bne.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800941e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	4313      	orrs	r3, r2
 8009428:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	40012c00 	.word	0x40012c00
 8009454:	50012c00 	.word	0x50012c00
 8009458:	40013400 	.word	0x40013400
 800945c:	50013400 	.word	0x50013400
 8009460:	40000400 	.word	0x40000400
 8009464:	50000400 	.word	0x50000400
 8009468:	40000800 	.word	0x40000800
 800946c:	50000800 	.word	0x50000800
 8009470:	40000c00 	.word	0x40000c00
 8009474:	50000c00 	.word	0x50000c00
 8009478:	40014000 	.word	0x40014000
 800947c:	50014000 	.word	0x50014000

08009480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009494:	2b01      	cmp	r3, #1
 8009496:	d101      	bne.n	800949c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009498:	2302      	movs	r3, #2
 800949a:	e07d      	b.n	8009598 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	041b      	lsls	r3, r3, #16
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a1e      	ldr	r2, [pc, #120]	@ (80095a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d00e      	beq.n	800954c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a1d      	ldr	r2, [pc, #116]	@ (80095a8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d009      	beq.n	800954c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a1b      	ldr	r2, [pc, #108]	@ (80095ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d004      	beq.n	800954c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a1a      	ldr	r2, [pc, #104]	@ (80095b0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d11c      	bne.n	8009586 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009556:	051b      	lsls	r3, r3, #20
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	40012c00 	.word	0x40012c00
 80095a8:	50012c00 	.word	0x50012c00
 80095ac:	40013400 	.word	0x40013400
 80095b0:	50013400 	.word	0x50013400

080095b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095b4:	b084      	sub	sp, #16
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	f107 001c 	add.w	r0, r7, #28
 80095c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 fab6 	bl	800ab44 <USB_CoreReset>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80095dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80095f0:	e005      	b.n	80095fe <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800960a:	b004      	add	sp, #16
 800960c:	4770      	bx	lr
	...

08009610 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4613      	mov	r3, r2
 800961c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800961e:	79fb      	ldrb	r3, [r7, #7]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d165      	bne.n	80096f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	4a41      	ldr	r2, [pc, #260]	@ (800972c <USB_SetTurnaroundTime+0x11c>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d906      	bls.n	800963a <USB_SetTurnaroundTime+0x2a>
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	4a40      	ldr	r2, [pc, #256]	@ (8009730 <USB_SetTurnaroundTime+0x120>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d202      	bcs.n	800963a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009634:	230f      	movs	r3, #15
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	e062      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	4a3c      	ldr	r2, [pc, #240]	@ (8009730 <USB_SetTurnaroundTime+0x120>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d306      	bcc.n	8009650 <USB_SetTurnaroundTime+0x40>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	4a3b      	ldr	r2, [pc, #236]	@ (8009734 <USB_SetTurnaroundTime+0x124>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d202      	bcs.n	8009650 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800964a:	230e      	movs	r3, #14
 800964c:	617b      	str	r3, [r7, #20]
 800964e:	e057      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4a38      	ldr	r2, [pc, #224]	@ (8009734 <USB_SetTurnaroundTime+0x124>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d306      	bcc.n	8009666 <USB_SetTurnaroundTime+0x56>
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	4a37      	ldr	r2, [pc, #220]	@ (8009738 <USB_SetTurnaroundTime+0x128>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d202      	bcs.n	8009666 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009660:	230d      	movs	r3, #13
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	e04c      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	4a33      	ldr	r2, [pc, #204]	@ (8009738 <USB_SetTurnaroundTime+0x128>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d306      	bcc.n	800967c <USB_SetTurnaroundTime+0x6c>
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	4a32      	ldr	r2, [pc, #200]	@ (800973c <USB_SetTurnaroundTime+0x12c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d802      	bhi.n	800967c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009676:	230c      	movs	r3, #12
 8009678:	617b      	str	r3, [r7, #20]
 800967a:	e041      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	4a2f      	ldr	r2, [pc, #188]	@ (800973c <USB_SetTurnaroundTime+0x12c>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d906      	bls.n	8009692 <USB_SetTurnaroundTime+0x82>
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	4a2e      	ldr	r2, [pc, #184]	@ (8009740 <USB_SetTurnaroundTime+0x130>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d802      	bhi.n	8009692 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800968c:	230b      	movs	r3, #11
 800968e:	617b      	str	r3, [r7, #20]
 8009690:	e036      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4a2a      	ldr	r2, [pc, #168]	@ (8009740 <USB_SetTurnaroundTime+0x130>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d906      	bls.n	80096a8 <USB_SetTurnaroundTime+0x98>
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	4a29      	ldr	r2, [pc, #164]	@ (8009744 <USB_SetTurnaroundTime+0x134>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d802      	bhi.n	80096a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80096a2:	230a      	movs	r3, #10
 80096a4:	617b      	str	r3, [r7, #20]
 80096a6:	e02b      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	4a26      	ldr	r2, [pc, #152]	@ (8009744 <USB_SetTurnaroundTime+0x134>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d906      	bls.n	80096be <USB_SetTurnaroundTime+0xae>
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	4a25      	ldr	r2, [pc, #148]	@ (8009748 <USB_SetTurnaroundTime+0x138>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d202      	bcs.n	80096be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096b8:	2309      	movs	r3, #9
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	e020      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	4a21      	ldr	r2, [pc, #132]	@ (8009748 <USB_SetTurnaroundTime+0x138>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d306      	bcc.n	80096d4 <USB_SetTurnaroundTime+0xc4>
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	4a20      	ldr	r2, [pc, #128]	@ (800974c <USB_SetTurnaroundTime+0x13c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d802      	bhi.n	80096d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80096ce:	2308      	movs	r3, #8
 80096d0:	617b      	str	r3, [r7, #20]
 80096d2:	e015      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	4a1d      	ldr	r2, [pc, #116]	@ (800974c <USB_SetTurnaroundTime+0x13c>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d906      	bls.n	80096ea <USB_SetTurnaroundTime+0xda>
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4a1c      	ldr	r2, [pc, #112]	@ (8009750 <USB_SetTurnaroundTime+0x140>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d202      	bcs.n	80096ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80096e4:	2307      	movs	r3, #7
 80096e6:	617b      	str	r3, [r7, #20]
 80096e8:	e00a      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80096ea:	2306      	movs	r3, #6
 80096ec:	617b      	str	r3, [r7, #20]
 80096ee:	e007      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d102      	bne.n	80096fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80096f6:	2309      	movs	r3, #9
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	e001      	b.n	8009700 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80096fc:	2309      	movs	r3, #9
 80096fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	68da      	ldr	r2, [r3, #12]
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	029b      	lsls	r3, r3, #10
 8009714:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009718:	431a      	orrs	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	371c      	adds	r7, #28
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	00d8acbf 	.word	0x00d8acbf
 8009730:	00e4e1c0 	.word	0x00e4e1c0
 8009734:	00f42400 	.word	0x00f42400
 8009738:	01067380 	.word	0x01067380
 800973c:	011a499f 	.word	0x011a499f
 8009740:	01312cff 	.word	0x01312cff
 8009744:	014ca43f 	.word	0x014ca43f
 8009748:	016e3600 	.word	0x016e3600
 800974c:	01a6ab1f 	.word	0x01a6ab1f
 8009750:	01e84800 	.word	0x01e84800

08009754 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f043 0201 	orr.w	r2, r3, #1
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009776:	b480      	push	{r7}
 8009778:	b083      	sub	sp, #12
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f023 0201 	bic.w	r2, r3, #1
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097a4:	2300      	movs	r3, #0
 80097a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d115      	bne.n	80097e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097c6:	200a      	movs	r0, #10
 80097c8:	f7f8 fbd8 	bl	8001f7c <HAL_Delay>
      ms += 10U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	330a      	adds	r3, #10
 80097d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 f927 	bl	800aa26 <USB_GetMode>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d01e      	beq.n	800981c <USB_SetCurrentMode+0x84>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80097e2:	d9f0      	bls.n	80097c6 <USB_SetCurrentMode+0x2e>
 80097e4:	e01a      	b.n	800981c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097e6:	78fb      	ldrb	r3, [r7, #3]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d115      	bne.n	8009818 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097f8:	200a      	movs	r0, #10
 80097fa:	f7f8 fbbf 	bl	8001f7c <HAL_Delay>
      ms += 10U;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	330a      	adds	r3, #10
 8009802:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 f90e 	bl	800aa26 <USB_GetMode>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d005      	beq.n	800981c <USB_SetCurrentMode+0x84>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2bc7      	cmp	r3, #199	@ 0xc7
 8009814:	d9f0      	bls.n	80097f8 <USB_SetCurrentMode+0x60>
 8009816:	e001      	b.n	800981c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e005      	b.n	8009828 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009820:	d101      	bne.n	8009826 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e000      	b.n	8009828 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009830:	b084      	sub	sp, #16
 8009832:	b580      	push	{r7, lr}
 8009834:	b086      	sub	sp, #24
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800983e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800984a:	2300      	movs	r3, #0
 800984c:	613b      	str	r3, [r7, #16]
 800984e:	e009      	b.n	8009864 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	3340      	adds	r3, #64	@ 0x40
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	2200      	movs	r2, #0
 800985c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	3301      	adds	r3, #1
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	2b0e      	cmp	r3, #14
 8009868:	d9f2      	bls.n	8009850 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800986a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800986e:	2b00      	cmp	r3, #0
 8009870:	d11c      	bne.n	80098ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009880:	f043 0302 	orr.w	r3, r3, #2
 8009884:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800988a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	e005      	b.n	80098b8 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098be:	461a      	mov	r2, r3
 80098c0:	2300      	movs	r3, #0
 80098c2:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098c4:	2103      	movs	r1, #3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f95e 	bl	8009b88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098cc:	2110      	movs	r1, #16
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f8fa 	bl	8009ac8 <USB_FlushTxFifo>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f924 	bl	8009b2c <USB_FlushRxFifo>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f4:	461a      	mov	r2, r3
 80098f6:	2300      	movs	r3, #0
 80098f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009900:	461a      	mov	r2, r3
 8009902:	2300      	movs	r3, #0
 8009904:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800990c:	461a      	mov	r2, r3
 800990e:	2300      	movs	r3, #0
 8009910:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]
 8009916:	e043      	b.n	80099a0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800992a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800992e:	d118      	bne.n	8009962 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10a      	bne.n	800994c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009942:	461a      	mov	r2, r3
 8009944:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	e013      	b.n	8009974 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009958:	461a      	mov	r2, r3
 800995a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	e008      	b.n	8009974 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800996e:	461a      	mov	r2, r3
 8009970:	2300      	movs	r3, #0
 8009972:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	015a      	lsls	r2, r3, #5
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009980:	461a      	mov	r2, r3
 8009982:	2300      	movs	r3, #0
 8009984:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009992:	461a      	mov	r2, r3
 8009994:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009998:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099a4:	461a      	mov	r2, r3
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d3b5      	bcc.n	8009918 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099ac:	2300      	movs	r3, #0
 80099ae:	613b      	str	r3, [r7, #16]
 80099b0:	e043      	b.n	8009a3a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099c8:	d118      	bne.n	80099fc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099dc:	461a      	mov	r2, r3
 80099de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099e2:	6013      	str	r3, [r2, #0]
 80099e4:	e013      	b.n	8009a0e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f2:	461a      	mov	r2, r3
 80099f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099f8:	6013      	str	r3, [r2, #0]
 80099fa:	e008      	b.n	8009a0e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	3301      	adds	r3, #1
 8009a38:	613b      	str	r3, [r7, #16]
 8009a3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a3e:	461a      	mov	r2, r3
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d3b5      	bcc.n	80099b2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d105      	bne.n	8009a7c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	f043 0210 	orr.w	r2, r3, #16
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	699a      	ldr	r2, [r3, #24]
 8009a80:	4b10      	ldr	r3, [pc, #64]	@ (8009ac4 <USB_DevInit+0x294>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d005      	beq.n	8009a9c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	f043 0208 	orr.w	r2, r3, #8
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d107      	bne.n	8009ab4 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009aac:	f043 0304 	orr.w	r3, r3, #4
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ac0:	b004      	add	sp, #16
 8009ac2:	4770      	bx	lr
 8009ac4:	803c3800 	.word	0x803c3800

08009ac8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ae2:	d901      	bls.n	8009ae8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e01b      	b.n	8009b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	daf2      	bge.n	8009ad6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	019b      	lsls	r3, r3, #6
 8009af8:	f043 0220 	orr.w	r2, r3, #32
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3301      	adds	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b0c:	d901      	bls.n	8009b12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e006      	b.n	8009b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	f003 0320 	and.w	r3, r3, #32
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d0f0      	beq.n	8009b00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b44:	d901      	bls.n	8009b4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e018      	b.n	8009b7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	daf2      	bge.n	8009b38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2210      	movs	r2, #16
 8009b5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b68:	d901      	bls.n	8009b6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e006      	b.n	8009b7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d0f0      	beq.n	8009b5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	78fb      	ldrb	r3, [r7, #3]
 8009ba2:	68f9      	ldr	r1, [r7, #12]
 8009ba4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b087      	sub	sp, #28
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f003 0306 	and.w	r3, r3, #6
 8009bd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	75fb      	strb	r3, [r7, #23]
 8009bde:	e00a      	b.n	8009bf6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d002      	beq.n	8009bec <USB_GetDevSpeed+0x32>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2b06      	cmp	r3, #6
 8009bea:	d102      	bne.n	8009bf2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009bec:	2302      	movs	r3, #2
 8009bee:	75fb      	strb	r3, [r7, #23]
 8009bf0:	e001      	b.n	8009bf6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009bf2:	230f      	movs	r3, #15
 8009bf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	371c      	adds	r7, #28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	785b      	ldrb	r3, [r3, #1]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d13a      	bne.n	8009c96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c26:	69da      	ldr	r2, [r3, #28]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	f003 030f 	and.w	r3, r3, #15
 8009c30:	2101      	movs	r1, #1
 8009c32:	fa01 f303 	lsl.w	r3, r1, r3
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	68f9      	ldr	r1, [r7, #12]
 8009c3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	015a      	lsls	r2, r3, #5
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d155      	bne.n	8009d04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	791b      	ldrb	r3, [r3, #4]
 8009c72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	059b      	lsls	r3, r3, #22
 8009c7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	0151      	lsls	r1, r2, #5
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	440a      	add	r2, r1
 8009c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	e036      	b.n	8009d04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c9c:	69da      	ldr	r2, [r3, #28]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	f003 030f 	and.w	r3, r3, #15
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cac:	041b      	lsls	r3, r3, #16
 8009cae:	68f9      	ldr	r1, [r7, #12]
 8009cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d11a      	bne.n	8009d04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	791b      	ldrb	r3, [r3, #4]
 8009ce8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cea:	430b      	orrs	r3, r1
 8009cec:	4313      	orrs	r3, r2
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	0151      	lsls	r1, r2, #5
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
	...

08009d14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	785b      	ldrb	r3, [r3, #1]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d161      	bne.n	8009df4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d46:	d11f      	bne.n	8009d88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	f003 030f 	and.w	r3, r3, #15
 8009d98:	2101      	movs	r1, #1
 8009d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	43db      	mvns	r3, r3
 8009da2:	68f9      	ldr	r1, [r7, #12]
 8009da4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009da8:	4013      	ands	r3, r2
 8009daa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009db2:	69da      	ldr	r2, [r3, #28]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	43db      	mvns	r3, r3
 8009dc6:	68f9      	ldr	r1, [r7, #12]
 8009dc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dcc:	4013      	ands	r3, r2
 8009dce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	0159      	lsls	r1, r3, #5
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	440b      	add	r3, r1
 8009de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dea:	4619      	mov	r1, r3
 8009dec:	4b35      	ldr	r3, [pc, #212]	@ (8009ec4 <USB_DeactivateEndpoint+0x1b0>)
 8009dee:	4013      	ands	r3, r2
 8009df0:	600b      	str	r3, [r1, #0]
 8009df2:	e060      	b.n	8009eb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e0a:	d11f      	bne.n	8009e4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	0151      	lsls	r1, r2, #5
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	440a      	add	r2, r1
 8009e22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	0151      	lsls	r1, r2, #5
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	440a      	add	r2, r1
 8009e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	f003 030f 	and.w	r3, r3, #15
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e62:	041b      	lsls	r3, r3, #16
 8009e64:	43db      	mvns	r3, r3
 8009e66:	68f9      	ldr	r1, [r7, #12]
 8009e68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e76:	69da      	ldr	r2, [r3, #28]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	f003 030f 	and.w	r3, r3, #15
 8009e80:	2101      	movs	r1, #1
 8009e82:	fa01 f303 	lsl.w	r3, r1, r3
 8009e86:	041b      	lsls	r3, r3, #16
 8009e88:	43db      	mvns	r3, r3
 8009e8a:	68f9      	ldr	r1, [r7, #12]
 8009e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e90:	4013      	ands	r3, r2
 8009e92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	0159      	lsls	r1, r3, #5
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	440b      	add	r3, r1
 8009eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4b05      	ldr	r3, [pc, #20]	@ (8009ec8 <USB_DeactivateEndpoint+0x1b4>)
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	ec337800 	.word	0xec337800
 8009ec8:	eff37800 	.word	0xeff37800

08009ecc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08a      	sub	sp, #40	@ 0x28
 8009ed0:	af02      	add	r7, sp, #8
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	f040 817f 	bne.w	800a1ec <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d132      	bne.n	8009f5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f10:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f14:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	0151      	lsls	r1, r2, #5
 8009f2c:	69fa      	ldr	r2, [r7, #28]
 8009f2e:	440a      	add	r2, r1
 8009f30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	0151      	lsls	r1, r2, #5
 8009f4c:	69fa      	ldr	r2, [r7, #28]
 8009f4e:	440a      	add	r2, r1
 8009f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f54:	0cdb      	lsrs	r3, r3, #19
 8009f56:	04db      	lsls	r3, r3, #19
 8009f58:	6113      	str	r3, [r2, #16]
 8009f5a:	e097      	b.n	800a08c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	0151      	lsls	r1, r2, #5
 8009f6e:	69fa      	ldr	r2, [r7, #28]
 8009f70:	440a      	add	r2, r1
 8009f72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f76:	0cdb      	lsrs	r3, r3, #19
 8009f78:	04db      	lsls	r3, r3, #19
 8009f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	69ba      	ldr	r2, [r7, #24]
 8009f8c:	0151      	lsls	r1, r2, #5
 8009f8e:	69fa      	ldr	r2, [r7, #28]
 8009f90:	440a      	add	r2, r1
 8009f92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f9e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d11a      	bne.n	8009fdc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	691a      	ldr	r2, [r3, #16]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d903      	bls.n	8009fba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	689a      	ldr	r2, [r3, #8]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	69ba      	ldr	r2, [r7, #24]
 8009fca:	0151      	lsls	r1, r2, #5
 8009fcc:	69fa      	ldr	r2, [r7, #28]
 8009fce:	440a      	add	r2, r1
 8009fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fd8:	6113      	str	r3, [r2, #16]
 8009fda:	e044      	b.n	800a066 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	691a      	ldr	r2, [r3, #16]
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	1e5a      	subs	r2, r3, #1
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffe:	691a      	ldr	r2, [r3, #16]
 800a000:	8afb      	ldrh	r3, [r7, #22]
 800a002:	04d9      	lsls	r1, r3, #19
 800a004:	4ba4      	ldr	r3, [pc, #656]	@ (800a298 <USB_EPStartXfer+0x3cc>)
 800a006:	400b      	ands	r3, r1
 800a008:	69b9      	ldr	r1, [r7, #24]
 800a00a:	0148      	lsls	r0, r1, #5
 800a00c:	69f9      	ldr	r1, [r7, #28]
 800a00e:	4401      	add	r1, r0
 800a010:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a014:	4313      	orrs	r3, r2
 800a016:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	791b      	ldrb	r3, [r3, #4]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d122      	bne.n	800a066 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	015a      	lsls	r2, r3, #5
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	4413      	add	r3, r2
 800a028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	69ba      	ldr	r2, [r7, #24]
 800a030:	0151      	lsls	r1, r2, #5
 800a032:	69fa      	ldr	r2, [r7, #28]
 800a034:	440a      	add	r2, r1
 800a036:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a03a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a03e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a04c:	691a      	ldr	r2, [r3, #16]
 800a04e:	8afb      	ldrh	r3, [r7, #22]
 800a050:	075b      	lsls	r3, r3, #29
 800a052:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a056:	69b9      	ldr	r1, [r7, #24]
 800a058:	0148      	lsls	r0, r1, #5
 800a05a:	69f9      	ldr	r1, [r7, #28]
 800a05c:	4401      	add	r1, r0
 800a05e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a062:	4313      	orrs	r3, r2
 800a064:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a072:	691a      	ldr	r2, [r3, #16]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a07c:	69b9      	ldr	r1, [r7, #24]
 800a07e:	0148      	lsls	r0, r1, #5
 800a080:	69f9      	ldr	r1, [r7, #28]
 800a082:	4401      	add	r1, r0
 800a084:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a088:	4313      	orrs	r3, r2
 800a08a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d14b      	bne.n	800a12a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d009      	beq.n	800a0ae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	791b      	ldrb	r3, [r3, #4]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d128      	bne.n	800a108 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d110      	bne.n	800a0e8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	0151      	lsls	r1, r2, #5
 800a0d8:	69fa      	ldr	r2, [r7, #28]
 800a0da:	440a      	add	r2, r1
 800a0dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	e00f      	b.n	800a108 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	0151      	lsls	r1, r2, #5
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	440a      	add	r2, r1
 800a0fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a106:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	0151      	lsls	r1, r2, #5
 800a11a:	69fa      	ldr	r2, [r7, #28]
 800a11c:	440a      	add	r2, r1
 800a11e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a122:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	e166      	b.n	800a3f8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	69fa      	ldr	r2, [r7, #28]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a144:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a148:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	791b      	ldrb	r3, [r3, #4]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d015      	beq.n	800a17e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 814e 	beq.w	800a3f8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	f003 030f 	and.w	r3, r3, #15
 800a16c:	2101      	movs	r1, #1
 800a16e:	fa01 f303 	lsl.w	r3, r1, r3
 800a172:	69f9      	ldr	r1, [r7, #28]
 800a174:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a178:	4313      	orrs	r3, r2
 800a17a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a17c:	e13c      	b.n	800a3f8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d110      	bne.n	800a1b0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	69fa      	ldr	r2, [r7, #28]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	e00f      	b.n	800a1d0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	68d9      	ldr	r1, [r3, #12]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	781a      	ldrb	r2, [r3, #0]
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	b298      	uxth	r0, r3
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 f9b9 	bl	800a55c <USB_WritePacket>
 800a1ea:	e105      	b.n	800a3f8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	015a      	lsls	r2, r3, #5
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	0151      	lsls	r1, r2, #5
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	440a      	add	r2, r1
 800a202:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a206:	0cdb      	lsrs	r3, r3, #19
 800a208:	04db      	lsls	r3, r3, #19
 800a20a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	69ba      	ldr	r2, [r7, #24]
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	440a      	add	r2, r1
 800a222:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a226:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a22a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a22e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d132      	bne.n	800a29c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	689a      	ldr	r2, [r3, #8]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	689a      	ldr	r2, [r3, #8]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a25a:	691a      	ldr	r2, [r3, #16]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a264:	69b9      	ldr	r1, [r7, #24]
 800a266:	0148      	lsls	r0, r1, #5
 800a268:	69f9      	ldr	r1, [r7, #28]
 800a26a:	4401      	add	r1, r0
 800a26c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a270:	4313      	orrs	r3, r2
 800a272:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	69ba      	ldr	r2, [r7, #24]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	69fa      	ldr	r2, [r7, #28]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a28e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a292:	6113      	str	r3, [r2, #16]
 800a294:	e062      	b.n	800a35c <USB_EPStartXfer+0x490>
 800a296:	bf00      	nop
 800a298:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d123      	bne.n	800a2ec <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b0:	691a      	ldr	r2, [r3, #16]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2ba:	69b9      	ldr	r1, [r7, #24]
 800a2bc:	0148      	lsls	r0, r1, #5
 800a2be:	69f9      	ldr	r1, [r7, #28]
 800a2c0:	4401      	add	r1, r0
 800a2c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	0151      	lsls	r1, r2, #5
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	440a      	add	r2, r1
 800a2e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2e8:	6113      	str	r3, [r2, #16]
 800a2ea:	e037      	b.n	800a35c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	691a      	ldr	r2, [r3, #16]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	1e5a      	subs	r2, r3, #1
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a300:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	8afa      	ldrh	r2, [r7, #22]
 800a308:	fb03 f202 	mul.w	r2, r3, r2
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31c:	691a      	ldr	r2, [r3, #16]
 800a31e:	8afb      	ldrh	r3, [r7, #22]
 800a320:	04d9      	lsls	r1, r3, #19
 800a322:	4b38      	ldr	r3, [pc, #224]	@ (800a404 <USB_EPStartXfer+0x538>)
 800a324:	400b      	ands	r3, r1
 800a326:	69b9      	ldr	r1, [r7, #24]
 800a328:	0148      	lsls	r0, r1, #5
 800a32a:	69f9      	ldr	r1, [r7, #28]
 800a32c:	4401      	add	r1, r0
 800a32e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a332:	4313      	orrs	r3, r2
 800a334:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a342:	691a      	ldr	r2, [r3, #16]
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a34c:	69b9      	ldr	r1, [r7, #24]
 800a34e:	0148      	lsls	r0, r1, #5
 800a350:	69f9      	ldr	r1, [r7, #28]
 800a352:	4401      	add	r1, r0
 800a354:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a358:	4313      	orrs	r3, r2
 800a35a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d10d      	bne.n	800a37e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d009      	beq.n	800a37e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	68d9      	ldr	r1, [r3, #12]
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a37a:	460a      	mov	r2, r1
 800a37c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	791b      	ldrb	r3, [r3, #4]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d128      	bne.n	800a3d8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a392:	2b00      	cmp	r3, #0
 800a394:	d110      	bne.n	800a3b8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	015a      	lsls	r2, r3, #5
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	4413      	add	r3, r2
 800a39e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	0151      	lsls	r1, r2, #5
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	440a      	add	r2, r1
 800a3ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	e00f      	b.n	800a3d8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	015a      	lsls	r2, r3, #5
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	4413      	add	r3, r2
 800a3c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	0151      	lsls	r1, r2, #5
 800a3ca:	69fa      	ldr	r2, [r7, #28]
 800a3cc:	440a      	add	r2, r1
 800a3ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	0151      	lsls	r1, r2, #5
 800a3ea:	69fa      	ldr	r2, [r7, #28]
 800a3ec:	440a      	add	r2, r1
 800a3ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3720      	adds	r7, #32
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	1ff80000 	.word	0x1ff80000

0800a408 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	785b      	ldrb	r3, [r3, #1]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d14a      	bne.n	800a4bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a43a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a43e:	f040 8086 	bne.w	800a54e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	7812      	ldrb	r2, [r2, #0]
 800a456:	0151      	lsls	r1, r2, #5
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	440a      	add	r2, r1
 800a45c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a460:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a464:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	7812      	ldrb	r2, [r2, #0]
 800a47a:	0151      	lsls	r1, r2, #5
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	440a      	add	r2, r1
 800a480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a484:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a488:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3301      	adds	r3, #1
 800a48e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a496:	4293      	cmp	r3, r2
 800a498:	d902      	bls.n	800a4a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	75fb      	strb	r3, [r7, #23]
          break;
 800a49e:	e056      	b.n	800a54e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	015a      	lsls	r2, r3, #5
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4b8:	d0e7      	beq.n	800a48a <USB_EPStopXfer+0x82>
 800a4ba:	e048      	b.n	800a54e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4d4:	d13b      	bne.n	800a54e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	7812      	ldrb	r2, [r2, #0]
 800a4ea:	0151      	lsls	r1, r2, #5
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	440a      	add	r2, r1
 800a4f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	7812      	ldrb	r2, [r2, #0]
 800a50e:	0151      	lsls	r1, r2, #5
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	440a      	add	r2, r1
 800a514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a518:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a51c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3301      	adds	r3, #1
 800a522:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d902      	bls.n	800a534 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	75fb      	strb	r3, [r7, #23]
          break;
 800a532:	e00c      	b.n	800a54e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	015a      	lsls	r2, r3, #5
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	4413      	add	r3, r2
 800a53e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a54c:	d0e7      	beq.n	800a51e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a550:	4618      	mov	r0, r3
 800a552:	371c      	adds	r7, #28
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b089      	sub	sp, #36	@ 0x24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	4611      	mov	r1, r2
 800a568:	461a      	mov	r2, r3
 800a56a:	460b      	mov	r3, r1
 800a56c:	71fb      	strb	r3, [r7, #7]
 800a56e:	4613      	mov	r3, r2
 800a570:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a57a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d123      	bne.n	800a5ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a582:	88bb      	ldrh	r3, [r7, #4]
 800a584:	3303      	adds	r3, #3
 800a586:	089b      	lsrs	r3, r3, #2
 800a588:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a58a:	2300      	movs	r3, #0
 800a58c:	61bb      	str	r3, [r7, #24]
 800a58e:	e018      	b.n	800a5c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	031a      	lsls	r2, r3, #12
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	4413      	add	r3, r2
 800a598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a59c:	461a      	mov	r2, r3
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d3e2      	bcc.n	800a590 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3724      	adds	r7, #36	@ 0x24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b08b      	sub	sp, #44	@ 0x2c
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a5ee:	88fb      	ldrh	r3, [r7, #6]
 800a5f0:	089b      	lsrs	r3, r3, #2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5f6:	88fb      	ldrh	r3, [r7, #6]
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5fe:	2300      	movs	r3, #0
 800a600:	623b      	str	r3, [r7, #32]
 800a602:	e014      	b.n	800a62e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a612:	3301      	adds	r3, #1
 800a614:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	3301      	adds	r3, #1
 800a61a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61e:	3301      	adds	r3, #1
 800a620:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a624:	3301      	adds	r3, #1
 800a626:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	3301      	adds	r3, #1
 800a62c:	623b      	str	r3, [r7, #32]
 800a62e:	6a3a      	ldr	r2, [r7, #32]
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	429a      	cmp	r2, r3
 800a634:	d3e6      	bcc.n	800a604 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a636:	8bfb      	ldrh	r3, [r7, #30]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01e      	beq.n	800a67a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a646:	461a      	mov	r2, r3
 800a648:	f107 0310 	add.w	r3, r7, #16
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a660:	701a      	strb	r2, [r3, #0]
      i++;
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	3301      	adds	r3, #1
 800a666:	623b      	str	r3, [r7, #32]
      pDest++;
 800a668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66a:	3301      	adds	r3, #1
 800a66c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a66e:	8bfb      	ldrh	r3, [r7, #30]
 800a670:	3b01      	subs	r3, #1
 800a672:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a674:	8bfb      	ldrh	r3, [r7, #30]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1ea      	bne.n	800a650 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	372c      	adds	r7, #44	@ 0x2c
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	785b      	ldrb	r3, [r3, #1]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d12c      	bne.n	800a6fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	db12      	blt.n	800a6dc <USB_EPSetStall+0x54>
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00f      	beq.n	800a6dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	015a      	lsls	r2, r3, #5
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	0151      	lsls	r1, r2, #5
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	0151      	lsls	r1, r2, #5
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	440a      	add	r2, r1
 800a6f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	e02b      	b.n	800a756 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	015a      	lsls	r2, r3, #5
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	4413      	add	r3, r2
 800a706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	db12      	blt.n	800a736 <USB_EPSetStall+0xae>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00f      	beq.n	800a736 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a730:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a734:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	0151      	lsls	r1, r2, #5
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	440a      	add	r2, r1
 800a74c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a754:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	785b      	ldrb	r3, [r3, #1]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d128      	bne.n	800a7d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	0151      	lsls	r1, r2, #5
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	440a      	add	r2, r1
 800a796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a79a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a79e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	791b      	ldrb	r3, [r3, #4]
 800a7a4:	2b03      	cmp	r3, #3
 800a7a6:	d003      	beq.n	800a7b0 <USB_EPClearStall+0x4c>
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	791b      	ldrb	r3, [r3, #4]
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d138      	bne.n	800a822 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	e027      	b.n	800a822 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	0151      	lsls	r1, r2, #5
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	440a      	add	r2, r1
 800a7e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	791b      	ldrb	r3, [r3, #4]
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d003      	beq.n	800a802 <USB_EPClearStall+0x9e>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	791b      	ldrb	r3, [r3, #4]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d10f      	bne.n	800a822 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	0151      	lsls	r1, r2, #5
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	440a      	add	r2, r1
 800a818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a81c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a820:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a84e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a852:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a864:	68f9      	ldr	r1, [r7, #12]
 800a866:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a86a:	4313      	orrs	r3, r2
 800a86c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a896:	f023 0303 	bic.w	r3, r3, #3
 800a89a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8aa:	f023 0302 	bic.w	r3, r3, #2
 800a8ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8d8:	f023 0303 	bic.w	r3, r3, #3
 800a8dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8ec:	f043 0302 	orr.w	r3, r3, #2
 800a8f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	4013      	ands	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a918:	68fb      	ldr	r3, [r7, #12]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a926:	b480      	push	{r7}
 800a928:	b085      	sub	sp, #20
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	4013      	ands	r3, r2
 800a948:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	0c1b      	lsrs	r3, r3, #16
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	4013      	ands	r3, r2
 800a97c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	b29b      	uxth	r3, r3
}
 800a982:	4618      	mov	r0, r3
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a98e:	b480      	push	{r7}
 800a990:	b085      	sub	sp, #20
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a99e:	78fb      	ldrb	r3, [r7, #3]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b087      	sub	sp, #28
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	f003 030f 	and.w	r3, r3, #15
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fa:	01db      	lsls	r3, r3, #7
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	4013      	ands	r3, r2
 800aa16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa18:	68bb      	ldr	r3, [r7, #8]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	371c      	adds	r7, #28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	f003 0301 	and.w	r3, r3, #1
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b085      	sub	sp, #20
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa5c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aa60:	f023 0307 	bic.w	r3, r3, #7
 800aa64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	460b      	mov	r3, r1
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	333c      	adds	r3, #60	@ 0x3c
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	4a26      	ldr	r2, [pc, #152]	@ (800ab40 <USB_EP0_OutStart+0xb8>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d90a      	bls.n	800aac2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aab8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aabc:	d101      	bne.n	800aac2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e037      	b.n	800ab32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aac8:	461a      	mov	r2, r3
 800aaca:	2300      	movs	r3, #0
 800aacc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aadc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaf0:	f043 0318 	orr.w	r3, r3, #24
 800aaf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab04:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ab08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab0a:	7afb      	ldrb	r3, [r7, #11]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d10f      	bne.n	800ab30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab16:	461a      	mov	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab2a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ab2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	371c      	adds	r7, #28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	4f54300a 	.word	0x4f54300a

0800ab44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3301      	adds	r3, #1
 800ab54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab5c:	d901      	bls.n	800ab62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e01b      	b.n	800ab9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	daf2      	bge.n	800ab50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	f043 0201 	orr.w	r2, r3, #1
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab86:	d901      	bls.n	800ab8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e006      	b.n	800ab9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d0f0      	beq.n	800ab7a <USB_CoreReset+0x36>

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
	...

0800aba8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800abac:	2200      	movs	r2, #0
 800abae:	4912      	ldr	r1, [pc, #72]	@ (800abf8 <MX_USB_Device_Init+0x50>)
 800abb0:	4812      	ldr	r0, [pc, #72]	@ (800abfc <MX_USB_Device_Init+0x54>)
 800abb2:	f001 f85f 	bl	800bc74 <USBD_Init>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800abbc:	f7f5 ffb6 	bl	8000b2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800abc0:	490f      	ldr	r1, [pc, #60]	@ (800ac00 <MX_USB_Device_Init+0x58>)
 800abc2:	480e      	ldr	r0, [pc, #56]	@ (800abfc <MX_USB_Device_Init+0x54>)
 800abc4:	f001 f886 	bl	800bcd4 <USBD_RegisterClass>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800abce:	f7f5 ffad 	bl	8000b2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800abd2:	490c      	ldr	r1, [pc, #48]	@ (800ac04 <MX_USB_Device_Init+0x5c>)
 800abd4:	4809      	ldr	r0, [pc, #36]	@ (800abfc <MX_USB_Device_Init+0x54>)
 800abd6:	f000 ffb1 	bl	800bb3c <USBD_CDC_RegisterInterface>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800abe0:	f7f5 ffa4 	bl	8000b2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800abe4:	4805      	ldr	r0, [pc, #20]	@ (800abfc <MX_USB_Device_Init+0x54>)
 800abe6:	f001 f89c 	bl	800bd22 <USBD_Start>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800abf0:	f7f5 ff9c 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800abf4:	bf00      	nop
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	2000008c 	.word	0x2000008c
 800abfc:	2000cf7c 	.word	0x2000cf7c
 800ac00:	200000ec 	.word	0x200000ec
 800ac04:	20000078 	.word	0x20000078

0800ac08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	4905      	ldr	r1, [pc, #20]	@ (800ac24 <CDC_Init_FS+0x1c>)
 800ac10:	4805      	ldr	r0, [pc, #20]	@ (800ac28 <CDC_Init_FS+0x20>)
 800ac12:	f000 ffa8 	bl	800bb66 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ac16:	4905      	ldr	r1, [pc, #20]	@ (800ac2c <CDC_Init_FS+0x24>)
 800ac18:	4803      	ldr	r0, [pc, #12]	@ (800ac28 <CDC_Init_FS+0x20>)
 800ac1a:	f000 ffbd 	bl	800bb98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ac1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	2000da4c 	.word	0x2000da4c
 800ac28:	2000cf7c 	.word	0x2000cf7c
 800ac2c:	2000d24c 	.word	0x2000d24c

0800ac30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ac30:	b480      	push	{r7}
 800ac32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ac34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	6039      	str	r1, [r7, #0]
 800ac4a:	71fb      	strb	r3, [r7, #7]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	2b23      	cmp	r3, #35	@ 0x23
 800ac54:	d84a      	bhi.n	800acec <CDC_Control_FS+0xac>
 800ac56:	a201      	add	r2, pc, #4	@ (adr r2, 800ac5c <CDC_Control_FS+0x1c>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800aced 	.word	0x0800aced
 800ac60:	0800aced 	.word	0x0800aced
 800ac64:	0800aced 	.word	0x0800aced
 800ac68:	0800aced 	.word	0x0800aced
 800ac6c:	0800aced 	.word	0x0800aced
 800ac70:	0800aced 	.word	0x0800aced
 800ac74:	0800aced 	.word	0x0800aced
 800ac78:	0800aced 	.word	0x0800aced
 800ac7c:	0800aced 	.word	0x0800aced
 800ac80:	0800aced 	.word	0x0800aced
 800ac84:	0800aced 	.word	0x0800aced
 800ac88:	0800aced 	.word	0x0800aced
 800ac8c:	0800aced 	.word	0x0800aced
 800ac90:	0800aced 	.word	0x0800aced
 800ac94:	0800aced 	.word	0x0800aced
 800ac98:	0800aced 	.word	0x0800aced
 800ac9c:	0800aced 	.word	0x0800aced
 800aca0:	0800aced 	.word	0x0800aced
 800aca4:	0800aced 	.word	0x0800aced
 800aca8:	0800aced 	.word	0x0800aced
 800acac:	0800aced 	.word	0x0800aced
 800acb0:	0800aced 	.word	0x0800aced
 800acb4:	0800aced 	.word	0x0800aced
 800acb8:	0800aced 	.word	0x0800aced
 800acbc:	0800aced 	.word	0x0800aced
 800acc0:	0800aced 	.word	0x0800aced
 800acc4:	0800aced 	.word	0x0800aced
 800acc8:	0800aced 	.word	0x0800aced
 800accc:	0800aced 	.word	0x0800aced
 800acd0:	0800aced 	.word	0x0800aced
 800acd4:	0800aced 	.word	0x0800aced
 800acd8:	0800aced 	.word	0x0800aced
 800acdc:	0800aced 	.word	0x0800aced
 800ace0:	0800aced 	.word	0x0800aced
 800ace4:	0800aced 	.word	0x0800aced
 800ace8:	0800aced 	.word	0x0800aced
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800acec:	bf00      	nop
  }

  return (USBD_OK);
 800acee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	482f      	ldr	r0, [pc, #188]	@ (800adc8 <CDC_Receive_FS+0xcc>)
 800ad0a:	f000 ff45 	bl	800bb98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ad0e:	482e      	ldr	r0, [pc, #184]	@ (800adc8 <CDC_Receive_FS+0xcc>)
 800ad10:	f000 ff86 	bl	800bc20 <USBD_CDC_ReceivePacket>

  uint32_t msg_rx = (Buf[3]<<24)|(Buf[2]<<16)|(Buf[1]<<8)|(Buf[0]);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3303      	adds	r3, #3
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	061a      	lsls	r2, r3, #24
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3302      	adds	r3, #2
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	041b      	lsls	r3, r3, #16
 800ad24:	431a      	orrs	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	021b      	lsls	r3, r3, #8
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	7812      	ldrb	r2, [r2, #0]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	617b      	str	r3, [r7, #20]

  uint32_t addr = (msg_rx&0x7F000000)>>24;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	0e1b      	lsrs	r3, r3, #24
 800ad3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad40:	613b      	str	r3, [r7, #16]
  uint32_t data = (msg_rx&0x00FFFFFF);
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ad48:	60fb      	str	r3, [r7, #12]
  uint32_t msg_tx = 0xdeadbeef;
 800ad4a:	4b20      	ldr	r3, [pc, #128]	@ (800adcc <CDC_Receive_FS+0xd0>)
 800ad4c:	60bb      	str	r3, [r7, #8]

  if(msg_rx&0x80000000){
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	da05      	bge.n	800ad60 <CDC_Receive_FS+0x64>
	  set_register(&device_registers,addr,data);
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	6939      	ldr	r1, [r7, #16]
 800ad58:	481d      	ldr	r0, [pc, #116]	@ (800add0 <CDC_Receive_FS+0xd4>)
 800ad5a:	f7f6 fb85 	bl	8001468 <set_register>
 800ad5e:	e02e      	b.n	800adbe <CDC_Receive_FS+0xc2>
  }
  else{
	  if(addr == DVC_FLUSH_SAMPLE_DATA_1){
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2b64      	cmp	r3, #100	@ 0x64
 800ad64:	d105      	bne.n	800ad72 <CDC_Receive_FS+0x76>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_1, sizeof(adc_samples_1));
 800ad66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ad6a:	481a      	ldr	r0, [pc, #104]	@ (800add4 <CDC_Receive_FS+0xd8>)
 800ad6c:	f000 f838 	bl	800ade0 <CDC_Transmit_FS>
 800ad70:	e025      	b.n	800adbe <CDC_Receive_FS+0xc2>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_2){
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	2b65      	cmp	r3, #101	@ 0x65
 800ad76:	d105      	bne.n	800ad84 <CDC_Receive_FS+0x88>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_2, sizeof(adc_samples_2));
 800ad78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ad7c:	4816      	ldr	r0, [pc, #88]	@ (800add8 <CDC_Receive_FS+0xdc>)
 800ad7e:	f000 f82f 	bl	800ade0 <CDC_Transmit_FS>
 800ad82:	e01c      	b.n	800adbe <CDC_Receive_FS+0xc2>
	  }
	  else if(addr == DVC_FLUSH_SAMPLE_DATA_3){
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2b66      	cmp	r3, #102	@ 0x66
 800ad88:	d105      	bne.n	800ad96 <CDC_Receive_FS+0x9a>
		  CDC_Transmit_FS((uint8_t*)&adc_samples_3, sizeof(adc_samples_3));
 800ad8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ad8e:	4813      	ldr	r0, [pc, #76]	@ (800addc <CDC_Receive_FS+0xe0>)
 800ad90:	f000 f826 	bl	800ade0 <CDC_Transmit_FS>
 800ad94:	e013      	b.n	800adbe <CDC_Receive_FS+0xc2>
	  }
	  else{
		  data = get_register(&device_registers,addr);
 800ad96:	6939      	ldr	r1, [r7, #16]
 800ad98:	480d      	ldr	r0, [pc, #52]	@ (800add0 <CDC_Receive_FS+0xd4>)
 800ad9a:	f7f6 fb54 	bl	8001446 <get_register>
 800ad9e:	60f8      	str	r0, [r7, #12]
		  msg_tx = ((addr << 24)&0x7F000000) | (data&0x00FFFFFF);
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	061b      	lsls	r3, r3, #24
 800ada4:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800adae:	4313      	orrs	r3, r2
 800adb0:	60bb      	str	r3, [r7, #8]
		  CDC_Transmit_FS((uint8_t*)&msg_tx, sizeof(msg_tx));
 800adb2:	f107 0308 	add.w	r3, r7, #8
 800adb6:	2104      	movs	r1, #4
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f811 	bl	800ade0 <CDC_Transmit_FS>
	  }
  }

  return (USBD_OK);
 800adbe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	2000cf7c 	.word	0x2000cf7c
 800adcc:	deadbeef 	.word	0xdeadbeef
 800add0:	2000ca6c 	.word	0x2000ca6c
 800add4:	20000a6c 	.word	0x20000a6c
 800add8:	20004a6c 	.word	0x20004a6c
 800addc:	20008a6c 	.word	0x20008a6c

0800ade0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800adf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ae28 <CDC_Transmit_FS+0x48>)
 800adf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800adf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e00b      	b.n	800ae1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae06:	887b      	ldrh	r3, [r7, #2]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	6879      	ldr	r1, [r7, #4]
 800ae0c:	4806      	ldr	r0, [pc, #24]	@ (800ae28 <CDC_Transmit_FS+0x48>)
 800ae0e:	f000 feaa 	bl	800bb66 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae12:	4805      	ldr	r0, [pc, #20]	@ (800ae28 <CDC_Transmit_FS+0x48>)
 800ae14:	f000 fed4 	bl	800bbc0 <USBD_CDC_TransmitPacket>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	2000cf7c 	.word	0x2000cf7c

0800ae2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4613      	mov	r3, r2
 800ae38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ae3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
	...

0800ae50 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	6039      	str	r1, [r7, #0]
 800ae5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	2212      	movs	r2, #18
 800ae60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ae62:	4b03      	ldr	r3, [pc, #12]	@ (800ae70 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	200000ac 	.word	0x200000ac

0800ae74 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	6039      	str	r1, [r7, #0]
 800ae7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2204      	movs	r2, #4
 800ae84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae86:	4b03      	ldr	r3, [pc, #12]	@ (800ae94 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	200000c0 	.word	0x200000c0

0800ae98 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d105      	bne.n	800aeb6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	4907      	ldr	r1, [pc, #28]	@ (800aecc <USBD_CDC_ProductStrDescriptor+0x34>)
 800aeae:	4808      	ldr	r0, [pc, #32]	@ (800aed0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aeb0:	f001 ff40 	bl	800cd34 <USBD_GetString>
 800aeb4:	e004      	b.n	800aec0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	4904      	ldr	r1, [pc, #16]	@ (800aecc <USBD_CDC_ProductStrDescriptor+0x34>)
 800aeba:	4805      	ldr	r0, [pc, #20]	@ (800aed0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aebc:	f001 ff3a 	bl	800cd34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aec0:	4b02      	ldr	r3, [pc, #8]	@ (800aecc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	2000e24c 	.word	0x2000e24c
 800aed0:	0800cf64 	.word	0x0800cf64

0800aed4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	6039      	str	r1, [r7, #0]
 800aede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aee0:	683a      	ldr	r2, [r7, #0]
 800aee2:	4904      	ldr	r1, [pc, #16]	@ (800aef4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800aee4:	4804      	ldr	r0, [pc, #16]	@ (800aef8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800aee6:	f001 ff25 	bl	800cd34 <USBD_GetString>
  return USBD_StrDesc;
 800aeea:	4b02      	ldr	r3, [pc, #8]	@ (800aef4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	2000e24c 	.word	0x2000e24c
 800aef8:	0800cf7c 	.word	0x0800cf7c

0800aefc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	6039      	str	r1, [r7, #0]
 800af06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	221a      	movs	r2, #26
 800af0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af0e:	f000 f843 	bl	800af98 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800af12:	4b02      	ldr	r3, [pc, #8]	@ (800af1c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	200000c4 	.word	0x200000c4

0800af20 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	4603      	mov	r3, r0
 800af28:	6039      	str	r1, [r7, #0]
 800af2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d105      	bne.n	800af3e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	4907      	ldr	r1, [pc, #28]	@ (800af54 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800af36:	4808      	ldr	r0, [pc, #32]	@ (800af58 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800af38:	f001 fefc 	bl	800cd34 <USBD_GetString>
 800af3c:	e004      	b.n	800af48 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	4904      	ldr	r1, [pc, #16]	@ (800af54 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800af42:	4805      	ldr	r0, [pc, #20]	@ (800af58 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800af44:	f001 fef6 	bl	800cd34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af48:	4b02      	ldr	r3, [pc, #8]	@ (800af54 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	2000e24c 	.word	0x2000e24c
 800af58:	0800cf90 	.word	0x0800cf90

0800af5c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	4603      	mov	r3, r0
 800af64:	6039      	str	r1, [r7, #0]
 800af66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d105      	bne.n	800af7a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	4907      	ldr	r1, [pc, #28]	@ (800af90 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800af72:	4808      	ldr	r0, [pc, #32]	@ (800af94 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800af74:	f001 fede 	bl	800cd34 <USBD_GetString>
 800af78:	e004      	b.n	800af84 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	4904      	ldr	r1, [pc, #16]	@ (800af90 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800af7e:	4805      	ldr	r0, [pc, #20]	@ (800af94 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800af80:	f001 fed8 	bl	800cd34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af84:	4b02      	ldr	r3, [pc, #8]	@ (800af90 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800af86:	4618      	mov	r0, r3
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	2000e24c 	.word	0x2000e24c
 800af94:	0800cf9c 	.word	0x0800cf9c

0800af98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af9e:	4b0f      	ldr	r3, [pc, #60]	@ (800afdc <Get_SerialNum+0x44>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800afa4:	4b0e      	ldr	r3, [pc, #56]	@ (800afe0 <Get_SerialNum+0x48>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800afaa:	4b0e      	ldr	r3, [pc, #56]	@ (800afe4 <Get_SerialNum+0x4c>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4413      	add	r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d009      	beq.n	800afd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800afbe:	2208      	movs	r2, #8
 800afc0:	4909      	ldr	r1, [pc, #36]	@ (800afe8 <Get_SerialNum+0x50>)
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 f814 	bl	800aff0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800afc8:	2204      	movs	r2, #4
 800afca:	4908      	ldr	r1, [pc, #32]	@ (800afec <Get_SerialNum+0x54>)
 800afcc:	68b8      	ldr	r0, [r7, #8]
 800afce:	f000 f80f 	bl	800aff0 <IntToUnicode>
  }
}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	0bfa0700 	.word	0x0bfa0700
 800afe0:	0bfa0704 	.word	0x0bfa0704
 800afe4:	0bfa0708 	.word	0x0bfa0708
 800afe8:	200000c6 	.word	0x200000c6
 800afec:	200000d6 	.word	0x200000d6

0800aff0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	4613      	mov	r3, r2
 800affc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b002:	2300      	movs	r3, #0
 800b004:	75fb      	strb	r3, [r7, #23]
 800b006:	e027      	b.n	800b058 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	0f1b      	lsrs	r3, r3, #28
 800b00c:	2b09      	cmp	r3, #9
 800b00e:	d80b      	bhi.n	800b028 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	0f1b      	lsrs	r3, r3, #28
 800b014:	b2da      	uxtb	r2, r3
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	4619      	mov	r1, r3
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	440b      	add	r3, r1
 800b020:	3230      	adds	r2, #48	@ 0x30
 800b022:	b2d2      	uxtb	r2, r2
 800b024:	701a      	strb	r2, [r3, #0]
 800b026:	e00a      	b.n	800b03e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	0f1b      	lsrs	r3, r3, #28
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	4619      	mov	r1, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	440b      	add	r3, r1
 800b038:	3237      	adds	r2, #55	@ 0x37
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	011b      	lsls	r3, r3, #4
 800b042:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b044:	7dfb      	ldrb	r3, [r7, #23]
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	3301      	adds	r3, #1
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	4413      	add	r3, r2
 800b04e:	2200      	movs	r2, #0
 800b050:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b052:	7dfb      	ldrb	r3, [r7, #23]
 800b054:	3301      	adds	r3, #1
 800b056:	75fb      	strb	r3, [r7, #23]
 800b058:	7dfa      	ldrb	r2, [r7, #23]
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d3d3      	bcc.n	800b008 <IntToUnicode+0x18>
  }
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b082      	sub	sp, #8
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b082:	4619      	mov	r1, r3
 800b084:	4610      	mov	r0, r2
 800b086:	f000 fe97 	bl	800bdb8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b08a:	bf00      	nop
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b082      	sub	sp, #8
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	460b      	mov	r3, r1
 800b09c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b0a4:	78fa      	ldrb	r2, [r7, #3]
 800b0a6:	6879      	ldr	r1, [r7, #4]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	440b      	add	r3, r1
 800b0b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	78fb      	ldrb	r3, [r7, #3]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	f000 fed1 	bl	800be62 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b0da:	78fa      	ldrb	r2, [r7, #3]
 800b0dc:	6879      	ldr	r1, [r7, #4]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	00db      	lsls	r3, r3, #3
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	3320      	adds	r3, #32
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	78fb      	ldrb	r3, [r7, #3]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	f000 ff1a 	bl	800bf28 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b10a:	4618      	mov	r0, r3
 800b10c:	f001 f81e 	bl	800c14c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b120:	2301      	movs	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	79db      	ldrb	r3, [r3, #7]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d001      	beq.n	800b130 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b12c:	f7f5 fcfe 	bl	8000b2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b136:	7bfa      	ldrb	r2, [r7, #15]
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 ffcb 	bl	800c0d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b146:	4618      	mov	r0, r3
 800b148:	f000 ff84 	bl	800c054 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b14c:	bf00      	nop
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b162:	4618      	mov	r0, r3
 800b164:	f000 ffc7 	bl	800c0f6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	7adb      	ldrb	r3, [r3, #11]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b170:	4b04      	ldr	r3, [pc, #16]	@ (800b184 <HAL_PCD_SuspendCallback+0x30>)
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	4a03      	ldr	r2, [pc, #12]	@ (800b184 <HAL_PCD_SuspendCallback+0x30>)
 800b176:	f043 0306 	orr.w	r3, r3, #6
 800b17a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	e000ed00 	.word	0xe000ed00

0800b188 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	7adb      	ldrb	r3, [r3, #11]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d007      	beq.n	800b1a8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b198:	4b08      	ldr	r3, [pc, #32]	@ (800b1bc <HAL_PCD_ResumeCallback+0x34>)
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	4a07      	ldr	r2, [pc, #28]	@ (800b1bc <HAL_PCD_ResumeCallback+0x34>)
 800b19e:	f023 0306 	bic.w	r3, r3, #6
 800b1a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b1a4:	f000 fa2a 	bl	800b5fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 ffb6 	bl	800c120 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	e000ed00 	.word	0xe000ed00

0800b1c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1d2:	78fa      	ldrb	r2, [r7, #3]
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 ffdf 	bl	800c19a <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1f6:	78fa      	ldrb	r2, [r7, #3]
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 ffc0 	bl	800c180 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b216:	4618      	mov	r0, r3
 800b218:	f000 ffcc 	bl	800c1b4 <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 800b21c:	bf00      	nop
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b232:	4618      	mov	r0, r3
 800b234:	f000 ffc9 	bl	800c1ca <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 800b238:	bf00      	nop
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b248:	4a24      	ldr	r2, [pc, #144]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a22      	ldr	r2, [pc, #136]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b254:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b258:	f7fa f8e0 	bl	800541c <HAL_PWREx_EnableVddUSB>
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler( );
  }
#else
  hpcd_USB_FS.Instance = USB_OTG_FS;
 800b25c:	4b1f      	ldr	r3, [pc, #124]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b25e:	4a20      	ldr	r2, [pc, #128]	@ (800b2e0 <USBD_LL_Init+0xa0>)
 800b260:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 6;
 800b262:	4b1e      	ldr	r3, [pc, #120]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b264:	2206      	movs	r2, #6
 800b266:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b268:	4b1c      	ldr	r3, [pc, #112]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b26a:	2202      	movs	r2, #2
 800b26c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b26e:	4b1b      	ldr	r3, [pc, #108]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b270:	2200      	movs	r2, #0
 800b272:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b274:	4b19      	ldr	r3, [pc, #100]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b276:	2200      	movs	r2, #0
 800b278:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b27a:	4b18      	ldr	r3, [pc, #96]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b280:	4b16      	ldr	r3, [pc, #88]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b282:	2200      	movs	r2, #0
 800b284:	735a      	strb	r2, [r3, #13]
  hpcd_USB_FS.Init.use_dedicated_ep1 = DISABLE;
 800b286:	4b15      	ldr	r3, [pc, #84]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b288:	2200      	movs	r2, #0
 800b28a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_FS.Init.vbus_sensing_enable = DISABLE;
 800b28c:	4b13      	ldr	r3, [pc, #76]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b28e:	2200      	movs	r2, #0
 800b290:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b292:	4812      	ldr	r0, [pc, #72]	@ (800b2dc <USBD_LL_Init+0x9c>)
 800b294:	f7f8 fd9c 	bl	8003dd0 <HAL_PCD_Init>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <USBD_LL_Init+0x62>
  {
    Error_Handler();
 800b29e:	f7f5 fc45 	bl	8000b2c <Error_Handler>
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , 0, 0xC0);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , 0, 0x110);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , 0, 0x100);
#else
  HAL_PCDEx_SetRxFiFo((PCD_HandleTypeDef*)pdev->pData, 0x80);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b2a8:	2180      	movs	r1, #128	@ 0x80
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7f9 fff5 	bl	800529a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 0, 0x40);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b2b6:	2240      	movs	r2, #64	@ 0x40
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7f9 ffa6 	bl	800520c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 1, 0x80);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b2c6:	2280      	movs	r2, #128	@ 0x80
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7f9 ff9e 	bl	800520c <HAL_PCDEx_SetTxFiFo>
#endif
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	2000e44c 	.word	0x2000e44c
 800b2e0:	42040000 	.word	0x42040000

0800b2e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7f8 fe80 	bl	8004000 <HAL_PCD_Start>
 800b300:	4603      	mov	r3, r0
 800b302:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b304:	7bfb      	ldrb	r3, [r7, #15]
 800b306:	4618      	mov	r0, r3
 800b308:	f000 f97e 	bl	800b608 <USBD_Get_USB_Status>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b310:	7bbb      	ldrb	r3, [r7, #14]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	4608      	mov	r0, r1
 800b324:	4611      	mov	r1, r2
 800b326:	461a      	mov	r2, r3
 800b328:	4603      	mov	r3, r0
 800b32a:	70fb      	strb	r3, [r7, #3]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70bb      	strb	r3, [r7, #2]
 800b330:	4613      	mov	r3, r2
 800b332:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b338:	2300      	movs	r3, #0
 800b33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b342:	78bb      	ldrb	r3, [r7, #2]
 800b344:	883a      	ldrh	r2, [r7, #0]
 800b346:	78f9      	ldrb	r1, [r7, #3]
 800b348:	f7f9 fb7b 	bl	8004a42 <HAL_PCD_EP_Open>
 800b34c:	4603      	mov	r3, r0
 800b34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b350:	7bfb      	ldrb	r3, [r7, #15]
 800b352:	4618      	mov	r0, r3
 800b354:	f000 f958 	bl	800b608 <USBD_Get_USB_Status>
 800b358:	4603      	mov	r3, r0
 800b35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	460b      	mov	r3, r1
 800b370:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b380:	78fa      	ldrb	r2, [r7, #3]
 800b382:	4611      	mov	r1, r2
 800b384:	4618      	mov	r0, r3
 800b386:	f7f9 fbc6 	bl	8004b16 <HAL_PCD_EP_Close>
 800b38a:	4603      	mov	r3, r0
 800b38c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	4618      	mov	r0, r3
 800b392:	f000 f939 	bl	800b608 <USBD_Get_USB_Status>
 800b396:	4603      	mov	r3, r0
 800b398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b3be:	78fa      	ldrb	r2, [r7, #3]
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7f9 fc7e 	bl	8004cc4 <HAL_PCD_EP_SetStall>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 f91a 	bl	800b608 <USBD_Get_USB_Status>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b3fc:	78fa      	ldrb	r2, [r7, #3]
 800b3fe:	4611      	mov	r1, r2
 800b400:	4618      	mov	r0, r3
 800b402:	f7f9 fcc2 	bl	8004d8a <HAL_PCD_EP_ClrStall>
 800b406:	4603      	mov	r3, r0
 800b408:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 f8fb 	bl	800b608 <USBD_Get_USB_Status>
 800b412:	4603      	mov	r3, r0
 800b414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b416:	7bbb      	ldrb	r3, [r7, #14]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b432:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	da0b      	bge.n	800b454 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b43c:	78fb      	ldrb	r3, [r7, #3]
 800b43e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b442:	68f9      	ldr	r1, [r7, #12]
 800b444:	4613      	mov	r3, r2
 800b446:	00db      	lsls	r3, r3, #3
 800b448:	4413      	add	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	440b      	add	r3, r1
 800b44e:	3316      	adds	r3, #22
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	e00b      	b.n	800b46c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b454:	78fb      	ldrb	r3, [r7, #3]
 800b456:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b45a:	68f9      	ldr	r1, [r7, #12]
 800b45c:	4613      	mov	r3, r2
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	440b      	add	r3, r1
 800b466:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b46a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	460b      	mov	r3, r1
 800b482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b492:	78fa      	ldrb	r2, [r7, #3]
 800b494:	4611      	mov	r1, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f7f9 faaf 	bl	80049fa <HAL_PCD_SetAddress>
 800b49c:	4603      	mov	r3, r0
 800b49e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 f8b0 	bl	800b608 <USBD_Get_USB_Status>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b086      	sub	sp, #24
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	60f8      	str	r0, [r7, #12]
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	603b      	str	r3, [r7, #0]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b4d4:	7af9      	ldrb	r1, [r7, #11]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	f7f9 fbb9 	bl	8004c50 <HAL_PCD_EP_Transmit>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 f88f 	bl	800b608 <USBD_Get_USB_Status>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	607a      	str	r2, [r7, #4]
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	460b      	mov	r3, r1
 800b506:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b508:	2300      	movs	r3, #0
 800b50a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b50c:	2300      	movs	r3, #0
 800b50e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b516:	7af9      	ldrb	r1, [r7, #11]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	f7f9 fb45 	bl	8004baa <HAL_PCD_EP_Receive>
 800b520:	4603      	mov	r3, r0
 800b522:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f86e 	bl	800b608 <USBD_Get_USB_Status>
 800b52c:	4603      	mov	r3, r0
 800b52e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b530:	7dbb      	ldrb	r3, [r7, #22]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b082      	sub	sp, #8
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b54c:	78fa      	ldrb	r2, [r7, #3]
 800b54e:	4611      	mov	r1, r2
 800b550:	4618      	mov	r0, r3
 800b552:	f7f9 fb65 	bl	8004c20 <HAL_PCD_EP_GetRxCount>
 800b556:	4603      	mov	r3, r0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <HAL_PCDEx_LPM_Callback+0x18>
 800b572:	2b01      	cmp	r3, #1
 800b574:	d013      	beq.n	800b59e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b576:	e023      	b.n	800b5c0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	7adb      	ldrb	r3, [r3, #11]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d007      	beq.n	800b590 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b580:	f000 f83c 	bl	800b5fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b584:	4b10      	ldr	r3, [pc, #64]	@ (800b5c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	4a0f      	ldr	r2, [pc, #60]	@ (800b5c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b58a:	f023 0306 	bic.w	r3, r3, #6
 800b58e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b596:	4618      	mov	r0, r3
 800b598:	f000 fdc2 	bl	800c120 <USBD_LL_Resume>
    break;
 800b59c:	e010      	b.n	800b5c0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 fda6 	bl	800c0f6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	7adb      	ldrb	r3, [r3, #11]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d005      	beq.n	800b5be <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5b2:	4b05      	ldr	r3, [pc, #20]	@ (800b5c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	4a04      	ldr	r2, [pc, #16]	@ (800b5c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b5b8:	f043 0306 	orr.w	r3, r3, #6
 800b5bc:	6113      	str	r3, [r2, #16]
    break;
 800b5be:	bf00      	nop
}
 800b5c0:	bf00      	nop
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	e000ed00 	.word	0xe000ed00

0800b5cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5d4:	4b03      	ldr	r3, [pc, #12]	@ (800b5e4 <USBD_static_malloc+0x18>)
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	2000e930 	.word	0x2000e930

0800b5e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]

}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b600:	f7f4 fe5c 	bl	80002bc <SystemClock_Config>
}
 800b604:	bf00      	nop
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b616:	79fb      	ldrb	r3, [r7, #7]
 800b618:	2b03      	cmp	r3, #3
 800b61a:	d817      	bhi.n	800b64c <USBD_Get_USB_Status+0x44>
 800b61c:	a201      	add	r2, pc, #4	@ (adr r2, 800b624 <USBD_Get_USB_Status+0x1c>)
 800b61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b622:	bf00      	nop
 800b624:	0800b635 	.word	0x0800b635
 800b628:	0800b63b 	.word	0x0800b63b
 800b62c:	0800b641 	.word	0x0800b641
 800b630:	0800b647 	.word	0x0800b647
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b634:	2300      	movs	r3, #0
 800b636:	73fb      	strb	r3, [r7, #15]
    break;
 800b638:	e00b      	b.n	800b652 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b63a:	2303      	movs	r3, #3
 800b63c:	73fb      	strb	r3, [r7, #15]
    break;
 800b63e:	e008      	b.n	800b652 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b640:	2301      	movs	r3, #1
 800b642:	73fb      	strb	r3, [r7, #15]
    break;
 800b644:	e005      	b.n	800b652 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b646:	2303      	movs	r3, #3
 800b648:	73fb      	strb	r3, [r7, #15]
    break;
 800b64a:	e002      	b.n	800b652 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b64c:	2303      	movs	r3, #3
 800b64e:	73fb      	strb	r3, [r7, #15]
    break;
 800b650:	bf00      	nop
  }
  return usb_status;
 800b652:	7bfb      	ldrb	r3, [r7, #15]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b66c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b670:	f7ff ffac 	bl	800b5cc <USBD_static_malloc>
 800b674:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d105      	bne.n	800b688 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800b684:	2302      	movs	r3, #2
 800b686:	e066      	b.n	800b756 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	7c1b      	ldrb	r3, [r3, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d119      	bne.n	800b6cc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b69c:	2202      	movs	r2, #2
 800b69e:	2181      	movs	r1, #129	@ 0x81
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff fe3a 	bl	800b31a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b6ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6b0:	2202      	movs	r2, #2
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff fe30 	bl	800b31a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2210      	movs	r2, #16
 800b6c6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800b6ca:	e016      	b.n	800b6fa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b6cc:	2340      	movs	r3, #64	@ 0x40
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	2181      	movs	r1, #129	@ 0x81
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff fe21 	bl	800b31a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b6de:	2340      	movs	r3, #64	@ 0x40
 800b6e0:	2202      	movs	r2, #2
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff fe18 	bl	800b31a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2210      	movs	r2, #16
 800b6f6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b6fa:	2308      	movs	r3, #8
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	2182      	movs	r1, #130	@ 0x82
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff fe0a 	bl	800b31a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	7c1b      	ldrb	r3, [r3, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d109      	bne.n	800b744 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b736:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b73a:	2101      	movs	r1, #1
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff fedb 	bl	800b4f8 <USBD_LL_PrepareReceive>
 800b742:	e007      	b.n	800b754 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b74a:	2340      	movs	r3, #64	@ 0x40
 800b74c:	2101      	movs	r1, #1
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff fed2 	bl	800b4f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	460b      	mov	r3, r1
 800b768:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b76a:	2181      	movs	r1, #129	@ 0x81
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff fdfa 	bl	800b366 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b778:	2101      	movs	r1, #1
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff fdf3 	bl	800b366 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b788:	2182      	movs	r1, #130	@ 0x82
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7ff fdeb 	bl	800b366 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00e      	beq.n	800b7c8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7ff ff14 	bl	800b5e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
	...

0800b7d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d03a      	beq.n	800b874 <USBD_CDC_Setup+0xa0>
 800b7fe:	2b20      	cmp	r3, #32
 800b800:	f040 8097 	bne.w	800b932 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	88db      	ldrh	r3, [r3, #6]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d029      	beq.n	800b860 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	b25b      	sxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	da11      	bge.n	800b83a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b822:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	88d2      	ldrh	r2, [r2, #6]
 800b828:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b82a:	6939      	ldr	r1, [r7, #16]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	88db      	ldrh	r3, [r3, #6]
 800b830:	461a      	mov	r2, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f001 fade 	bl	800cdf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b838:	e082      	b.n	800b940 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	785a      	ldrb	r2, [r3, #1]
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	88db      	ldrh	r3, [r3, #6]
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b850:	6939      	ldr	r1, [r7, #16]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	88db      	ldrh	r3, [r3, #6]
 800b856:	461a      	mov	r2, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f001 faf7 	bl	800ce4c <USBD_CtlPrepareRx>
      break;
 800b85e:	e06f      	b.n	800b940 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	683a      	ldr	r2, [r7, #0]
 800b86a:	7850      	ldrb	r0, [r2, #1]
 800b86c:	2200      	movs	r2, #0
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	4798      	blx	r3
      break;
 800b872:	e065      	b.n	800b940 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	785b      	ldrb	r3, [r3, #1]
 800b878:	2b0b      	cmp	r3, #11
 800b87a:	d84f      	bhi.n	800b91c <USBD_CDC_Setup+0x148>
 800b87c:	a201      	add	r2, pc, #4	@ (adr r2, 800b884 <USBD_CDC_Setup+0xb0>)
 800b87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b882:	bf00      	nop
 800b884:	0800b8b5 	.word	0x0800b8b5
 800b888:	0800b92b 	.word	0x0800b92b
 800b88c:	0800b91d 	.word	0x0800b91d
 800b890:	0800b91d 	.word	0x0800b91d
 800b894:	0800b91d 	.word	0x0800b91d
 800b898:	0800b91d 	.word	0x0800b91d
 800b89c:	0800b91d 	.word	0x0800b91d
 800b8a0:	0800b91d 	.word	0x0800b91d
 800b8a4:	0800b91d 	.word	0x0800b91d
 800b8a8:	0800b91d 	.word	0x0800b91d
 800b8ac:	0800b8dd 	.word	0x0800b8dd
 800b8b0:	0800b905 	.word	0x0800b905
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8ba:	2b03      	cmp	r3, #3
 800b8bc:	d107      	bne.n	800b8ce <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b8be:	f107 030c 	add.w	r3, r7, #12
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 fa94 	bl	800cdf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8cc:	e030      	b.n	800b930 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f001 fa1e 	bl	800cd12 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	75fb      	strb	r3, [r7, #23]
          break;
 800b8da:	e029      	b.n	800b930 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d107      	bne.n	800b8f6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b8e6:	f107 030f 	add.w	r3, r7, #15
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f001 fa80 	bl	800cdf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8f4:	e01c      	b.n	800b930 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f001 fa0a 	bl	800cd12 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8fe:	2303      	movs	r3, #3
 800b900:	75fb      	strb	r3, [r7, #23]
          break;
 800b902:	e015      	b.n	800b930 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b90a:	2b03      	cmp	r3, #3
 800b90c:	d00f      	beq.n	800b92e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f001 f9fe 	bl	800cd12 <USBD_CtlError>
            ret = USBD_FAIL;
 800b916:	2303      	movs	r3, #3
 800b918:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b91a:	e008      	b.n	800b92e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f001 f9f7 	bl	800cd12 <USBD_CtlError>
          ret = USBD_FAIL;
 800b924:	2303      	movs	r3, #3
 800b926:	75fb      	strb	r3, [r7, #23]
          break;
 800b928:	e002      	b.n	800b930 <USBD_CDC_Setup+0x15c>
          break;
 800b92a:	bf00      	nop
 800b92c:	e008      	b.n	800b940 <USBD_CDC_Setup+0x16c>
          break;
 800b92e:	bf00      	nop
      }
      break;
 800b930:	e006      	b.n	800b940 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800b932:	6839      	ldr	r1, [r7, #0]
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f001 f9ec 	bl	800cd12 <USBD_CtlError>
      ret = USBD_FAIL;
 800b93a:	2303      	movs	r3, #3
 800b93c:	75fb      	strb	r3, [r7, #23]
      break;
 800b93e:	bf00      	nop
  }

  return (uint8_t)ret;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop

0800b94c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	460b      	mov	r3, r1
 800b956:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b95e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e04f      	b.n	800ba0e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b974:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b976:	78fa      	ldrb	r2, [r7, #3]
 800b978:	6879      	ldr	r1, [r7, #4]
 800b97a:	4613      	mov	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	440b      	add	r3, r1
 800b984:	3318      	adds	r3, #24
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d029      	beq.n	800b9e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b98c:	78fa      	ldrb	r2, [r7, #3]
 800b98e:	6879      	ldr	r1, [r7, #4]
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	440b      	add	r3, r1
 800b99a:	3318      	adds	r3, #24
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	78f9      	ldrb	r1, [r7, #3]
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	00db      	lsls	r3, r3, #3
 800b9a6:	440b      	add	r3, r1
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4403      	add	r3, r0
 800b9ac:	331c      	adds	r3, #28
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b9b4:	fb01 f303 	mul.w	r3, r1, r3
 800b9b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d110      	bne.n	800b9e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b9be:	78fa      	ldrb	r2, [r7, #3]
 800b9c0:	6879      	ldr	r1, [r7, #4]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	440b      	add	r3, r1
 800b9cc:	3318      	adds	r3, #24
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b9d2:	78f9      	ldrb	r1, [r7, #3]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff fd6c 	bl	800b4b6 <USBD_LL_Transmit>
 800b9de:	e015      	b.n	800ba0c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00b      	beq.n	800ba0c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ba08:	78fa      	ldrb	r2, [r7, #3]
 800ba0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b084      	sub	sp, #16
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ba28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d101      	bne.n	800ba38 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e015      	b.n	800ba64 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff fd7c 	bl	800b53a <USBD_LL_GetRxDataSize>
 800ba42:	4602      	mov	r2, r0
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ba5e:	4611      	mov	r1, r2
 800ba60:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ba7a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d014      	beq.n	800bab0 <USBD_CDC_EP0_RxReady+0x44>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ba8c:	2bff      	cmp	r3, #255	@ 0xff
 800ba8e:	d00f      	beq.n	800bab0 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800ba9e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800baa6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	22ff      	movs	r2, #255	@ 0xff
 800baac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
	...

0800babc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2243      	movs	r2, #67	@ 0x43
 800bac8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800baca:	4b03      	ldr	r3, [pc, #12]	@ (800bad8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bacc:	4618      	mov	r0, r3
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	20000168 	.word	0x20000168

0800badc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2243      	movs	r2, #67	@ 0x43
 800bae8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800baea:	4b03      	ldr	r3, [pc, #12]	@ (800baf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800baec:	4618      	mov	r0, r3
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	20000124 	.word	0x20000124

0800bafc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2243      	movs	r2, #67	@ 0x43
 800bb08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bb0a:	4b03      	ldr	r3, [pc, #12]	@ (800bb18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	200001ac 	.word	0x200001ac

0800bb1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	220a      	movs	r2, #10
 800bb28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bb2a:	4b03      	ldr	r3, [pc, #12]	@ (800bb38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	200000e0 	.word	0x200000e0

0800bb3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d101      	bne.n	800bb50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bb4c:	2303      	movs	r3, #3
 800bb4e:	e004      	b.n	800bb5a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b087      	sub	sp, #28
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	60f8      	str	r0, [r7, #12]
 800bb6e:	60b9      	str	r1, [r7, #8]
 800bb70:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bb78:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	371c      	adds	r7, #28
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bba8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bbce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d101      	bne.n	800bbe2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	e01a      	b.n	800bc18 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d114      	bne.n	800bc16 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bc0a:	2181      	movs	r1, #129	@ 0x81
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7ff fc52 	bl	800b4b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bc12:	2300      	movs	r3, #0
 800bc14:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	e016      	b.n	800bc6c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7c1b      	ldrb	r3, [r3, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d109      	bne.n	800bc5a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc50:	2101      	movs	r1, #1
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff fc50 	bl	800b4f8 <USBD_LL_PrepareReceive>
 800bc58:	e007      	b.n	800bc6a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc60:	2340      	movs	r3, #64	@ 0x40
 800bc62:	2101      	movs	r1, #1
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff fc47 	bl	800b4f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d101      	bne.n	800bc8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e01f      	b.n	800bccc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	79fa      	ldrb	r2, [r7, #7]
 800bcbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7ff fabd 	bl	800b240 <USBD_LL_Init>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bcde:	2300      	movs	r3, #0
 800bce0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d101      	bne.n	800bcec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bce8:	2303      	movs	r3, #3
 800bcea:	e016      	b.n	800bd1a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00b      	beq.n	800bd18 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd08:	f107 020e 	add.w	r2, r7, #14
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
 800bd10:	4602      	mov	r2, r0
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7ff fada 	bl	800b2e4 <USBD_LL_Start>
 800bd30:	4603      	mov	r3, r0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b083      	sub	sp, #12
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d009      	beq.n	800bd7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	78fa      	ldrb	r2, [r7, #3]
 800bd74:	4611      	mov	r1, r2
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	4798      	blx	r3
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d007      	beq.n	800bdae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	78fa      	ldrb	r2, [r7, #3]
 800bda8:	4611      	mov	r1, r2
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	4798      	blx	r3
  }

  return USBD_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 ff67 	bl	800cc9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bdde:	461a      	mov	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bdec:	f003 031f 	and.w	r3, r3, #31
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d01a      	beq.n	800be2a <USBD_LL_SetupStage+0x72>
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d822      	bhi.n	800be3e <USBD_LL_SetupStage+0x86>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <USBD_LL_SetupStage+0x4a>
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d00a      	beq.n	800be16 <USBD_LL_SetupStage+0x5e>
 800be00:	e01d      	b.n	800be3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fa18 	bl	800c240 <USBD_StdDevReq>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]
      break;
 800be14:	e020      	b.n	800be58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fa7c 	bl	800c31c <USBD_StdItfReq>
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]
      break;
 800be28:	e016      	b.n	800be58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 faba 	bl	800c3ac <USBD_StdEPReq>
 800be38:	4603      	mov	r3, r0
 800be3a:	73fb      	strb	r3, [r7, #15]
      break;
 800be3c:	e00c      	b.n	800be58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff faa9 	bl	800b3a4 <USBD_LL_StallEP>
 800be52:	4603      	mov	r3, r0
 800be54:	73fb      	strb	r3, [r7, #15]
      break;
 800be56:	bf00      	nop
  }

  return ret;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b086      	sub	sp, #24
 800be66:	af00      	add	r7, sp, #0
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	460b      	mov	r3, r1
 800be6c:	607a      	str	r2, [r7, #4]
 800be6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800be70:	7afb      	ldrb	r3, [r7, #11]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d137      	bne.n	800bee6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800be7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800be84:	2b03      	cmp	r3, #3
 800be86:	d14a      	bne.n	800bf1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	689a      	ldr	r2, [r3, #8]
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	429a      	cmp	r2, r3
 800be92:	d913      	bls.n	800bebc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	689a      	ldr	r2, [r3, #8]
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	1ad2      	subs	r2, r2, r3
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	68da      	ldr	r2, [r3, #12]
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	4293      	cmp	r3, r2
 800beac:	bf28      	it	cs
 800beae:	4613      	movcs	r3, r2
 800beb0:	461a      	mov	r2, r3
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f000 ffe6 	bl	800ce86 <USBD_CtlContinueRx>
 800beba:	e030      	b.n	800bf1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bec2:	691b      	ldr	r3, [r3, #16]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00a      	beq.n	800bede <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d105      	bne.n	800bede <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f000 ffe2 	bl	800cea8 <USBD_CtlSendStatus>
 800bee4:	e01b      	b.n	800bf1e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d013      	beq.n	800bf1a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d10e      	bne.n	800bf1a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	7afa      	ldrb	r2, [r7, #11]
 800bf06:	4611      	mov	r1, r2
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	4798      	blx	r3
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bf10:	7dfb      	ldrb	r3, [r7, #23]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	e002      	b.n	800bf20 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e000      	b.n	800bf20 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3718      	adds	r7, #24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	460b      	mov	r3, r1
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bf36:	7afb      	ldrb	r3, [r7, #11]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d16a      	bne.n	800c012 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	3314      	adds	r3, #20
 800bf40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d155      	bne.n	800bff8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d914      	bls.n	800bf82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	689a      	ldr	r2, [r3, #8]
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	1ad2      	subs	r2, r2, r3
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f000 ff5b 	bl	800ce2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf74:	2300      	movs	r3, #0
 800bf76:	2200      	movs	r2, #0
 800bf78:	2100      	movs	r1, #0
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fabc 	bl	800b4f8 <USBD_LL_PrepareReceive>
 800bf80:	e03a      	b.n	800bff8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	68da      	ldr	r2, [r3, #12]
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d11c      	bne.n	800bfc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d316      	bcc.n	800bfc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d20f      	bcs.n	800bfc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	2100      	movs	r1, #0
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f000 ff3c 	bl	800ce2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfba:	2300      	movs	r3, #0
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f7ff fa99 	bl	800b4f8 <USBD_LL_PrepareReceive>
 800bfc6:	e017      	b.n	800bff8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00a      	beq.n	800bfea <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d105      	bne.n	800bfea <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfea:	2180      	movs	r1, #128	@ 0x80
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f7ff f9d9 	bl	800b3a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f000 ff6b 	bl	800cece <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d123      	bne.n	800c04a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f7ff fe99 	bl	800bd3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c010:	e01b      	b.n	800c04a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d013      	beq.n	800c046 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c024:	2b03      	cmp	r3, #3
 800c026:	d10e      	bne.n	800c046 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	7afa      	ldrb	r2, [r7, #11]
 800c032:	4611      	mov	r1, r2
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	4798      	blx	r3
 800c038:	4603      	mov	r3, r0
 800c03a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	e002      	b.n	800c04c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c046:	2303      	movs	r3, #3
 800c048:	e000      	b.n	800c04c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c080:	2b00      	cmp	r3, #0
 800c082:	d009      	beq.n	800c098 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	6852      	ldr	r2, [r2, #4]
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	4611      	mov	r1, r2
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c098:	2340      	movs	r3, #64	@ 0x40
 800c09a:	2200      	movs	r2, #0
 800c09c:	2100      	movs	r1, #0
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7ff f93b 	bl	800b31a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2240      	movs	r2, #64	@ 0x40
 800c0b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0b4:	2340      	movs	r3, #64	@ 0x40
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2180      	movs	r1, #128	@ 0x80
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7ff f92d 	bl	800b31a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2240      	movs	r2, #64	@ 0x40
 800c0ca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	b083      	sub	sp, #12
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	78fa      	ldrb	r2, [r7, #3]
 800c0e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b083      	sub	sp, #12
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2204      	movs	r2, #4
 800c10e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c12e:	2b04      	cmp	r3, #4
 800c130:	d105      	bne.n	800c13e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d10b      	bne.n	800c176 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d005      	beq.n	800c176 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c170:	69db      	ldr	r3, [r3, #28]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b083      	sub	sp, #12
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d009      	beq.n	800c1f8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	6852      	ldr	r2, [r2, #4]
 800c1f0:	b2d2      	uxtb	r2, r2
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	4798      	blx	r3
  }

  return USBD_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c202:	b480      	push	{r7}
 800c204:	b087      	sub	sp, #28
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	3301      	adds	r3, #1
 800c218:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c220:	8a3b      	ldrh	r3, [r7, #16]
 800c222:	021b      	lsls	r3, r3, #8
 800c224:	b21a      	sxth	r2, r3
 800c226:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	b21b      	sxth	r3, r3
 800c22e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c230:	89fb      	ldrh	r3, [r7, #14]
}
 800c232:	4618      	mov	r0, r3
 800c234:	371c      	adds	r7, #28
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
	...

0800c240 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c256:	2b40      	cmp	r3, #64	@ 0x40
 800c258:	d005      	beq.n	800c266 <USBD_StdDevReq+0x26>
 800c25a:	2b40      	cmp	r3, #64	@ 0x40
 800c25c:	d853      	bhi.n	800c306 <USBD_StdDevReq+0xc6>
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00b      	beq.n	800c27a <USBD_StdDevReq+0x3a>
 800c262:	2b20      	cmp	r3, #32
 800c264:	d14f      	bne.n	800c306 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	4798      	blx	r3
 800c274:	4603      	mov	r3, r0
 800c276:	73fb      	strb	r3, [r7, #15]
    break;
 800c278:	e04a      	b.n	800c310 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	785b      	ldrb	r3, [r3, #1]
 800c27e:	2b09      	cmp	r3, #9
 800c280:	d83b      	bhi.n	800c2fa <USBD_StdDevReq+0xba>
 800c282:	a201      	add	r2, pc, #4	@ (adr r2, 800c288 <USBD_StdDevReq+0x48>)
 800c284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c288:	0800c2dd 	.word	0x0800c2dd
 800c28c:	0800c2f1 	.word	0x0800c2f1
 800c290:	0800c2fb 	.word	0x0800c2fb
 800c294:	0800c2e7 	.word	0x0800c2e7
 800c298:	0800c2fb 	.word	0x0800c2fb
 800c29c:	0800c2bb 	.word	0x0800c2bb
 800c2a0:	0800c2b1 	.word	0x0800c2b1
 800c2a4:	0800c2fb 	.word	0x0800c2fb
 800c2a8:	0800c2d3 	.word	0x0800c2d3
 800c2ac:	0800c2c5 	.word	0x0800c2c5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f9da 	bl	800c66c <USBD_GetDescriptor>
      break;
 800c2b8:	e024      	b.n	800c304 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 fb69 	bl	800c994 <USBD_SetAddress>
      break;
 800c2c2:	e01f      	b.n	800c304 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fba8 	bl	800ca1c <USBD_SetConfig>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c2d0:	e018      	b.n	800c304 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fc45 	bl	800cb64 <USBD_GetConfig>
      break;
 800c2da:	e013      	b.n	800c304 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fc75 	bl	800cbce <USBD_GetStatus>
      break;
 800c2e4:	e00e      	b.n	800c304 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fca3 	bl	800cc34 <USBD_SetFeature>
      break;
 800c2ee:	e009      	b.n	800c304 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fcb2 	bl	800cc5c <USBD_ClrFeature>
      break;
 800c2f8:	e004      	b.n	800c304 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fd08 	bl	800cd12 <USBD_CtlError>
      break;
 800c302:	bf00      	nop
    }
    break;
 800c304:	e004      	b.n	800c310 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fd02 	bl	800cd12 <USBD_CtlError>
    break;
 800c30e:	bf00      	nop
  }

  return ret;
 800c310:	7bfb      	ldrb	r3, [r7, #15]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop

0800c31c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c326:	2300      	movs	r3, #0
 800c328:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c332:	2b40      	cmp	r3, #64	@ 0x40
 800c334:	d005      	beq.n	800c342 <USBD_StdItfReq+0x26>
 800c336:	2b40      	cmp	r3, #64	@ 0x40
 800c338:	d82e      	bhi.n	800c398 <USBD_StdItfReq+0x7c>
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d001      	beq.n	800c342 <USBD_StdItfReq+0x26>
 800c33e:	2b20      	cmp	r3, #32
 800c340:	d12a      	bne.n	800c398 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c348:	3b01      	subs	r3, #1
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d81d      	bhi.n	800c38a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	889b      	ldrh	r3, [r3, #4]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	2b01      	cmp	r3, #1
 800c356:	d813      	bhi.n	800c380 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	4798      	blx	r3
 800c366:	4603      	mov	r3, r0
 800c368:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	88db      	ldrh	r3, [r3, #6]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d110      	bne.n	800c394 <USBD_StdItfReq+0x78>
 800c372:	7bfb      	ldrb	r3, [r7, #15]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10d      	bne.n	800c394 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fd95 	bl	800cea8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c37e:	e009      	b.n	800c394 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fcc5 	bl	800cd12 <USBD_CtlError>
      break;
 800c388:	e004      	b.n	800c394 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fcc0 	bl	800cd12 <USBD_CtlError>
      break;
 800c392:	e000      	b.n	800c396 <USBD_StdItfReq+0x7a>
      break;
 800c394:	bf00      	nop
    }
    break;
 800c396:	e004      	b.n	800c3a2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fcb9 	bl	800cd12 <USBD_CtlError>
    break;
 800c3a0:	bf00      	nop
  }

  return ret;
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	889b      	ldrh	r3, [r3, #4]
 800c3be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c3c8:	2b40      	cmp	r3, #64	@ 0x40
 800c3ca:	d007      	beq.n	800c3dc <USBD_StdEPReq+0x30>
 800c3cc:	2b40      	cmp	r3, #64	@ 0x40
 800c3ce:	f200 8142 	bhi.w	800c656 <USBD_StdEPReq+0x2aa>
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00c      	beq.n	800c3f0 <USBD_StdEPReq+0x44>
 800c3d6:	2b20      	cmp	r3, #32
 800c3d8:	f040 813d 	bne.w	800c656 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	4798      	blx	r3
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ee:	e137      	b.n	800c660 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	785b      	ldrb	r3, [r3, #1]
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d007      	beq.n	800c408 <USBD_StdEPReq+0x5c>
 800c3f8:	2b03      	cmp	r3, #3
 800c3fa:	f300 8126 	bgt.w	800c64a <USBD_StdEPReq+0x29e>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d07d      	beq.n	800c4fe <USBD_StdEPReq+0x152>
 800c402:	2b01      	cmp	r3, #1
 800c404:	d03b      	beq.n	800c47e <USBD_StdEPReq+0xd2>
 800c406:	e120      	b.n	800c64a <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d002      	beq.n	800c418 <USBD_StdEPReq+0x6c>
 800c412:	2b03      	cmp	r3, #3
 800c414:	d016      	beq.n	800c444 <USBD_StdEPReq+0x98>
 800c416:	e02c      	b.n	800c472 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c418:	7bbb      	ldrb	r3, [r7, #14]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00d      	beq.n	800c43a <USBD_StdEPReq+0x8e>
 800c41e:	7bbb      	ldrb	r3, [r7, #14]
 800c420:	2b80      	cmp	r3, #128	@ 0x80
 800c422:	d00a      	beq.n	800c43a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	4619      	mov	r1, r3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7fe ffbb 	bl	800b3a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c42e:	2180      	movs	r1, #128	@ 0x80
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7fe ffb7 	bl	800b3a4 <USBD_LL_StallEP>
 800c436:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c438:	e020      	b.n	800c47c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fc68 	bl	800cd12 <USBD_CtlError>
        break;
 800c442:	e01b      	b.n	800c47c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	885b      	ldrh	r3, [r3, #2]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10e      	bne.n	800c46a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00b      	beq.n	800c46a <USBD_StdEPReq+0xbe>
 800c452:	7bbb      	ldrb	r3, [r7, #14]
 800c454:	2b80      	cmp	r3, #128	@ 0x80
 800c456:	d008      	beq.n	800c46a <USBD_StdEPReq+0xbe>
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	88db      	ldrh	r3, [r3, #6]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d104      	bne.n	800c46a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	4619      	mov	r1, r3
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7fe ff9d 	bl	800b3a4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fd1c 	bl	800cea8 <USBD_CtlSendStatus>

        break;
 800c470:	e004      	b.n	800c47c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 fc4c 	bl	800cd12 <USBD_CtlError>
        break;
 800c47a:	bf00      	nop
      }
      break;
 800c47c:	e0ea      	b.n	800c654 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c484:	2b02      	cmp	r3, #2
 800c486:	d002      	beq.n	800c48e <USBD_StdEPReq+0xe2>
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d016      	beq.n	800c4ba <USBD_StdEPReq+0x10e>
 800c48c:	e030      	b.n	800c4f0 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c48e:	7bbb      	ldrb	r3, [r7, #14]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00d      	beq.n	800c4b0 <USBD_StdEPReq+0x104>
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	2b80      	cmp	r3, #128	@ 0x80
 800c498:	d00a      	beq.n	800c4b0 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7fe ff80 	bl	800b3a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4a4:	2180      	movs	r1, #128	@ 0x80
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7fe ff7c 	bl	800b3a4 <USBD_LL_StallEP>
 800c4ac:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c4ae:	e025      	b.n	800c4fc <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fc2d 	bl	800cd12 <USBD_CtlError>
        break;
 800c4b8:	e020      	b.n	800c4fc <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	885b      	ldrh	r3, [r3, #2]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d11b      	bne.n	800c4fa <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c4c2:	7bbb      	ldrb	r3, [r7, #14]
 800c4c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d004      	beq.n	800c4d6 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c4cc:	7bbb      	ldrb	r3, [r7, #14]
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7fe ff86 	bl	800b3e2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fce6 	bl	800cea8 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	4798      	blx	r3
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c4ee:	e004      	b.n	800c4fa <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fc0d 	bl	800cd12 <USBD_CtlError>
        break;
 800c4f8:	e000      	b.n	800c4fc <USBD_StdEPReq+0x150>
        break;
 800c4fa:	bf00      	nop
      }
      break;
 800c4fc:	e0aa      	b.n	800c654 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c504:	2b02      	cmp	r3, #2
 800c506:	d002      	beq.n	800c50e <USBD_StdEPReq+0x162>
 800c508:	2b03      	cmp	r3, #3
 800c50a:	d032      	beq.n	800c572 <USBD_StdEPReq+0x1c6>
 800c50c:	e097      	b.n	800c63e <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c50e:	7bbb      	ldrb	r3, [r7, #14]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d007      	beq.n	800c524 <USBD_StdEPReq+0x178>
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	2b80      	cmp	r3, #128	@ 0x80
 800c518:	d004      	beq.n	800c524 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fbf8 	bl	800cd12 <USBD_CtlError>
          break;
 800c522:	e091      	b.n	800c648 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	da0b      	bge.n	800c544 <USBD_StdEPReq+0x198>
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c532:	4613      	mov	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4413      	add	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	3310      	adds	r3, #16
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	4413      	add	r3, r2
 800c540:	3304      	adds	r3, #4
 800c542:	e00b      	b.n	800c55c <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c544:	7bbb      	ldrb	r3, [r7, #14]
 800c546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c54a:	4613      	mov	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	4413      	add	r3, r2
 800c55a:	3304      	adds	r3, #4
 800c55c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2202      	movs	r2, #2
 800c568:	4619      	mov	r1, r3
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fc42 	bl	800cdf4 <USBD_CtlSendData>
        break;
 800c570:	e06a      	b.n	800c648 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c576:	2b00      	cmp	r3, #0
 800c578:	da11      	bge.n	800c59e <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
 800c57c:	f003 020f 	and.w	r2, r3, #15
 800c580:	6879      	ldr	r1, [r7, #4]
 800c582:	4613      	mov	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4413      	add	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	440b      	add	r3, r1
 800c58c:	3324      	adds	r3, #36	@ 0x24
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d117      	bne.n	800c5c4 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fbbb 	bl	800cd12 <USBD_CtlError>
            break;
 800c59c:	e054      	b.n	800c648 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c59e:	7bbb      	ldrb	r3, [r7, #14]
 800c5a0:	f003 020f 	and.w	r2, r3, #15
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	4413      	add	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	440b      	add	r3, r1
 800c5b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c5b4:	881b      	ldrh	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d104      	bne.n	800c5c4 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800c5ba:	6839      	ldr	r1, [r7, #0]
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fba8 	bl	800cd12 <USBD_CtlError>
            break;
 800c5c2:	e041      	b.n	800c648 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	da0b      	bge.n	800c5e4 <USBD_StdEPReq+0x238>
 800c5cc:	7bbb      	ldrb	r3, [r7, #14]
 800c5ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	3310      	adds	r3, #16
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	4413      	add	r3, r2
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	e00b      	b.n	800c5fc <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
 800c5e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d002      	beq.n	800c60a <USBD_StdEPReq+0x25e>
 800c604:	7bbb      	ldrb	r3, [r7, #14]
 800c606:	2b80      	cmp	r3, #128	@ 0x80
 800c608:	d103      	bne.n	800c612 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2200      	movs	r2, #0
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	e00e      	b.n	800c630 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c612:	7bbb      	ldrb	r3, [r7, #14]
 800c614:	4619      	mov	r1, r3
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7fe ff02 	bl	800b420 <USBD_LL_IsStallEP>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d003      	beq.n	800c62a <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	2201      	movs	r2, #1
 800c626:	601a      	str	r2, [r3, #0]
 800c628:	e002      	b.n	800c630 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	2200      	movs	r2, #0
 800c62e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2202      	movs	r2, #2
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fbdc 	bl	800cdf4 <USBD_CtlSendData>
          break;
 800c63c:	e004      	b.n	800c648 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fb66 	bl	800cd12 <USBD_CtlError>
        break;
 800c646:	bf00      	nop
      }
      break;
 800c648:	e004      	b.n	800c654 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fb60 	bl	800cd12 <USBD_CtlError>
      break;
 800c652:	bf00      	nop
    }
    break;
 800c654:	e004      	b.n	800c660 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fb5a 	bl	800cd12 <USBD_CtlError>
    break;
 800c65e:	bf00      	nop
  }

  return ret;
 800c660:	7bfb      	ldrb	r3, [r7, #15]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
	...

0800c66c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c676:	2300      	movs	r3, #0
 800c678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c67a:	2300      	movs	r3, #0
 800c67c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	885b      	ldrh	r3, [r3, #2]
 800c686:	0a1b      	lsrs	r3, r3, #8
 800c688:	b29b      	uxth	r3, r3
 800c68a:	3b01      	subs	r3, #1
 800c68c:	2b0e      	cmp	r3, #14
 800c68e:	f200 8152 	bhi.w	800c936 <USBD_GetDescriptor+0x2ca>
 800c692:	a201      	add	r2, pc, #4	@ (adr r2, 800c698 <USBD_GetDescriptor+0x2c>)
 800c694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c698:	0800c709 	.word	0x0800c709
 800c69c:	0800c721 	.word	0x0800c721
 800c6a0:	0800c761 	.word	0x0800c761
 800c6a4:	0800c937 	.word	0x0800c937
 800c6a8:	0800c937 	.word	0x0800c937
 800c6ac:	0800c8d7 	.word	0x0800c8d7
 800c6b0:	0800c903 	.word	0x0800c903
 800c6b4:	0800c937 	.word	0x0800c937
 800c6b8:	0800c937 	.word	0x0800c937
 800c6bc:	0800c937 	.word	0x0800c937
 800c6c0:	0800c937 	.word	0x0800c937
 800c6c4:	0800c937 	.word	0x0800c937
 800c6c8:	0800c937 	.word	0x0800c937
 800c6cc:	0800c937 	.word	0x0800c937
 800c6d0:	0800c6d5 	.word	0x0800c6d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6da:	69db      	ldr	r3, [r3, #28]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00b      	beq.n	800c6f8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	7c12      	ldrb	r2, [r2, #16]
 800c6ec:	f107 0108 	add.w	r1, r7, #8
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	4798      	blx	r3
 800c6f4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c6f6:	e126      	b.n	800c946 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fb09 	bl	800cd12 <USBD_CtlError>
      err++;
 800c700:	7afb      	ldrb	r3, [r7, #11]
 800c702:	3301      	adds	r3, #1
 800c704:	72fb      	strb	r3, [r7, #11]
    break;
 800c706:	e11e      	b.n	800c946 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	7c12      	ldrb	r2, [r2, #16]
 800c714:	f107 0108 	add.w	r1, r7, #8
 800c718:	4610      	mov	r0, r2
 800c71a:	4798      	blx	r3
 800c71c:	60f8      	str	r0, [r7, #12]
    break;
 800c71e:	e112      	b.n	800c946 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	7c1b      	ldrb	r3, [r3, #16]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10d      	bne.n	800c744 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c730:	f107 0208 	add.w	r2, r7, #8
 800c734:	4610      	mov	r0, r2
 800c736:	4798      	blx	r3
 800c738:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3301      	adds	r3, #1
 800c73e:	2202      	movs	r2, #2
 800c740:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c742:	e100      	b.n	800c946 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c74c:	f107 0208 	add.w	r2, r7, #8
 800c750:	4610      	mov	r0, r2
 800c752:	4798      	blx	r3
 800c754:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3301      	adds	r3, #1
 800c75a:	2202      	movs	r2, #2
 800c75c:	701a      	strb	r2, [r3, #0]
    break;
 800c75e:	e0f2      	b.n	800c946 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	885b      	ldrh	r3, [r3, #2]
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b05      	cmp	r3, #5
 800c768:	f200 80ac 	bhi.w	800c8c4 <USBD_GetDescriptor+0x258>
 800c76c:	a201      	add	r2, pc, #4	@ (adr r2, 800c774 <USBD_GetDescriptor+0x108>)
 800c76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c772:	bf00      	nop
 800c774:	0800c78d 	.word	0x0800c78d
 800c778:	0800c7c1 	.word	0x0800c7c1
 800c77c:	0800c7f5 	.word	0x0800c7f5
 800c780:	0800c829 	.word	0x0800c829
 800c784:	0800c85d 	.word	0x0800c85d
 800c788:	0800c891 	.word	0x0800c891
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00b      	beq.n	800c7b0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	7c12      	ldrb	r2, [r2, #16]
 800c7a4:	f107 0108 	add.w	r1, r7, #8
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	4798      	blx	r3
 800c7ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7ae:	e091      	b.n	800c8d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 faad 	bl	800cd12 <USBD_CtlError>
        err++;
 800c7b8:	7afb      	ldrb	r3, [r7, #11]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	72fb      	strb	r3, [r7, #11]
      break;
 800c7be:	e089      	b.n	800c8d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00b      	beq.n	800c7e4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	7c12      	ldrb	r2, [r2, #16]
 800c7d8:	f107 0108 	add.w	r1, r7, #8
 800c7dc:	4610      	mov	r0, r2
 800c7de:	4798      	blx	r3
 800c7e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7e2:	e077      	b.n	800c8d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fa93 	bl	800cd12 <USBD_CtlError>
        err++;
 800c7ec:	7afb      	ldrb	r3, [r7, #11]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	72fb      	strb	r3, [r7, #11]
      break;
 800c7f2:	e06f      	b.n	800c8d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00b      	beq.n	800c818 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	7c12      	ldrb	r2, [r2, #16]
 800c80c:	f107 0108 	add.w	r1, r7, #8
 800c810:	4610      	mov	r0, r2
 800c812:	4798      	blx	r3
 800c814:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c816:	e05d      	b.n	800c8d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c818:	6839      	ldr	r1, [r7, #0]
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 fa79 	bl	800cd12 <USBD_CtlError>
        err++;
 800c820:	7afb      	ldrb	r3, [r7, #11]
 800c822:	3301      	adds	r3, #1
 800c824:	72fb      	strb	r3, [r7, #11]
      break;
 800c826:	e055      	b.n	800c8d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00b      	beq.n	800c84c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	7c12      	ldrb	r2, [r2, #16]
 800c840:	f107 0108 	add.w	r1, r7, #8
 800c844:	4610      	mov	r0, r2
 800c846:	4798      	blx	r3
 800c848:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c84a:	e043      	b.n	800c8d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fa5f 	bl	800cd12 <USBD_CtlError>
        err++;
 800c854:	7afb      	ldrb	r3, [r7, #11]
 800c856:	3301      	adds	r3, #1
 800c858:	72fb      	strb	r3, [r7, #11]
      break;
 800c85a:	e03b      	b.n	800c8d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c862:	695b      	ldr	r3, [r3, #20]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00b      	beq.n	800c880 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c86e:	695b      	ldr	r3, [r3, #20]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	7c12      	ldrb	r2, [r2, #16]
 800c874:	f107 0108 	add.w	r1, r7, #8
 800c878:	4610      	mov	r0, r2
 800c87a:	4798      	blx	r3
 800c87c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c87e:	e029      	b.n	800c8d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c880:	6839      	ldr	r1, [r7, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fa45 	bl	800cd12 <USBD_CtlError>
        err++;
 800c888:	7afb      	ldrb	r3, [r7, #11]
 800c88a:	3301      	adds	r3, #1
 800c88c:	72fb      	strb	r3, [r7, #11]
      break;
 800c88e:	e021      	b.n	800c8d4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00b      	beq.n	800c8b4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8a2:	699b      	ldr	r3, [r3, #24]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	7c12      	ldrb	r2, [r2, #16]
 800c8a8:	f107 0108 	add.w	r1, r7, #8
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4798      	blx	r3
 800c8b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8b2:	e00f      	b.n	800c8d4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c8b4:	6839      	ldr	r1, [r7, #0]
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fa2b 	bl	800cd12 <USBD_CtlError>
        err++;
 800c8bc:	7afb      	ldrb	r3, [r7, #11]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	72fb      	strb	r3, [r7, #11]
      break;
 800c8c2:	e007      	b.n	800c8d4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c8c4:	6839      	ldr	r1, [r7, #0]
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fa23 	bl	800cd12 <USBD_CtlError>
      err++;
 800c8cc:	7afb      	ldrb	r3, [r7, #11]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c8d2:	bf00      	nop
    }
    break;
 800c8d4:	e037      	b.n	800c946 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	7c1b      	ldrb	r3, [r3, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d109      	bne.n	800c8f2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8e6:	f107 0208 	add.w	r2, r7, #8
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	4798      	blx	r3
 800c8ee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c8f0:	e029      	b.n	800c946 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fa0c 	bl	800cd12 <USBD_CtlError>
      err++;
 800c8fa:	7afb      	ldrb	r3, [r7, #11]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	72fb      	strb	r3, [r7, #11]
    break;
 800c900:	e021      	b.n	800c946 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	7c1b      	ldrb	r3, [r3, #16]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10d      	bne.n	800c926 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c912:	f107 0208 	add.w	r2, r7, #8
 800c916:	4610      	mov	r0, r2
 800c918:	4798      	blx	r3
 800c91a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3301      	adds	r3, #1
 800c920:	2207      	movs	r2, #7
 800c922:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c924:	e00f      	b.n	800c946 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c926:	6839      	ldr	r1, [r7, #0]
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f9f2 	bl	800cd12 <USBD_CtlError>
      err++;
 800c92e:	7afb      	ldrb	r3, [r7, #11]
 800c930:	3301      	adds	r3, #1
 800c932:	72fb      	strb	r3, [r7, #11]
    break;
 800c934:	e007      	b.n	800c946 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f9ea 	bl	800cd12 <USBD_CtlError>
    err++;
 800c93e:	7afb      	ldrb	r3, [r7, #11]
 800c940:	3301      	adds	r3, #1
 800c942:	72fb      	strb	r3, [r7, #11]
    break;
 800c944:	bf00      	nop
  }

  if (err != 0U)
 800c946:	7afb      	ldrb	r3, [r7, #11]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d11e      	bne.n	800c98a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	88db      	ldrh	r3, [r3, #6]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d016      	beq.n	800c982 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c954:	893b      	ldrh	r3, [r7, #8]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00e      	beq.n	800c978 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	88da      	ldrh	r2, [r3, #6]
 800c95e:	893b      	ldrh	r3, [r7, #8]
 800c960:	4293      	cmp	r3, r2
 800c962:	bf28      	it	cs
 800c964:	4613      	movcs	r3, r2
 800c966:	b29b      	uxth	r3, r3
 800c968:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c96a:	893b      	ldrh	r3, [r7, #8]
 800c96c:	461a      	mov	r2, r3
 800c96e:	68f9      	ldr	r1, [r7, #12]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fa3f 	bl	800cdf4 <USBD_CtlSendData>
 800c976:	e009      	b.n	800c98c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c978:	6839      	ldr	r1, [r7, #0]
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f9c9 	bl	800cd12 <USBD_CtlError>
 800c980:	e004      	b.n	800c98c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fa90 	bl	800cea8 <USBD_CtlSendStatus>
 800c988:	e000      	b.n	800c98c <USBD_GetDescriptor+0x320>
    return;
 800c98a:	bf00      	nop
    }
  }
}
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop

0800c994 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	889b      	ldrh	r3, [r3, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d130      	bne.n	800ca08 <USBD_SetAddress+0x74>
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	88db      	ldrh	r3, [r3, #6]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d12c      	bne.n	800ca08 <USBD_SetAddress+0x74>
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	885b      	ldrh	r3, [r3, #2]
 800c9b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9b4:	d828      	bhi.n	800ca08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	885b      	ldrh	r3, [r3, #2]
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9c8:	2b03      	cmp	r3, #3
 800c9ca:	d104      	bne.n	800c9d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f99f 	bl	800cd12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9d4:	e01d      	b.n	800ca12 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	7bfa      	ldrb	r2, [r7, #15]
 800c9da:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7fe fd48 	bl	800b478 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fa5d 	bl	800cea8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d004      	beq.n	800c9fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9fc:	e009      	b.n	800ca12 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca06:	e004      	b.n	800ca12 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca08:	6839      	ldr	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f981 	bl	800cd12 <USBD_CtlError>
  }
}
 800ca10:	bf00      	nop
 800ca12:	bf00      	nop
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	885b      	ldrh	r3, [r3, #2]
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	4b4b      	ldr	r3, [pc, #300]	@ (800cb60 <USBD_SetConfig+0x144>)
 800ca32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca34:	4b4a      	ldr	r3, [pc, #296]	@ (800cb60 <USBD_SetConfig+0x144>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d905      	bls.n	800ca48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 f967 	bl	800cd12 <USBD_CtlError>
    return USBD_FAIL;
 800ca44:	2303      	movs	r3, #3
 800ca46:	e087      	b.n	800cb58 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca4e:	2b02      	cmp	r3, #2
 800ca50:	d002      	beq.n	800ca58 <USBD_SetConfig+0x3c>
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d025      	beq.n	800caa2 <USBD_SetConfig+0x86>
 800ca56:	e071      	b.n	800cb3c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ca58:	4b41      	ldr	r3, [pc, #260]	@ (800cb60 <USBD_SetConfig+0x144>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d01c      	beq.n	800ca9a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ca60:	4b3f      	ldr	r3, [pc, #252]	@ (800cb60 <USBD_SetConfig+0x144>)
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	461a      	mov	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca6a:	4b3d      	ldr	r3, [pc, #244]	@ (800cb60 <USBD_SetConfig+0x144>)
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff f96d 	bl	800bd50 <USBD_SetClassConfig>
 800ca76:	4603      	mov	r3, r0
 800ca78:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d004      	beq.n	800ca8a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f945 	bl	800cd12 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ca88:	e065      	b.n	800cb56 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fa0c 	bl	800cea8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2203      	movs	r2, #3
 800ca94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800ca98:	e05d      	b.n	800cb56 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fa04 	bl	800cea8 <USBD_CtlSendStatus>
    break;
 800caa0:	e059      	b.n	800cb56 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800caa2:	4b2f      	ldr	r3, [pc, #188]	@ (800cb60 <USBD_SetConfig+0x144>)
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d112      	bne.n	800cad0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2202      	movs	r2, #2
 800caae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800cab2:	4b2b      	ldr	r3, [pc, #172]	@ (800cb60 <USBD_SetConfig+0x144>)
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cabc:	4b28      	ldr	r3, [pc, #160]	@ (800cb60 <USBD_SetConfig+0x144>)
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	4619      	mov	r1, r3
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f7ff f960 	bl	800bd88 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 f9ed 	bl	800cea8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cace:	e042      	b.n	800cb56 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cad0:	4b23      	ldr	r3, [pc, #140]	@ (800cb60 <USBD_SetConfig+0x144>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	461a      	mov	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d02a      	beq.n	800cb34 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff f94e 	bl	800bd88 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800caec:	4b1c      	ldr	r3, [pc, #112]	@ (800cb60 <USBD_SetConfig+0x144>)
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	461a      	mov	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800caf6:	4b1a      	ldr	r3, [pc, #104]	@ (800cb60 <USBD_SetConfig+0x144>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	4619      	mov	r1, r3
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff f927 	bl	800bd50 <USBD_SetClassConfig>
 800cb02:	4603      	mov	r3, r0
 800cb04:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00f      	beq.n	800cb2c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f8ff 	bl	800cd12 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7ff f933 	bl	800bd88 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2202      	movs	r2, #2
 800cb26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800cb2a:	e014      	b.n	800cb56 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 f9bb 	bl	800cea8 <USBD_CtlSendStatus>
    break;
 800cb32:	e010      	b.n	800cb56 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 f9b7 	bl	800cea8 <USBD_CtlSendStatus>
    break;
 800cb3a:	e00c      	b.n	800cb56 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f8e7 	bl	800cd12 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb44:	4b06      	ldr	r3, [pc, #24]	@ (800cb60 <USBD_SetConfig+0x144>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7ff f91c 	bl	800bd88 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cb50:	2303      	movs	r3, #3
 800cb52:	73fb      	strb	r3, [r7, #15]
    break;
 800cb54:	bf00      	nop
  }

  return ret;
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	2000eb50 	.word	0x2000eb50

0800cb64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	88db      	ldrh	r3, [r3, #6]
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d004      	beq.n	800cb80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 f8ca 	bl	800cd12 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cb7e:	e022      	b.n	800cbc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	dc02      	bgt.n	800cb90 <USBD_GetConfig+0x2c>
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	dc03      	bgt.n	800cb96 <USBD_GetConfig+0x32>
 800cb8e:	e015      	b.n	800cbbc <USBD_GetConfig+0x58>
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d00b      	beq.n	800cbac <USBD_GetConfig+0x48>
 800cb94:	e012      	b.n	800cbbc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3308      	adds	r3, #8
 800cba0:	2201      	movs	r2, #1
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 f925 	bl	800cdf4 <USBD_CtlSendData>
      break;
 800cbaa:	e00c      	b.n	800cbc6 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f91d 	bl	800cdf4 <USBD_CtlSendData>
      break;
 800cbba:	e004      	b.n	800cbc6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f8a7 	bl	800cd12 <USBD_CtlError>
      break;
 800cbc4:	bf00      	nop
}
 800cbc6:	bf00      	nop
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d81e      	bhi.n	800cc22 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	88db      	ldrh	r3, [r3, #6]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d004      	beq.n	800cbf6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f88f 	bl	800cd12 <USBD_CtlError>
      break;
 800cbf4:	e01a      	b.n	800cc2c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d005      	beq.n	800cc12 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	f043 0202 	orr.w	r2, r3, #2
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	330c      	adds	r3, #12
 800cc16:	2202      	movs	r2, #2
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 f8ea 	bl	800cdf4 <USBD_CtlSendData>
    break;
 800cc20:	e004      	b.n	800cc2c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cc22:	6839      	ldr	r1, [r7, #0]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 f874 	bl	800cd12 <USBD_CtlError>
    break;
 800cc2a:	bf00      	nop
  }
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	885b      	ldrh	r3, [r3, #2]
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d106      	bne.n	800cc54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f92a 	bl	800cea8 <USBD_CtlSendStatus>
  }
}
 800cc54:	bf00      	nop
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d80b      	bhi.n	800cc8a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	885b      	ldrh	r3, [r3, #2]
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d10c      	bne.n	800cc94 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f910 	bl	800cea8 <USBD_CtlSendStatus>
      }
      break;
 800cc88:	e004      	b.n	800cc94 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f840 	bl	800cd12 <USBD_CtlError>
      break;
 800cc92:	e000      	b.n	800cc96 <USBD_ClrFeature+0x3a>
      break;
 800cc94:	bf00      	nop
  }
}
 800cc96:	bf00      	nop
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
 800cca6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	781a      	ldrb	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	781a      	ldrb	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f7ff fa9a 	bl	800c202 <SWAPBYTE>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	3301      	adds	r3, #1
 800cce0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f7ff fa8d 	bl	800c202 <SWAPBYTE>
 800cce8:	4603      	mov	r3, r0
 800ccea:	461a      	mov	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f7ff fa80 	bl	800c202 <SWAPBYTE>
 800cd02:	4603      	mov	r3, r0
 800cd04:	461a      	mov	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	80da      	strh	r2, [r3, #6]
}
 800cd0a:	bf00      	nop
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b082      	sub	sp, #8
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd1c:	2180      	movs	r1, #128	@ 0x80
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7fe fb40 	bl	800b3a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd24:	2100      	movs	r1, #0
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f7fe fb3c 	bl	800b3a4 <USBD_LL_StallEP>
}
 800cd2c:	bf00      	nop
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd40:	2300      	movs	r3, #0
 800cd42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d036      	beq.n	800cdb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd4e:	6938      	ldr	r0, [r7, #16]
 800cd50:	f000 f836 	bl	800cdc0 <USBD_GetLen>
 800cd54:	4603      	mov	r3, r0
 800cd56:	3301      	adds	r3, #1
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	4413      	add	r3, r2
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	7812      	ldrb	r2, [r2, #0]
 800cd6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	3301      	adds	r3, #1
 800cd72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd74:	7dfb      	ldrb	r3, [r7, #23]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	4413      	add	r3, r2
 800cd7a:	2203      	movs	r2, #3
 800cd7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd7e:	7dfb      	ldrb	r3, [r7, #23]
 800cd80:	3301      	adds	r3, #1
 800cd82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd84:	e013      	b.n	800cdae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	7812      	ldrb	r2, [r2, #0]
 800cd90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	3301      	adds	r3, #1
 800cd96:	613b      	str	r3, [r7, #16]
    idx++;
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cd9e:	7dfb      	ldrb	r3, [r7, #23]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	4413      	add	r3, r2
 800cda4:	2200      	movs	r2, #0
 800cda6:	701a      	strb	r2, [r3, #0]
    idx++;
 800cda8:	7dfb      	ldrb	r3, [r7, #23]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1e7      	bne.n	800cd86 <USBD_GetString+0x52>
 800cdb6:	e000      	b.n	800cdba <USBD_GetString+0x86>
    return;
 800cdb8:	bf00      	nop
  }
}
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cdd0:	e005      	b.n	800cdde <USBD_GetLen+0x1e>
  {
    len++;
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	3301      	adds	r3, #1
 800cddc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1f5      	bne.n	800cdd2 <USBD_GetLen+0x12>
  }

  return len;
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2202      	movs	r2, #2
 800ce04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	2100      	movs	r1, #0
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f7fe fb4b 	bl	800b4b6 <USBD_LL_Transmit>

  return USBD_OK;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b084      	sub	sp, #16
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	60f8      	str	r0, [r7, #12]
 800ce32:	60b9      	str	r1, [r7, #8]
 800ce34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f7fe fb3a 	bl	800b4b6 <USBD_LL_Transmit>

  return USBD_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3710      	adds	r7, #16
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2203      	movs	r2, #3
 800ce5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	2100      	movs	r1, #0
 800ce76:	68f8      	ldr	r0, [r7, #12]
 800ce78:	f7fe fb3e 	bl	800b4f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b084      	sub	sp, #16
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	60f8      	str	r0, [r7, #12]
 800ce8e:	60b9      	str	r1, [r7, #8]
 800ce90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	2100      	movs	r1, #0
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	f7fe fb2d 	bl	800b4f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2204      	movs	r2, #4
 800ceb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ceb8:	2300      	movs	r3, #0
 800ceba:	2200      	movs	r2, #0
 800cebc:	2100      	movs	r1, #0
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7fe faf9 	bl	800b4b6 <USBD_LL_Transmit>

  return USBD_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b082      	sub	sp, #8
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2205      	movs	r2, #5
 800ceda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cede:	2300      	movs	r3, #0
 800cee0:	2200      	movs	r2, #0
 800cee2:	2100      	movs	r1, #0
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7fe fb07 	bl	800b4f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <memset>:
 800cef4:	4402      	add	r2, r0
 800cef6:	4603      	mov	r3, r0
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d100      	bne.n	800cefe <memset+0xa>
 800cefc:	4770      	bx	lr
 800cefe:	f803 1b01 	strb.w	r1, [r3], #1
 800cf02:	e7f9      	b.n	800cef8 <memset+0x4>

0800cf04 <__libc_init_array>:
 800cf04:	b570      	push	{r4, r5, r6, lr}
 800cf06:	4d0d      	ldr	r5, [pc, #52]	@ (800cf3c <__libc_init_array+0x38>)
 800cf08:	2600      	movs	r6, #0
 800cf0a:	4c0d      	ldr	r4, [pc, #52]	@ (800cf40 <__libc_init_array+0x3c>)
 800cf0c:	1b64      	subs	r4, r4, r5
 800cf0e:	10a4      	asrs	r4, r4, #2
 800cf10:	42a6      	cmp	r6, r4
 800cf12:	d109      	bne.n	800cf28 <__libc_init_array+0x24>
 800cf14:	4d0b      	ldr	r5, [pc, #44]	@ (800cf44 <__libc_init_array+0x40>)
 800cf16:	2600      	movs	r6, #0
 800cf18:	4c0b      	ldr	r4, [pc, #44]	@ (800cf48 <__libc_init_array+0x44>)
 800cf1a:	f000 f817 	bl	800cf4c <_init>
 800cf1e:	1b64      	subs	r4, r4, r5
 800cf20:	10a4      	asrs	r4, r4, #2
 800cf22:	42a6      	cmp	r6, r4
 800cf24:	d105      	bne.n	800cf32 <__libc_init_array+0x2e>
 800cf26:	bd70      	pop	{r4, r5, r6, pc}
 800cf28:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf2c:	3601      	adds	r6, #1
 800cf2e:	4798      	blx	r3
 800cf30:	e7ee      	b.n	800cf10 <__libc_init_array+0xc>
 800cf32:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf36:	3601      	adds	r6, #1
 800cf38:	4798      	blx	r3
 800cf3a:	e7f2      	b.n	800cf22 <__libc_init_array+0x1e>
 800cf3c:	0800d07c 	.word	0x0800d07c
 800cf40:	0800d07c 	.word	0x0800d07c
 800cf44:	0800d07c 	.word	0x0800d07c
 800cf48:	0800d080 	.word	0x0800d080

0800cf4c <_init>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	bf00      	nop
 800cf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf52:	bc08      	pop	{r3}
 800cf54:	469e      	mov	lr, r3
 800cf56:	4770      	bx	lr

0800cf58 <_fini>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	bf00      	nop
 800cf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5e:	bc08      	pop	{r3}
 800cf60:	469e      	mov	lr, r3
 800cf62:	4770      	bx	lr
