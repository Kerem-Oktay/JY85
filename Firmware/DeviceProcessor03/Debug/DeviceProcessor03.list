
DeviceProcessor03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6bc  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800a8f4  0800a8f4  0000b8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800aa0c  0800aa0c  0000ba0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800aa10  0800aa10  0000ba10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000183  20000000  0800aa14  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000021a1  20000184  0800ab97  0000c184  2**2
                  ALLOC
  7 ._user_heap_stack 00000603  20002325  0800ab97  0000c325  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000c183  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ba6e  00000000  00000000  0000c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003ced  00000000  00000000  00027c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001768  00000000  00000000  0002b918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000011e1  00000000  00000000  0002d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035f0d  00000000  00000000  0002e261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e10b  00000000  00000000  0006416e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001498f5  00000000  00000000  00082279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001cbb6e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006288  00000000  00000000  001cbbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001d1e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000184 	.word	0x20000184
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a8dc 	.word	0x0800a8dc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000188 	.word	0x20000188
 8000274:	0800a8dc 	.word	0x0800a8dc

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	f5ad 6dfb 	sub.w	sp, sp, #2008	@ 0x7d8
 800027e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t dmaValCheck1[500];
	uint16_t dmaValCheck2[500];
	for(int i = 0; i < 500; i++){
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 8000286:	e00f      	b.n	80002a8 <main+0x30>
		dmaValCheck1[i] = i;
 8000288:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	@ 0x7d4
 800028c:	b299      	uxth	r1, r3
 800028e:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8000292:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 8000296:	f8d7 27d4 	ldr.w	r2, [r7, #2004]	@ 0x7d4
 800029a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 500; i++){
 800029e:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	@ 0x7d4
 80002a2:	3301      	adds	r3, #1
 80002a4:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 80002a8:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	@ 0x7d4
 80002ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002b0:	dbea      	blt.n	8000288 <main+0x10>
	}
	for(int i = 0; i < 500; i++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	f8c7 37d0 	str.w	r3, [r7, #2000]	@ 0x7d0
 80002b8:	e00f      	b.n	80002da <main+0x62>
		dmaValCheck2[i] = i;
 80002ba:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	@ 0x7d0
 80002be:	b299      	uxth	r1, r3
 80002c0:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 80002c4:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 80002c8:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	@ 0x7d0
 80002cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 500; i++){
 80002d0:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	@ 0x7d0
 80002d4:	3301      	adds	r3, #1
 80002d6:	f8c7 37d0 	str.w	r3, [r7, #2000]	@ 0x7d0
 80002da:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	@ 0x7d0
 80002de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002e2:	dbea      	blt.n	80002ba <main+0x42>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fcf6 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f8a8 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 fa20 	bl	8000730 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80002f0:	f000 f908 	bl	8000504 <MX_GPDMA1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80002f4:	f000 f9ea 	bl	80006cc <MX_USB_OTG_FS_PCD_Init>
  MX_ICACHE_Init();
 80002f8:	f000 f924 	bl	8000544 <MX_ICACHE_Init>
  MX_TIM8_Init();
 80002fc:	f000 f936 	bl	800056c <MX_TIM8_Init>
//  MX_I2C2_Init();
//  MX_I2C3_Init();
//  MX_SPI2_Init();
//  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8000300:	f008 f9c8 	bl	8008694 <MX_USB_Device_Init>
  HAL_Delay(2000);
 8000304:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000308:	f000 fdaa 	bl	8000e60 <HAL_Delay>
//  run_device();
	TIM8->ARR = 32-1;
 800030c:	4b44      	ldr	r3, [pc, #272]	@ (8000420 <main+0x1a8>)
 800030e:	221f      	movs	r2, #31
 8000310:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM8->CCR1 = TIM8->ARR/2;
 8000312:	4b43      	ldr	r3, [pc, #268]	@ (8000420 <main+0x1a8>)
 8000314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000316:	4a42      	ldr	r2, [pc, #264]	@ (8000420 <main+0x1a8>)
 8000318:	085b      	lsrs	r3, r3, #1
 800031a:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM8->DIER = TIM_DIER_UDE;
 800031c:	4b40      	ldr	r3, [pc, #256]	@ (8000420 <main+0x1a8>)
 800031e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000322:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_2);
 8000324:	2104      	movs	r1, #4
 8000326:	483f      	ldr	r0, [pc, #252]	@ (8000424 <main+0x1ac>)
 8000328:	f005 fcf8 	bl	8005d1c <HAL_TIM_OC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (test_cmd == '1'){
 800032c:	4b3e      	ldr	r3, [pc, #248]	@ (8000428 <main+0x1b0>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b31      	cmp	r3, #49	@ 0x31
 8000332:	d107      	bne.n	8000344 <main+0xcc>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_17_Pin);
 8000334:	2120      	movs	r1, #32
 8000336:	483d      	ldr	r0, [pc, #244]	@ (800042c <main+0x1b4>)
 8000338:	f001 ff64 	bl	8002204 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 800033c:	4b3a      	ldr	r3, [pc, #232]	@ (8000428 <main+0x1b0>)
 800033e:	2230      	movs	r2, #48	@ 0x30
 8000340:	701a      	strb	r2, [r3, #0]
 8000342:	e7f3      	b.n	800032c <main+0xb4>
	  }
	  else if (test_cmd == '2'){
 8000344:	4b38      	ldr	r3, [pc, #224]	@ (8000428 <main+0x1b0>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b32      	cmp	r3, #50	@ 0x32
 800034a:	d107      	bne.n	800035c <main+0xe4>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_18_Pin);
 800034c:	2140      	movs	r1, #64	@ 0x40
 800034e:	4837      	ldr	r0, [pc, #220]	@ (800042c <main+0x1b4>)
 8000350:	f001 ff58 	bl	8002204 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 8000354:	4b34      	ldr	r3, [pc, #208]	@ (8000428 <main+0x1b0>)
 8000356:	2230      	movs	r2, #48	@ 0x30
 8000358:	701a      	strb	r2, [r3, #0]
 800035a:	e7e7      	b.n	800032c <main+0xb4>
	  }
	  else if (test_cmd == '3'){
 800035c:	4b32      	ldr	r3, [pc, #200]	@ (8000428 <main+0x1b0>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b33      	cmp	r3, #51	@ 0x33
 8000362:	d107      	bne.n	8000374 <main+0xfc>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_19_Pin);
 8000364:	2180      	movs	r1, #128	@ 0x80
 8000366:	4831      	ldr	r0, [pc, #196]	@ (800042c <main+0x1b4>)
 8000368:	f001 ff4c 	bl	8002204 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 800036c:	4b2e      	ldr	r3, [pc, #184]	@ (8000428 <main+0x1b0>)
 800036e:	2230      	movs	r2, #48	@ 0x30
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	e7db      	b.n	800032c <main+0xb4>
	  }
	  else if (test_cmd == '4'){
 8000374:	4b2c      	ldr	r3, [pc, #176]	@ (8000428 <main+0x1b0>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b34      	cmp	r3, #52	@ 0x34
 800037a:	d108      	bne.n	800038e <main+0x116>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_20_Pin);
 800037c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000380:	482a      	ldr	r0, [pc, #168]	@ (800042c <main+0x1b4>)
 8000382:	f001 ff3f 	bl	8002204 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 8000386:	4b28      	ldr	r3, [pc, #160]	@ (8000428 <main+0x1b0>)
 8000388:	2230      	movs	r2, #48	@ 0x30
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e7ce      	b.n	800032c <main+0xb4>
	  }
	  else if (test_cmd == '5'){
 800038e:	4b26      	ldr	r3, [pc, #152]	@ (8000428 <main+0x1b0>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b35      	cmp	r3, #53	@ 0x35
 8000394:	d108      	bne.n	80003a8 <main+0x130>
		  HAL_GPIO_TogglePin(GPIOD, SWNT_CTRL_21_Pin);
 8000396:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800039a:	4824      	ldr	r0, [pc, #144]	@ (800042c <main+0x1b4>)
 800039c:	f001 ff32 	bl	8002204 <HAL_GPIO_TogglePin>
		  test_cmd = '0';
 80003a0:	4b21      	ldr	r3, [pc, #132]	@ (8000428 <main+0x1b0>)
 80003a2:	2230      	movs	r2, #48	@ 0x30
 80003a4:	701a      	strb	r2, [r3, #0]
 80003a6:	e7c1      	b.n	800032c <main+0xb4>
	  }
	  else if (test_cmd == '6'){
 80003a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000428 <main+0x1b0>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b36      	cmp	r3, #54	@ 0x36
 80003ae:	d119      	bne.n	80003e4 <main+0x16c>
		  HAL_DMA_Abort(&handle_GPDMA1_Channel12);
 80003b0:	481f      	ldr	r0, [pc, #124]	@ (8000430 <main+0x1b8>)
 80003b2:	f001 f879 	bl	80014a8 <HAL_DMA_Abort>
		  HAL_Delay(1000);
 80003b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003ba:	f000 fd51 	bl	8000e60 <HAL_Delay>
		  HAL_DMA_Start(&handle_GPDMA1_Channel12,(uint32_t)&GPIOE->IDR,(uint32_t)&dmaValCheck1,500*sizeof(uint16_t));
 80003be:	f507 727a 	add.w	r2, r7, #1000	@ 0x3e8
 80003c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003c6:	491b      	ldr	r1, [pc, #108]	@ (8000434 <main+0x1bc>)
 80003c8:	4819      	ldr	r0, [pc, #100]	@ (8000430 <main+0x1b8>)
 80003ca:	f001 f82d 	bl	8001428 <HAL_DMA_Start>
		  HAL_Delay(1000);
 80003ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003d2:	f000 fd45 	bl	8000e60 <HAL_Delay>
		  HAL_DMA_Abort(&handle_GPDMA1_Channel12);
 80003d6:	4816      	ldr	r0, [pc, #88]	@ (8000430 <main+0x1b8>)
 80003d8:	f001 f866 	bl	80014a8 <HAL_DMA_Abort>
		  test_cmd = '0';
 80003dc:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <main+0x1b0>)
 80003de:	2230      	movs	r2, #48	@ 0x30
 80003e0:	701a      	strb	r2, [r3, #0]
 80003e2:	e7a3      	b.n	800032c <main+0xb4>
	  }
	  else if (test_cmd == '7'){
 80003e4:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <main+0x1b0>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b37      	cmp	r3, #55	@ 0x37
 80003ea:	d19f      	bne.n	800032c <main+0xb4>
		  HAL_DMA_Abort(&handle_GPDMA1_Channel12);
 80003ec:	4810      	ldr	r0, [pc, #64]	@ (8000430 <main+0x1b8>)
 80003ee:	f001 f85b 	bl	80014a8 <HAL_DMA_Abort>
		  HAL_Delay(1000);
 80003f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003f6:	f000 fd33 	bl	8000e60 <HAL_Delay>
		  HAL_DMA_Start(&handle_GPDMA1_Channel12,(uint32_t)&GPIOF->IDR,(uint32_t)&dmaValCheck2,500*sizeof(uint16_t));
 80003fa:	463a      	mov	r2, r7
 80003fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000400:	490d      	ldr	r1, [pc, #52]	@ (8000438 <main+0x1c0>)
 8000402:	480b      	ldr	r0, [pc, #44]	@ (8000430 <main+0x1b8>)
 8000404:	f001 f810 	bl	8001428 <HAL_DMA_Start>
		  HAL_Delay(1000);
 8000408:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800040c:	f000 fd28 	bl	8000e60 <HAL_Delay>
		  HAL_DMA_Abort(&handle_GPDMA1_Channel12);
 8000410:	4807      	ldr	r0, [pc, #28]	@ (8000430 <main+0x1b8>)
 8000412:	f001 f849 	bl	80014a8 <HAL_DMA_Abort>
		  test_cmd = '0';
 8000416:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <main+0x1b0>)
 8000418:	2230      	movs	r2, #48	@ 0x30
 800041a:	701a      	strb	r2, [r3, #0]
	  if (test_cmd == '1'){
 800041c:	e786      	b.n	800032c <main+0xb4>
 800041e:	bf00      	nop
 8000420:	40013400 	.word	0x40013400
 8000424:	200001a0 	.word	0x200001a0
 8000428:	20000748 	.word	0x20000748
 800042c:	42020c00 	.word	0x42020c00
 8000430:	200001ec 	.word	0x200001ec
 8000434:	42021010 	.word	0x42021010
 8000438:	42021410 	.word	0x42021410

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b09e      	sub	sp, #120	@ 0x78
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0318 	add.w	r3, r7, #24
 8000446:	2260      	movs	r2, #96	@ 0x60
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f00a fa1a 	bl	800a884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	463b      	mov	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]
 800045e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000460:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000464:	f003 f9b2 	bl	80037cc <HAL_PWREx_ControlVoltageScaling>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800046e:	f000 fa31 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 8000472:	2370      	movs	r3, #112	@ 0x70
 8000474:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800047a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000480:	2310      	movs	r3, #16
 8000482:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000484:	2300      	movs	r3, #0
 8000486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 8000488:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800048c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 800048e:	2310      	movs	r3, #16
 8000490:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	2302      	movs	r3, #2
 8000494:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000496:	2301      	movs	r3, #1
 8000498:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800049a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800049e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80004a0:	2303      	movs	r3, #3
 80004a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80004a4:	230a      	movs	r3, #10
 80004a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80004b0:	2301      	movs	r3, #1
 80004b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80004b4:	230c      	movs	r3, #12
 80004b6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004bc:	f107 0318 	add.w	r3, r7, #24
 80004c0:	4618      	mov	r0, r3
 80004c2:	f003 fa2f 	bl	8003924 <HAL_RCC_OscConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80004cc:	f000 fa02 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d0:	231f      	movs	r3, #31
 80004d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d4:	2303      	movs	r3, #3
 80004d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004e8:	463b      	mov	r3, r7
 80004ea:	2104      	movs	r1, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f004 f8f5 	bl	80046dc <HAL_RCC_ClockConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80004f8:	f000 f9ec 	bl	80008d4 <Error_Handler>
  }
}
 80004fc:	bf00      	nop
 80004fe:	3778      	adds	r7, #120	@ 0x78
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <MX_GPDMA1_Init+0x3c>)
 800050c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000510:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <MX_GPDMA1_Init+0x3c>)
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <MX_GPDMA1_Init+0x3c>)
 800051c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	2054      	movs	r0, #84	@ 0x54
 800052e:	f000 fd73 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8000532:	2054      	movs	r0, #84	@ 0x54
 8000534:	f000 fd8a 	bl	800104c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	46020c00 	.word	0x46020c00

08000544 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000548:	2000      	movs	r0, #0
 800054a:	f001 fe75 	bl	8002238 <HAL_ICACHE_ConfigAssociativityMode>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000554:	f000 f9be 	bl	80008d4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000558:	f001 fe8e 	bl	8002278 <HAL_ICACHE_Enable>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000562:	f000 f9b7 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b09c      	sub	sp, #112	@ 0x70
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000572:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000580:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800058c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	615a      	str	r2, [r3, #20]
 800059e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2234      	movs	r2, #52	@ 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00a f96c 	bl	800a884 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80005ac:	4b45      	ldr	r3, [pc, #276]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80005ae:	4a46      	ldr	r2, [pc, #280]	@ (80006c8 <MX_TIM8_Init+0x15c>)
 80005b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80005b2:	4b44      	ldr	r3, [pc, #272]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b42      	ldr	r3, [pc, #264]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80005be:	4b41      	ldr	r3, [pc, #260]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80005c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c6:	4b3f      	ldr	r3, [pc, #252]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d2:	4b3c      	ldr	r3, [pc, #240]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80005d8:	483a      	ldr	r0, [pc, #232]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80005da:	f005 fae7 	bl	8005bac <HAL_TIM_Base_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80005e4:	f000 f976 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80005ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80005f2:	4619      	mov	r1, r3
 80005f4:	4833      	ldr	r0, [pc, #204]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80005f6:	f005 fd5d 	bl	80060b4 <HAL_TIM_ConfigClockSource>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000600:	f000 f968 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000604:	482f      	ldr	r0, [pc, #188]	@ (80006c4 <MX_TIM8_Init+0x158>)
 8000606:	f005 fb28 	bl	8005c5a <HAL_TIM_OC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000610:	f000 f960 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000618:	2300      	movs	r3, #0
 800061a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000620:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000624:	4619      	mov	r1, r3
 8000626:	4827      	ldr	r0, [pc, #156]	@ (80006c4 <MX_TIM8_Init+0x158>)
 8000628:	f006 fbde 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000632:	f000 f94f 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000636:	2300      	movs	r3, #0
 8000638:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063e:	2300      	movs	r3, #0
 8000640:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000642:	2300      	movs	r3, #0
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800064a:	2300      	movs	r3, #0
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800064e:	2300      	movs	r3, #0
 8000650:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000652:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000656:	2204      	movs	r2, #4
 8000658:	4619      	mov	r1, r3
 800065a:	481a      	ldr	r0, [pc, #104]	@ (80006c4 <MX_TIM8_Init+0x158>)
 800065c:	f005 fcb0 	bl	8005fc0 <HAL_TIM_OC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000666:	f000 f935 	bl	80008d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800067e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000682:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000690:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000694:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800069a:	2300      	movs	r3, #0
 800069c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80006a8:	f006 fc60 	bl	8006f6c <HAL_TIMEx_ConfigBreakDeadTime>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80006b2:	f000 f90f 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80006b6:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <MX_TIM8_Init+0x158>)
 80006b8:	f000 f998 	bl	80009ec <HAL_TIM_MspPostInit>

}
 80006bc:	bf00      	nop
 80006be:	3770      	adds	r7, #112	@ 0x70
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200001a0 	.word	0x200001a0
 80006c8:	40013400 	.word	0x40013400

080006cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006d2:	4a16      	ldr	r2, [pc, #88]	@ (800072c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80006d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006d8:	2206      	movs	r2, #6
 80006da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006de:	2202      	movs	r2, #2
 80006e0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006e4:	2202      	movs	r2, #2
 80006e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800070e:	2200      	movs	r2, #0
 8000710:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000714:	f001 fdc0 	bl	8002298 <HAL_PCD_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800071e:	f000 f8d9 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000264 	.word	0x20000264
 800072c:	42040000 	.word	0x42040000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	4b5e      	ldr	r3, [pc, #376]	@ (80008c0 <MX_GPIO_Init+0x190>)
 8000748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800074c:	4a5c      	ldr	r2, [pc, #368]	@ (80008c0 <MX_GPIO_Init+0x190>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000756:	4b5a      	ldr	r3, [pc, #360]	@ (80008c0 <MX_GPIO_Init+0x190>)
 8000758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000764:	4b56      	ldr	r3, [pc, #344]	@ (80008c0 <MX_GPIO_Init+0x190>)
 8000766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800076a:	4a55      	ldr	r2, [pc, #340]	@ (80008c0 <MX_GPIO_Init+0x190>)
 800076c:	f043 0320 	orr.w	r3, r3, #32
 8000770:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000774:	4b52      	ldr	r3, [pc, #328]	@ (80008c0 <MX_GPIO_Init+0x190>)
 8000776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800077a:	f003 0320 	and.w	r3, r3, #32
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b4f      	ldr	r3, [pc, #316]	@ (80008c0 <MX_GPIO_Init+0x190>)
 8000784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000788:	4a4d      	ldr	r2, [pc, #308]	@ (80008c0 <MX_GPIO_Init+0x190>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000792:	4b4b      	ldr	r3, [pc, #300]	@ (80008c0 <MX_GPIO_Init+0x190>)
 8000794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b47      	ldr	r3, [pc, #284]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a6:	4a46      	ldr	r2, [pc, #280]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007b0:	4b43      	ldr	r3, [pc, #268]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	4b40      	ldr	r3, [pc, #256]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007c4:	4a3e      	ldr	r2, [pc, #248]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ce:	4b3c      	ldr	r3, [pc, #240]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	4b38      	ldr	r3, [pc, #224]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007e2:	4a37      	ldr	r2, [pc, #220]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ec:	4b34      	ldr	r3, [pc, #208]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <MX_GPIO_Init+0x190>)
 80007fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000800:	4a2f      	ldr	r2, [pc, #188]	@ (80008c0 <MX_GPIO_Init+0x190>)
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800080a:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <MX_GPIO_Init+0x190>)
 800080c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000810:	f003 0308 	and.w	r3, r3, #8
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000818:	2200      	movs	r2, #0
 800081a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800081e:	4829      	ldr	r0, [pc, #164]	@ (80008c4 <MX_GPIO_Init+0x194>)
 8000820:	f001 fcd8 	bl	80021d4 <HAL_GPIO_WritePin>
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 800082a:	4827      	ldr	r0, [pc, #156]	@ (80008c8 <MX_GPIO_Init+0x198>)
 800082c:	f001 fcd2 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADCV1_D13_Pin ADCV1_D12_Pin ADCV1_D11_Pin ADCV1_D10_Pin
                           ADCV1_D09_Pin ADCV1_D08_Pin ADCV1_D07_Pin ADCV1_D06_Pin
                           ADCV1_D05_Pin ADCV1_D04_Pin ADCV1_D03_Pin ADCV1_D02_Pin
                           ADCV1_D01_Pin ADCV1_D00_Pin ADCV1_D15_Pin ADCV1_D14_Pin */
  GPIO_InitStruct.Pin = ADCV1_D13_Pin|ADCV1_D12_Pin|ADCV1_D11_Pin|ADCV1_D10_Pin
 8000830:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000834:	61fb      	str	r3, [r7, #28]
                          |ADCV1_D09_Pin|ADCV1_D08_Pin|ADCV1_D07_Pin|ADCV1_D06_Pin
                          |ADCV1_D05_Pin|ADCV1_D04_Pin|ADCV1_D03_Pin|ADCV1_D02_Pin
                          |ADCV1_D01_Pin|ADCV1_D00_Pin|ADCV1_D15_Pin|ADCV1_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4821      	ldr	r0, [pc, #132]	@ (80008cc <MX_GPIO_Init+0x19c>)
 8000846:	f001 faed 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV2_D00_Pin ADCV2_D01_Pin ADCV2_D02_Pin ADCV2_D03_Pin
                           ADCV2_D04_Pin ADCV2_D05_Pin ADCV2_D06_Pin ADCV2_D07_Pin
                           ADCV2_D08_Pin ADCV2_D09_Pin ADCV2_D10_Pin ADCV2_D11_Pin
                           ADCV2_D12_Pin ADCV2_D13_Pin ADCV2_D14_Pin ADCV2_D15_Pin */
  GPIO_InitStruct.Pin = ADCV2_D00_Pin|ADCV2_D01_Pin|ADCV2_D02_Pin|ADCV2_D03_Pin
 800084a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800084e:	61fb      	str	r3, [r7, #28]
                          |ADCV2_D04_Pin|ADCV2_D05_Pin|ADCV2_D06_Pin|ADCV2_D07_Pin
                          |ADCV2_D08_Pin|ADCV2_D09_Pin|ADCV2_D10_Pin|ADCV2_D11_Pin
                          |ADCV2_D12_Pin|ADCV2_D13_Pin|ADCV2_D14_Pin|ADCV2_D15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	481c      	ldr	r0, [pc, #112]	@ (80008d0 <MX_GPIO_Init+0x1a0>)
 8000860:	f001 fae0 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_01_Pin SWNT_CTRL_02_Pin SWNT_CTRL_03_Pin SWNT_CTRL_04_Pin
                           SWNT_CTRL_05_Pin SWNT_CTRL_06_Pin SWNT_CTRL_07_Pin SWNT_CTRL_08_Pin
                           SWNT_CTRL_09_Pin SWNT_CTRL_10_Pin SWNT_CTRL_11_Pin SWNT_CTRL_12_Pin
                           SWNT_CTRL_13_Pin SWNT_CTRL_14_Pin SWNT_CTRL_15_Pin SWNT_CTRL_16_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_01_Pin|SWNT_CTRL_02_Pin|SWNT_CTRL_03_Pin|SWNT_CTRL_04_Pin
 8000864:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000868:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_05_Pin|SWNT_CTRL_06_Pin|SWNT_CTRL_07_Pin|SWNT_CTRL_08_Pin
                          |SWNT_CTRL_09_Pin|SWNT_CTRL_10_Pin|SWNT_CTRL_11_Pin|SWNT_CTRL_12_Pin
                          |SWNT_CTRL_13_Pin|SWNT_CTRL_14_Pin|SWNT_CTRL_15_Pin|SWNT_CTRL_16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <MX_GPIO_Init+0x194>)
 800087e:	f001 fad1 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWNT_CTRL_20_Pin SWNT_CTRL_21_Pin SWNT_CTRL_17_Pin SWNT_CTRL_18_Pin
                           SWNT_CTRL_19_Pin */
  GPIO_InitStruct.Pin = SWNT_CTRL_20_Pin|SWNT_CTRL_21_Pin|SWNT_CTRL_17_Pin|SWNT_CTRL_18_Pin
 8000882:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000886:	61fb      	str	r3, [r7, #28]
                          |SWNT_CTRL_19_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <MX_GPIO_Init+0x198>)
 800089c:	f001 fac2 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCV1_OTR_Pin ADCV2_OTR_Pin */
  GPIO_InitStruct.Pin = ADCV1_OTR_Pin|ADCV2_OTR_Pin;
 80008a0:	2306      	movs	r3, #6
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_GPIO_Init+0x198>)
 80008b4:	f001 fab6 	bl	8001e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b8:	bf00      	nop
 80008ba:	3730      	adds	r7, #48	@ 0x30
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	46020c00 	.word	0x46020c00
 80008c4:	42021800 	.word	0x42021800
 80008c8:	42020c00 	.word	0x42020c00
 80008cc:	42021000 	.word	0x42021000
 80008d0:	42021400 	.word	0x42021400

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <HAL_MspInit+0x34>)
 80008e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008ec:	4a09      	ldr	r2, [pc, #36]	@ (8000914 <HAL_MspInit+0x34>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80008f6:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <HAL_MspInit+0x34>)
 80008f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000904:	f002 ffee 	bl	80038e4 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8000908:	f002 fffc 	bl	8003904 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	46020c00 	.word	0x46020c00

08000918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a2d      	ldr	r2, [pc, #180]	@ (80009dc <HAL_TIM_Base_MspInit+0xc4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d153      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800092a:	4b2d      	ldr	r3, [pc, #180]	@ (80009e0 <HAL_TIM_Base_MspInit+0xc8>)
 800092c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000930:	4a2b      	ldr	r2, [pc, #172]	@ (80009e0 <HAL_TIM_Base_MspInit+0xc8>)
 8000932:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000936:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800093a:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <HAL_TIM_Base_MspInit+0xc8>)
 800093c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* GPDMA1_REQUEST_TIM8_CH2 Init */
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 800094a:	4a27      	ldr	r2, [pc, #156]	@ (80009e8 <HAL_TIM_Base_MspInit+0xd0>)
 800094c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_TIM8_CH2;
 800094e:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 8000950:	2232      	movs	r2, #50	@ 0x32
 8000952:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000954:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800095a:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 800095c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000960:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 8000968:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 800096a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800096e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000970:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 8000972:	2201      	movs	r2, #1
 8000974:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 8000978:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800097c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 8000980:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000984:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 8000988:	2201      	movs	r2, #1
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 800098e:	2201      	movs	r2, #1
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 8000994:	2200      	movs	r2, #0
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 800099a:	2200      	movs	r2, #0
 800099c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 80009a4:	480f      	ldr	r0, [pc, #60]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 80009a6:	f000 fc13 	bl	80011d0 <HAL_DMA_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_TIM_Base_MspInit+0x9c>
    {
      Error_Handler();
 80009b0:	f7ff ff90 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], handle_GPDMA1_Channel12);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 80009b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 80009c0:	2110      	movs	r1, #16
 80009c2:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <HAL_TIM_Base_MspInit+0xcc>)
 80009c4:	f000 ff4d 	bl	8001862 <HAL_DMA_ConfigChannelAttributes>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 80009ce:	f7ff ff81 	bl	80008d4 <Error_Handler>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40013400 	.word	0x40013400
 80009e0:	46020c00 	.word	0x46020c00
 80009e4:	200001ec 	.word	0x200001ec
 80009e8:	40020650 	.word	0x40020650

080009ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <HAL_TIM_MspPostInit+0x68>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d11e      	bne.n	8000a4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_TIM_MspPostInit+0x6c>)
 8000a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a14:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <HAL_TIM_MspPostInit+0x6c>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_TIM_MspPostInit+0x6c>)
 8000a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ADC_CLK_DVC_Pin;
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CLK_DVC_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <HAL_TIM_MspPostInit+0x70>)
 8000a48:	f001 f9ec 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40013400 	.word	0x40013400
 8000a58:	46020c00 	.word	0x46020c00
 8000a5c:	42020800 	.word	0x42020800

08000a60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b0bc      	sub	sp, #240	@ 0xf0
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	22c0      	movs	r2, #192	@ 0xc0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f009 feff 	bl	800a884 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8000b7c <HAL_PCD_MspInit+0x11c>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d171      	bne.n	8000b74 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa2:	f107 0318 	add.w	r3, r7, #24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 f9ac 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000ab2:	f7ff ff0f 	bl	80008d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b32      	ldr	r3, [pc, #200]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000abc:	4a30      	ldr	r2, [pc, #192]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ad4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000aee:	230a      	movs	r3, #10
 8000af0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000af8:	4619      	mov	r1, r3
 8000afa:	4822      	ldr	r0, [pc, #136]	@ (8000b84 <HAL_PCD_MspInit+0x124>)
 8000afc:	f001 f992 	bl	8001e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b06:	4a1e      	ldr	r2, [pc, #120]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d119      	bne.n	8000b60 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b3c:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000b4a:	f002 fecb 	bl	80038e4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <HAL_PCD_MspInit+0x120>)
 8000b56:	f023 0304 	bic.w	r3, r3, #4
 8000b5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b5e:	e001      	b.n	8000b64 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000b60:	f002 fec0 	bl	80038e4 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2049      	movs	r0, #73	@ 0x49
 8000b6a:	f000 fa55 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b6e:	2049      	movs	r0, #73	@ 0x49
 8000b70:	f000 fa6c 	bl	800104c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000b74:	bf00      	nop
 8000b76:	37f0      	adds	r7, #240	@ 0xf0
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	42040000 	.word	0x42040000
 8000b80:	46020c00 	.word	0x46020c00
 8000b84:	42020000 	.word	0x42020000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 f91f 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  //HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <OTG_FS_IRQHandler+0x10>)
 8000bee:	f001 fc9a 	bl	8002526 <HAL_PCD_IRQHandler>
  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20001c20 	.word	0x20001c20

08000bfc <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <GPDMA1_Channel12_IRQHandler+0x10>)
 8000c02:	f000 fccd 	bl	80015a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200001ec 	.word	0x200001ec

08000c10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <SystemInit+0x68>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1a:	4a17      	ldr	r2, [pc, #92]	@ (8000c78 <SystemInit+0x68>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <SystemInit+0x6c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <SystemInit+0x6c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <SystemInit+0x6c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <SystemInit+0x6c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <SystemInit+0x6c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <SystemInit+0x6c>)
 8000c42:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000c46:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000c4a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <SystemInit+0x6c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <SystemInit+0x6c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a09      	ldr	r2, [pc, #36]	@ (8000c7c <SystemInit+0x6c>)
 8000c58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <SystemInit+0x6c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <SystemInit+0x68>)
 8000c66:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c6a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	46020c00 	.word	0x46020c00

08000c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c84:	f7ff ffc4 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c8a:	e003      	b.n	8000c94 <LoopCopyDataInit>

08000c8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c92:	3104      	adds	r1, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c94:	480a      	ldr	r0, [pc, #40]	@ (8000cc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c96:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c9c:	d3f6      	bcc.n	8000c8c <CopyDataInit>
	ldr	r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ca0:	e002      	b.n	8000ca8 <LoopFillZerobss>

08000ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ca2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ca4:	f842 3b04 	str.w	r3, [r2], #4

08000ca8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <LoopForever+0x16>)
	cmp	r2, r3
 8000caa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cac:	d3f9      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f009 fdf1 	bl	800a894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb2:	f7ff fae1 	bl	8000278 <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000cb8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000cbc:	0800aa14 	.word	0x0800aa14
	ldr	r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cc4:	20000183 	.word	0x20000183
	ldr	r2, =_sbss
 8000cc8:	20000184 	.word	0x20000184
	ldr	r3, = _ebss
 8000ccc:	20002325 	.word	0x20002325

08000cd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_Init+0x50>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a11      	ldr	r2, [pc, #68]	@ (8000d24 <HAL_Init+0x50>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f98c 	bl	8001002 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000cea:	f003 fee9 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <HAL_Init+0x54>)
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <HAL_Init+0x58>)
 8000cfa:	5ccb      	ldrb	r3, [r1, r3]
 8000cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000d00:	4a0b      	ldr	r2, [pc, #44]	@ (8000d30 <HAL_Init+0x5c>)
 8000d02:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d04:	2004      	movs	r0, #4
 8000d06:	f000 f9d1 	bl	80010ac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f000 f812 	bl	8000d34 <HAL_InitTick>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e002      	b.n	8000d20 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1a:	f7ff fde1 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40022000 	.word	0x40022000
 8000d28:	46020c00 	.word	0x46020c00
 8000d2c:	0800a93c 	.word	0x0800a93c
 8000d30:	20000000 	.word	0x20000000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000d40:	4b33      	ldr	r3, [pc, #204]	@ (8000e10 <HAL_InitTick+0xdc>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e05c      	b.n	8000e06 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000d4c:	4b31      	ldr	r3, [pc, #196]	@ (8000e14 <HAL_InitTick+0xe0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d10c      	bne.n	8000d72 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000d58:	4b2f      	ldr	r3, [pc, #188]	@ (8000e18 <HAL_InitTick+0xe4>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <HAL_InitTick+0xdc>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e037      	b.n	8000de2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000d72:	f000 f9f3 	bl	800115c <HAL_SYSTICK_GetCLKSourceConfig>
 8000d76:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d023      	beq.n	8000dc6 <HAL_InitTick+0x92>
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d82d      	bhi.n	8000de0 <HAL_InitTick+0xac>
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_InitTick+0x5e>
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d00d      	beq.n	8000dac <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000d90:	e026      	b.n	8000de0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <HAL_InitTick+0xe4>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <HAL_InitTick+0xdc>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da8:	60fb      	str	r3, [r7, #12]
        break;
 8000daa:	e01a      	b.n	8000de2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_InitTick+0xdc>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dba:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	60fb      	str	r3, [r7, #12]
        break;
 8000dc4:	e00d      	b.n	8000de2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000dc6:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <HAL_InitTick+0xdc>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dd4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ddc:	60fb      	str	r3, [r7, #12]
        break;
 8000dde:	e000      	b.n	8000de2 <HAL_InitTick+0xae>
        break;
 8000de0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f000 f940 	bl	8001068 <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e009      	b.n	8000e06 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df2:	2200      	movs	r2, #0
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfa:	f000 f90d 	bl	8001018 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000dfe:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_InitTick+0xe8>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	e000e010 	.word	0xe000e010
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	2000074c 	.word	0x2000074c

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000074c 	.word	0x2000074c

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	@ (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff4c 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001026:	f7ff ff63 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800102a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	6978      	ldr	r0, [r7, #20]
 8001032:	f7ff ffb3 	bl	8000f9c <NVIC_EncodePriority>
 8001036:	4602      	mov	r2, r0
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff82 	bl	8000f48 <__NVIC_SetPriority>
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff56 	bl	8000f0c <__NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001078:	d301      	bcc.n	800107e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800107a:	2301      	movs	r3, #1
 800107c:	e00d      	b.n	800109a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <HAL_SYSTICK_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_SYSTICK_Config+0x40>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_SYSTICK_Config+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <HAL_SYSTICK_Config+0x40>)
 8001092:	f043 0303 	orr.w	r3, r3, #3
 8001096:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d844      	bhi.n	8001144 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80010ba:	a201      	add	r2, pc, #4	@ (adr r2, 80010c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010e3 	.word	0x080010e3
 80010c4:	08001101 	.word	0x08001101
 80010c8:	08001123 	.word	0x08001123
 80010cc:	08001145 	.word	0x08001145
 80010d0:	080010d5 	.word	0x080010d5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6013      	str	r3, [r2, #0]
      break;
 80010e0:	e031      	b.n	8001146 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f4:	4a18      	ldr	r2, [pc, #96]	@ (8001158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80010fe:	e022      	b.n	8001146 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a13      	ldr	r2, [pc, #76]	@ (8001154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001106:	f023 0304 	bic.w	r3, r3, #4
 800110a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001112:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001116:	4a10      	ldr	r2, [pc, #64]	@ (8001158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001118:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001120:	e011      	b.n	8001146 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001128:	f023 0304 	bic.w	r3, r3, #4
 800112c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001138:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800113a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001142:	e000      	b.n	8001146 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001144:	bf00      	nop
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010
 8001158:	46020c00 	.word	0x46020c00

0800115c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800116e:	2304      	movs	r3, #4
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	e021      	b.n	80011b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800117e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001186:	d011      	beq.n	80011ac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800118e:	d810      	bhi.n	80011b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800119c:	d003      	beq.n	80011a6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800119e:	e008      	b.n	80011b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
        break;
 80011a4:	e008      	b.n	80011b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80011a6:	2301      	movs	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
        break;
 80011aa:	e005      	b.n	80011b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80011ac:	2302      	movs	r3, #2
 80011ae:	607b      	str	r3, [r7, #4]
        break;
 80011b0:	e002      	b.n	80011b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
        break;
 80011b6:	bf00      	nop
    }
  }
  return systick_source;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010
 80011cc:	46020c00 	.word	0x46020c00

080011d0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff fe36 	bl	8000e48 <HAL_GetTick>
 80011dc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0db      	b.n	80013a0 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6e      	ldr	r2, [pc, #440]	@ (80013a8 <HAL_DMA_Init+0x1d8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	f000 809f 	beq.w	8001332 <HAL_DMA_Init+0x162>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a6c      	ldr	r2, [pc, #432]	@ (80013ac <HAL_DMA_Init+0x1dc>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	f000 8099 	beq.w	8001332 <HAL_DMA_Init+0x162>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a6a      	ldr	r2, [pc, #424]	@ (80013b0 <HAL_DMA_Init+0x1e0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	f000 8093 	beq.w	8001332 <HAL_DMA_Init+0x162>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a68      	ldr	r2, [pc, #416]	@ (80013b4 <HAL_DMA_Init+0x1e4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	f000 808d 	beq.w	8001332 <HAL_DMA_Init+0x162>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a66      	ldr	r2, [pc, #408]	@ (80013b8 <HAL_DMA_Init+0x1e8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	f000 8087 	beq.w	8001332 <HAL_DMA_Init+0x162>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a64      	ldr	r2, [pc, #400]	@ (80013bc <HAL_DMA_Init+0x1ec>)
 800122a:	4293      	cmp	r3, r2
 800122c:	f000 8081 	beq.w	8001332 <HAL_DMA_Init+0x162>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a62      	ldr	r2, [pc, #392]	@ (80013c0 <HAL_DMA_Init+0x1f0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d07b      	beq.n	8001332 <HAL_DMA_Init+0x162>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a61      	ldr	r2, [pc, #388]	@ (80013c4 <HAL_DMA_Init+0x1f4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d076      	beq.n	8001332 <HAL_DMA_Init+0x162>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a5f      	ldr	r2, [pc, #380]	@ (80013c8 <HAL_DMA_Init+0x1f8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d071      	beq.n	8001332 <HAL_DMA_Init+0x162>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a5e      	ldr	r2, [pc, #376]	@ (80013cc <HAL_DMA_Init+0x1fc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d06c      	beq.n	8001332 <HAL_DMA_Init+0x162>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a5c      	ldr	r2, [pc, #368]	@ (80013d0 <HAL_DMA_Init+0x200>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d067      	beq.n	8001332 <HAL_DMA_Init+0x162>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a5b      	ldr	r2, [pc, #364]	@ (80013d4 <HAL_DMA_Init+0x204>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d062      	beq.n	8001332 <HAL_DMA_Init+0x162>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a59      	ldr	r2, [pc, #356]	@ (80013d8 <HAL_DMA_Init+0x208>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d05d      	beq.n	8001332 <HAL_DMA_Init+0x162>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a58      	ldr	r2, [pc, #352]	@ (80013dc <HAL_DMA_Init+0x20c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d058      	beq.n	8001332 <HAL_DMA_Init+0x162>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a56      	ldr	r2, [pc, #344]	@ (80013e0 <HAL_DMA_Init+0x210>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d053      	beq.n	8001332 <HAL_DMA_Init+0x162>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a55      	ldr	r2, [pc, #340]	@ (80013e4 <HAL_DMA_Init+0x214>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d04e      	beq.n	8001332 <HAL_DMA_Init+0x162>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a53      	ldr	r2, [pc, #332]	@ (80013e8 <HAL_DMA_Init+0x218>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d049      	beq.n	8001332 <HAL_DMA_Init+0x162>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a52      	ldr	r2, [pc, #328]	@ (80013ec <HAL_DMA_Init+0x21c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d044      	beq.n	8001332 <HAL_DMA_Init+0x162>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a50      	ldr	r2, [pc, #320]	@ (80013f0 <HAL_DMA_Init+0x220>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d03f      	beq.n	8001332 <HAL_DMA_Init+0x162>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a4f      	ldr	r2, [pc, #316]	@ (80013f4 <HAL_DMA_Init+0x224>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d03a      	beq.n	8001332 <HAL_DMA_Init+0x162>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a4d      	ldr	r2, [pc, #308]	@ (80013f8 <HAL_DMA_Init+0x228>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d035      	beq.n	8001332 <HAL_DMA_Init+0x162>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a4c      	ldr	r2, [pc, #304]	@ (80013fc <HAL_DMA_Init+0x22c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d030      	beq.n	8001332 <HAL_DMA_Init+0x162>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001400 <HAL_DMA_Init+0x230>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d02b      	beq.n	8001332 <HAL_DMA_Init+0x162>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a49      	ldr	r2, [pc, #292]	@ (8001404 <HAL_DMA_Init+0x234>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d026      	beq.n	8001332 <HAL_DMA_Init+0x162>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a47      	ldr	r2, [pc, #284]	@ (8001408 <HAL_DMA_Init+0x238>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d021      	beq.n	8001332 <HAL_DMA_Init+0x162>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a46      	ldr	r2, [pc, #280]	@ (800140c <HAL_DMA_Init+0x23c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d01c      	beq.n	8001332 <HAL_DMA_Init+0x162>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a44      	ldr	r2, [pc, #272]	@ (8001410 <HAL_DMA_Init+0x240>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d017      	beq.n	8001332 <HAL_DMA_Init+0x162>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a43      	ldr	r2, [pc, #268]	@ (8001414 <HAL_DMA_Init+0x244>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d012      	beq.n	8001332 <HAL_DMA_Init+0x162>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a41      	ldr	r2, [pc, #260]	@ (8001418 <HAL_DMA_Init+0x248>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_DMA_Init+0x162>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a40      	ldr	r2, [pc, #256]	@ (800141c <HAL_DMA_Init+0x24c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d008      	beq.n	8001332 <HAL_DMA_Init+0x162>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a3e      	ldr	r2, [pc, #248]	@ (8001420 <HAL_DMA_Init+0x250>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d003      	beq.n	8001332 <HAL_DMA_Init+0x162>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a3d      	ldr	r2, [pc, #244]	@ (8001424 <HAL_DMA_Init+0x254>)
 8001330:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2202      	movs	r2, #2
 800133e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0206 	orr.w	r2, r2, #6
 8001350:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001352:	e00f      	b.n	8001374 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001354:	f7ff fd78 	bl	8000e48 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b05      	cmp	r3, #5
 8001360:	d908      	bls.n	8001374 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2210      	movs	r2, #16
 8001366:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2203      	movs	r2, #3
 800136c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e015      	b.n	80013a0 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1e8      	bne.n	8001354 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 face 	bl	8001924 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40020050 	.word	0x40020050
 80013ac:	50020050 	.word	0x50020050
 80013b0:	400200d0 	.word	0x400200d0
 80013b4:	500200d0 	.word	0x500200d0
 80013b8:	40020150 	.word	0x40020150
 80013bc:	50020150 	.word	0x50020150
 80013c0:	400201d0 	.word	0x400201d0
 80013c4:	500201d0 	.word	0x500201d0
 80013c8:	40020250 	.word	0x40020250
 80013cc:	50020250 	.word	0x50020250
 80013d0:	400202d0 	.word	0x400202d0
 80013d4:	500202d0 	.word	0x500202d0
 80013d8:	40020350 	.word	0x40020350
 80013dc:	50020350 	.word	0x50020350
 80013e0:	400203d0 	.word	0x400203d0
 80013e4:	500203d0 	.word	0x500203d0
 80013e8:	40020450 	.word	0x40020450
 80013ec:	50020450 	.word	0x50020450
 80013f0:	400204d0 	.word	0x400204d0
 80013f4:	500204d0 	.word	0x500204d0
 80013f8:	40020550 	.word	0x40020550
 80013fc:	50020550 	.word	0x50020550
 8001400:	400205d0 	.word	0x400205d0
 8001404:	500205d0 	.word	0x500205d0
 8001408:	40020650 	.word	0x40020650
 800140c:	50020650 	.word	0x50020650
 8001410:	400206d0 	.word	0x400206d0
 8001414:	500206d0 	.word	0x500206d0
 8001418:	40020750 	.word	0x40020750
 800141c:	50020750 	.word	0x50020750
 8001420:	400207d0 	.word	0x400207d0
 8001424:	500207d0 	.word	0x500207d0

08001428 <HAL_DMA_Start>:
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *const hdma,
                                uint32_t SrcAddress,
                                uint32_t DstAddress,
                                uint32_t SrcDataSize)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_DMA_Start+0x18>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e02f      	b.n	80014a0 <HAL_DMA_Start+0x78>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_DMA_Start+0x26>
 800144a:	2302      	movs	r3, #2
 800144c:	e028      	b.n	80014a0 <HAL_DMA_Start+0x78>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d116      	bne.n	8001490 <HAL_DMA_Start+0x68>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2202      	movs	r2, #2
 8001466:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 fa2f 	bl	80018da <DMA_SetConfig>

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	e007      	b.n	80014a0 <HAL_DMA_Start+0x78>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2240      	movs	r2, #64	@ 0x40
 8001494:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80014b0:	f7ff fcca 	bl	8000e48 <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e06b      	b.n	8001598 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d008      	beq.n	80014de <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2220      	movs	r2, #32
 80014d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e05c      	b.n	8001598 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0204 	orr.w	r2, r2, #4
 80014ec:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80014f6:	e020      	b.n	800153a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80014f8:	f7ff fca6 	bl	8000e48 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b05      	cmp	r3, #5
 8001504:	d919      	bls.n	800153a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150a:	f043 0210 	orr.w	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800151e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152a:	2201      	movs	r2, #1
 800152c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e02e      	b.n	8001598 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0d7      	beq.n	80014f8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0202 	orr.w	r2, r2, #2
 8001556:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001568:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001582:	2201      	movs	r2, #1
 8001584:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80015b0:	f023 030f 	bic.w	r3, r3, #15
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015be:	3b50      	subs	r3, #80	@ 0x50
 80015c0:	09db      	lsrs	r3, r3, #7
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2201      	movs	r2, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 813b 	beq.w	8001856 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d011      	beq.n	8001612 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001604:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160a:	f043 0201 	orr.w	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800161c:	2b00      	cmp	r3, #0
 800161e:	d011      	beq.n	8001644 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00a      	beq.n	8001644 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001636:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	f043 0202 	orr.w	r2, r3, #2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d011      	beq.n	8001676 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00a      	beq.n	8001676 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001668:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	f043 0204 	orr.w	r2, r3, #4
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d011      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00a      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	f043 0208 	orr.w	r2, r3, #8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d013      	beq.n	80016de <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00c      	beq.n	80016de <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016cc:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d04c      	beq.n	8001786 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d045      	beq.n	8001786 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001702:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b04      	cmp	r3, #4
 800170e:	d12e      	bne.n	800176e <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800171e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0202 	orr.w	r2, r2, #2
 800172e:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800173c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001748:	2201      	movs	r2, #1
 800174a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d07a      	beq.n	800185a <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
        }

        return;
 800176c:	e075      	b.n	800185a <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2205      	movs	r2, #5
 8001772:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d039      	beq.n	8001808 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d032      	beq.n	8001808 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d012      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d116      	bne.n	80017e6 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d111      	bne.n	80017e6 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ce:	2201      	movs	r2, #1
 80017d0:	731a      	strb	r2, [r3, #12]
 80017d2:	e008      	b.n	80017e6 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017ee:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	2b00      	cmp	r3, #0
 800180e:	d025      	beq.n	800185c <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0202 	orr.w	r2, r2, #2
 800181e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800182c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001838:	2201      	movs	r2, #1
 800183a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
 8001854:	e002      	b.n	800185c <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001856:	bf00      	nop
 8001858:	e000      	b.n	800185c <HAL_DMA_IRQHandler+0x2bc>
        return;
 800185a:	bf00      	nop
    }
  }
}
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e02b      	b.n	80018ce <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800187e:	f023 030f 	bic.w	r3, r3, #15
 8001882:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	3b50      	subs	r3, #80	@ 0x50
 800188e:	09db      	lsrs	r3, r3, #7
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	2201      	movs	r2, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d012      	beq.n	80018cc <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f003 0311 	and.w	r3, r3, #17
 80018ac:	2b11      	cmp	r3, #17
 80018ae:	d106      	bne.n	80018be <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	e006      	b.n	80018cc <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	041b      	lsls	r3, r3, #16
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	b291      	uxth	r1, r2
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	430b      	orrs	r3, r1
 80018fc:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001906:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	430a      	orrs	r2, r1
 8001944:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a53      	ldr	r2, [pc, #332]	@ (8001ab0 <DMA_Init+0x18c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	f000 80a0 	beq.w	8001aaa <DMA_Init+0x186>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a51      	ldr	r2, [pc, #324]	@ (8001ab4 <DMA_Init+0x190>)
 8001970:	4293      	cmp	r3, r2
 8001972:	f000 809a 	beq.w	8001aaa <DMA_Init+0x186>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab8 <DMA_Init+0x194>)
 800197c:	4293      	cmp	r3, r2
 800197e:	f000 8094 	beq.w	8001aaa <DMA_Init+0x186>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a4d      	ldr	r2, [pc, #308]	@ (8001abc <DMA_Init+0x198>)
 8001988:	4293      	cmp	r3, r2
 800198a:	f000 808e 	beq.w	8001aaa <DMA_Init+0x186>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac0 <DMA_Init+0x19c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	f000 8088 	beq.w	8001aaa <DMA_Init+0x186>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a49      	ldr	r2, [pc, #292]	@ (8001ac4 <DMA_Init+0x1a0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	f000 8082 	beq.w	8001aaa <DMA_Init+0x186>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a47      	ldr	r2, [pc, #284]	@ (8001ac8 <DMA_Init+0x1a4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d07c      	beq.n	8001aaa <DMA_Init+0x186>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a45      	ldr	r2, [pc, #276]	@ (8001acc <DMA_Init+0x1a8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d077      	beq.n	8001aaa <DMA_Init+0x186>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a44      	ldr	r2, [pc, #272]	@ (8001ad0 <DMA_Init+0x1ac>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d072      	beq.n	8001aaa <DMA_Init+0x186>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a42      	ldr	r2, [pc, #264]	@ (8001ad4 <DMA_Init+0x1b0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d06d      	beq.n	8001aaa <DMA_Init+0x186>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a41      	ldr	r2, [pc, #260]	@ (8001ad8 <DMA_Init+0x1b4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d068      	beq.n	8001aaa <DMA_Init+0x186>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a3f      	ldr	r2, [pc, #252]	@ (8001adc <DMA_Init+0x1b8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d063      	beq.n	8001aaa <DMA_Init+0x186>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ae0 <DMA_Init+0x1bc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d05e      	beq.n	8001aaa <DMA_Init+0x186>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae4 <DMA_Init+0x1c0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d059      	beq.n	8001aaa <DMA_Init+0x186>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ae8 <DMA_Init+0x1c4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d054      	beq.n	8001aaa <DMA_Init+0x186>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a39      	ldr	r2, [pc, #228]	@ (8001aec <DMA_Init+0x1c8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d04f      	beq.n	8001aaa <DMA_Init+0x186>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a38      	ldr	r2, [pc, #224]	@ (8001af0 <DMA_Init+0x1cc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d04a      	beq.n	8001aaa <DMA_Init+0x186>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a36      	ldr	r2, [pc, #216]	@ (8001af4 <DMA_Init+0x1d0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d045      	beq.n	8001aaa <DMA_Init+0x186>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a35      	ldr	r2, [pc, #212]	@ (8001af8 <DMA_Init+0x1d4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d040      	beq.n	8001aaa <DMA_Init+0x186>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a33      	ldr	r2, [pc, #204]	@ (8001afc <DMA_Init+0x1d8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d03b      	beq.n	8001aaa <DMA_Init+0x186>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a32      	ldr	r2, [pc, #200]	@ (8001b00 <DMA_Init+0x1dc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d036      	beq.n	8001aaa <DMA_Init+0x186>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a30      	ldr	r2, [pc, #192]	@ (8001b04 <DMA_Init+0x1e0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d031      	beq.n	8001aaa <DMA_Init+0x186>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b08 <DMA_Init+0x1e4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d02c      	beq.n	8001aaa <DMA_Init+0x186>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2d      	ldr	r2, [pc, #180]	@ (8001b0c <DMA_Init+0x1e8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d027      	beq.n	8001aaa <DMA_Init+0x186>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b10 <DMA_Init+0x1ec>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d022      	beq.n	8001aaa <DMA_Init+0x186>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2a      	ldr	r2, [pc, #168]	@ (8001b14 <DMA_Init+0x1f0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01d      	beq.n	8001aaa <DMA_Init+0x186>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a29      	ldr	r2, [pc, #164]	@ (8001b18 <DMA_Init+0x1f4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d018      	beq.n	8001aaa <DMA_Init+0x186>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a27      	ldr	r2, [pc, #156]	@ (8001b1c <DMA_Init+0x1f8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <DMA_Init+0x186>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a26      	ldr	r2, [pc, #152]	@ (8001b20 <DMA_Init+0x1fc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00e      	beq.n	8001aaa <DMA_Init+0x186>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a24      	ldr	r2, [pc, #144]	@ (8001b24 <DMA_Init+0x200>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d009      	beq.n	8001aaa <DMA_Init+0x186>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a23      	ldr	r2, [pc, #140]	@ (8001b28 <DMA_Init+0x204>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d004      	beq.n	8001aaa <DMA_Init+0x186>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a21      	ldr	r2, [pc, #132]	@ (8001b2c <DMA_Init+0x208>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d142      	bne.n	8001b30 <DMA_Init+0x20c>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e041      	b.n	8001b32 <DMA_Init+0x20e>
 8001aae:	bf00      	nop
 8001ab0:	40020050 	.word	0x40020050
 8001ab4:	50020050 	.word	0x50020050
 8001ab8:	400200d0 	.word	0x400200d0
 8001abc:	500200d0 	.word	0x500200d0
 8001ac0:	40020150 	.word	0x40020150
 8001ac4:	50020150 	.word	0x50020150
 8001ac8:	400201d0 	.word	0x400201d0
 8001acc:	500201d0 	.word	0x500201d0
 8001ad0:	40020250 	.word	0x40020250
 8001ad4:	50020250 	.word	0x50020250
 8001ad8:	400202d0 	.word	0x400202d0
 8001adc:	500202d0 	.word	0x500202d0
 8001ae0:	40020350 	.word	0x40020350
 8001ae4:	50020350 	.word	0x50020350
 8001ae8:	400203d0 	.word	0x400203d0
 8001aec:	500203d0 	.word	0x500203d0
 8001af0:	40020450 	.word	0x40020450
 8001af4:	50020450 	.word	0x50020450
 8001af8:	400204d0 	.word	0x400204d0
 8001afc:	500204d0 	.word	0x500204d0
 8001b00:	40020550 	.word	0x40020550
 8001b04:	50020550 	.word	0x50020550
 8001b08:	400205d0 	.word	0x400205d0
 8001b0c:	500205d0 	.word	0x500205d0
 8001b10:	40020650 	.word	0x40020650
 8001b14:	50020650 	.word	0x50020650
 8001b18:	400206d0 	.word	0x400206d0
 8001b1c:	500206d0 	.word	0x500206d0
 8001b20:	40020750 	.word	0x40020750
 8001b24:	50020750 	.word	0x50020750
 8001b28:	400207d0 	.word	0x400207d0
 8001b2c:	500207d0 	.word	0x500207d0
 8001b30:	2300      	movs	r3, #0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d012      	beq.n	8001b5c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	051b      	lsls	r3, r3, #20
 8001b42:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001b46:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001b54:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b8e:	f040 80b0 	bne.w	8001cf2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a82      	ldr	r2, [pc, #520]	@ (8001da0 <DMA_Init+0x47c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	f000 80a0 	beq.w	8001cde <DMA_Init+0x3ba>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a80      	ldr	r2, [pc, #512]	@ (8001da4 <DMA_Init+0x480>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	f000 809a 	beq.w	8001cde <DMA_Init+0x3ba>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7e      	ldr	r2, [pc, #504]	@ (8001da8 <DMA_Init+0x484>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f000 8094 	beq.w	8001cde <DMA_Init+0x3ba>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7c      	ldr	r2, [pc, #496]	@ (8001dac <DMA_Init+0x488>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f000 808e 	beq.w	8001cde <DMA_Init+0x3ba>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7a      	ldr	r2, [pc, #488]	@ (8001db0 <DMA_Init+0x48c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	f000 8088 	beq.w	8001cde <DMA_Init+0x3ba>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a78      	ldr	r2, [pc, #480]	@ (8001db4 <DMA_Init+0x490>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	f000 8082 	beq.w	8001cde <DMA_Init+0x3ba>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a76      	ldr	r2, [pc, #472]	@ (8001db8 <DMA_Init+0x494>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d07c      	beq.n	8001cde <DMA_Init+0x3ba>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a74      	ldr	r2, [pc, #464]	@ (8001dbc <DMA_Init+0x498>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d077      	beq.n	8001cde <DMA_Init+0x3ba>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a73      	ldr	r2, [pc, #460]	@ (8001dc0 <DMA_Init+0x49c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d072      	beq.n	8001cde <DMA_Init+0x3ba>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a71      	ldr	r2, [pc, #452]	@ (8001dc4 <DMA_Init+0x4a0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d06d      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a70      	ldr	r2, [pc, #448]	@ (8001dc8 <DMA_Init+0x4a4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d068      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a6e      	ldr	r2, [pc, #440]	@ (8001dcc <DMA_Init+0x4a8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d063      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6d      	ldr	r2, [pc, #436]	@ (8001dd0 <DMA_Init+0x4ac>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d05e      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6b      	ldr	r2, [pc, #428]	@ (8001dd4 <DMA_Init+0x4b0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d059      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd8 <DMA_Init+0x4b4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d054      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a68      	ldr	r2, [pc, #416]	@ (8001ddc <DMA_Init+0x4b8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d04f      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a67      	ldr	r2, [pc, #412]	@ (8001de0 <DMA_Init+0x4bc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d04a      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <DMA_Init+0x4c0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d045      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a64      	ldr	r2, [pc, #400]	@ (8001de8 <DMA_Init+0x4c4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d040      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a62      	ldr	r2, [pc, #392]	@ (8001dec <DMA_Init+0x4c8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d03b      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a61      	ldr	r2, [pc, #388]	@ (8001df0 <DMA_Init+0x4cc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d036      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a5f      	ldr	r2, [pc, #380]	@ (8001df4 <DMA_Init+0x4d0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d031      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8001df8 <DMA_Init+0x4d4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d02c      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5c      	ldr	r2, [pc, #368]	@ (8001dfc <DMA_Init+0x4d8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d027      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a5b      	ldr	r2, [pc, #364]	@ (8001e00 <DMA_Init+0x4dc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d022      	beq.n	8001cde <DMA_Init+0x3ba>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a59      	ldr	r2, [pc, #356]	@ (8001e04 <DMA_Init+0x4e0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01d      	beq.n	8001cde <DMA_Init+0x3ba>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a58      	ldr	r2, [pc, #352]	@ (8001e08 <DMA_Init+0x4e4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d018      	beq.n	8001cde <DMA_Init+0x3ba>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a56      	ldr	r2, [pc, #344]	@ (8001e0c <DMA_Init+0x4e8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <DMA_Init+0x3ba>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a55      	ldr	r2, [pc, #340]	@ (8001e10 <DMA_Init+0x4ec>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00e      	beq.n	8001cde <DMA_Init+0x3ba>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a53      	ldr	r2, [pc, #332]	@ (8001e14 <DMA_Init+0x4f0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d009      	beq.n	8001cde <DMA_Init+0x3ba>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <DMA_Init+0x4f4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d004      	beq.n	8001cde <DMA_Init+0x3ba>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a50      	ldr	r2, [pc, #320]	@ (8001e1c <DMA_Init+0x4f8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <DMA_Init+0x3be>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <DMA_Init+0x3c0>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00d      	beq.n	8001d04 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e008      	b.n	8001d04 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cfa:	d103      	bne.n	8001d04 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d02:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d0a:	4b45      	ldr	r3, [pc, #276]	@ (8001e20 <DMA_Init+0x4fc>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a36      	ldr	r2, [pc, #216]	@ (8001e00 <DMA_Init+0x4dc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <DMA_Init+0x44c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a35      	ldr	r2, [pc, #212]	@ (8001e04 <DMA_Init+0x4e0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d01d      	beq.n	8001d70 <DMA_Init+0x44c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a33      	ldr	r2, [pc, #204]	@ (8001e08 <DMA_Init+0x4e4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <DMA_Init+0x44c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a32      	ldr	r2, [pc, #200]	@ (8001e0c <DMA_Init+0x4e8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <DMA_Init+0x44c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a30      	ldr	r2, [pc, #192]	@ (8001e10 <DMA_Init+0x4ec>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <DMA_Init+0x44c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2f      	ldr	r2, [pc, #188]	@ (8001e14 <DMA_Init+0x4f0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <DMA_Init+0x44c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a2d      	ldr	r2, [pc, #180]	@ (8001e18 <DMA_Init+0x4f4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <DMA_Init+0x44c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e1c <DMA_Init+0x4f8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <DMA_Init+0x450>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <DMA_Init+0x452>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40020050 	.word	0x40020050
 8001da4:	50020050 	.word	0x50020050
 8001da8:	400200d0 	.word	0x400200d0
 8001dac:	500200d0 	.word	0x500200d0
 8001db0:	40020150 	.word	0x40020150
 8001db4:	50020150 	.word	0x50020150
 8001db8:	400201d0 	.word	0x400201d0
 8001dbc:	500201d0 	.word	0x500201d0
 8001dc0:	40020250 	.word	0x40020250
 8001dc4:	50020250 	.word	0x50020250
 8001dc8:	400202d0 	.word	0x400202d0
 8001dcc:	500202d0 	.word	0x500202d0
 8001dd0:	40020350 	.word	0x40020350
 8001dd4:	50020350 	.word	0x50020350
 8001dd8:	400203d0 	.word	0x400203d0
 8001ddc:	500203d0 	.word	0x500203d0
 8001de0:	40020450 	.word	0x40020450
 8001de4:	50020450 	.word	0x50020450
 8001de8:	400204d0 	.word	0x400204d0
 8001dec:	500204d0 	.word	0x500204d0
 8001df0:	40020550 	.word	0x40020550
 8001df4:	50020550 	.word	0x50020550
 8001df8:	400205d0 	.word	0x400205d0
 8001dfc:	500205d0 	.word	0x500205d0
 8001e00:	40020650 	.word	0x40020650
 8001e04:	50020650 	.word	0x50020650
 8001e08:	400206d0 	.word	0x400206d0
 8001e0c:	500206d0 	.word	0x500206d0
 8001e10:	40020750 	.word	0x40020750
 8001e14:	50020750 	.word	0x50020750
 8001e18:	400207d0 	.word	0x400207d0
 8001e1c:	500207d0 	.word	0x500207d0
 8001e20:	3cc03180 	.word	0x3cc03180

08001e24 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e36:	e1ba      	b.n	80021ae <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 81aa 	beq.w	80021a8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a55      	ldr	r2, [pc, #340]	@ (8001fac <HAL_GPIO_Init+0x188>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d15d      	bne.n	8001f18 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001e62:	2201      	movs	r2, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0201 	and.w	r2, r3, #1
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001e8c:	4a48      	ldr	r2, [pc, #288]	@ (8001fb0 <HAL_GPIO_Init+0x18c>)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e94:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001e96:	4a46      	ldr	r2, [pc, #280]	@ (8001fb0 <HAL_GPIO_Init+0x18c>)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220b      	movs	r2, #11
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69f9      	ldr	r1, [r7, #28]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2202      	movs	r2, #2
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e067      	b.n	8001fe8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x104>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b12      	cmp	r3, #18
 8001f26:	d145      	bne.n	8001fb4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	08da      	lsrs	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3208      	adds	r2, #8
 8001f6e:	69f9      	ldr	r1, [r7, #28]
 8001f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0203 	and.w	r2, r3, #3
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e01e      	b.n	8001fe8 <HAL_GPIO_Init+0x1c4>
 8001faa:	bf00      	nop
 8001fac:	46020000 	.word	0x46020000
 8001fb0:	0800a98c 	.word	0x0800a98c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d00b      	beq.n	8002008 <HAL_GPIO_Init+0x1e4>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d007      	beq.n	8002008 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ffc:	2b11      	cmp	r3, #17
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b12      	cmp	r3, #18
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4013      	ands	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	4313      	orrs	r3, r2
 8002030:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800203e:	2201      	movs	r2, #1
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	4013      	ands	r3, r2
 800204c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	4313      	orrs	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d017      	beq.n	80020a2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	4013      	ands	r3, r2
 8002088:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	4313      	orrs	r3, r2
 800209a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d07c      	beq.n	80021a8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80020ae:	4a47      	ldr	r2, [pc, #284]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3318      	adds	r3, #24
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	0a9a      	lsrs	r2, r3, #10
 80020d6:	4b3e      	ldr	r3, [pc, #248]	@ (80021d0 <HAL_GPIO_Init+0x3ac>)
 80020d8:	4013      	ands	r3, r2
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	f002 0203 	and.w	r2, r2, #3
 80020e0:	00d2      	lsls	r2, r2, #3
 80020e2:	4093      	lsls	r3, r2
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80020ea:	4938      	ldr	r1, [pc, #224]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3318      	adds	r3, #24
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80020f8:	4b34      	ldr	r3, [pc, #208]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43db      	mvns	r3, r3
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	4013      	ands	r3, r2
 8002106:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800211c:	4a2b      	ldr	r2, [pc, #172]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002122:	4b2a      	ldr	r3, [pc, #168]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	4013      	ands	r3, r2
 8002130:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002146:	4a21      	ldr	r2, [pc, #132]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800214c:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 800214e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002152:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	43db      	mvns	r3, r3
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	4013      	ands	r3, r2
 800215c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002172:	4a16      	ldr	r2, [pc, #88]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800217a:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 800217c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002180:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	4013      	ands	r3, r2
 800218a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80021a0:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <HAL_GPIO_Init+0x3a8>)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f47f ae3d 	bne.w	8001e38 <HAL_GPIO_Init+0x14>
  }
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	3724      	adds	r7, #36	@ 0x24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	46022000 	.word	0x46022000
 80021d0:	002f7f7f 	.word	0x002f7f7f

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	43d9      	mvns	r1, r3
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	400b      	ands	r3, r1
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	619a      	str	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e007      	b.n	8002266 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0204 	bic.w	r2, r3, #4
 800225e:	4905      	ldr	r1, [pc, #20]	@ (8002274 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40030400 	.word	0x40030400

08002278 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_ICACHE_Enable+0x1c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <HAL_ICACHE_Enable+0x1c>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40030400 	.word	0x40030400

08002298 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e108      	b.n	80024bc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7fe fbcb 	bl	8000a60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2203      	movs	r2, #3
 80022ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4a7b      	ldr	r2, [pc, #492]	@ (80024c4 <HAL_PCD_Init+0x22c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d102      	bne.n	80022e0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 ffbc 	bl	8007262 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7c1a      	ldrb	r2, [r3, #16]
 80022f2:	f88d 2000 	strb.w	r2, [sp]
 80022f6:	3304      	adds	r3, #4
 80022f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fa:	f004 fed1 	bl	80070a0 <USB_CoreInit>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d5      	b.n	80024bc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f004 ffb4 	bl	8007284 <USB_SetCurrentMode>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0c6      	b.n	80024bc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e04a      	b.n	80023ca <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3315      	adds	r3, #21
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	3314      	adds	r3, #20
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	b298      	uxth	r0, r3
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	332e      	adds	r3, #46	@ 0x2e
 8002370:	4602      	mov	r2, r0
 8002372:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3318      	adds	r3, #24
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	331c      	adds	r3, #28
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3320      	adds	r3, #32
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3324      	adds	r3, #36	@ 0x24
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	3301      	adds	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	791b      	ldrb	r3, [r3, #4]
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3af      	bcc.n	8002334 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e044      	b.n	8002464 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3301      	adds	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	791b      	ldrb	r3, [r3, #4]
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3b5      	bcc.n	80023da <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7c1a      	ldrb	r2, [r3, #16]
 8002476:	f88d 2000 	strb.w	r2, [sp]
 800247a:	3304      	adds	r3, #4
 800247c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247e:	f004 ff4d 	bl	800731c <USB_DevInit>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e013      	b.n	80024bc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7b1b      	ldrb	r3, [r3, #12]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d102      	bne.n	80024b0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f001 f96a 	bl	8003784 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f005 ff78 	bl	80083aa <USB_DevDisconnect>

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	42040000 	.word	0x42040000

080024c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_PCD_Start+0x1c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e01c      	b.n	800251e <HAL_PCD_Start+0x56>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7b5b      	ldrb	r3, [r3, #13]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f004 fe9b 	bl	8007240 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f005 ff2a 	bl	8008368 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002526:	b590      	push	{r4, r7, lr}
 8002528:	b08d      	sub	sp, #52	@ 0x34
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f005 ffe8 	bl	8008512 <USB_GetMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 84b9 	bne.w	8002ebc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f005 ff4c 	bl	80083ec <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 84af 	beq.w	8002eba <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f005 ff39 	bl	80083ec <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d107      	bne.n	8002594 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f002 0202 	and.w	r2, r2, #2
 8002592:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f005 ff27 	bl	80083ec <USB_ReadInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d161      	bne.n	800266c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0210 	bic.w	r2, r2, #16
 80025b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	0c5b      	lsrs	r3, r3, #17
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d124      	bne.n	800262e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d035      	beq.n	800265c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fe:	b29b      	uxth	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	6a38      	ldr	r0, [r7, #32]
 8002604:	f005 fd5e 	bl	80080c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002614:	441a      	add	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002626:	441a      	add	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	615a      	str	r2, [r3, #20]
 800262c:	e016      	b.n	800265c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	0c5b      	lsrs	r3, r3, #17
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	2b06      	cmp	r3, #6
 8002638:	d110      	bne.n	800265c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002640:	2208      	movs	r2, #8
 8002642:	4619      	mov	r1, r3
 8002644:	6a38      	ldr	r0, [r7, #32]
 8002646:	f005 fd3d 	bl	80080c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002656:	441a      	add	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0210 	orr.w	r2, r2, #16
 800266a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f005 febb 	bl	80083ec <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800267c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002680:	f040 80a7 	bne.w	80027d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f005 fec0 	bl	8008412 <USB_ReadDevAllOutEpInterrupt>
 8002692:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002694:	e099      	b.n	80027ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 808e 	beq.w	80027be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f005 fee4 	bl	800847a <USB_ReadDevOutEPInterrupt>
 80026b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ca:	461a      	mov	r2, r3
 80026cc:	2301      	movs	r3, #1
 80026ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fed0 	bl	8003478 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ee:	461a      	mov	r2, r3
 80026f0:	2308      	movs	r3, #8
 80026f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 ffa6 	bl	8003648 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002712:	461a      	mov	r2, r3
 8002714:	2310      	movs	r3, #16
 8002716:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d030      	beq.n	8002784 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b80      	cmp	r3, #128	@ 0x80
 800272c:	d109      	bne.n	8002742 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800273c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002740:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	3304      	adds	r3, #4
 8002756:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	78db      	ldrb	r3, [r3, #3]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d108      	bne.n	8002772 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2200      	movs	r2, #0
 8002764:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f006 fa1f 	bl	8008bb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800277e:	461a      	mov	r2, r3
 8002780:	2302      	movs	r3, #2
 8002782:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800279a:	461a      	mov	r2, r3
 800279c:	2320      	movs	r3, #32
 800279e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027b6:	461a      	mov	r2, r3
 80027b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	3301      	adds	r3, #1
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	085b      	lsrs	r3, r3, #1
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f af62 	bne.w	8002696 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f005 fe08 	bl	80083ec <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027e6:	f040 80db 	bne.w	80029a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f005 fe29 	bl	8008446 <USB_ReadDevAllInEpInterrupt>
 80027f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80027fa:	e0cd      	b.n	8002998 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80c2 	beq.w	800298c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f005 fe4f 	bl	80084b6 <USB_ReadDevInEPInterrupt>
 8002818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d057      	beq.n	80028d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	2201      	movs	r2, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	69f9      	ldr	r1, [r7, #28]
 8002840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002844:	4013      	ands	r3, r2
 8002846:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002854:	461a      	mov	r2, r3
 8002856:	2301      	movs	r3, #1
 8002858:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	799b      	ldrb	r3, [r3, #6]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d132      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	3320      	adds	r3, #32
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4403      	add	r3, r0
 8002882:	331c      	adds	r3, #28
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4419      	add	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4403      	add	r3, r0
 8002896:	3320      	adds	r3, #32
 8002898:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	2b00      	cmp	r3, #0
 800289e:	d113      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x3a2>
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3324      	adds	r3, #36	@ 0x24
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d108      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028c0:	461a      	mov	r2, r3
 80028c2:	2101      	movs	r1, #1
 80028c4:	f005 fe56 	bl	8008574 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4619      	mov	r1, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f006 f8f2 	bl	8008ab8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ea:	461a      	mov	r2, r3
 80028ec:	2308      	movs	r3, #8
 80028ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002906:	461a      	mov	r2, r3
 8002908:	2310      	movs	r3, #16
 800290a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002922:	461a      	mov	r2, r3
 8002924:	2340      	movs	r3, #64	@ 0x40
 8002926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d023      	beq.n	800297a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002932:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002934:	6a38      	ldr	r0, [r7, #32]
 8002936:	f004 fe3d 	bl	80075b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800293a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	3310      	adds	r3, #16
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	3304      	adds	r3, #4
 800294c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	78db      	ldrb	r3, [r3, #3]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f006 f936 	bl	8008bd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002974:	461a      	mov	r2, r3
 8002976:	2302      	movs	r3, #2
 8002978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002984:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fcea 	bl	8003360 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	3301      	adds	r3, #1
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299a:	2b00      	cmp	r3, #0
 800299c:	f47f af2e 	bne.w	80027fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f005 fd21 	bl	80083ec <USB_ReadInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029b4:	d122      	bne.n	80029fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d108      	bne.n	80029e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029dc:	2100      	movs	r1, #0
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f006 fab6 	bl	8008f50 <HAL_PCDEx_LPM_Callback>
 80029e4:	e002      	b.n	80029ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f006 f8c6 	bl	8008b78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80029fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f005 fcf3 	bl	80083ec <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a10:	d112      	bne.n	8002a38 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d102      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f006 f88e 	bl	8008b44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f005 fcd5 	bl	80083ec <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a4c:	d121      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002a5c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a82:	2101      	movs	r1, #1
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f006 fa63 	bl	8008f50 <HAL_PCDEx_LPM_Callback>
 8002a8a:	e002      	b.n	8002a92 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f006 f859 	bl	8008b44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f005 fca8 	bl	80083ec <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa6:	f040 80b7 	bne.w	8002c18 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2110      	movs	r1, #16
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 fd75 	bl	80075b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ace:	e046      	b.n	8002b5e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002adc:	461a      	mov	r2, r3
 8002ade:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ae2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002af4:	0151      	lsls	r1, r2, #5
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	440a      	add	r2, r1
 8002afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002afe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b10:	461a      	mov	r2, r3
 8002b12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b16:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b28:	0151      	lsls	r1, r2, #5
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b48:	0151      	lsls	r1, r2, #5
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	440a      	add	r2, r1
 8002b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b56:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	791b      	ldrb	r3, [r3, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d3b2      	bcc.n	8002ad0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b78:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7bdb      	ldrb	r3, [r3, #15]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b96:	f043 030b 	orr.w	r3, r3, #11
 8002b9a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bac:	f043 030b 	orr.w	r3, r3, #11
 8002bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb2:	e015      	b.n	8002be0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bc6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002bca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bda:	f043 030b 	orr.w	r3, r3, #11
 8002bde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002bf2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c02:	461a      	mov	r2, r3
 8002c04:	f005 fcb6 	bl	8008574 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f005 fbe5 	bl	80083ec <USB_ReadInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2c:	d123      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f005 fc7b 	bl	800852e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f004 fd32 	bl	80076a6 <USB_GetDevSpeed>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681c      	ldr	r4, [r3, #0]
 8002c4e:	f002 f839 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8002c52:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f004 fa4e 	bl	80070fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f005 ff51 	bl	8008b08 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f005 fbb6 	bl	80083ec <USB_ReadInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d10a      	bne.n	8002ca0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f005 ff2e 	bl	8008aec <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f002 0208 	and.w	r2, r2, #8
 8002c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f005 fba1 	bl	80083ec <USB_ReadInterrupts>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb0:	2b80      	cmp	r3, #128	@ 0x80
 8002cb2:	d123      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc4:	e014      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fb0a 	bl	80032fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	3301      	adds	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	791b      	ldrb	r3, [r3, #4]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d3e4      	bcc.n	8002cc6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f005 fb73 	bl	80083ec <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d10:	d13c      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d12:	2301      	movs	r3, #1
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	e02b      	b.n	8002d70 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3318      	adds	r3, #24
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d115      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da12      	bge.n	8002d6a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	3317      	adds	r3, #23
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 faca 	bl	80032fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	791b      	ldrb	r3, [r3, #4]
 8002d74:	461a      	mov	r2, r3
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d3cd      	bcc.n	8002d18 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f005 fb2b 	bl	80083ec <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002da0:	d156      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da2:	2301      	movs	r3, #1
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da6:	e045      	b.n	8002e34 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d12e      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002dd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da2b      	bge.n	8002e2e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	0c1a      	lsrs	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002de0:	4053      	eors	r3, r2
 8002de2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d121      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e2a:	6053      	str	r3, [r2, #4]
            break;
 8002e2c:	e008      	b.n	8002e40 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	3301      	adds	r3, #1
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	791b      	ldrb	r3, [r3, #4]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d3b3      	bcc.n	8002da8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 fac9 	bl	80083ec <USB_ReadInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e64:	d10a      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f005 fec6 	bl	8008bf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f005 fab3 	bl	80083ec <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d115      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f005 feb6 	bl	8008c14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	e000      	b.n	8002ebc <HAL_PCD_IRQHandler+0x996>
      return;
 8002eba:	bf00      	nop
    }
  }
}
 8002ebc:	3734      	adds	r7, #52	@ 0x34
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}

08002ec2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_SetAddress+0x1a>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e012      	b.n	8002f02 <HAL_PCD_SetAddress+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f005 fa12 	bl	800831c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	4608      	mov	r0, r1
 8002f14:	4611      	mov	r1, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	70fb      	strb	r3, [r7, #3]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	803b      	strh	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	da0f      	bge.n	8002f50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 020f 	and.w	r2, r3, #15
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	3310      	adds	r3, #16
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	3304      	adds	r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	705a      	strb	r2, [r3, #1]
 8002f4e:	e00f      	b.n	8002f70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 020f 	and.w	r2, r3, #15
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	3304      	adds	r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002f7c:	883b      	ldrh	r3, [r7, #0]
 8002f7e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	78ba      	ldrb	r2, [r7, #2]
 8002f8a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f9e:	78bb      	ldrb	r3, [r7, #2]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d102      	bne.n	8002faa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_PCD_EP_Open+0xae>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e00e      	b.n	8002fd6 <HAL_PCD_EP_Open+0xcc>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68f9      	ldr	r1, [r7, #12]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f004 fb92 	bl	80076f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	da0f      	bge.n	8003012 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 020f 	and.w	r2, r3, #15
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	3310      	adds	r3, #16
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	3304      	adds	r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	705a      	strb	r2, [r3, #1]
 8003010:	e00f      	b.n	8003032 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 020f 	and.w	r2, r3, #15
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	3304      	adds	r3, #4
 800302a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	b2da      	uxtb	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_PCD_EP_Close+0x6e>
 8003048:	2302      	movs	r3, #2
 800304a:	e00e      	b.n	800306a <HAL_PCD_EP_Close+0x8c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	4618      	mov	r0, r3
 800305c:	f004 fbd0 	bl	8007800 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	460b      	mov	r3, r1
 8003080:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003082:	7afb      	ldrb	r3, [r7, #11]
 8003084:	f003 020f 	and.w	r2, r3, #15
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	3304      	adds	r3, #4
 800309a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2200      	movs	r2, #0
 80030ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030b4:	7afb      	ldrb	r3, [r7, #11]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	799b      	ldrb	r3, [r3, #6]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d102      	bne.n	80030ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	799b      	ldrb	r3, [r3, #6]
 80030d6:	461a      	mov	r2, r3
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	f004 fc6d 	bl	80079b8 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 020f 	and.w	r2, r3, #15
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	460b      	mov	r3, r1
 8003126:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	f003 020f 	and.w	r2, r3, #15
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	3310      	adds	r3, #16
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	3304      	adds	r3, #4
 800313e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2200      	movs	r2, #0
 8003150:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2201      	movs	r2, #1
 8003156:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003158:	7afb      	ldrb	r3, [r7, #11]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	b2da      	uxtb	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	799b      	ldrb	r3, [r3, #6]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d102      	bne.n	8003172 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	799b      	ldrb	r3, [r3, #6]
 800317a:	461a      	mov	r2, r3
 800317c:	6979      	ldr	r1, [r7, #20]
 800317e:	f004 fc1b 	bl	80079b8 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	7912      	ldrb	r2, [r2, #4]
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e04f      	b.n	800324a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da0f      	bge.n	80031d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	3310      	adds	r3, #16
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	3304      	adds	r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	705a      	strb	r2, [r3, #1]
 80031d0:	e00d      	b.n	80031ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	3304      	adds	r3, #4
 80031e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_PCD_EP_SetStall+0x82>
 800320a:	2302      	movs	r3, #2
 800320c:	e01d      	b.n	800324a <HAL_PCD_EP_SetStall+0xbe>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	4618      	mov	r0, r3
 800321e:	f004 ffa9 	bl	8008174 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7999      	ldrb	r1, [r3, #6]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800323a:	461a      	mov	r2, r3
 800323c:	f005 f99a 	bl	8008574 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	7912      	ldrb	r2, [r2, #4]
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e042      	b.n	80032f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003274:	2b00      	cmp	r3, #0
 8003276:	da0f      	bge.n	8003298 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3310      	adds	r3, #16
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	705a      	strb	r2, [r3, #1]
 8003296:	e00f      	b.n	80032b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 020f 	and.w	r2, r3, #15
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	3304      	adds	r3, #4
 80032b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_PCD_EP_ClrStall+0x86>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e00e      	b.n	80032f6 <HAL_PCD_EP_ClrStall+0xa4>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68f9      	ldr	r1, [r7, #12]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f004 ffb2 	bl	8008250 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800330a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800330e:	2b00      	cmp	r3, #0
 8003310:	da0c      	bge.n	800332c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	3310      	adds	r3, #16
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	3304      	adds	r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e00c      	b.n	8003346 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	f003 020f 	and.w	r2, r3, #15
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	3304      	adds	r3, #4
 8003344:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fdd1 	bl	8007ef4 <USB_EPStopXfer>
 8003352:	4603      	mov	r3, r0
 8003354:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003356:	7afb      	ldrb	r3, [r7, #11]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	@ 0x28
 8003364:	af02      	add	r7, sp, #8
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	3310      	adds	r3, #16
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	429a      	cmp	r2, r3
 8003392:	d901      	bls.n	8003398 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e06b      	b.n	8003470 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d902      	bls.n	80033b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	3303      	adds	r3, #3
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033bc:	e02a      	b.n	8003414 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d902      	bls.n	80033da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3303      	adds	r3, #3
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	4603      	mov	r3, r0
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f004 fe26 	bl	8008048 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	441a      	add	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	441a      	add	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	429a      	cmp	r2, r3
 8003428:	d809      	bhi.n	800343e <PCD_WriteEmptyTxFifo+0xde>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003432:	429a      	cmp	r2, r3
 8003434:	d203      	bcs.n	800343e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1bf      	bne.n	80033be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	429a      	cmp	r2, r3
 8003448:	d811      	bhi.n	800346e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	2201      	movs	r2, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800345e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	43db      	mvns	r3, r3
 8003464:	6939      	ldr	r1, [r7, #16]
 8003466:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800346a:	4013      	ands	r3, r2
 800346c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	333c      	adds	r3, #60	@ 0x3c
 8003490:	3304      	adds	r3, #4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	799b      	ldrb	r3, [r3, #6]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d17b      	bne.n	80035a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	4a61      	ldr	r2, [pc, #388]	@ (8003640 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	f240 80b9 	bls.w	8003634 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80b3 	beq.w	8003634 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034da:	461a      	mov	r2, r3
 80034dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034e0:	6093      	str	r3, [r2, #8]
 80034e2:	e0a7      	b.n	8003634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034fa:	461a      	mov	r2, r3
 80034fc:	2320      	movs	r3, #32
 80034fe:	6093      	str	r3, [r2, #8]
 8003500:	e098      	b.n	8003634 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 8093 	bne.w	8003634 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	4a4b      	ldr	r2, [pc, #300]	@ (8003640 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d90f      	bls.n	8003536 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	e07e      	b.n	8003634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	3304      	adds	r3, #4
 800354a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1a      	ldr	r2, [r3, #32]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	0159      	lsls	r1, r3, #5
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	440b      	add	r3, r1
 8003558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003580:	461a      	mov	r2, r3
 8003582:	2101      	movs	r1, #1
 8003584:	f004 fff6 	bl	8008574 <USB_EP0_OutStart>
 8003588:	e006      	b.n	8003598 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	441a      	add	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f005 fa6f 	bl	8008a82 <HAL_PCD_DataOutStageCallback>
 80035a4:	e046      	b.n	8003634 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	4a26      	ldr	r2, [pc, #152]	@ (8003644 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d124      	bne.n	80035f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c4:	461a      	mov	r2, r3
 80035c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ca:	6093      	str	r3, [r2, #8]
 80035cc:	e032      	b.n	8003634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e4:	461a      	mov	r2, r3
 80035e6:	2320      	movs	r3, #32
 80035e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f005 fa46 	bl	8008a82 <HAL_PCD_DataOutStageCallback>
 80035f6:	e01d      	b.n	8003634 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d114      	bne.n	8003628 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d108      	bne.n	8003628 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003620:	461a      	mov	r2, r3
 8003622:	2100      	movs	r1, #0
 8003624:	f004 ffa6 	bl	8008574 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f005 fa27 	bl	8008a82 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	4f54300a 	.word	0x4f54300a
 8003644:	4f54310a 	.word	0x4f54310a

08003648 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	333c      	adds	r3, #60	@ 0x3c
 8003660:	3304      	adds	r3, #4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a15      	ldr	r2, [pc, #84]	@ (80036d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d90e      	bls.n	800369c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003694:	461a      	mov	r2, r3
 8003696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800369a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f005 f9de 	bl	8008a5e <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d90c      	bls.n	80036c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	799b      	ldrb	r3, [r3, #6]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d108      	bne.n	80036c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036bc:	461a      	mov	r2, r3
 80036be:	2101      	movs	r1, #1
 80036c0:	f004 ff58 	bl	8008574 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	4f54300a 	.word	0x4f54300a

080036d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	70fb      	strb	r3, [r7, #3]
 80036e0:	4613      	mov	r3, r2
 80036e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036f2:	883b      	ldrh	r3, [r7, #0]
 80036f4:	0419      	lsls	r1, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003700:	e028      	b.n	8003754 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	4413      	add	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e00d      	b.n	8003732 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	3340      	adds	r3, #64	@ 0x40
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4413      	add	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	3301      	adds	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	3b01      	subs	r3, #1
 8003738:	429a      	cmp	r2, r3
 800373a:	d3ec      	bcc.n	8003716 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800373c:	883b      	ldrh	r3, [r7, #0]
 800373e:	0418      	lsls	r0, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	3b01      	subs	r3, #1
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	4302      	orrs	r2, r0
 800374c:	3340      	adds	r3, #64	@ 0x40
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b6:	f043 0303 	orr.w	r3, r3, #3
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80037d4:	4b39      	ldr	r3, [pc, #228]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037dc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10b      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ec:	d905      	bls.n	80037fa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80037ee:	4b33      	ldr	r3, [pc, #204]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	4a32      	ldr	r2, [pc, #200]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e057      	b.n	80038ae <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003804:	d90a      	bls.n	800381c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003806:	4b2d      	ldr	r3, [pc, #180]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4313      	orrs	r3, r2
 8003812:	4a2a      	ldr	r2, [pc, #168]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003818:	60d3      	str	r3, [r2, #12]
 800381a:	e007      	b.n	800382c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800381c:	4b27      	ldr	r3, [pc, #156]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003824:	4925      	ldr	r1, [pc, #148]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4313      	orrs	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800382c:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a24      	ldr	r2, [pc, #144]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	2232      	movs	r2, #50	@ 0x32
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	4a21      	ldr	r2, [pc, #132]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	3301      	adds	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800384a:	e002      	b.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3b01      	subs	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003852:	4b1a      	ldr	r3, [pc, #104]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <HAL_PWREx_ControlVoltageScaling+0x98>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f3      	bne.n	800384c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01b      	beq.n	80038a2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800386a:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a15      	ldr	r2, [pc, #84]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003870:	fba2 2303 	umull	r2, r3, r2, r3
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	2232      	movs	r2, #50	@ 0x32
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	4a11      	ldr	r2, [pc, #68]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003888:	e002      	b.n	8003890 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b01      	subs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003890:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f3      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e000      	b.n	80038ae <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	46020800 	.word	0x46020800
 80038c0:	20000000 	.word	0x20000000
 80038c4:	10624dd3 	.word	0x10624dd3

080038c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80038cc:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	46020800 	.word	0x46020800

080038e4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80038e8:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	4a04      	ldr	r2, [pc, #16]	@ (8003900 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	6113      	str	r3, [r2, #16]
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	46020800 	.word	0x46020800

08003904 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_PWREx_EnableVddIO2+0x1c>)
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	4a04      	ldr	r2, [pc, #16]	@ (8003920 <HAL_PWREx_EnableVddIO2+0x1c>)
 800390e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003912:	6113      	str	r3, [r2, #16]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	46020800 	.word	0x46020800

08003924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08e      	sub	sp, #56	@ 0x38
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f000 bec8 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800393e:	4b99      	ldr	r3, [pc, #612]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003948:	4b96      	ldr	r3, [pc, #600]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 816c 	beq.w	8003c38 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HAL_RCC_OscConfig+0x52>
 8003966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003968:	2b0c      	cmp	r3, #12
 800396a:	f040 80de 	bne.w	8003b2a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 80da 	bne.w	8003b2a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f000 bea5 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003988:	4b86      	ldr	r3, [pc, #536]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_RCC_OscConfig+0x7a>
 8003994:	4b83      	ldr	r3, [pc, #524]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800399c:	e005      	b.n	80039aa <HAL_RCC_OscConfig+0x86>
 800399e:	4b81      	ldr	r3, [pc, #516]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 80039a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d255      	bcs.n	8003a5a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 f99d 	bl	8004cf8 <RCC_SetFlashLatencyFromMSIRange>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f000 be82 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039ca:	4b76      	ldr	r3, [pc, #472]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4a75      	ldr	r2, [pc, #468]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 80039d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039d4:	6093      	str	r3, [r2, #8]
 80039d6:	4b73      	ldr	r3, [pc, #460]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	4970      	ldr	r1, [pc, #448]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039f0:	d309      	bcc.n	8003a06 <HAL_RCC_OscConfig+0xe2>
 80039f2:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 021f 	bic.w	r2, r3, #31
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4969      	ldr	r1, [pc, #420]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
 8003a04:	e07e      	b.n	8003b04 <HAL_RCC_OscConfig+0x1e0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	da0a      	bge.n	8003a24 <HAL_RCC_OscConfig+0x100>
 8003a0e:	4b65      	ldr	r3, [pc, #404]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	015b      	lsls	r3, r3, #5
 8003a1c:	4961      	ldr	r1, [pc, #388]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]
 8003a22:	e06f      	b.n	8003b04 <HAL_RCC_OscConfig+0x1e0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2c:	d30a      	bcc.n	8003a44 <HAL_RCC_OscConfig+0x120>
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	4959      	ldr	r1, [pc, #356]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60cb      	str	r3, [r1, #12]
 8003a42:	e05f      	b.n	8003b04 <HAL_RCC_OscConfig+0x1e0>
 8003a44:	4b57      	ldr	r3, [pc, #348]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	03db      	lsls	r3, r3, #15
 8003a52:	4954      	ldr	r1, [pc, #336]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60cb      	str	r3, [r1, #12]
 8003a58:	e054      	b.n	8003b04 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003a5a:	4b52      	ldr	r3, [pc, #328]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	4a51      	ldr	r2, [pc, #324]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a64:	6093      	str	r3, [r2, #8]
 8003a66:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	494c      	ldr	r1, [pc, #304]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a80:	d309      	bcc.n	8003a96 <HAL_RCC_OscConfig+0x172>
 8003a82:	4b48      	ldr	r3, [pc, #288]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f023 021f 	bic.w	r2, r3, #31
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4945      	ldr	r1, [pc, #276]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60cb      	str	r3, [r1, #12]
 8003a94:	e028      	b.n	8003ae8 <HAL_RCC_OscConfig+0x1c4>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	da0a      	bge.n	8003ab4 <HAL_RCC_OscConfig+0x190>
 8003a9e:	4b41      	ldr	r3, [pc, #260]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	015b      	lsls	r3, r3, #5
 8003aac:	493d      	ldr	r1, [pc, #244]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60cb      	str	r3, [r1, #12]
 8003ab2:	e019      	b.n	8003ae8 <HAL_RCC_OscConfig+0x1c4>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abc:	d30a      	bcc.n	8003ad4 <HAL_RCC_OscConfig+0x1b0>
 8003abe:	4b39      	ldr	r3, [pc, #228]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	029b      	lsls	r3, r3, #10
 8003acc:	4935      	ldr	r1, [pc, #212]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
 8003ad2:	e009      	b.n	8003ae8 <HAL_RCC_OscConfig+0x1c4>
 8003ad4:	4b33      	ldr	r3, [pc, #204]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	03db      	lsls	r3, r3, #15
 8003ae2:	4930      	ldr	r1, [pc, #192]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 f900 	bl	8004cf8 <RCC_SetFlashLatencyFromMSIRange>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f000 bde5 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003b04:	f001 f8de 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b08:	4b27      	ldr	r3, [pc, #156]	@ (8003ba8 <HAL_RCC_OscConfig+0x284>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd f911 	bl	8000d34 <HAL_InitTick>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 808a 	beq.w	8003c36 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003b22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b26:	f000 bdd2 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d066      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003b32:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b3e:	f7fd f983 	bl	8000e48 <HAL_GetTick>
 8003b42:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003b44:	e009      	b.n	8003b5a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b46:	f7fd f97f 	bl	8000e48 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d902      	bls.n	8003b5a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	f000 bdba 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003b5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ef      	beq.n	8003b46 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003b66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b70:	6093      	str	r3, [r2, #8]
 8003b72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	4909      	ldr	r1, [pc, #36]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003b8c:	d30e      	bcc.n	8003bac <HAL_RCC_OscConfig+0x288>
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 021f 	bic.w	r2, r3, #31
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4902      	ldr	r1, [pc, #8]	@ (8003ba4 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60cb      	str	r3, [r1, #12]
 8003ba0:	e04a      	b.n	8003c38 <HAL_RCC_OscConfig+0x314>
 8003ba2:	bf00      	nop
 8003ba4:	46020c00 	.word	0x46020c00
 8003ba8:	20000004 	.word	0x20000004
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	da0a      	bge.n	8003bca <HAL_RCC_OscConfig+0x2a6>
 8003bb4:	4b98      	ldr	r3, [pc, #608]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	015b      	lsls	r3, r3, #5
 8003bc2:	4995      	ldr	r1, [pc, #596]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60cb      	str	r3, [r1, #12]
 8003bc8:	e036      	b.n	8003c38 <HAL_RCC_OscConfig+0x314>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd2:	d30a      	bcc.n	8003bea <HAL_RCC_OscConfig+0x2c6>
 8003bd4:	4b90      	ldr	r3, [pc, #576]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	029b      	lsls	r3, r3, #10
 8003be2:	498d      	ldr	r1, [pc, #564]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60cb      	str	r3, [r1, #12]
 8003be8:	e026      	b.n	8003c38 <HAL_RCC_OscConfig+0x314>
 8003bea:	4b8b      	ldr	r3, [pc, #556]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	03db      	lsls	r3, r3, #15
 8003bf8:	4987      	ldr	r1, [pc, #540]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60cb      	str	r3, [r1, #12]
 8003bfe:	e01b      	b.n	8003c38 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003c00:	4b85      	ldr	r3, [pc, #532]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a84      	ldr	r2, [pc, #528]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c0c:	f7fd f91c 	bl	8000e48 <HAL_GetTick>
 8003c10:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003c12:	e009      	b.n	8003c28 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c14:	f7fd f918 	bl	8000e48 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d902      	bls.n	8003c28 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	f000 bd53 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003c28:	4b7b      	ldr	r3, [pc, #492]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ef      	bne.n	8003c14 <HAL_RCC_OscConfig+0x2f0>
 8003c34:	e000      	b.n	8003c38 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003c36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 808b 	beq.w	8003d5c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x334>
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d17d      	bne.n	8003d5c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f000 bd34 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x35a>
 8003c70:	4b69      	ldr	r3, [pc, #420]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a68      	ldr	r2, [pc, #416]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	e041      	b.n	8003d02 <HAL_RCC_OscConfig+0x3de>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c86:	d112      	bne.n	8003cae <HAL_RCC_OscConfig+0x38a>
 8003c88:	4b63      	ldr	r3, [pc, #396]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a62      	ldr	r2, [pc, #392]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003c8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b60      	ldr	r3, [pc, #384]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a5f      	ldr	r2, [pc, #380]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003c9a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b5d      	ldr	r3, [pc, #372]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5c      	ldr	r2, [pc, #368]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	e029      	b.n	8003d02 <HAL_RCC_OscConfig+0x3de>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003cb6:	d112      	bne.n	8003cde <HAL_RCC_OscConfig+0x3ba>
 8003cb8:	4b57      	ldr	r3, [pc, #348]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a56      	ldr	r2, [pc, #344]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b54      	ldr	r3, [pc, #336]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a53      	ldr	r2, [pc, #332]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b51      	ldr	r3, [pc, #324]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a50      	ldr	r2, [pc, #320]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e011      	b.n	8003d02 <HAL_RCC_OscConfig+0x3de>
 8003cde:	4b4e      	ldr	r3, [pc, #312]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4d      	ldr	r2, [pc, #308]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b4b      	ldr	r3, [pc, #300]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a4a      	ldr	r2, [pc, #296]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b48      	ldr	r3, [pc, #288]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a47      	ldr	r2, [pc, #284]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003cfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d014      	beq.n	8003d34 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003d0a:	f7fd f89d 	bl	8000e48 <HAL_GetTick>
 8003d0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d10:	e009      	b.n	8003d26 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d12:	f7fd f899 	bl	8000e48 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b64      	cmp	r3, #100	@ 0x64
 8003d1e:	d902      	bls.n	8003d26 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	f000 bcd4 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d26:	4b3c      	ldr	r3, [pc, #240]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ef      	beq.n	8003d12 <HAL_RCC_OscConfig+0x3ee>
 8003d32:	e013      	b.n	8003d5c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003d34:	f7fd f888 	bl	8000e48 <HAL_GetTick>
 8003d38:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d3a:	e009      	b.n	8003d50 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd f884 	bl	8000e48 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	@ 0x64
 8003d48:	d902      	bls.n	8003d50 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	f000 bcbf 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d50:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ef      	bne.n	8003d3c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05f      	beq.n	8003e28 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x456>
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	d114      	bne.n	8003d9e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d111      	bne.n	8003d9e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f000 bca3 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003d88:	4b23      	ldr	r3, [pc, #140]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	4920      	ldr	r1, [pc, #128]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d9c:	e044      	b.n	8003e28 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d024      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003da6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1b      	ldr	r2, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003db2:	f7fd f849 	bl	8000e48 <HAL_GetTick>
 8003db6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db8:	e009      	b.n	8003dce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dba:	f7fd f845 	bl	8000e48 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d902      	bls.n	8003dce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	f000 bc80 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dce:	4b12      	ldr	r3, [pc, #72]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0ef      	beq.n	8003dba <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b0f      	ldr	r3, [pc, #60]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	490b      	ldr	r1, [pc, #44]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	610b      	str	r3, [r1, #16]
 8003dee:	e01b      	b.n	8003e28 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003df0:	4b09      	ldr	r3, [pc, #36]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a08      	ldr	r2, [pc, #32]	@ (8003e18 <HAL_RCC_OscConfig+0x4f4>)
 8003df6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dfc:	f7fd f824 	bl	8000e48 <HAL_GetTick>
 8003e00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e02:	e00b      	b.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fd f820 	bl	8000e48 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d904      	bls.n	8003e1c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	f000 bc5b 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
 8003e18:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e1c:	4baf      	ldr	r3, [pc, #700]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ed      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80c8 	beq.w	8003fc6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3c:	4ba7      	ldr	r3, [pc, #668]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d111      	bne.n	8003e6e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	4ba4      	ldr	r3, [pc, #656]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e50:	4aa2      	ldr	r2, [pc, #648]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e5a:	4ba0      	ldr	r3, [pc, #640]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e6e:	4b9c      	ldr	r3, [pc, #624]	@ (80040e0 <HAL_RCC_OscConfig+0x7bc>)
 8003e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d119      	bne.n	8003eae <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e7a:	4b99      	ldr	r3, [pc, #612]	@ (80040e0 <HAL_RCC_OscConfig+0x7bc>)
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7e:	4a98      	ldr	r2, [pc, #608]	@ (80040e0 <HAL_RCC_OscConfig+0x7bc>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fc ffdf 	bl	8000e48 <HAL_GetTick>
 8003e8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e8c:	e009      	b.n	8003ea2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8e:	f7fc ffdb 	bl	8000e48 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d902      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	f000 bc16 	b.w	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ea2:	4b8f      	ldr	r3, [pc, #572]	@ (80040e0 <HAL_RCC_OscConfig+0x7bc>)
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ef      	beq.n	8003e8e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d05f      	beq.n	8003f76 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003eb6:	4b89      	ldr	r3, [pc, #548]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ebc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d037      	beq.n	8003f3c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d006      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e3f4      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01b      	beq.n	8003f26 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003eee:	4b7b      	ldr	r3, [pc, #492]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ef4:	4a79      	ldr	r2, [pc, #484]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003ef6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003efa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003efe:	f7fc ffa3 	bl	8000e48 <HAL_GetTick>
 8003f02:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f06:	f7fc ff9f 	bl	8000e48 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b05      	cmp	r3, #5
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e3da      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f18:	4b70      	ldr	r3, [pc, #448]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1ef      	bne.n	8003f06 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003f26:	4b6d      	ldr	r3, [pc, #436]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	4969      	ldr	r1, [pc, #420]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003f3c:	4b67      	ldr	r3, [pc, #412]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f42:	4a66      	ldr	r2, [pc, #408]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003f44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003f4c:	f7fc ff7c 	bl	8000e48 <HAL_GetTick>
 8003f50:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fc ff78 	bl	8000e48 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e3b3      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f66:	4b5d      	ldr	r3, [pc, #372]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ef      	beq.n	8003f54 <HAL_RCC_OscConfig+0x630>
 8003f74:	e01b      	b.n	8003fae <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003f76:	4b59      	ldr	r3, [pc, #356]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f7c:	4a57      	ldr	r2, [pc, #348]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003f7e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003f82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003f86:	f7fc ff5f 	bl	8000e48 <HAL_GetTick>
 8003f8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8e:	f7fc ff5b 	bl	8000e48 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e396      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1ef      	bne.n	8003f8e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb6:	4b49      	ldr	r3, [pc, #292]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fbc:	4a47      	ldr	r2, [pc, #284]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003fbe:	f023 0304 	bic.w	r3, r3, #4
 8003fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8111 	beq.w	80041f6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fda:	4b40      	ldr	r3, [pc, #256]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d111      	bne.n	800400c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fee:	4a3b      	ldr	r2, [pc, #236]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003ff8:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8003ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800400c:	4b34      	ldr	r3, [pc, #208]	@ (80040e0 <HAL_RCC_OscConfig+0x7bc>)
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d118      	bne.n	800404a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004018:	4b31      	ldr	r3, [pc, #196]	@ (80040e0 <HAL_RCC_OscConfig+0x7bc>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	4a30      	ldr	r2, [pc, #192]	@ (80040e0 <HAL_RCC_OscConfig+0x7bc>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004024:	f7fc ff10 	bl	8000e48 <HAL_GetTick>
 8004028:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402c:	f7fc ff0c 	bl	8000e48 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e347      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800403e:	4b28      	ldr	r3, [pc, #160]	@ (80040e0 <HAL_RCC_OscConfig+0x7bc>)
 8004040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01f      	beq.n	8004096 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004062:	4b1e      	ldr	r3, [pc, #120]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8004064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004068:	4a1c      	ldr	r2, [pc, #112]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004072:	4b1a      	ldr	r3, [pc, #104]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8004074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004078:	4a18      	ldr	r2, [pc, #96]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004082:	e018      	b.n	80040b6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004084:	4b15      	ldr	r3, [pc, #84]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8004086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800408a:	4a14      	ldr	r2, [pc, #80]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004094:	e00f      	b.n	80040b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004096:	4b11      	ldr	r3, [pc, #68]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 8004098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800409c:	4a0f      	ldr	r2, [pc, #60]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 80040a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040ac:	4a0b      	ldr	r2, [pc, #44]	@ (80040dc <HAL_RCC_OscConfig+0x7b8>)
 80040ae:	f023 0304 	bic.w	r3, r3, #4
 80040b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d057      	beq.n	800416e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80040be:	f7fc fec3 	bl	8000e48 <HAL_GetTick>
 80040c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c4:	e00e      	b.n	80040e4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fc febf 	bl	8000e48 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d905      	bls.n	80040e4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e2f8      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
 80040dc:	46020c00 	.word	0x46020c00
 80040e0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80040e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0e9      	beq.n	80040c6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01b      	beq.n	8004136 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040fe:	4b96      	ldr	r3, [pc, #600]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004104:	4a94      	ldr	r2, [pc, #592]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800410a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fc fe9a 	bl	8000e48 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e2d3      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004126:	4b8c      	ldr	r3, [pc, #560]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800412c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ed      	beq.n	8004110 <HAL_RCC_OscConfig+0x7ec>
 8004134:	e053      	b.n	80041de <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004136:	4b88      	ldr	r3, [pc, #544]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800413c:	4a86      	ldr	r2, [pc, #536]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 800413e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004142:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fc fe7e 	bl	8000e48 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e2b7      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800415e:	4b7e      	ldr	r3, [pc, #504]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ed      	bne.n	8004148 <HAL_RCC_OscConfig+0x824>
 800416c:	e037      	b.n	80041de <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800416e:	f7fc fe6b 	bl	8000e48 <HAL_GetTick>
 8004172:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004174:	e00a      	b.n	800418c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004176:	f7fc fe67 	bl	8000e48 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e2a0      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800418c:	4b72      	ldr	r3, [pc, #456]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 800418e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ed      	bne.n	8004176 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800419a:	4b6f      	ldr	r3, [pc, #444]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 800419c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01a      	beq.n	80041de <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80041aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80041b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fc fe45 	bl	8000e48 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e27e      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041d0:	4b61      	ldr	r3, [pc, #388]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80041d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ed      	bne.n	80041ba <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80041e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80041ee:	f023 0304 	bic.w	r3, r3, #4
 80041f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d036      	beq.n	8004270 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d019      	beq.n	800423e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800420a:	4b53      	ldr	r3, [pc, #332]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a52      	ldr	r2, [pc, #328]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004210:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004214:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004216:	f7fc fe17 	bl	8000e48 <HAL_GetTick>
 800421a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800421e:	f7fc fe13 	bl	8000e48 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e24e      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004230:	4b49      	ldr	r3, [pc, #292]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x8fa>
 800423c:	e018      	b.n	8004270 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800423e:	4b46      	ldr	r3, [pc, #280]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a45      	ldr	r2, [pc, #276]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004244:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004248:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800424a:	f7fc fdfd 	bl	8000e48 <HAL_GetTick>
 800424e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004252:	f7fc fdf9 	bl	8000e48 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e234      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004264:	4b3c      	ldr	r3, [pc, #240]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f0      	bne.n	8004252 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d036      	beq.n	80042ea <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	2b00      	cmp	r3, #0
 8004282:	d019      	beq.n	80042b8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004284:	4b34      	ldr	r3, [pc, #208]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a33      	ldr	r2, [pc, #204]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 800428a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800428e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004290:	f7fc fdda 	bl	8000e48 <HAL_GetTick>
 8004294:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004298:	f7fc fdd6 	bl	8000e48 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e211      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80042aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x974>
 80042b6:	e018      	b.n	80042ea <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80042b8:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a26      	ldr	r2, [pc, #152]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80042be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80042c4:	f7fc fdc0 	bl	8000e48 <HAL_GetTick>
 80042c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80042cc:	f7fc fdbc 	bl	8000e48 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e1f7      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80042de:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07f      	beq.n	80043f6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d062      	beq.n	80043c4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80042fe:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004304:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004308:	6093      	str	r3, [r2, #8]
 800430a:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	4910      	ldr	r1, [pc, #64]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004324:	d309      	bcc.n	800433a <HAL_RCC_OscConfig+0xa16>
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f023 021f 	bic.w	r2, r3, #31
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4909      	ldr	r1, [pc, #36]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004334:	4313      	orrs	r3, r2
 8004336:	60cb      	str	r3, [r1, #12]
 8004338:	e02a      	b.n	8004390 <HAL_RCC_OscConfig+0xa6c>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	2b00      	cmp	r3, #0
 8004340:	da0c      	bge.n	800435c <HAL_RCC_OscConfig+0xa38>
 8004342:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	015b      	lsls	r3, r3, #5
 8004350:	4901      	ldr	r1, [pc, #4]	@ (8004358 <HAL_RCC_OscConfig+0xa34>)
 8004352:	4313      	orrs	r3, r2
 8004354:	60cb      	str	r3, [r1, #12]
 8004356:	e01b      	b.n	8004390 <HAL_RCC_OscConfig+0xa6c>
 8004358:	46020c00 	.word	0x46020c00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004364:	d30a      	bcc.n	800437c <HAL_RCC_OscConfig+0xa58>
 8004366:	4ba1      	ldr	r3, [pc, #644]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	029b      	lsls	r3, r3, #10
 8004374:	499d      	ldr	r1, [pc, #628]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	60cb      	str	r3, [r1, #12]
 800437a:	e009      	b.n	8004390 <HAL_RCC_OscConfig+0xa6c>
 800437c:	4b9b      	ldr	r3, [pc, #620]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	03db      	lsls	r3, r3, #15
 800438a:	4998      	ldr	r1, [pc, #608]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800438c:	4313      	orrs	r3, r2
 800438e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004390:	4b96      	ldr	r3, [pc, #600]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a95      	ldr	r2, [pc, #596]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004396:	f043 0310 	orr.w	r3, r3, #16
 800439a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800439c:	f7fc fd54 	bl	8000e48 <HAL_GetTick>
 80043a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80043a4:	f7fc fd50 	bl	8000e48 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e18b      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80043b6:	4b8d      	ldr	r3, [pc, #564]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0xa80>
 80043c2:	e018      	b.n	80043f6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80043c4:	4b89      	ldr	r3, [pc, #548]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a88      	ldr	r2, [pc, #544]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80043ca:	f023 0310 	bic.w	r3, r3, #16
 80043ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043d0:	f7fc fd3a 	bl	8000e48 <HAL_GetTick>
 80043d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80043d8:	f7fc fd36 	bl	8000e48 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e171      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80043ea:	4b80      	ldr	r3, [pc, #512]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8166 	beq.w	80046cc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004406:	4b79      	ldr	r3, [pc, #484]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b0c      	cmp	r3, #12
 8004410:	f000 80f2 	beq.w	80045f8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004418:	2b02      	cmp	r3, #2
 800441a:	f040 80c5 	bne.w	80045a8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800441e:	4b73      	ldr	r3, [pc, #460]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a72      	ldr	r2, [pc, #456]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004424:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004428:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800442a:	f7fc fd0d 	bl	8000e48 <HAL_GetTick>
 800442e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004432:	f7fc fd09 	bl	8000e48 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e144      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004444:	4b69      	ldr	r3, [pc, #420]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004450:	4b66      	ldr	r3, [pc, #408]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d111      	bne.n	8004482 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800445e:	4b63      	ldr	r3, [pc, #396]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004464:	4a61      	ldr	r2, [pc, #388]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800446e:	4b5f      	ldr	r3, [pc, #380]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004470:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004482:	4b5b      	ldr	r3, [pc, #364]	@ (80045f0 <HAL_RCC_OscConfig+0xccc>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800448a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800448e:	d102      	bne.n	8004496 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004496:	4b56      	ldr	r3, [pc, #344]	@ (80045f0 <HAL_RCC_OscConfig+0xccc>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	4a55      	ldr	r2, [pc, #340]	@ (80045f0 <HAL_RCC_OscConfig+0xccc>)
 800449c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044a0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80044a2:	4b52      	ldr	r3, [pc, #328]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044aa:	f023 0303 	bic.w	r3, r3, #3
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044b6:	3a01      	subs	r2, #1
 80044b8:	0212      	lsls	r2, r2, #8
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80044c0:	430a      	orrs	r2, r1
 80044c2:	494a      	ldr	r1, [pc, #296]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80044c8:	4b48      	ldr	r3, [pc, #288]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80044ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044cc:	4b49      	ldr	r3, [pc, #292]	@ (80045f4 <HAL_RCC_OscConfig+0xcd0>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044d4:	3a01      	subs	r2, #1
 80044d6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044de:	3a01      	subs	r2, #1
 80044e0:	0252      	lsls	r2, r2, #9
 80044e2:	b292      	uxth	r2, r2
 80044e4:	4311      	orrs	r1, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044ea:	3a01      	subs	r2, #1
 80044ec:	0412      	lsls	r2, r2, #16
 80044ee:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80044f2:	4311      	orrs	r1, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80044f8:	3a01      	subs	r2, #1
 80044fa:	0612      	lsls	r2, r2, #24
 80044fc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004500:	430a      	orrs	r2, r1
 8004502:	493a      	ldr	r1, [pc, #232]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004508:	4b38      	ldr	r3, [pc, #224]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	4a37      	ldr	r2, [pc, #220]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004518:	4a34      	ldr	r2, [pc, #208]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800451e:	4b33      	ldr	r3, [pc, #204]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004522:	4a32      	ldr	r2, [pc, #200]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004524:	f043 0310 	orr.w	r3, r3, #16
 8004528:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800452a:	4b30      	ldr	r3, [pc, #192]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	f023 020c 	bic.w	r2, r3, #12
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	492d      	ldr	r1, [pc, #180]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004538:	4313      	orrs	r3, r2
 800453a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800453c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004540:	2b01      	cmp	r3, #1
 8004542:	d105      	bne.n	8004550 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004544:	4b2a      	ldr	r3, [pc, #168]	@ (80045f0 <HAL_RCC_OscConfig+0xccc>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a29      	ldr	r2, [pc, #164]	@ (80045f0 <HAL_RCC_OscConfig+0xccc>)
 800454a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800454e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004550:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004554:	2b01      	cmp	r3, #1
 8004556:	d107      	bne.n	8004568 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004558:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800455a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800455e:	4a23      	ldr	r2, [pc, #140]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004560:	f023 0304 	bic.w	r3, r3, #4
 8004564:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004568:	4b20      	ldr	r3, [pc, #128]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004574:	f7fc fc68 	bl	8000e48 <HAL_GetTick>
 8004578:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7fc fc64 	bl	8000e48 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e09f      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800458e:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800459a:	4b14      	ldr	r3, [pc, #80]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	4a13      	ldr	r2, [pc, #76]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80045a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045a4:	6293      	str	r3, [r2, #40]	@ 0x28
 80045a6:	e091      	b.n	80046cc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80045a8:	4b10      	ldr	r3, [pc, #64]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0f      	ldr	r2, [pc, #60]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80045ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045b4:	f7fc fc48 	bl	8000e48 <HAL_GetTick>
 80045b8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fc fc44 	bl	8000e48 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e07f      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045ce:	4b07      	ldr	r3, [pc, #28]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80045da:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	4a03      	ldr	r2, [pc, #12]	@ (80045ec <HAL_RCC_OscConfig+0xcc8>)
 80045e0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80045e4:	f023 0303 	bic.w	r3, r3, #3
 80045e8:	6293      	str	r3, [r2, #40]	@ 0x28
 80045ea:	e06f      	b.n	80046cc <HAL_RCC_OscConfig+0xda8>
 80045ec:	46020c00 	.word	0x46020c00
 80045f0:	46020800 	.word	0x46020800
 80045f4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80045f8:	4b37      	ldr	r3, [pc, #220]	@ (80046d8 <HAL_RCC_OscConfig+0xdb4>)
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045fe:	4b36      	ldr	r3, [pc, #216]	@ (80046d8 <HAL_RCC_OscConfig+0xdb4>)
 8004600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004602:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	2b01      	cmp	r3, #1
 800460a:	d039      	beq.n	8004680 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0203 	and.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d132      	bne.n	8004680 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d129      	bne.n	8004680 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d122      	bne.n	8004680 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004644:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d11a      	bne.n	8004680 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	0a5b      	lsrs	r3, r3, #9
 800464e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004656:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d111      	bne.n	8004680 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004668:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d108      	bne.n	8004680 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e024      	b.n	80046ce <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004684:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <HAL_RCC_OscConfig+0xdb4>)
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	08db      	lsrs	r3, r3, #3
 800468a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004692:	429a      	cmp	r2, r3
 8004694:	d01a      	beq.n	80046cc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004696:	4b10      	ldr	r3, [pc, #64]	@ (80046d8 <HAL_RCC_OscConfig+0xdb4>)
 8004698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469a:	4a0f      	ldr	r2, [pc, #60]	@ (80046d8 <HAL_RCC_OscConfig+0xdb4>)
 800469c:	f023 0310 	bic.w	r3, r3, #16
 80046a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fc fbd1 	bl	8000e48 <HAL_GetTick>
 80046a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80046a8:	bf00      	nop
 80046aa:	f7fc fbcd 	bl	8000e48 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d0f9      	beq.n	80046aa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	4a07      	ldr	r2, [pc, #28]	@ (80046d8 <HAL_RCC_OscConfig+0xdb4>)
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <HAL_RCC_OscConfig+0xdb4>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	4a04      	ldr	r2, [pc, #16]	@ (80046d8 <HAL_RCC_OscConfig+0xdb4>)
 80046c6:	f043 0310 	orr.w	r3, r3, #16
 80046ca:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3738      	adds	r7, #56	@ 0x38
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	46020c00 	.word	0x46020c00

080046dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e1d9      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f0:	4b9b      	ldr	r3, [pc, #620]	@ (8004960 <HAL_RCC_ClockConfig+0x284>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d910      	bls.n	8004720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fe:	4b98      	ldr	r3, [pc, #608]	@ (8004960 <HAL_RCC_ClockConfig+0x284>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 020f 	bic.w	r2, r3, #15
 8004706:	4996      	ldr	r1, [pc, #600]	@ (8004960 <HAL_RCC_ClockConfig+0x284>)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	4313      	orrs	r3, r2
 800470c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470e:	4b94      	ldr	r3, [pc, #592]	@ (8004960 <HAL_RCC_ClockConfig+0x284>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d001      	beq.n	8004720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e1c1      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	d010      	beq.n	800474e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	4b8c      	ldr	r3, [pc, #560]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004738:	429a      	cmp	r2, r3
 800473a:	d908      	bls.n	800474e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800473c:	4b89      	ldr	r3, [pc, #548]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	4986      	ldr	r1, [pc, #536]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 800474a:	4313      	orrs	r3, r2
 800474c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d012      	beq.n	8004780 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	4b81      	ldr	r3, [pc, #516]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004768:	429a      	cmp	r2, r3
 800476a:	d909      	bls.n	8004780 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800476c:	4b7d      	ldr	r3, [pc, #500]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	497a      	ldr	r1, [pc, #488]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 800477c:	4313      	orrs	r3, r2
 800477e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d010      	beq.n	80047ae <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	4b74      	ldr	r3, [pc, #464]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004798:	429a      	cmp	r2, r3
 800479a:	d908      	bls.n	80047ae <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b71      	ldr	r3, [pc, #452]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	496e      	ldr	r1, [pc, #440]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d010      	beq.n	80047dc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	4b69      	ldr	r3, [pc, #420]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d908      	bls.n	80047dc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80047ca:	4b66      	ldr	r3, [pc, #408]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 020f 	bic.w	r2, r3, #15
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	4963      	ldr	r1, [pc, #396]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80d2 	beq.w	800498e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d143      	bne.n	800487e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80047f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d110      	bne.n	8004826 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004804:	4b57      	ldr	r3, [pc, #348]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800480a:	4a56      	ldr	r2, [pc, #344]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004814:	4b53      	ldr	r3, [pc, #332]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004826:	f7fc fb0f 	bl	8000e48 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800482c:	4b4e      	ldr	r3, [pc, #312]	@ (8004968 <HAL_RCC_ClockConfig+0x28c>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00f      	beq.n	8004858 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800483a:	f7fc fb05 	bl	8000e48 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e12b      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800484c:	4b46      	ldr	r3, [pc, #280]	@ (8004968 <HAL_RCC_ClockConfig+0x28c>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4b41      	ldr	r3, [pc, #260]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004864:	4a3f      	ldr	r2, [pc, #252]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004866:	f023 0304 	bic.w	r3, r3, #4
 800486a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800486e:	4b3d      	ldr	r3, [pc, #244]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d121      	bne.n	80048be <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e112      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d107      	bne.n	8004896 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004886:	4b37      	ldr	r3, [pc, #220]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d115      	bne.n	80048be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e106      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800489e:	4b31      	ldr	r3, [pc, #196]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e0fa      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e0f2      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80048be:	4b29      	ldr	r3, [pc, #164]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f023 0203 	bic.w	r2, r3, #3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4926      	ldr	r1, [pc, #152]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80048d0:	f7fc faba 	bl	8000e48 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d112      	bne.n	8004904 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e0:	f7fc fab2 	bl	8000e48 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e0d6      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d1ee      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x204>
 8004902:	e044      	b.n	800498e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d112      	bne.n	8004932 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800490c:	e00a      	b.n	8004924 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490e:	f7fc fa9b 	bl	8000e48 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e0bf      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004924:	4b0f      	ldr	r3, [pc, #60]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	2b08      	cmp	r3, #8
 800492e:	d1ee      	bne.n	800490e <HAL_RCC_ClockConfig+0x232>
 8004930:	e02d      	b.n	800498e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d123      	bne.n	8004982 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800493a:	e00a      	b.n	8004952 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493c:	f7fc fa84 	bl	8000e48 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e0a8      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004952:	4b04      	ldr	r3, [pc, #16]	@ (8004964 <HAL_RCC_ClockConfig+0x288>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1ee      	bne.n	800493c <HAL_RCC_ClockConfig+0x260>
 800495e:	e016      	b.n	800498e <HAL_RCC_ClockConfig+0x2b2>
 8004960:	40022000 	.word	0x40022000
 8004964:	46020c00 	.word	0x46020c00
 8004968:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fc fa6c 	bl	8000e48 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e090      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004982:	4b4a      	ldr	r3, [pc, #296]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b04      	cmp	r3, #4
 800498c:	d1ee      	bne.n	800496c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	4b43      	ldr	r3, [pc, #268]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d208      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80049aa:	4b40      	ldr	r3, [pc, #256]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 020f 	bic.w	r2, r3, #15
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	493d      	ldr	r1, [pc, #244]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049bc:	4b3c      	ldr	r3, [pc, #240]	@ (8004ab0 <HAL_RCC_ClockConfig+0x3d4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d210      	bcs.n	80049ec <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ca:	4b39      	ldr	r3, [pc, #228]	@ (8004ab0 <HAL_RCC_ClockConfig+0x3d4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 020f 	bic.w	r2, r3, #15
 80049d2:	4937      	ldr	r1, [pc, #220]	@ (8004ab0 <HAL_RCC_ClockConfig+0x3d4>)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b35      	ldr	r3, [pc, #212]	@ (8004ab0 <HAL_RCC_ClockConfig+0x3d4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e05b      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d010      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	4b2b      	ldr	r3, [pc, #172]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d208      	bcs.n	8004a1a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004a08:	4b28      	ldr	r3, [pc, #160]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4925      	ldr	r1, [pc, #148]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d012      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	4b20      	ldr	r3, [pc, #128]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d209      	bcs.n	8004a4c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004a38:	4b1c      	ldr	r3, [pc, #112]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	4919      	ldr	r1, [pc, #100]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d010      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	4b13      	ldr	r3, [pc, #76]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d208      	bcs.n	8004a7a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004a68:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	490d      	ldr	r1, [pc, #52]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a7a:	f000 f821 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <HAL_RCC_ClockConfig+0x3d0>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	490a      	ldr	r1, [pc, #40]	@ (8004ab4 <HAL_RCC_ClockConfig+0x3d8>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	4a09      	ldr	r2, [pc, #36]	@ (8004ab8 <HAL_RCC_ClockConfig+0x3dc>)
 8004a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a94:	4b09      	ldr	r3, [pc, #36]	@ (8004abc <HAL_RCC_ClockConfig+0x3e0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fc f94b 	bl	8000d34 <HAL_InitTick>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	46020c00 	.word	0x46020c00
 8004ab0:	40022000 	.word	0x40022000
 8004ab4:	0800a93c 	.word	0x0800a93c
 8004ab8:	20000000 	.word	0x20000000
 8004abc:	20000004 	.word	0x20000004

08004ac0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b08b      	sub	sp, #44	@ 0x2c
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ace:	4b78      	ldr	r3, [pc, #480]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad8:	4b75      	ldr	r3, [pc, #468]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d121      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d11e      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004af4:	4b6e      	ldr	r3, [pc, #440]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004b00:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b06:	0b1b      	lsrs	r3, r3, #12
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0e:	e005      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004b10:	4b67      	ldr	r3, [pc, #412]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	0f1b      	lsrs	r3, r3, #28
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b1c:	4a65      	ldr	r2, [pc, #404]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d110      	bne.n	8004b4e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b30:	e00d      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b32:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d102      	bne.n	8004b44 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	e004      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004b4c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b0c      	cmp	r3, #12
 8004b52:	f040 80a5 	bne.w	8004ca0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004b56:	4b56      	ldr	r3, [pc, #344]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004b60:	4b53      	ldr	r3, [pc, #332]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004b6e:	4b50      	ldr	r3, [pc, #320]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	08db      	lsrs	r3, r3, #3
 8004b80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d003      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xe4>
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d022      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x128>
 8004ba2:	e043      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bae:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004cbc <HAL_RCC_GetSysClockFreq+0x1fc>
 8004bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bc6:	ed97 6a01 	vldr	s12, [r7, #4]
 8004bca:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004cc0 <HAL_RCC_GetSysClockFreq+0x200>
 8004bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be6:	e046      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004cbc <HAL_RCC_GetSysClockFreq+0x1fc>
 8004bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c0a:	ed97 6a01 	vldr	s12, [r7, #4]
 8004c0e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004cc0 <HAL_RCC_GetSysClockFreq+0x200>
 8004c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c2a:	e024      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c44:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c54:	ed97 6a01 	vldr	s12, [r7, #4]
 8004c58:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004cc0 <HAL_RCC_GetSysClockFreq+0x200>
 8004c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c74:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004c76:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7a:	0e1b      	lsrs	r3, r3, #24
 8004c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c80:	3301      	adds	r3, #1
 8004c82:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c9a:	ee17 3a90 	vmov	r3, s15
 8004c9e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	372c      	adds	r7, #44	@ 0x2c
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	46020c00 	.word	0x46020c00
 8004cb4:	0800a94c 	.word	0x0800a94c
 8004cb8:	00f42400 	.word	0x00f42400
 8004cbc:	4b742400 	.word	0x4b742400
 8004cc0:	46000000 	.word	0x46000000

08004cc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004cc8:	f7ff fefa 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b07      	ldr	r3, [pc, #28]	@ (8004cec <HAL_RCC_GetHCLKFreq+0x28>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	4906      	ldr	r1, [pc, #24]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004cd8:	5ccb      	ldrb	r3, [r1, r3]
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	4a05      	ldr	r2, [pc, #20]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ce0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004ce2:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	46020c00 	.word	0x46020c00
 8004cf0:	0800a93c 	.word	0x0800a93c
 8004cf4:	20000000 	.word	0x20000000

08004cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d00:	4b3e      	ldr	r3, [pc, #248]	@ (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d0e:	f7fe fddb 	bl	80038c8 <HAL_PWREx_GetVoltageRange>
 8004d12:	6178      	str	r0, [r7, #20]
 8004d14:	e019      	b.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d16:	4b39      	ldr	r3, [pc, #228]	@ (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d1c:	4a37      	ldr	r2, [pc, #220]	@ (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d1e:	f043 0304 	orr.w	r3, r3, #4
 8004d22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004d26:	4b35      	ldr	r3, [pc, #212]	@ (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d34:	f7fe fdc8 	bl	80038c8 <HAL_PWREx_GetVoltageRange>
 8004d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d3a:	4b30      	ldr	r3, [pc, #192]	@ (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d40:	4a2e      	ldr	r2, [pc, #184]	@ (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d42:	f023 0304 	bic.w	r3, r3, #4
 8004d46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d50:	d003      	beq.n	8004d5a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d58:	d109      	bne.n	8004d6e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d60:	d202      	bcs.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004d62:	2301      	movs	r3, #1
 8004d64:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d66:	e033      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d6c:	e030      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d74:	d208      	bcs.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d7c:	d102      	bne.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004d7e:	2303      	movs	r3, #3
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e025      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e035      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d8e:	d90f      	bls.n	8004db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d9c:	d902      	bls.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	e015      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004da4:	2301      	movs	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e012      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e00f      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004db6:	d109      	bne.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dbe:	d102      	bne.n	8004dc6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e004      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	e001      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004dcc:	2301      	movs	r3, #1
 8004dce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 020f 	bic.w	r2, r3, #15
 8004dd8:	4909      	ldr	r1, [pc, #36]	@ (8004e00 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004de0:	4b07      	ldr	r3, [pc, #28]	@ (8004e00 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d001      	beq.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	46020c00 	.word	0x46020c00
 8004e00:	40022000 	.word	0x40022000

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b0b8      	sub	sp, #224	@ 0xe0
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e10:	2300      	movs	r3, #0
 8004e12:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e16:	2300      	movs	r3, #0
 8004e18:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f002 0401 	and.w	r4, r2, #1
 8004e28:	2500      	movs	r5, #0
 8004e2a:	ea54 0305 	orrs.w	r3, r4, r5
 8004e2e:	d00b      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004e30:	4bca      	ldr	r3, [pc, #808]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e36:	f023 0103 	bic.w	r1, r3, #3
 8004e3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e40:	4ac6      	ldr	r2, [pc, #792]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f002 0802 	and.w	r8, r2, #2
 8004e54:	f04f 0900 	mov.w	r9, #0
 8004e58:	ea58 0309 	orrs.w	r3, r8, r9
 8004e5c:	d00b      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004e5e:	4bbf      	ldr	r3, [pc, #764]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e64:	f023 010c 	bic.w	r1, r3, #12
 8004e68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6e:	4abb      	ldr	r2, [pc, #748]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f002 0a04 	and.w	sl, r2, #4
 8004e82:	f04f 0b00 	mov.w	fp, #0
 8004e86:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004e8c:	4bb3      	ldr	r3, [pc, #716]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e92:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9c:	4aaf      	ldr	r2, [pc, #700]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f002 0308 	and.w	r3, r2, #8
 8004eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004eba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004ec4:	4ba5      	ldr	r3, [pc, #660]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed4:	4aa1      	ldr	r2, [pc, #644]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f002 0310 	and.w	r3, r2, #16
 8004ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ef2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d00b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004efc:	4b97      	ldr	r3, [pc, #604]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0c:	4a93      	ldr	r2, [pc, #588]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f002 0320 	and.w	r3, r2, #32
 8004f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f24:	2300      	movs	r3, #0
 8004f26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4313      	orrs	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004f34:	4b89      	ldr	r3, [pc, #548]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f3a:	f023 0107 	bic.w	r1, r3, #7
 8004f3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f44:	4a85      	ldr	r2, [pc, #532]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f46:	430b      	orrs	r3, r1
 8004f48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f62:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f72:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f7c:	4a77      	ldr	r2, [pc, #476]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004f90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f94:	2300      	movs	r3, #0
 8004f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f9a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004fa4:	4b6d      	ldr	r3, [pc, #436]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004faa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb4:	4a69      	ldr	r2, [pc, #420]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fd2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004fdc:	4b5f      	ldr	r3, [pc, #380]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fe2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004fe6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fec:	4a5b      	ldr	r2, [pc, #364]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005000:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005004:	2300      	movs	r3, #0
 8005006:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800500a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	d00b      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005014:	4b51      	ldr	r3, [pc, #324]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800501a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800501e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005024:	4a4d      	ldr	r2, [pc, #308]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005026:	430b      	orrs	r3, r1
 8005028:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800502c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005038:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800503c:	2300      	movs	r3, #0
 800503e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005042:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005046:	460b      	mov	r3, r1
 8005048:	4313      	orrs	r3, r2
 800504a:	d00b      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800504c:	4b43      	ldr	r3, [pc, #268]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800504e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005052:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800505a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800505c:	4a3f      	ldr	r2, [pc, #252]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800505e:	430b      	orrs	r3, r1
 8005060:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005070:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800507a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	d00b      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005084:	4b35      	ldr	r3, [pc, #212]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800508a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800508e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005094:	4a31      	ldr	r2, [pc, #196]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005096:	430b      	orrs	r3, r1
 8005098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800509c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050aa:	2300      	movs	r3, #0
 80050ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80050b2:	460b      	mov	r3, r1
 80050b4:	4313      	orrs	r3, r2
 80050b6:	d00c      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80050b8:	4b28      	ldr	r3, [pc, #160]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80050ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ca:	4a24      	ldr	r2, [pc, #144]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80050cc:	430b      	orrs	r3, r1
 80050ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80050de:	673b      	str	r3, [r7, #112]	@ 0x70
 80050e0:	2300      	movs	r3, #0
 80050e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80050e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80050e8:	460b      	mov	r3, r1
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d04f      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80050ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f6:	2b80      	cmp	r3, #128	@ 0x80
 80050f8:	d02d      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80050fa:	2b80      	cmp	r3, #128	@ 0x80
 80050fc:	d827      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050fe:	2b60      	cmp	r3, #96	@ 0x60
 8005100:	d02e      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005102:	2b60      	cmp	r3, #96	@ 0x60
 8005104:	d823      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005106:	2b40      	cmp	r3, #64	@ 0x40
 8005108:	d006      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800510a:	2b40      	cmp	r3, #64	@ 0x40
 800510c:	d81f      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8005112:	2b20      	cmp	r3, #32
 8005114:	d011      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005116:	e01a      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005118:	4b10      	ldr	r3, [pc, #64]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800511a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511c:	4a0f      	ldr	r2, [pc, #60]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800511e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005122:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005124:	e01d      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005126:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800512a:	3308      	adds	r3, #8
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fc0d 	bl	800594c <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005138:	e013      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800513a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800513e:	332c      	adds	r3, #44	@ 0x2c
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fc9b 	bl	8005a7c <RCCEx_PLL3_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800514c:	e009      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005154:	e005      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8005156:	bf00      	nop
 8005158:	e003      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800515a:	bf00      	nop
 800515c:	46020c00 	.word	0x46020c00
        break;
 8005160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005162:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10d      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800516a:	4bb6      	ldr	r3, [pc, #728]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800516c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005170:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517c:	4ab1      	ldr	r2, [pc, #708]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800517e:	430b      	orrs	r3, r1
 8005180:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005184:	e003      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005186:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800518a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800518e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800519a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800519c:	2300      	movs	r3, #0
 800519e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80051a4:	460b      	mov	r3, r1
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d053      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80051aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b6:	d033      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80051b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051bc:	d82c      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80051be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051c2:	d02f      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80051c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051c8:	d826      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80051ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ce:	d008      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d4:	d820      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80051da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051de:	d011      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80051e0:	e01a      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051e2:	4b98      	ldr	r3, [pc, #608]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	4a97      	ldr	r2, [pc, #604]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051ee:	e01a      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051f4:	3308      	adds	r3, #8
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fba8 	bl	800594c <RCCEx_PLL2_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005202:	e010      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005208:	332c      	adds	r3, #44	@ 0x2c
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fc36 	bl	8005a7c <RCCEx_PLL3_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005216:	e006      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800521e:	e002      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005220:	bf00      	nop
 8005222:	e000      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005226:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10d      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800522e:	4b85      	ldr	r3, [pc, #532]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005230:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005234:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005238:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800523c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005240:	4a80      	ldr	r2, [pc, #512]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005242:	430b      	orrs	r3, r1
 8005244:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005248:	e003      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800524e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005252:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800525e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005260:	2300      	movs	r3, #0
 8005262:	667b      	str	r3, [r7, #100]	@ 0x64
 8005264:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d046      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800526e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005276:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800527a:	d028      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800527c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005280:	d821      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005282:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005286:	d022      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005288:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800528c:	d81b      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800528e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005292:	d01c      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005294:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005298:	d815      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800529e:	d008      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80052a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a4:	d80f      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d011      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ae:	d00e      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80052b0:	e009      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052b6:	3308      	adds	r3, #8
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fb47 	bl	800594c <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052c4:	e004      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052cc:	e000      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80052ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10d      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80052d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052de:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052ea:	4a56      	ldr	r2, [pc, #344]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052ec:	430b      	orrs	r3, r1
 80052ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052f2:	e003      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052f8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80052fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800530a:	2300      	movs	r3, #0
 800530c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800530e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005312:	460b      	mov	r3, r1
 8005314:	4313      	orrs	r3, r2
 8005316:	d03f      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005318:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005320:	2b04      	cmp	r3, #4
 8005322:	d81e      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8005324:	a201      	add	r2, pc, #4	@ (adr r2, 800532c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	0800536b 	.word	0x0800536b
 8005330:	08005341 	.word	0x08005341
 8005334:	0800534f 	.word	0x0800534f
 8005338:	0800536b 	.word	0x0800536b
 800533c:	0800536b 	.word	0x0800536b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005340:	4b40      	ldr	r3, [pc, #256]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	4a3f      	ldr	r2, [pc, #252]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800534c:	e00e      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800534e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005352:	332c      	adds	r3, #44	@ 0x2c
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fb91 	bl	8005a7c <RCCEx_PLL3_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005360:	e004      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005368:	e000      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800536a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800536c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10d      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005374:	4b33      	ldr	r3, [pc, #204]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005376:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800537a:	f023 0107 	bic.w	r1, r3, #7
 800537e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005386:	4a2f      	ldr	r2, [pc, #188]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005388:	430b      	orrs	r3, r1
 800538a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800538e:	e003      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005394:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80053a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a6:	2300      	movs	r3, #0
 80053a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80053aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80053ae:	460b      	mov	r3, r1
 80053b0:	4313      	orrs	r3, r2
 80053b2:	d04d      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80053b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053c0:	d028      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80053c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053c6:	d821      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80053c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053cc:	d024      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80053ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053d2:	d81b      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80053d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053d8:	d00e      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80053da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053de:	d815      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01b      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x618>
 80053e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e8:	d110      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053ea:	4b16      	ldr	r3, [pc, #88]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	4a15      	ldr	r2, [pc, #84]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80053f6:	e012      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053fc:	332c      	adds	r3, #44	@ 0x2c
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fb3c 	bl	8005a7c <RCCEx_PLL3_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800540a:	e008      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005412:	e004      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005414:	bf00      	nop
 8005416:	e002      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800541c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800541e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005422:	2b00      	cmp	r3, #0
 8005424:	d110      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005426:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800542c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005438:	4a02      	ldr	r2, [pc, #8]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800543a:	430b      	orrs	r3, r1
 800543c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005440:	e006      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005442:	bf00      	nop
 8005444:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800544c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800545c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800545e:	2300      	movs	r3, #0
 8005460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005462:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005466:	460b      	mov	r3, r1
 8005468:	4313      	orrs	r3, r2
 800546a:	f000 80b5 	beq.w	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005474:	4b9d      	ldr	r3, [pc, #628]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d113      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005482:	4b9a      	ldr	r3, [pc, #616]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005488:	4a98      	ldr	r2, [pc, #608]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800548a:	f043 0304 	orr.w	r3, r3, #4
 800548e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005492:	4b96      	ldr	r3, [pc, #600]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80054aa:	4b91      	ldr	r3, [pc, #580]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	4a90      	ldr	r2, [pc, #576]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054b6:	f7fb fcc7 	bl	8000e48 <HAL_GetTick>
 80054ba:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054be:	e00b      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c0:	f7fb fcc2 	bl	8000e48 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d903      	bls.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054d6:	e005      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054d8:	4b85      	ldr	r3, [pc, #532]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0ed      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80054e4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d165      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054ec:	4b7f      	ldr	r3, [pc, #508]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80054fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d023      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8005502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005506:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800550a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800550e:	4293      	cmp	r3, r2
 8005510:	d01b      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005512:	4b76      	ldr	r3, [pc, #472]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800551c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005520:	4b72      	ldr	r3, [pc, #456]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005526:	4a71      	ldr	r2, [pc, #452]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800552c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005530:	4b6e      	ldr	r3, [pc, #440]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005536:	4a6d      	ldr	r2, [pc, #436]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800553c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005540:	4a6a      	ldr	r2, [pc, #424]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005546:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800554a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d019      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fb fc77 	bl	8000e48 <HAL_GetTick>
 800555a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555e:	e00d      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fb fc72 	bl	8000e48 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800556a:	1ad2      	subs	r2, r2, r3
 800556c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005570:	429a      	cmp	r2, r3
 8005572:	d903      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800557a:	e006      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800557c:	4b5b      	ldr	r3, [pc, #364]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800557e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0ea      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800558a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10d      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005592:	4b56      	ldr	r3, [pc, #344]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005598:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800559c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80055a4:	4a51      	ldr	r2, [pc, #324]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80055a6:	430b      	orrs	r3, r1
 80055a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80055ac:	e008      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80055b2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80055b6:	e003      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80055bc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055c0:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d107      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c8:	4b48      	ldr	r3, [pc, #288]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80055ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ce:	4a47      	ldr	r2, [pc, #284]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80055d0:	f023 0304 	bic.w	r3, r3, #4
 80055d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80055d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80055e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055e6:	2300      	movs	r3, #0
 80055e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80055ee:	460b      	mov	r3, r1
 80055f0:	4313      	orrs	r3, r2
 80055f2:	d042      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80055f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055fc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005600:	d022      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005602:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005606:	d81b      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800560c:	d011      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800560e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005612:	d815      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d019      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800561c:	d110      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800561e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005622:	3308      	adds	r3, #8
 8005624:	4618      	mov	r0, r3
 8005626:	f000 f991 	bl	800594c <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005630:	e00d      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005632:	4b2e      	ldr	r3, [pc, #184]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	4a2d      	ldr	r2, [pc, #180]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800563c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800563e:	e006      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005646:	e002      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005648:	bf00      	nop
 800564a:	e000      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800564c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800564e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005656:	4b25      	ldr	r3, [pc, #148]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800565c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005664:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005668:	4a20      	ldr	r2, [pc, #128]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800566a:	430b      	orrs	r3, r1
 800566c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005670:	e003      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005676:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800567a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005686:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005688:	2300      	movs	r3, #0
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800568c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005690:	460b      	mov	r3, r1
 8005692:	4313      	orrs	r3, r2
 8005694:	d032      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800569a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800569e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056a2:	d00b      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80056a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056a8:	d804      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80056ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b2:	d007      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80056ba:	e004      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80056bc:	bf00      	nop
 80056be:	e002      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80056c0:	bf00      	nop
 80056c2:	e000      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80056c4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80056c6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d112      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80056ce:	4b07      	ldr	r3, [pc, #28]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80056d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e0:	4a02      	ldr	r2, [pc, #8]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80056e2:	430b      	orrs	r3, r1
 80056e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056e8:	e008      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80056ea:	bf00      	nop
 80056ec:	46020c00 	.word	0x46020c00
 80056f0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056f8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80056fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005708:	633b      	str	r3, [r7, #48]	@ 0x30
 800570a:	2300      	movs	r3, #0
 800570c:	637b      	str	r3, [r7, #52]	@ 0x34
 800570e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005712:	460b      	mov	r3, r1
 8005714:	4313      	orrs	r3, r2
 8005716:	d019      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800571c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005724:	d105      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005726:	4b88      	ldr	r3, [pc, #544]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	4a87      	ldr	r2, [pc, #540]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005730:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005732:	4b85      	ldr	r3, [pc, #532]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005734:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005738:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800573c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005744:	4a80      	ldr	r2, [pc, #512]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005746:	430b      	orrs	r3, r1
 8005748:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800574c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800575a:	2300      	movs	r3, #0
 800575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800575e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005762:	460b      	mov	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	d00c      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005768:	4b77      	ldr	r3, [pc, #476]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800576a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800576e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005772:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800577a:	4973      	ldr	r1, [pc, #460]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005782:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800578e:	623b      	str	r3, [r7, #32]
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
 8005794:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005798:	460b      	mov	r3, r1
 800579a:	4313      	orrs	r3, r2
 800579c:	d00c      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800579e:	4b6a      	ldr	r3, [pc, #424]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057b0:	4965      	ldr	r1, [pc, #404]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80057b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80057ce:	460b      	mov	r3, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	d00c      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80057d4:	4b5c      	ldr	r3, [pc, #368]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057da:	f023 0218 	bic.w	r2, r3, #24
 80057de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057e6:	4958      	ldr	r1, [pc, #352]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005804:	460b      	mov	r3, r1
 8005806:	4313      	orrs	r3, r2
 8005808:	d032      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800580a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800580e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005812:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005816:	d105      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005818:	4b4b      	ldr	r3, [pc, #300]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	4a4a      	ldr	r2, [pc, #296]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800581e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005822:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005828:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800582c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005830:	d108      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005836:	3308      	adds	r3, #8
 8005838:	4618      	mov	r0, r3
 800583a:	f000 f887 	bl	800594c <RCCEx_PLL2_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005844:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10d      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800584c:	4b3e      	ldr	r3, [pc, #248]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800584e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800585a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800585e:	493a      	ldr	r1, [pc, #232]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005866:	e003      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005868:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800586c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005886:	460b      	mov	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	d03a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800588c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005894:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005898:	d00e      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800589a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800589e:	d815      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d017      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80058a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058a8:	d110      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058aa:	4b27      	ldr	r3, [pc, #156]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	4a26      	ldr	r2, [pc, #152]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80058b6:	e00e      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058bc:	3308      	adds	r3, #8
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f844 	bl	800594c <RCCEx_PLL2_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80058ca:	e004      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80058d2:	e000      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80058d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80058d6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80058de:	4b1a      	ldr	r3, [pc, #104]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058f0:	4915      	ldr	r1, [pc, #84]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80058f8:	e003      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058fe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005902:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	607b      	str	r3, [r7, #4]
 8005914:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005918:	460b      	mov	r3, r1
 800591a:	4313      	orrs	r3, r2
 800591c:	d00c      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800591e:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005924:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005928:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800592c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005930:	4905      	ldr	r1, [pc, #20]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005938:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 800593c:	4618      	mov	r0, r3
 800593e:	37e0      	adds	r7, #224	@ 0xe0
 8005940:	46bd      	mov	sp, r7
 8005942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005946:	bf00      	nop
 8005948:	46020c00 	.word	0x46020c00

0800594c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005954:	4b47      	ldr	r3, [pc, #284]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a46      	ldr	r2, [pc, #280]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 800595a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800595e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005960:	f7fb fa72 	bl	8000e48 <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005966:	e008      	b.n	800597a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005968:	f7fb fa6e 	bl	8000e48 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e077      	b.n	8005a6a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800597a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005986:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6811      	ldr	r1, [r2, #0]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6852      	ldr	r2, [r2, #4]
 800599a:	3a01      	subs	r2, #1
 800599c:	0212      	lsls	r2, r2, #8
 800599e:	430a      	orrs	r2, r1
 80059a0:	4934      	ldr	r1, [pc, #208]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80059a6:	4b33      	ldr	r3, [pc, #204]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 80059a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059aa:	4b33      	ldr	r3, [pc, #204]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6892      	ldr	r2, [r2, #8]
 80059b2:	3a01      	subs	r2, #1
 80059b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	68d2      	ldr	r2, [r2, #12]
 80059bc:	3a01      	subs	r2, #1
 80059be:	0252      	lsls	r2, r2, #9
 80059c0:	b292      	uxth	r2, r2
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6912      	ldr	r2, [r2, #16]
 80059c8:	3a01      	subs	r2, #1
 80059ca:	0412      	lsls	r2, r2, #16
 80059cc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80059d0:	4311      	orrs	r1, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6952      	ldr	r2, [r2, #20]
 80059d6:	3a01      	subs	r2, #1
 80059d8:	0612      	lsls	r2, r2, #24
 80059da:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80059de:	430a      	orrs	r2, r1
 80059e0:	4924      	ldr	r1, [pc, #144]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80059e6:	4b23      	ldr	r3, [pc, #140]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 80059e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ea:	f023 020c 	bic.w	r2, r3, #12
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	4920      	ldr	r1, [pc, #128]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80059f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 80059fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	491c      	ldr	r1, [pc, #112]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005a06:	4b1b      	ldr	r3, [pc, #108]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a0c:	f023 0310 	bic.w	r3, r3, #16
 8005a10:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a12:	4b18      	ldr	r3, [pc, #96]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a1a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	69d2      	ldr	r2, [r2, #28]
 8005a22:	00d2      	lsls	r2, r2, #3
 8005a24:	4913      	ldr	r1, [pc, #76]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005a2a:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	4a11      	ldr	r2, [pc, #68]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a30:	f043 0310 	orr.w	r3, r3, #16
 8005a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005a36:	4b0f      	ldr	r3, [pc, #60]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a40:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a42:	f7fb fa01 	bl	8000e48 <HAL_GetTick>
 8005a46:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a48:	e008      	b.n	8005a5c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a4a:	f7fb f9fd 	bl	8000e48 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e006      	b.n	8005a6a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a5c:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <RCCEx_PLL2_Config+0x128>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0

}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	46020c00 	.word	0x46020c00
 8005a78:	80800000 	.word	0x80800000

08005a7c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005a84:	4b47      	ldr	r3, [pc, #284]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a46      	ldr	r2, [pc, #280]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a90:	f7fb f9da 	bl	8000e48 <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a96:	e008      	b.n	8005aaa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a98:	f7fb f9d6 	bl	8000e48 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e077      	b.n	8005b9a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f0      	bne.n	8005a98 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6852      	ldr	r2, [r2, #4]
 8005aca:	3a01      	subs	r2, #1
 8005acc:	0212      	lsls	r2, r2, #8
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	4934      	ldr	r1, [pc, #208]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	630b      	str	r3, [r1, #48]	@ 0x30
 8005ad6:	4b33      	ldr	r3, [pc, #204]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ada:	4b33      	ldr	r3, [pc, #204]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6892      	ldr	r2, [r2, #8]
 8005ae2:	3a01      	subs	r2, #1
 8005ae4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	68d2      	ldr	r2, [r2, #12]
 8005aec:	3a01      	subs	r2, #1
 8005aee:	0252      	lsls	r2, r2, #9
 8005af0:	b292      	uxth	r2, r2
 8005af2:	4311      	orrs	r1, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6912      	ldr	r2, [r2, #16]
 8005af8:	3a01      	subs	r2, #1
 8005afa:	0412      	lsls	r2, r2, #16
 8005afc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005b00:	4311      	orrs	r1, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6952      	ldr	r2, [r2, #20]
 8005b06:	3a01      	subs	r2, #1
 8005b08:	0612      	lsls	r2, r2, #24
 8005b0a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	4924      	ldr	r1, [pc, #144]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005b16:	4b23      	ldr	r3, [pc, #140]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	f023 020c 	bic.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	4920      	ldr	r1, [pc, #128]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005b28:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	491c      	ldr	r1, [pc, #112]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005b36:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b3c:	f023 0310 	bic.w	r3, r3, #16
 8005b40:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b42:	4b18      	ldr	r3, [pc, #96]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b4a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	69d2      	ldr	r2, [r2, #28]
 8005b52:	00d2      	lsls	r2, r2, #3
 8005b54:	4913      	ldr	r1, [pc, #76]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005b5a:	4b12      	ldr	r3, [pc, #72]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	4a11      	ldr	r2, [pc, #68]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b60:	f043 0310 	orr.w	r3, r3, #16
 8005b64:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005b66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b70:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b72:	f7fb f969 	bl	8000e48 <HAL_GetTick>
 8005b76:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b78:	e008      	b.n	8005b8c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b7a:	f7fb f965 	bl	8000e48 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e006      	b.n	8005b9a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <RCCEx_PLL3_Config+0x128>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	46020c00 	.word	0x46020c00
 8005ba8:	80800000 	.word	0x80800000

08005bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e049      	b.n	8005c52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fa fea0 	bl	8000918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f000 fb64 	bl	80062b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e049      	b.n	8005d00 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f841 	bl	8005d08 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f000 fb0d 	bl	80062b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d109      	bne.n	8005d40 <HAL_TIM_OC_Start+0x24>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	bf14      	ite	ne
 8005d38:	2301      	movne	r3, #1
 8005d3a:	2300      	moveq	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	e03c      	b.n	8005dba <HAL_TIM_OC_Start+0x9e>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d109      	bne.n	8005d5a <HAL_TIM_OC_Start+0x3e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	e02f      	b.n	8005dba <HAL_TIM_OC_Start+0x9e>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d109      	bne.n	8005d74 <HAL_TIM_OC_Start+0x58>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	e022      	b.n	8005dba <HAL_TIM_OC_Start+0x9e>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b0c      	cmp	r3, #12
 8005d78:	d109      	bne.n	8005d8e <HAL_TIM_OC_Start+0x72>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	bf14      	ite	ne
 8005d86:	2301      	movne	r3, #1
 8005d88:	2300      	moveq	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	e015      	b.n	8005dba <HAL_TIM_OC_Start+0x9e>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b10      	cmp	r3, #16
 8005d92:	d109      	bne.n	8005da8 <HAL_TIM_OC_Start+0x8c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	bf14      	ite	ne
 8005da0:	2301      	movne	r3, #1
 8005da2:	2300      	moveq	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	e008      	b.n	8005dba <HAL_TIM_OC_Start+0x9e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	bf14      	ite	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	2300      	moveq	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e0d8      	b.n	8005f74 <HAL_TIM_OC_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <HAL_TIM_OC_Start+0xb6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dd0:	e023      	b.n	8005e1a <HAL_TIM_OC_Start+0xfe>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d104      	bne.n	8005de2 <HAL_TIM_OC_Start+0xc6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005de0:	e01b      	b.n	8005e1a <HAL_TIM_OC_Start+0xfe>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d104      	bne.n	8005df2 <HAL_TIM_OC_Start+0xd6>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df0:	e013      	b.n	8005e1a <HAL_TIM_OC_Start+0xfe>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b0c      	cmp	r3, #12
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_OC_Start+0xe6>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e00:	e00b      	b.n	8005e1a <HAL_TIM_OC_Start+0xfe>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b10      	cmp	r3, #16
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_OC_Start+0xf6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e10:	e003      	b.n	8005e1a <HAL_TIM_OC_Start+0xfe>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 ffba 	bl	8006d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a53      	ldr	r2, [pc, #332]	@ (8005f7c <HAL_TIM_OC_Start+0x260>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d02c      	beq.n	8005e8c <HAL_TIM_OC_Start+0x170>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a52      	ldr	r2, [pc, #328]	@ (8005f80 <HAL_TIM_OC_Start+0x264>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d027      	beq.n	8005e8c <HAL_TIM_OC_Start+0x170>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a50      	ldr	r2, [pc, #320]	@ (8005f84 <HAL_TIM_OC_Start+0x268>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d022      	beq.n	8005e8c <HAL_TIM_OC_Start+0x170>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a4f      	ldr	r2, [pc, #316]	@ (8005f88 <HAL_TIM_OC_Start+0x26c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d01d      	beq.n	8005e8c <HAL_TIM_OC_Start+0x170>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a4d      	ldr	r2, [pc, #308]	@ (8005f8c <HAL_TIM_OC_Start+0x270>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d018      	beq.n	8005e8c <HAL_TIM_OC_Start+0x170>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8005f90 <HAL_TIM_OC_Start+0x274>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <HAL_TIM_OC_Start+0x170>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a4a      	ldr	r2, [pc, #296]	@ (8005f94 <HAL_TIM_OC_Start+0x278>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_TIM_OC_Start+0x170>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a49      	ldr	r2, [pc, #292]	@ (8005f98 <HAL_TIM_OC_Start+0x27c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_TIM_OC_Start+0x170>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a47      	ldr	r2, [pc, #284]	@ (8005f9c <HAL_TIM_OC_Start+0x280>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIM_OC_Start+0x170>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a46      	ldr	r2, [pc, #280]	@ (8005fa0 <HAL_TIM_OC_Start+0x284>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIM_OC_Start+0x174>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <HAL_TIM_OC_Start+0x176>
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <HAL_TIM_OC_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a34      	ldr	r2, [pc, #208]	@ (8005f7c <HAL_TIM_OC_Start+0x260>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d040      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a32      	ldr	r2, [pc, #200]	@ (8005f80 <HAL_TIM_OC_Start+0x264>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d03b      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec2:	d036      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ecc:	d031      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a34      	ldr	r2, [pc, #208]	@ (8005fa4 <HAL_TIM_OC_Start+0x288>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d02c      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a32      	ldr	r2, [pc, #200]	@ (8005fa8 <HAL_TIM_OC_Start+0x28c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d027      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a31      	ldr	r2, [pc, #196]	@ (8005fac <HAL_TIM_OC_Start+0x290>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d022      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb0 <HAL_TIM_OC_Start+0x294>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01d      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb4 <HAL_TIM_OC_Start+0x298>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb8 <HAL_TIM_OC_Start+0x29c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005f84 <HAL_TIM_OC_Start+0x268>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1b      	ldr	r2, [pc, #108]	@ (8005f88 <HAL_TIM_OC_Start+0x26c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1a      	ldr	r2, [pc, #104]	@ (8005f8c <HAL_TIM_OC_Start+0x270>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIM_OC_Start+0x216>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a18      	ldr	r2, [pc, #96]	@ (8005f90 <HAL_TIM_OC_Start+0x274>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d115      	bne.n	8005f5e <HAL_TIM_OC_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	4b20      	ldr	r3, [pc, #128]	@ (8005fbc <HAL_TIM_OC_Start+0x2a0>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b06      	cmp	r3, #6
 8005f42:	d015      	beq.n	8005f70 <HAL_TIM_OC_Start+0x254>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f4a:	d011      	beq.n	8005f70 <HAL_TIM_OC_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5c:	e008      	b.n	8005f70 <HAL_TIM_OC_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0201 	orr.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e000      	b.n	8005f72 <HAL_TIM_OC_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	50012c00 	.word	0x50012c00
 8005f84:	40013400 	.word	0x40013400
 8005f88:	50013400 	.word	0x50013400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	50014000 	.word	0x50014000
 8005f94:	40014400 	.word	0x40014400
 8005f98:	50014400 	.word	0x50014400
 8005f9c:	40014800 	.word	0x40014800
 8005fa0:	50014800 	.word	0x50014800
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	50000400 	.word	0x50000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	50000800 	.word	0x50000800
 8005fb4:	40000c00 	.word	0x40000c00
 8005fb8:	50000c00 	.word	0x50000c00
 8005fbc:	00010007 	.word	0x00010007

08005fc0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_TIM_OC_ConfigChannel+0x1e>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e066      	b.n	80060ac <HAL_TIM_OC_ConfigChannel+0xec>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b14      	cmp	r3, #20
 8005fea:	d857      	bhi.n	800609c <HAL_TIM_OC_ConfigChannel+0xdc>
 8005fec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006049 	.word	0x08006049
 8005ff8:	0800609d 	.word	0x0800609d
 8005ffc:	0800609d 	.word	0x0800609d
 8006000:	0800609d 	.word	0x0800609d
 8006004:	08006057 	.word	0x08006057
 8006008:	0800609d 	.word	0x0800609d
 800600c:	0800609d 	.word	0x0800609d
 8006010:	0800609d 	.word	0x0800609d
 8006014:	08006065 	.word	0x08006065
 8006018:	0800609d 	.word	0x0800609d
 800601c:	0800609d 	.word	0x0800609d
 8006020:	0800609d 	.word	0x0800609d
 8006024:	08006073 	.word	0x08006073
 8006028:	0800609d 	.word	0x0800609d
 800602c:	0800609d 	.word	0x0800609d
 8006030:	0800609d 	.word	0x0800609d
 8006034:	08006081 	.word	0x08006081
 8006038:	0800609d 	.word	0x0800609d
 800603c:	0800609d 	.word	0x0800609d
 8006040:	0800609d 	.word	0x0800609d
 8006044:	0800608f 	.word	0x0800608f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fa32 	bl	80064b8 <TIM_OC1_SetConfig>
      break;
 8006054:	e025      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 faed 	bl	800663c <TIM_OC2_SetConfig>
      break;
 8006062:	e01e      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fb96 	bl	800679c <TIM_OC3_SetConfig>
      break;
 8006070:	e017      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fc3d 	bl	80068f8 <TIM_OC4_SetConfig>
      break;
 800607e:	e010      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fce6 	bl	8006a58 <TIM_OC5_SetConfig>
      break;
 800608c:	e009      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fd61 	bl	8006b5c <TIM_OC6_SetConfig>
      break;
 800609a:	e002      	b.n	80060a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
      break;
 80060a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIM_ConfigClockSource+0x1c>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e0e6      	b.n	800629e <HAL_TIM_ConfigClockSource+0x1ea>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80060ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a67      	ldr	r2, [pc, #412]	@ (80062a8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	f000 80b1 	beq.w	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 8006110:	4a65      	ldr	r2, [pc, #404]	@ (80062a8 <HAL_TIM_ConfigClockSource+0x1f4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	f200 80b6 	bhi.w	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 8006118:	4a64      	ldr	r2, [pc, #400]	@ (80062ac <HAL_TIM_ConfigClockSource+0x1f8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	f000 80a9 	beq.w	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 8006120:	4a62      	ldr	r2, [pc, #392]	@ (80062ac <HAL_TIM_ConfigClockSource+0x1f8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	f200 80ae 	bhi.w	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 8006128:	4a61      	ldr	r2, [pc, #388]	@ (80062b0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	f000 80a1 	beq.w	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 8006130:	4a5f      	ldr	r2, [pc, #380]	@ (80062b0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	f200 80a6 	bhi.w	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 8006138:	4a5e      	ldr	r2, [pc, #376]	@ (80062b4 <HAL_TIM_ConfigClockSource+0x200>)
 800613a:	4293      	cmp	r3, r2
 800613c:	f000 8099 	beq.w	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 8006140:	4a5c      	ldr	r2, [pc, #368]	@ (80062b4 <HAL_TIM_ConfigClockSource+0x200>)
 8006142:	4293      	cmp	r3, r2
 8006144:	f200 809e 	bhi.w	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 8006148:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800614c:	f000 8091 	beq.w	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 8006150:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006154:	f200 8096 	bhi.w	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 8006158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800615c:	f000 8089 	beq.w	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 8006160:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006164:	f200 808e 	bhi.w	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 8006168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800616c:	d03e      	beq.n	80061ec <HAL_TIM_ConfigClockSource+0x138>
 800616e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006172:	f200 8087 	bhi.w	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 8006176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617a:	f000 8086 	beq.w	800628a <HAL_TIM_ConfigClockSource+0x1d6>
 800617e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006182:	d87f      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 8006184:	2b70      	cmp	r3, #112	@ 0x70
 8006186:	d01a      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x10a>
 8006188:	2b70      	cmp	r3, #112	@ 0x70
 800618a:	d87b      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 800618c:	2b60      	cmp	r3, #96	@ 0x60
 800618e:	d050      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x17e>
 8006190:	2b60      	cmp	r3, #96	@ 0x60
 8006192:	d877      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 8006194:	2b50      	cmp	r3, #80	@ 0x50
 8006196:	d03c      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x15e>
 8006198:	2b50      	cmp	r3, #80	@ 0x50
 800619a:	d873      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 800619c:	2b40      	cmp	r3, #64	@ 0x40
 800619e:	d058      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x19e>
 80061a0:	2b40      	cmp	r3, #64	@ 0x40
 80061a2:	d86f      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 80061a4:	2b30      	cmp	r3, #48	@ 0x30
 80061a6:	d064      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 80061a8:	2b30      	cmp	r3, #48	@ 0x30
 80061aa:	d86b      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d060      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d867      	bhi.n	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d05c      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d05a      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x1be>
 80061bc:	e062      	b.n	8006284 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061ce:	f000 fdc5 	bl	8006d5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	609a      	str	r2, [r3, #8]
      break;
 80061ea:	e04f      	b.n	800628c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061fc:	f000 fdae 	bl	8006d5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800620e:	609a      	str	r2, [r3, #8]
      break;
 8006210:	e03c      	b.n	800628c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800621e:	461a      	mov	r2, r3
 8006220:	f000 fd20 	bl	8006c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2150      	movs	r1, #80	@ 0x50
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fd79 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006230:	e02c      	b.n	800628c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800623e:	461a      	mov	r2, r3
 8006240:	f000 fd3f 	bl	8006cc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2160      	movs	r1, #96	@ 0x60
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fd69 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006250:	e01c      	b.n	800628c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800625e:	461a      	mov	r2, r3
 8006260:	f000 fd00 	bl	8006c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2140      	movs	r1, #64	@ 0x40
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fd59 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006270:	e00c      	b.n	800628c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4619      	mov	r1, r3
 800627c:	4610      	mov	r0, r2
 800627e:	f000 fd50 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006282:	e003      	b.n	800628c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	73fb      	strb	r3, [r7, #15]
      break;
 8006288:	e000      	b.n	800628c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800628a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	00100070 	.word	0x00100070
 80062ac:	00100040 	.word	0x00100040
 80062b0:	00100030 	.word	0x00100030
 80062b4:	00100020 	.word	0x00100020

080062b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a6b      	ldr	r2, [pc, #428]	@ (8006478 <TIM_Base_SetConfig+0x1c0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d02b      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a6a      	ldr	r2, [pc, #424]	@ (800647c <TIM_Base_SetConfig+0x1c4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d027      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062de:	d023      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062e6:	d01f      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a65      	ldr	r2, [pc, #404]	@ (8006480 <TIM_Base_SetConfig+0x1c8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d01b      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a64      	ldr	r2, [pc, #400]	@ (8006484 <TIM_Base_SetConfig+0x1cc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d017      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a63      	ldr	r2, [pc, #396]	@ (8006488 <TIM_Base_SetConfig+0x1d0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d013      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a62      	ldr	r2, [pc, #392]	@ (800648c <TIM_Base_SetConfig+0x1d4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00f      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a61      	ldr	r2, [pc, #388]	@ (8006490 <TIM_Base_SetConfig+0x1d8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a60      	ldr	r2, [pc, #384]	@ (8006494 <TIM_Base_SetConfig+0x1dc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a5f      	ldr	r2, [pc, #380]	@ (8006498 <TIM_Base_SetConfig+0x1e0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0x70>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a5e      	ldr	r2, [pc, #376]	@ (800649c <TIM_Base_SetConfig+0x1e4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a4e      	ldr	r2, [pc, #312]	@ (8006478 <TIM_Base_SetConfig+0x1c0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d043      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a4d      	ldr	r2, [pc, #308]	@ (800647c <TIM_Base_SetConfig+0x1c4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d03f      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006350:	d03b      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006358:	d037      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a48      	ldr	r2, [pc, #288]	@ (8006480 <TIM_Base_SetConfig+0x1c8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d033      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a47      	ldr	r2, [pc, #284]	@ (8006484 <TIM_Base_SetConfig+0x1cc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d02f      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a46      	ldr	r2, [pc, #280]	@ (8006488 <TIM_Base_SetConfig+0x1d0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d02b      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a45      	ldr	r2, [pc, #276]	@ (800648c <TIM_Base_SetConfig+0x1d4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d027      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a44      	ldr	r2, [pc, #272]	@ (8006490 <TIM_Base_SetConfig+0x1d8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d023      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a43      	ldr	r2, [pc, #268]	@ (8006494 <TIM_Base_SetConfig+0x1dc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01f      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a42      	ldr	r2, [pc, #264]	@ (8006498 <TIM_Base_SetConfig+0x1e0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01b      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a41      	ldr	r2, [pc, #260]	@ (800649c <TIM_Base_SetConfig+0x1e4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d017      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a40      	ldr	r2, [pc, #256]	@ (80064a0 <TIM_Base_SetConfig+0x1e8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a3f      	ldr	r2, [pc, #252]	@ (80064a4 <TIM_Base_SetConfig+0x1ec>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00f      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a3e      	ldr	r2, [pc, #248]	@ (80064a8 <TIM_Base_SetConfig+0x1f0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00b      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a3d      	ldr	r2, [pc, #244]	@ (80064ac <TIM_Base_SetConfig+0x1f4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d007      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a3c      	ldr	r2, [pc, #240]	@ (80064b0 <TIM_Base_SetConfig+0x1f8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <TIM_Base_SetConfig+0x112>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a3b      	ldr	r2, [pc, #236]	@ (80064b4 <TIM_Base_SetConfig+0x1fc>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d108      	bne.n	80063dc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006478 <TIM_Base_SetConfig+0x1c0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d023      	beq.n	800644a <TIM_Base_SetConfig+0x192>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1d      	ldr	r2, [pc, #116]	@ (800647c <TIM_Base_SetConfig+0x1c4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01f      	beq.n	800644a <TIM_Base_SetConfig+0x192>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a22      	ldr	r2, [pc, #136]	@ (8006498 <TIM_Base_SetConfig+0x1e0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d01b      	beq.n	800644a <TIM_Base_SetConfig+0x192>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a21      	ldr	r2, [pc, #132]	@ (800649c <TIM_Base_SetConfig+0x1e4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d017      	beq.n	800644a <TIM_Base_SetConfig+0x192>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a20      	ldr	r2, [pc, #128]	@ (80064a0 <TIM_Base_SetConfig+0x1e8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <TIM_Base_SetConfig+0x192>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1f      	ldr	r2, [pc, #124]	@ (80064a4 <TIM_Base_SetConfig+0x1ec>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00f      	beq.n	800644a <TIM_Base_SetConfig+0x192>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <TIM_Base_SetConfig+0x1f0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00b      	beq.n	800644a <TIM_Base_SetConfig+0x192>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a1d      	ldr	r2, [pc, #116]	@ (80064ac <TIM_Base_SetConfig+0x1f4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d007      	beq.n	800644a <TIM_Base_SetConfig+0x192>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <TIM_Base_SetConfig+0x1f8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <TIM_Base_SetConfig+0x192>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1b      	ldr	r2, [pc, #108]	@ (80064b4 <TIM_Base_SetConfig+0x1fc>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d103      	bne.n	8006452 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f043 0204 	orr.w	r2, r3, #4
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	601a      	str	r2, [r3, #0]
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40012c00 	.word	0x40012c00
 800647c:	50012c00 	.word	0x50012c00
 8006480:	40000400 	.word	0x40000400
 8006484:	50000400 	.word	0x50000400
 8006488:	40000800 	.word	0x40000800
 800648c:	50000800 	.word	0x50000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	50000c00 	.word	0x50000c00
 8006498:	40013400 	.word	0x40013400
 800649c:	50013400 	.word	0x50013400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	50014000 	.word	0x50014000
 80064a8:	40014400 	.word	0x40014400
 80064ac:	50014400 	.word	0x50014400
 80064b0:	40014800 	.word	0x40014800
 80064b4:	50014800 	.word	0x50014800

080064b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f023 0201 	bic.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f023 0302 	bic.w	r3, r3, #2
 8006504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a40      	ldr	r2, [pc, #256]	@ (8006614 <TIM_OC1_SetConfig+0x15c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d023      	beq.n	8006560 <TIM_OC1_SetConfig+0xa8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a3f      	ldr	r2, [pc, #252]	@ (8006618 <TIM_OC1_SetConfig+0x160>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d01f      	beq.n	8006560 <TIM_OC1_SetConfig+0xa8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a3e      	ldr	r2, [pc, #248]	@ (800661c <TIM_OC1_SetConfig+0x164>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d01b      	beq.n	8006560 <TIM_OC1_SetConfig+0xa8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a3d      	ldr	r2, [pc, #244]	@ (8006620 <TIM_OC1_SetConfig+0x168>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d017      	beq.n	8006560 <TIM_OC1_SetConfig+0xa8>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a3c      	ldr	r2, [pc, #240]	@ (8006624 <TIM_OC1_SetConfig+0x16c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <TIM_OC1_SetConfig+0xa8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a3b      	ldr	r2, [pc, #236]	@ (8006628 <TIM_OC1_SetConfig+0x170>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00f      	beq.n	8006560 <TIM_OC1_SetConfig+0xa8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a3a      	ldr	r2, [pc, #232]	@ (800662c <TIM_OC1_SetConfig+0x174>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_OC1_SetConfig+0xa8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a39      	ldr	r2, [pc, #228]	@ (8006630 <TIM_OC1_SetConfig+0x178>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_OC1_SetConfig+0xa8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a38      	ldr	r2, [pc, #224]	@ (8006634 <TIM_OC1_SetConfig+0x17c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC1_SetConfig+0xa8>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a37      	ldr	r2, [pc, #220]	@ (8006638 <TIM_OC1_SetConfig+0x180>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10c      	bne.n	800657a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0308 	bic.w	r3, r3, #8
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 0304 	bic.w	r3, r3, #4
 8006578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a25      	ldr	r2, [pc, #148]	@ (8006614 <TIM_OC1_SetConfig+0x15c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d023      	beq.n	80065ca <TIM_OC1_SetConfig+0x112>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a24      	ldr	r2, [pc, #144]	@ (8006618 <TIM_OC1_SetConfig+0x160>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01f      	beq.n	80065ca <TIM_OC1_SetConfig+0x112>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a23      	ldr	r2, [pc, #140]	@ (800661c <TIM_OC1_SetConfig+0x164>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01b      	beq.n	80065ca <TIM_OC1_SetConfig+0x112>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a22      	ldr	r2, [pc, #136]	@ (8006620 <TIM_OC1_SetConfig+0x168>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d017      	beq.n	80065ca <TIM_OC1_SetConfig+0x112>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a21      	ldr	r2, [pc, #132]	@ (8006624 <TIM_OC1_SetConfig+0x16c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <TIM_OC1_SetConfig+0x112>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a20      	ldr	r2, [pc, #128]	@ (8006628 <TIM_OC1_SetConfig+0x170>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00f      	beq.n	80065ca <TIM_OC1_SetConfig+0x112>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1f      	ldr	r2, [pc, #124]	@ (800662c <TIM_OC1_SetConfig+0x174>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00b      	beq.n	80065ca <TIM_OC1_SetConfig+0x112>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006630 <TIM_OC1_SetConfig+0x178>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d007      	beq.n	80065ca <TIM_OC1_SetConfig+0x112>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006634 <TIM_OC1_SetConfig+0x17c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_OC1_SetConfig+0x112>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006638 <TIM_OC1_SetConfig+0x180>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d111      	bne.n	80065ee <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40012c00 	.word	0x40012c00
 8006618:	50012c00 	.word	0x50012c00
 800661c:	40013400 	.word	0x40013400
 8006620:	50013400 	.word	0x50013400
 8006624:	40014000 	.word	0x40014000
 8006628:	50014000 	.word	0x50014000
 800662c:	40014400 	.word	0x40014400
 8006630:	50014400 	.word	0x50014400
 8006634:	40014800 	.word	0x40014800
 8006638:	50014800 	.word	0x50014800

0800663c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f023 0210 	bic.w	r2, r3, #16
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800666a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0320 	bic.w	r3, r3, #32
 800668a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a36      	ldr	r2, [pc, #216]	@ (8006774 <TIM_OC2_SetConfig+0x138>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00b      	beq.n	80066b8 <TIM_OC2_SetConfig+0x7c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a35      	ldr	r2, [pc, #212]	@ (8006778 <TIM_OC2_SetConfig+0x13c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d007      	beq.n	80066b8 <TIM_OC2_SetConfig+0x7c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a34      	ldr	r2, [pc, #208]	@ (800677c <TIM_OC2_SetConfig+0x140>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d003      	beq.n	80066b8 <TIM_OC2_SetConfig+0x7c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a33      	ldr	r2, [pc, #204]	@ (8006780 <TIM_OC2_SetConfig+0x144>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d10d      	bne.n	80066d4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a27      	ldr	r2, [pc, #156]	@ (8006774 <TIM_OC2_SetConfig+0x138>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d023      	beq.n	8006724 <TIM_OC2_SetConfig+0xe8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a26      	ldr	r2, [pc, #152]	@ (8006778 <TIM_OC2_SetConfig+0x13c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d01f      	beq.n	8006724 <TIM_OC2_SetConfig+0xe8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a25      	ldr	r2, [pc, #148]	@ (800677c <TIM_OC2_SetConfig+0x140>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01b      	beq.n	8006724 <TIM_OC2_SetConfig+0xe8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a24      	ldr	r2, [pc, #144]	@ (8006780 <TIM_OC2_SetConfig+0x144>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d017      	beq.n	8006724 <TIM_OC2_SetConfig+0xe8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a23      	ldr	r2, [pc, #140]	@ (8006784 <TIM_OC2_SetConfig+0x148>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <TIM_OC2_SetConfig+0xe8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a22      	ldr	r2, [pc, #136]	@ (8006788 <TIM_OC2_SetConfig+0x14c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00f      	beq.n	8006724 <TIM_OC2_SetConfig+0xe8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a21      	ldr	r2, [pc, #132]	@ (800678c <TIM_OC2_SetConfig+0x150>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00b      	beq.n	8006724 <TIM_OC2_SetConfig+0xe8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a20      	ldr	r2, [pc, #128]	@ (8006790 <TIM_OC2_SetConfig+0x154>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_OC2_SetConfig+0xe8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a1f      	ldr	r2, [pc, #124]	@ (8006794 <TIM_OC2_SetConfig+0x158>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC2_SetConfig+0xe8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a1e      	ldr	r2, [pc, #120]	@ (8006798 <TIM_OC2_SetConfig+0x15c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d113      	bne.n	800674c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800672a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40012c00 	.word	0x40012c00
 8006778:	50012c00 	.word	0x50012c00
 800677c:	40013400 	.word	0x40013400
 8006780:	50013400 	.word	0x50013400
 8006784:	40014000 	.word	0x40014000
 8006788:	50014000 	.word	0x50014000
 800678c:	40014400 	.word	0x40014400
 8006790:	50014400 	.word	0x50014400
 8006794:	40014800 	.word	0x40014800
 8006798:	50014800 	.word	0x50014800

0800679c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a35      	ldr	r2, [pc, #212]	@ (80068d0 <TIM_OC3_SetConfig+0x134>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00b      	beq.n	8006816 <TIM_OC3_SetConfig+0x7a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a34      	ldr	r2, [pc, #208]	@ (80068d4 <TIM_OC3_SetConfig+0x138>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d007      	beq.n	8006816 <TIM_OC3_SetConfig+0x7a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a33      	ldr	r2, [pc, #204]	@ (80068d8 <TIM_OC3_SetConfig+0x13c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d003      	beq.n	8006816 <TIM_OC3_SetConfig+0x7a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a32      	ldr	r2, [pc, #200]	@ (80068dc <TIM_OC3_SetConfig+0x140>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d10d      	bne.n	8006832 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800681c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a26      	ldr	r2, [pc, #152]	@ (80068d0 <TIM_OC3_SetConfig+0x134>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d023      	beq.n	8006882 <TIM_OC3_SetConfig+0xe6>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a25      	ldr	r2, [pc, #148]	@ (80068d4 <TIM_OC3_SetConfig+0x138>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01f      	beq.n	8006882 <TIM_OC3_SetConfig+0xe6>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a24      	ldr	r2, [pc, #144]	@ (80068d8 <TIM_OC3_SetConfig+0x13c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d01b      	beq.n	8006882 <TIM_OC3_SetConfig+0xe6>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a23      	ldr	r2, [pc, #140]	@ (80068dc <TIM_OC3_SetConfig+0x140>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d017      	beq.n	8006882 <TIM_OC3_SetConfig+0xe6>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a22      	ldr	r2, [pc, #136]	@ (80068e0 <TIM_OC3_SetConfig+0x144>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d013      	beq.n	8006882 <TIM_OC3_SetConfig+0xe6>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a21      	ldr	r2, [pc, #132]	@ (80068e4 <TIM_OC3_SetConfig+0x148>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00f      	beq.n	8006882 <TIM_OC3_SetConfig+0xe6>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a20      	ldr	r2, [pc, #128]	@ (80068e8 <TIM_OC3_SetConfig+0x14c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00b      	beq.n	8006882 <TIM_OC3_SetConfig+0xe6>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a1f      	ldr	r2, [pc, #124]	@ (80068ec <TIM_OC3_SetConfig+0x150>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d007      	beq.n	8006882 <TIM_OC3_SetConfig+0xe6>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a1e      	ldr	r2, [pc, #120]	@ (80068f0 <TIM_OC3_SetConfig+0x154>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d003      	beq.n	8006882 <TIM_OC3_SetConfig+0xe6>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <TIM_OC3_SetConfig+0x158>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d113      	bne.n	80068aa <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	621a      	str	r2, [r3, #32]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	50012c00 	.word	0x50012c00
 80068d8:	40013400 	.word	0x40013400
 80068dc:	50013400 	.word	0x50013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	50014000 	.word	0x50014000
 80068e8:	40014400 	.word	0x40014400
 80068ec:	50014400 	.word	0x50014400
 80068f0:	40014800 	.word	0x40014800
 80068f4:	50014800 	.word	0x50014800

080068f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	031b      	lsls	r3, r3, #12
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a36      	ldr	r2, [pc, #216]	@ (8006a30 <TIM_OC4_SetConfig+0x138>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00b      	beq.n	8006974 <TIM_OC4_SetConfig+0x7c>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a35      	ldr	r2, [pc, #212]	@ (8006a34 <TIM_OC4_SetConfig+0x13c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d007      	beq.n	8006974 <TIM_OC4_SetConfig+0x7c>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a34      	ldr	r2, [pc, #208]	@ (8006a38 <TIM_OC4_SetConfig+0x140>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d003      	beq.n	8006974 <TIM_OC4_SetConfig+0x7c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a33      	ldr	r2, [pc, #204]	@ (8006a3c <TIM_OC4_SetConfig+0x144>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d10d      	bne.n	8006990 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800697a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	031b      	lsls	r3, r3, #12
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800698e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a27      	ldr	r2, [pc, #156]	@ (8006a30 <TIM_OC4_SetConfig+0x138>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d023      	beq.n	80069e0 <TIM_OC4_SetConfig+0xe8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a26      	ldr	r2, [pc, #152]	@ (8006a34 <TIM_OC4_SetConfig+0x13c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d01f      	beq.n	80069e0 <TIM_OC4_SetConfig+0xe8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a25      	ldr	r2, [pc, #148]	@ (8006a38 <TIM_OC4_SetConfig+0x140>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d01b      	beq.n	80069e0 <TIM_OC4_SetConfig+0xe8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a24      	ldr	r2, [pc, #144]	@ (8006a3c <TIM_OC4_SetConfig+0x144>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d017      	beq.n	80069e0 <TIM_OC4_SetConfig+0xe8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a23      	ldr	r2, [pc, #140]	@ (8006a40 <TIM_OC4_SetConfig+0x148>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <TIM_OC4_SetConfig+0xe8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a22      	ldr	r2, [pc, #136]	@ (8006a44 <TIM_OC4_SetConfig+0x14c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00f      	beq.n	80069e0 <TIM_OC4_SetConfig+0xe8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a21      	ldr	r2, [pc, #132]	@ (8006a48 <TIM_OC4_SetConfig+0x150>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <TIM_OC4_SetConfig+0xe8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a20      	ldr	r2, [pc, #128]	@ (8006a4c <TIM_OC4_SetConfig+0x154>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d007      	beq.n	80069e0 <TIM_OC4_SetConfig+0xe8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a50 <TIM_OC4_SetConfig+0x158>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_OC4_SetConfig+0xe8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a1e      	ldr	r2, [pc, #120]	@ (8006a54 <TIM_OC4_SetConfig+0x15c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d113      	bne.n	8006a08 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	019b      	lsls	r3, r3, #6
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	019b      	lsls	r3, r3, #6
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	50012c00 	.word	0x50012c00
 8006a38:	40013400 	.word	0x40013400
 8006a3c:	50013400 	.word	0x50013400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	50014000 	.word	0x50014000
 8006a48:	40014400 	.word	0x40014400
 8006a4c:	50014400 	.word	0x50014400
 8006a50:	40014800 	.word	0x40014800
 8006a54:	50014800 	.word	0x50014800

08006a58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	041b      	lsls	r3, r3, #16
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a21      	ldr	r2, [pc, #132]	@ (8006b34 <TIM_OC5_SetConfig+0xdc>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d023      	beq.n	8006afa <TIM_OC5_SetConfig+0xa2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a20      	ldr	r2, [pc, #128]	@ (8006b38 <TIM_OC5_SetConfig+0xe0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d01f      	beq.n	8006afa <TIM_OC5_SetConfig+0xa2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a1f      	ldr	r2, [pc, #124]	@ (8006b3c <TIM_OC5_SetConfig+0xe4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01b      	beq.n	8006afa <TIM_OC5_SetConfig+0xa2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b40 <TIM_OC5_SetConfig+0xe8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d017      	beq.n	8006afa <TIM_OC5_SetConfig+0xa2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b44 <TIM_OC5_SetConfig+0xec>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <TIM_OC5_SetConfig+0xa2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b48 <TIM_OC5_SetConfig+0xf0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00f      	beq.n	8006afa <TIM_OC5_SetConfig+0xa2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b4c <TIM_OC5_SetConfig+0xf4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00b      	beq.n	8006afa <TIM_OC5_SetConfig+0xa2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b50 <TIM_OC5_SetConfig+0xf8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d007      	beq.n	8006afa <TIM_OC5_SetConfig+0xa2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a19      	ldr	r2, [pc, #100]	@ (8006b54 <TIM_OC5_SetConfig+0xfc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d003      	beq.n	8006afa <TIM_OC5_SetConfig+0xa2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a18      	ldr	r2, [pc, #96]	@ (8006b58 <TIM_OC5_SetConfig+0x100>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d109      	bne.n	8006b0e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	621a      	str	r2, [r3, #32]
}
 8006b28:	bf00      	nop
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	50012c00 	.word	0x50012c00
 8006b3c:	40013400 	.word	0x40013400
 8006b40:	50013400 	.word	0x50013400
 8006b44:	40014000 	.word	0x40014000
 8006b48:	50014000 	.word	0x50014000
 8006b4c:	40014400 	.word	0x40014400
 8006b50:	50014400 	.word	0x50014400
 8006b54:	40014800 	.word	0x40014800
 8006b58:	50014800 	.word	0x50014800

08006b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	051b      	lsls	r3, r3, #20
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a22      	ldr	r2, [pc, #136]	@ (8006c3c <TIM_OC6_SetConfig+0xe0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d023      	beq.n	8006c00 <TIM_OC6_SetConfig+0xa4>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a21      	ldr	r2, [pc, #132]	@ (8006c40 <TIM_OC6_SetConfig+0xe4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d01f      	beq.n	8006c00 <TIM_OC6_SetConfig+0xa4>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a20      	ldr	r2, [pc, #128]	@ (8006c44 <TIM_OC6_SetConfig+0xe8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d01b      	beq.n	8006c00 <TIM_OC6_SetConfig+0xa4>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a1f      	ldr	r2, [pc, #124]	@ (8006c48 <TIM_OC6_SetConfig+0xec>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d017      	beq.n	8006c00 <TIM_OC6_SetConfig+0xa4>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8006c4c <TIM_OC6_SetConfig+0xf0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d013      	beq.n	8006c00 <TIM_OC6_SetConfig+0xa4>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <TIM_OC6_SetConfig+0xf4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00f      	beq.n	8006c00 <TIM_OC6_SetConfig+0xa4>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <TIM_OC6_SetConfig+0xf8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00b      	beq.n	8006c00 <TIM_OC6_SetConfig+0xa4>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <TIM_OC6_SetConfig+0xfc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d007      	beq.n	8006c00 <TIM_OC6_SetConfig+0xa4>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c5c <TIM_OC6_SetConfig+0x100>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_OC6_SetConfig+0xa4>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a19      	ldr	r2, [pc, #100]	@ (8006c60 <TIM_OC6_SetConfig+0x104>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d109      	bne.n	8006c14 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	029b      	lsls	r3, r3, #10
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40012c00 	.word	0x40012c00
 8006c40:	50012c00 	.word	0x50012c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	50013400 	.word	0x50013400
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	50014000 	.word	0x50014000
 8006c54:	40014400 	.word	0x40014400
 8006c58:	50014400 	.word	0x50014400
 8006c5c:	40014800 	.word	0x40014800
 8006c60:	50014800 	.word	0x50014800

08006c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f023 0201 	bic.w	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 030a 	bic.w	r3, r3, #10
 8006ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b087      	sub	sp, #28
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f023 0210 	bic.w	r2, r3, #16
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	031b      	lsls	r3, r3, #12
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f043 0307 	orr.w	r3, r3, #7
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	021a      	lsls	r2, r3, #8
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	609a      	str	r2, [r3, #8]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	2201      	movs	r2, #1
 8006db0:	fa02 f303 	lsl.w	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e097      	b.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a45      	ldr	r2, [pc, #276]	@ (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00e      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a44      	ldr	r2, [pc, #272]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d009      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a42      	ldr	r2, [pc, #264]	@ (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a41      	ldr	r2, [pc, #260]	@ (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d108      	bne.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d040      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a2e      	ldr	r2, [pc, #184]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d03b      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e94:	d036      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e9e:	d031      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a29      	ldr	r2, [pc, #164]	@ (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d02c      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a28      	ldr	r2, [pc, #160]	@ (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d027      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a26      	ldr	r2, [pc, #152]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d022      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a25      	ldr	r2, [pc, #148]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d01d      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a23      	ldr	r2, [pc, #140]	@ (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d018      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a22      	ldr	r2, [pc, #136]	@ (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d013      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a18      	ldr	r2, [pc, #96]	@ (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00e      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a17      	ldr	r2, [pc, #92]	@ (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d009      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d004      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1a      	ldr	r2, [pc, #104]	@ (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d10c      	bne.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	50012c00 	.word	0x50012c00
 8006f44:	40013400 	.word	0x40013400
 8006f48:	50013400 	.word	0x50013400
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	50000400 	.word	0x50000400
 8006f54:	40000800 	.word	0x40000800
 8006f58:	50000800 	.word	0x50000800
 8006f5c:	40000c00 	.word	0x40000c00
 8006f60:	50000c00 	.word	0x50000c00
 8006f64:	40014000 	.word	0x40014000
 8006f68:	50014000 	.word	0x50014000

08006f6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e07d      	b.n	8007084 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	041b      	lsls	r3, r3, #16
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1e      	ldr	r2, [pc, #120]	@ (8007090 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00e      	beq.n	8007038 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1d      	ldr	r2, [pc, #116]	@ (8007094 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d009      	beq.n	8007038 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1b      	ldr	r2, [pc, #108]	@ (8007098 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1a      	ldr	r2, [pc, #104]	@ (800709c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d11c      	bne.n	8007072 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007042:	051b      	lsls	r3, r3, #20
 8007044:	4313      	orrs	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	40012c00 	.word	0x40012c00
 8007094:	50012c00 	.word	0x50012c00
 8007098:	40013400 	.word	0x40013400
 800709c:	50013400 	.word	0x50013400

080070a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070a0:	b084      	sub	sp, #16
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	f107 001c 	add.w	r0, r7, #28
 80070ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 fab6 	bl	8008630 <USB_CoreReset>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80070c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d106      	bne.n	80070de <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	639a      	str	r2, [r3, #56]	@ 0x38
 80070dc:	e005      	b.n	80070ea <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f6:	b004      	add	sp, #16
 80070f8:	4770      	bx	lr
	...

080070fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d165      	bne.n	80071dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4a41      	ldr	r2, [pc, #260]	@ (8007218 <USB_SetTurnaroundTime+0x11c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d906      	bls.n	8007126 <USB_SetTurnaroundTime+0x2a>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4a40      	ldr	r2, [pc, #256]	@ (800721c <USB_SetTurnaroundTime+0x120>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d202      	bcs.n	8007126 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007120:	230f      	movs	r3, #15
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	e062      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	4a3c      	ldr	r2, [pc, #240]	@ (800721c <USB_SetTurnaroundTime+0x120>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d306      	bcc.n	800713c <USB_SetTurnaroundTime+0x40>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4a3b      	ldr	r2, [pc, #236]	@ (8007220 <USB_SetTurnaroundTime+0x124>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d202      	bcs.n	800713c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007136:	230e      	movs	r3, #14
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	e057      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4a38      	ldr	r2, [pc, #224]	@ (8007220 <USB_SetTurnaroundTime+0x124>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d306      	bcc.n	8007152 <USB_SetTurnaroundTime+0x56>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4a37      	ldr	r2, [pc, #220]	@ (8007224 <USB_SetTurnaroundTime+0x128>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d202      	bcs.n	8007152 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800714c:	230d      	movs	r3, #13
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e04c      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	4a33      	ldr	r2, [pc, #204]	@ (8007224 <USB_SetTurnaroundTime+0x128>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d306      	bcc.n	8007168 <USB_SetTurnaroundTime+0x6c>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4a32      	ldr	r2, [pc, #200]	@ (8007228 <USB_SetTurnaroundTime+0x12c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d802      	bhi.n	8007168 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007162:	230c      	movs	r3, #12
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e041      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4a2f      	ldr	r2, [pc, #188]	@ (8007228 <USB_SetTurnaroundTime+0x12c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d906      	bls.n	800717e <USB_SetTurnaroundTime+0x82>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4a2e      	ldr	r2, [pc, #184]	@ (800722c <USB_SetTurnaroundTime+0x130>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d802      	bhi.n	800717e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007178:	230b      	movs	r3, #11
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	e036      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	4a2a      	ldr	r2, [pc, #168]	@ (800722c <USB_SetTurnaroundTime+0x130>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d906      	bls.n	8007194 <USB_SetTurnaroundTime+0x98>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4a29      	ldr	r2, [pc, #164]	@ (8007230 <USB_SetTurnaroundTime+0x134>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d802      	bhi.n	8007194 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800718e:	230a      	movs	r3, #10
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	e02b      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4a26      	ldr	r2, [pc, #152]	@ (8007230 <USB_SetTurnaroundTime+0x134>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d906      	bls.n	80071aa <USB_SetTurnaroundTime+0xae>
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4a25      	ldr	r2, [pc, #148]	@ (8007234 <USB_SetTurnaroundTime+0x138>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d202      	bcs.n	80071aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80071a4:	2309      	movs	r3, #9
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	e020      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	4a21      	ldr	r2, [pc, #132]	@ (8007234 <USB_SetTurnaroundTime+0x138>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d306      	bcc.n	80071c0 <USB_SetTurnaroundTime+0xc4>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4a20      	ldr	r2, [pc, #128]	@ (8007238 <USB_SetTurnaroundTime+0x13c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d802      	bhi.n	80071c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80071ba:	2308      	movs	r3, #8
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	e015      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007238 <USB_SetTurnaroundTime+0x13c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d906      	bls.n	80071d6 <USB_SetTurnaroundTime+0xda>
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4a1c      	ldr	r2, [pc, #112]	@ (800723c <USB_SetTurnaroundTime+0x140>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d202      	bcs.n	80071d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80071d0:	2307      	movs	r3, #7
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	e00a      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80071d6:	2306      	movs	r3, #6
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	e007      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d102      	bne.n	80071e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80071e2:	2309      	movs	r3, #9
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e001      	b.n	80071ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80071e8:	2309      	movs	r3, #9
 80071ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	029b      	lsls	r3, r3, #10
 8007200:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007204:	431a      	orrs	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	371c      	adds	r7, #28
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	00d8acbf 	.word	0x00d8acbf
 800721c:	00e4e1c0 	.word	0x00e4e1c0
 8007220:	00f42400 	.word	0x00f42400
 8007224:	01067380 	.word	0x01067380
 8007228:	011a499f 	.word	0x011a499f
 800722c:	01312cff 	.word	0x01312cff
 8007230:	014ca43f 	.word	0x014ca43f
 8007234:	016e3600 	.word	0x016e3600
 8007238:	01a6ab1f 	.word	0x01a6ab1f
 800723c:	01e84800 	.word	0x01e84800

08007240 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f043 0201 	orr.w	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f023 0201 	bic.w	r2, r3, #1
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d115      	bne.n	80072d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072b2:	200a      	movs	r0, #10
 80072b4:	f7f9 fdd4 	bl	8000e60 <HAL_Delay>
      ms += 10U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	330a      	adds	r3, #10
 80072bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 f927 	bl	8008512 <USB_GetMode>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d01e      	beq.n	8007308 <USB_SetCurrentMode+0x84>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80072ce:	d9f0      	bls.n	80072b2 <USB_SetCurrentMode+0x2e>
 80072d0:	e01a      	b.n	8007308 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d115      	bne.n	8007304 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072e4:	200a      	movs	r0, #10
 80072e6:	f7f9 fdbb 	bl	8000e60 <HAL_Delay>
      ms += 10U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	330a      	adds	r3, #10
 80072ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 f90e 	bl	8008512 <USB_GetMode>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <USB_SetCurrentMode+0x84>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8007300:	d9f0      	bls.n	80072e4 <USB_SetCurrentMode+0x60>
 8007302:	e001      	b.n	8007308 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e005      	b.n	8007314 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2bc8      	cmp	r3, #200	@ 0xc8
 800730c:	d101      	bne.n	8007312 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800731c:	b084      	sub	sp, #16
 800731e:	b580      	push	{r7, lr}
 8007320:	b086      	sub	sp, #24
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800732a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007336:	2300      	movs	r3, #0
 8007338:	613b      	str	r3, [r7, #16]
 800733a:	e009      	b.n	8007350 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	3340      	adds	r3, #64	@ 0x40
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	2200      	movs	r2, #0
 8007348:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3301      	adds	r3, #1
 800734e:	613b      	str	r3, [r7, #16]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	2b0e      	cmp	r3, #14
 8007354:	d9f2      	bls.n	800733c <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007356:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800735a:	2b00      	cmp	r3, #0
 800735c:	d11c      	bne.n	8007398 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800736c:	f043 0302 	orr.w	r3, r3, #2
 8007370:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007376:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e005      	b.n	80073a4 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073aa:	461a      	mov	r2, r3
 80073ac:	2300      	movs	r3, #0
 80073ae:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073b0:	2103      	movs	r1, #3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f95e 	bl	8007674 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073b8:	2110      	movs	r1, #16
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f8fa 	bl	80075b4 <USB_FlushTxFifo>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f924 	bl	8007618 <USB_FlushRxFifo>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e0:	461a      	mov	r2, r3
 80073e2:	2300      	movs	r3, #0
 80073e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ec:	461a      	mov	r2, r3
 80073ee:	2300      	movs	r3, #0
 80073f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f8:	461a      	mov	r2, r3
 80073fa:	2300      	movs	r3, #0
 80073fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	e043      	b.n	800748c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007416:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800741a:	d118      	bne.n	800744e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10a      	bne.n	8007438 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800742e:	461a      	mov	r2, r3
 8007430:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	e013      	b.n	8007460 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007444:	461a      	mov	r2, r3
 8007446:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	e008      	b.n	8007460 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745a:	461a      	mov	r2, r3
 800745c:	2300      	movs	r3, #0
 800745e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746c:	461a      	mov	r2, r3
 800746e:	2300      	movs	r3, #0
 8007470:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800747e:	461a      	mov	r2, r3
 8007480:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007484:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	3301      	adds	r3, #1
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007490:	461a      	mov	r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	4293      	cmp	r3, r2
 8007496:	d3b5      	bcc.n	8007404 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007498:	2300      	movs	r3, #0
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	e043      	b.n	8007526 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b4:	d118      	bne.n	80074e8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c8:	461a      	mov	r2, r3
 80074ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	e013      	b.n	80074fa <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074de:	461a      	mov	r2, r3
 80074e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	e008      	b.n	80074fa <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f4:	461a      	mov	r2, r3
 80074f6:	2300      	movs	r3, #0
 80074f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007506:	461a      	mov	r2, r3
 8007508:	2300      	movs	r3, #0
 800750a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007518:	461a      	mov	r2, r3
 800751a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800751e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	3301      	adds	r3, #1
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800752a:	461a      	mov	r2, r3
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	4293      	cmp	r3, r2
 8007530:	d3b5      	bcc.n	800749e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007544:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007552:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007554:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	f043 0210 	orr.w	r2, r3, #16
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699a      	ldr	r2, [r3, #24]
 800756c:	4b10      	ldr	r3, [pc, #64]	@ (80075b0 <USB_DevInit+0x294>)
 800756e:	4313      	orrs	r3, r2
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007574:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007578:	2b00      	cmp	r3, #0
 800757a:	d005      	beq.n	8007588 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f043 0208 	orr.w	r2, r3, #8
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007588:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800758c:	2b01      	cmp	r3, #1
 800758e:	d107      	bne.n	80075a0 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007598:	f043 0304 	orr.w	r3, r3, #4
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075ac:	b004      	add	sp, #16
 80075ae:	4770      	bx	lr
 80075b0:	803c3800 	.word	0x803c3800

080075b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3301      	adds	r3, #1
 80075c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075ce:	d901      	bls.n	80075d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e01b      	b.n	800760c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	daf2      	bge.n	80075c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	019b      	lsls	r3, r3, #6
 80075e4:	f043 0220 	orr.w	r2, r3, #32
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3301      	adds	r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075f8:	d901      	bls.n	80075fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e006      	b.n	800760c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b20      	cmp	r3, #32
 8007608:	d0f0      	beq.n	80075ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3301      	adds	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007630:	d901      	bls.n	8007636 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e018      	b.n	8007668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	daf2      	bge.n	8007624 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2210      	movs	r2, #16
 8007646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007654:	d901      	bls.n	800765a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e006      	b.n	8007668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0310 	and.w	r3, r3, #16
 8007662:	2b10      	cmp	r3, #16
 8007664:	d0f0      	beq.n	8007648 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007694:	4313      	orrs	r3, r2
 8007696:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b087      	sub	sp, #28
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0306 	and.w	r3, r3, #6
 80076be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80076c6:	2300      	movs	r3, #0
 80076c8:	75fb      	strb	r3, [r7, #23]
 80076ca:	e00a      	b.n	80076e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d002      	beq.n	80076d8 <USB_GetDevSpeed+0x32>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b06      	cmp	r3, #6
 80076d6:	d102      	bne.n	80076de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076d8:	2302      	movs	r3, #2
 80076da:	75fb      	strb	r3, [r7, #23]
 80076dc:	e001      	b.n	80076e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076de:	230f      	movs	r3, #15
 80076e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d13a      	bne.n	8007782 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	2101      	movs	r1, #1
 800771e:	fa01 f303 	lsl.w	r3, r1, r3
 8007722:	b29b      	uxth	r3, r3
 8007724:	68f9      	ldr	r1, [r7, #12]
 8007726:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800772a:	4313      	orrs	r3, r2
 800772c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d155      	bne.n	80077f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	791b      	ldrb	r3, [r3, #4]
 800775e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007760:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	059b      	lsls	r3, r3, #22
 8007766:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007768:	4313      	orrs	r3, r2
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800777a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	e036      	b.n	80077f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007788:	69da      	ldr	r2, [r3, #28]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	2101      	movs	r1, #1
 8007794:	fa01 f303 	lsl.w	r3, r1, r3
 8007798:	041b      	lsls	r3, r3, #16
 800779a:	68f9      	ldr	r1, [r7, #12]
 800779c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077a0:	4313      	orrs	r3, r2
 80077a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d11a      	bne.n	80077f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077d6:	430b      	orrs	r3, r1
 80077d8:	4313      	orrs	r3, r2
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
	...

08007800 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d161      	bne.n	80078e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800782e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007832:	d11f      	bne.n	8007874 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	0151      	lsls	r1, r2, #5
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	440a      	add	r2, r1
 800784a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800784e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007852:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	440a      	add	r2, r1
 800786a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800786e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007872:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800787a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	2101      	movs	r1, #1
 8007886:	fa01 f303 	lsl.w	r3, r1, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	43db      	mvns	r3, r3
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007894:	4013      	ands	r3, r2
 8007896:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800789e:	69da      	ldr	r2, [r3, #28]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	2101      	movs	r1, #1
 80078aa:	fa01 f303 	lsl.w	r3, r1, r3
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	43db      	mvns	r3, r3
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078b8:	4013      	ands	r3, r2
 80078ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	0159      	lsls	r1, r3, #5
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	440b      	add	r3, r1
 80078d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d6:	4619      	mov	r1, r3
 80078d8:	4b35      	ldr	r3, [pc, #212]	@ (80079b0 <USB_DeactivateEndpoint+0x1b0>)
 80078da:	4013      	ands	r3, r2
 80078dc:	600b      	str	r3, [r1, #0]
 80078de:	e060      	b.n	80079a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078f6:	d11f      	bne.n	8007938 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	440a      	add	r2, r1
 800790e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007912:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007916:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	440a      	add	r2, r1
 800792e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007932:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007936:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800793e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	2101      	movs	r1, #1
 800794a:	fa01 f303 	lsl.w	r3, r1, r3
 800794e:	041b      	lsls	r3, r3, #16
 8007950:	43db      	mvns	r3, r3
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007958:	4013      	ands	r3, r2
 800795a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007962:	69da      	ldr	r2, [r3, #28]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	2101      	movs	r1, #1
 800796e:	fa01 f303 	lsl.w	r3, r1, r3
 8007972:	041b      	lsls	r3, r3, #16
 8007974:	43db      	mvns	r3, r3
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800797c:	4013      	ands	r3, r2
 800797e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	0159      	lsls	r1, r3, #5
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	440b      	add	r3, r1
 8007996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799a:	4619      	mov	r1, r3
 800799c:	4b05      	ldr	r3, [pc, #20]	@ (80079b4 <USB_DeactivateEndpoint+0x1b4>)
 800799e:	4013      	ands	r3, r2
 80079a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	ec337800 	.word	0xec337800
 80079b4:	eff37800 	.word	0xeff37800

080079b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	@ 0x28
 80079bc:	af02      	add	r7, sp, #8
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	785b      	ldrb	r3, [r3, #1]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	f040 817f 	bne.w	8007cd8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d132      	bne.n	8007a48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	0151      	lsls	r1, r2, #5
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	440a      	add	r2, r1
 80079f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a00:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a40:	0cdb      	lsrs	r3, r3, #19
 8007a42:	04db      	lsls	r3, r3, #19
 8007a44:	6113      	str	r3, [r2, #16]
 8007a46:	e097      	b.n	8007b78 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	0151      	lsls	r1, r2, #5
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	440a      	add	r2, r1
 8007a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a62:	0cdb      	lsrs	r3, r3, #19
 8007a64:	04db      	lsls	r3, r3, #19
 8007a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	0151      	lsls	r1, r2, #5
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	440a      	add	r2, r1
 8007a7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a82:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a86:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a8a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d11a      	bne.n	8007ac8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d903      	bls.n	8007aa6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ac0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ac4:	6113      	str	r3, [r2, #16]
 8007ac6:	e044      	b.n	8007b52 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	1e5a      	subs	r2, r3, #1
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007adc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aea:	691a      	ldr	r2, [r3, #16]
 8007aec:	8afb      	ldrh	r3, [r7, #22]
 8007aee:	04d9      	lsls	r1, r3, #19
 8007af0:	4ba4      	ldr	r3, [pc, #656]	@ (8007d84 <USB_EPStartXfer+0x3cc>)
 8007af2:	400b      	ands	r3, r1
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	0148      	lsls	r0, r1, #5
 8007af8:	69f9      	ldr	r1, [r7, #28]
 8007afa:	4401      	add	r1, r0
 8007afc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b00:	4313      	orrs	r3, r2
 8007b02:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	791b      	ldrb	r3, [r3, #4]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d122      	bne.n	8007b52 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	0151      	lsls	r1, r2, #5
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	440a      	add	r2, r1
 8007b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b26:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007b2a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b38:	691a      	ldr	r2, [r3, #16]
 8007b3a:	8afb      	ldrh	r3, [r7, #22]
 8007b3c:	075b      	lsls	r3, r3, #29
 8007b3e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007b42:	69b9      	ldr	r1, [r7, #24]
 8007b44:	0148      	lsls	r0, r1, #5
 8007b46:	69f9      	ldr	r1, [r7, #28]
 8007b48:	4401      	add	r1, r0
 8007b4a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b68:	69b9      	ldr	r1, [r7, #24]
 8007b6a:	0148      	lsls	r0, r1, #5
 8007b6c:	69f9      	ldr	r1, [r7, #28]
 8007b6e:	4401      	add	r1, r0
 8007b70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b74:	4313      	orrs	r3, r2
 8007b76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d14b      	bne.n	8007c16 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b92:	461a      	mov	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	791b      	ldrb	r3, [r3, #4]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d128      	bne.n	8007bf4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d110      	bne.n	8007bd4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	e00f      	b.n	8007bf4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bf2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c0e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	e166      	b.n	8007ee4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	0151      	lsls	r1, r2, #5
 8007c28:	69fa      	ldr	r2, [r7, #28]
 8007c2a:	440a      	add	r2, r1
 8007c2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c30:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c34:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	791b      	ldrb	r3, [r3, #4]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d015      	beq.n	8007c6a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 814e 	beq.w	8007ee4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	2101      	movs	r1, #1
 8007c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5e:	69f9      	ldr	r1, [r7, #28]
 8007c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c64:	4313      	orrs	r3, r2
 8007c66:	634b      	str	r3, [r1, #52]	@ 0x34
 8007c68:	e13c      	b.n	8007ee4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d110      	bne.n	8007c9c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	0151      	lsls	r1, r2, #5
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	440a      	add	r2, r1
 8007c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	e00f      	b.n	8007cbc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	68d9      	ldr	r1, [r3, #12]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	781a      	ldrb	r2, [r3, #0]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	b298      	uxth	r0, r3
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	4603      	mov	r3, r0
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 f9b9 	bl	8008048 <USB_WritePacket>
 8007cd6:	e105      	b.n	8007ee4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	0151      	lsls	r1, r2, #5
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	440a      	add	r2, r1
 8007cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cf2:	0cdb      	lsrs	r3, r3, #19
 8007cf4:	04db      	lsls	r3, r3, #19
 8007cf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	69fa      	ldr	r2, [r7, #28]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d1a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d132      	bne.n	8007d88 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d50:	69b9      	ldr	r1, [r7, #24]
 8007d52:	0148      	lsls	r0, r1, #5
 8007d54:	69f9      	ldr	r1, [r7, #28]
 8007d56:	4401      	add	r1, r0
 8007d58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	69fa      	ldr	r2, [r7, #28]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d7e:	6113      	str	r3, [r2, #16]
 8007d80:	e062      	b.n	8007e48 <USB_EPStartXfer+0x490>
 8007d82:	bf00      	nop
 8007d84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d123      	bne.n	8007dd8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007da6:	69b9      	ldr	r1, [r7, #24]
 8007da8:	0148      	lsls	r0, r1, #5
 8007daa:	69f9      	ldr	r1, [r7, #28]
 8007dac:	4401      	add	r1, r0
 8007dae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007db2:	4313      	orrs	r3, r2
 8007db4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dd4:	6113      	str	r3, [r2, #16]
 8007dd6:	e037      	b.n	8007e48 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	4413      	add	r3, r2
 8007de2:	1e5a      	subs	r2, r3, #1
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	8afa      	ldrh	r2, [r7, #22]
 8007df4:	fb03 f202 	mul.w	r2, r3, r2
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e08:	691a      	ldr	r2, [r3, #16]
 8007e0a:	8afb      	ldrh	r3, [r7, #22]
 8007e0c:	04d9      	lsls	r1, r3, #19
 8007e0e:	4b38      	ldr	r3, [pc, #224]	@ (8007ef0 <USB_EPStartXfer+0x538>)
 8007e10:	400b      	ands	r3, r1
 8007e12:	69b9      	ldr	r1, [r7, #24]
 8007e14:	0148      	lsls	r0, r1, #5
 8007e16:	69f9      	ldr	r1, [r7, #28]
 8007e18:	4401      	add	r1, r0
 8007e1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e38:	69b9      	ldr	r1, [r7, #24]
 8007e3a:	0148      	lsls	r0, r1, #5
 8007e3c:	69f9      	ldr	r1, [r7, #28]
 8007e3e:	4401      	add	r1, r0
 8007e40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e44:	4313      	orrs	r3, r2
 8007e46:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d10d      	bne.n	8007e6a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	68d9      	ldr	r1, [r3, #12]
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e66:	460a      	mov	r2, r1
 8007e68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	791b      	ldrb	r3, [r3, #4]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d128      	bne.n	8007ec4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d110      	bne.n	8007ea4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	0151      	lsls	r1, r2, #5
 8007e94:	69fa      	ldr	r2, [r7, #28]
 8007e96:	440a      	add	r2, r1
 8007e98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e00f      	b.n	8007ec4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	0151      	lsls	r1, r2, #5
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	440a      	add	r2, r1
 8007eba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ec2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	0151      	lsls	r1, r2, #5
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	440a      	add	r2, r1
 8007eda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ede:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	1ff80000 	.word	0x1ff80000

08007ef4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	785b      	ldrb	r3, [r3, #1]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d14a      	bne.n	8007fa8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f2a:	f040 8086 	bne.w	800803a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	7812      	ldrb	r2, [r2, #0]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	7812      	ldrb	r2, [r2, #0]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d902      	bls.n	8007f8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8a:	e056      	b.n	800803a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fa4:	d0e7      	beq.n	8007f76 <USB_EPStopXfer+0x82>
 8007fa6:	e048      	b.n	800803a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fc0:	d13b      	bne.n	800803a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	7812      	ldrb	r2, [r2, #0]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fe0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007fe4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008004:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008008:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3301      	adds	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008016:	4293      	cmp	r3, r2
 8008018:	d902      	bls.n	8008020 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	75fb      	strb	r3, [r7, #23]
          break;
 800801e:	e00c      	b.n	800803a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008038:	d0e7      	beq.n	800800a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800803a:	7dfb      	ldrb	r3, [r7, #23]
}
 800803c:	4618      	mov	r0, r3
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008048:	b480      	push	{r7}
 800804a:	b089      	sub	sp, #36	@ 0x24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4611      	mov	r1, r2
 8008054:	461a      	mov	r2, r3
 8008056:	460b      	mov	r3, r1
 8008058:	71fb      	strb	r3, [r7, #7]
 800805a:	4613      	mov	r3, r2
 800805c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008066:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	d123      	bne.n	80080b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800806e:	88bb      	ldrh	r3, [r7, #4]
 8008070:	3303      	adds	r3, #3
 8008072:	089b      	lsrs	r3, r3, #2
 8008074:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008076:	2300      	movs	r3, #0
 8008078:	61bb      	str	r3, [r7, #24]
 800807a:	e018      	b.n	80080ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	031a      	lsls	r2, r3, #12
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	4413      	add	r3, r2
 8008084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008088:	461a      	mov	r2, r3
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	3301      	adds	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	3301      	adds	r3, #1
 80080a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	3301      	adds	r3, #1
 80080a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	3301      	adds	r3, #1
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d3e2      	bcc.n	800807c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3724      	adds	r7, #36	@ 0x24
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b08b      	sub	sp, #44	@ 0x2c
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080da:	88fb      	ldrh	r3, [r7, #6]
 80080dc:	089b      	lsrs	r3, r3, #2
 80080de:	b29b      	uxth	r3, r3
 80080e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080ea:	2300      	movs	r3, #0
 80080ec:	623b      	str	r3, [r7, #32]
 80080ee:	e014      	b.n	800811a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80080fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fe:	3301      	adds	r3, #1
 8008100:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	3301      	adds	r3, #1
 8008106:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810a:	3301      	adds	r3, #1
 800810c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	3301      	adds	r3, #1
 8008112:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	3301      	adds	r3, #1
 8008118:	623b      	str	r3, [r7, #32]
 800811a:	6a3a      	ldr	r2, [r7, #32]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	429a      	cmp	r2, r3
 8008120:	d3e6      	bcc.n	80080f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008122:	8bfb      	ldrh	r3, [r7, #30]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01e      	beq.n	8008166 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008132:	461a      	mov	r2, r3
 8008134:	f107 0310 	add.w	r3, r7, #16
 8008138:	6812      	ldr	r2, [r2, #0]
 800813a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	fa22 f303 	lsr.w	r3, r2, r3
 8008148:	b2da      	uxtb	r2, r3
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	701a      	strb	r2, [r3, #0]
      i++;
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	3301      	adds	r3, #1
 8008152:	623b      	str	r3, [r7, #32]
      pDest++;
 8008154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008156:	3301      	adds	r3, #1
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800815a:	8bfb      	ldrh	r3, [r7, #30]
 800815c:	3b01      	subs	r3, #1
 800815e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008160:	8bfb      	ldrh	r3, [r7, #30]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1ea      	bne.n	800813c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008168:	4618      	mov	r0, r3
 800816a:	372c      	adds	r7, #44	@ 0x2c
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d12c      	bne.n	80081ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	db12      	blt.n	80081c8 <USB_EPSetStall+0x54>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00f      	beq.n	80081c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	0151      	lsls	r1, r2, #5
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	440a      	add	r2, r1
 80081be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	440a      	add	r2, r1
 80081de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	e02b      	b.n	8008242 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	db12      	blt.n	8008222 <USB_EPSetStall+0xae>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00f      	beq.n	8008222 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	440a      	add	r2, r1
 8008218:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800821c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008220:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	0151      	lsls	r1, r2, #5
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	440a      	add	r2, r1
 8008238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800823c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008240:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d128      	bne.n	80082be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008286:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800828a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	791b      	ldrb	r3, [r3, #4]
 8008290:	2b03      	cmp	r3, #3
 8008292:	d003      	beq.n	800829c <USB_EPClearStall+0x4c>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	791b      	ldrb	r3, [r3, #4]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d138      	bne.n	800830e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	e027      	b.n	800830e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	791b      	ldrb	r3, [r3, #4]
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d003      	beq.n	80082ee <USB_EPClearStall+0x9e>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	791b      	ldrb	r3, [r3, #4]
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d10f      	bne.n	800830e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	0151      	lsls	r1, r2, #5
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	440a      	add	r2, r1
 8008304:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800830c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800833a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800833e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008350:	68f9      	ldr	r1, [r7, #12]
 8008352:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008356:	4313      	orrs	r3, r2
 8008358:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008396:	f023 0302 	bic.w	r3, r3, #2
 800839a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083c4:	f023 0303 	bic.w	r3, r3, #3
 80083c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083d8:	f043 0302 	orr.w	r3, r3, #2
 80083dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4013      	ands	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008404:	68fb      	ldr	r3, [r7, #12]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	4013      	ands	r3, r2
 8008434:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	0c1b      	lsrs	r3, r3, #16
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008446:	b480      	push	{r7}
 8008448:	b085      	sub	sp, #20
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	b29b      	uxth	r3, r3
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800848a:	78fb      	ldrb	r3, [r7, #3]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	4013      	ands	r3, r2
 80084a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084a8:	68bb      	ldr	r3, [r7, #8]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b087      	sub	sp, #28
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	f003 030f 	and.w	r3, r3, #15
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	fa22 f303 	lsr.w	r3, r2, r3
 80084e6:	01db      	lsls	r3, r3, #7
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4013      	ands	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008504:	68bb      	ldr	r3, [r7, #8]
}
 8008506:	4618      	mov	r0, r3
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	f003 0301 	and.w	r3, r3, #1
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800852e:	b480      	push	{r7}
 8008530:	b085      	sub	sp, #20
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008548:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800854c:	f023 0307 	bic.w	r3, r3, #7
 8008550:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008564:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	460b      	mov	r3, r1
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	333c      	adds	r3, #60	@ 0x3c
 800858a:	3304      	adds	r3, #4
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	4a26      	ldr	r2, [pc, #152]	@ (800862c <USB_EP0_OutStart+0xb8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d90a      	bls.n	80085ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085a8:	d101      	bne.n	80085ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e037      	b.n	800861e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b4:	461a      	mov	r2, r3
 80085b6:	2300      	movs	r3, #0
 80085b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085dc:	f043 0318 	orr.w	r3, r3, #24
 80085e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80085f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085f6:	7afb      	ldrb	r3, [r7, #11]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d10f      	bne.n	800861c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008602:	461a      	mov	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008616:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800861a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	371c      	adds	r7, #28
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	4f54300a 	.word	0x4f54300a

08008630 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3301      	adds	r3, #1
 8008640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008648:	d901      	bls.n	800864e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e01b      	b.n	8008686 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	daf2      	bge.n	800863c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f043 0201 	orr.w	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3301      	adds	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008672:	d901      	bls.n	8008678 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e006      	b.n	8008686 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b01      	cmp	r3, #1
 8008682:	d0f0      	beq.n	8008666 <USB_CoreReset+0x36>

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
	...

08008694 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008698:	2200      	movs	r2, #0
 800869a:	4912      	ldr	r1, [pc, #72]	@ (80086e4 <MX_USB_Device_Init+0x50>)
 800869c:	4812      	ldr	r0, [pc, #72]	@ (80086e8 <MX_USB_Device_Init+0x54>)
 800869e:	f000 ffb1 	bl	8009604 <USBD_Init>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <MX_USB_Device_Init+0x18>
    Error_Handler();
 80086a8:	f7f8 f914 	bl	80008d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80086ac:	490f      	ldr	r1, [pc, #60]	@ (80086ec <MX_USB_Device_Init+0x58>)
 80086ae:	480e      	ldr	r0, [pc, #56]	@ (80086e8 <MX_USB_Device_Init+0x54>)
 80086b0:	f000 ffd8 	bl	8009664 <USBD_RegisterClass>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80086ba:	f7f8 f90b 	bl	80008d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80086be:	490c      	ldr	r1, [pc, #48]	@ (80086f0 <MX_USB_Device_Init+0x5c>)
 80086c0:	4809      	ldr	r0, [pc, #36]	@ (80086e8 <MX_USB_Device_Init+0x54>)
 80086c2:	f000 ff33 	bl	800952c <USBD_CDC_RegisterInterface>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80086cc:	f7f8 f902 	bl	80008d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80086d0:	4805      	ldr	r0, [pc, #20]	@ (80086e8 <MX_USB_Device_Init+0x54>)
 80086d2:	f000 ffee 	bl	80096b2 <USBD_Start>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80086dc:	f7f8 f8fa 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80086e0:	bf00      	nop
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000020 	.word	0x20000020
 80086e8:	20000750 	.word	0x20000750
 80086ec:	20000080 	.word	0x20000080
 80086f0:	2000000c 	.word	0x2000000c

080086f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80086f8:	2200      	movs	r2, #0
 80086fa:	4905      	ldr	r1, [pc, #20]	@ (8008710 <CDC_Init_FS+0x1c>)
 80086fc:	4805      	ldr	r0, [pc, #20]	@ (8008714 <CDC_Init_FS+0x20>)
 80086fe:	f000 ff2a 	bl	8009556 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008702:	4905      	ldr	r1, [pc, #20]	@ (8008718 <CDC_Init_FS+0x24>)
 8008704:	4803      	ldr	r0, [pc, #12]	@ (8008714 <CDC_Init_FS+0x20>)
 8008706:	f000 ff3f 	bl	8009588 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800870a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800870c:	4618      	mov	r0, r3
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20001220 	.word	0x20001220
 8008714:	20000750 	.word	0x20000750
 8008718:	20000a20 	.word	0x20000a20

0800871c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008720:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008722:	4618      	mov	r0, r3
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	6039      	str	r1, [r7, #0]
 8008736:	71fb      	strb	r3, [r7, #7]
 8008738:	4613      	mov	r3, r2
 800873a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2b23      	cmp	r3, #35	@ 0x23
 8008740:	d84a      	bhi.n	80087d8 <CDC_Control_FS+0xac>
 8008742:	a201      	add	r2, pc, #4	@ (adr r2, 8008748 <CDC_Control_FS+0x1c>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	080087d9 	.word	0x080087d9
 800874c:	080087d9 	.word	0x080087d9
 8008750:	080087d9 	.word	0x080087d9
 8008754:	080087d9 	.word	0x080087d9
 8008758:	080087d9 	.word	0x080087d9
 800875c:	080087d9 	.word	0x080087d9
 8008760:	080087d9 	.word	0x080087d9
 8008764:	080087d9 	.word	0x080087d9
 8008768:	080087d9 	.word	0x080087d9
 800876c:	080087d9 	.word	0x080087d9
 8008770:	080087d9 	.word	0x080087d9
 8008774:	080087d9 	.word	0x080087d9
 8008778:	080087d9 	.word	0x080087d9
 800877c:	080087d9 	.word	0x080087d9
 8008780:	080087d9 	.word	0x080087d9
 8008784:	080087d9 	.word	0x080087d9
 8008788:	080087d9 	.word	0x080087d9
 800878c:	080087d9 	.word	0x080087d9
 8008790:	080087d9 	.word	0x080087d9
 8008794:	080087d9 	.word	0x080087d9
 8008798:	080087d9 	.word	0x080087d9
 800879c:	080087d9 	.word	0x080087d9
 80087a0:	080087d9 	.word	0x080087d9
 80087a4:	080087d9 	.word	0x080087d9
 80087a8:	080087d9 	.word	0x080087d9
 80087ac:	080087d9 	.word	0x080087d9
 80087b0:	080087d9 	.word	0x080087d9
 80087b4:	080087d9 	.word	0x080087d9
 80087b8:	080087d9 	.word	0x080087d9
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	080087d9 	.word	0x080087d9
 80087c4:	080087d9 	.word	0x080087d9
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	080087d9 	.word	0x080087d9
 80087d0:	080087d9 	.word	0x080087d9
 80087d4:	080087d9 	.word	0x080087d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80087d8:	bf00      	nop
  }

  return (USBD_OK);
 80087da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	4807      	ldr	r0, [pc, #28]	@ (8008814 <CDC_Receive_FS+0x2c>)
 80087f6:	f000 fec7 	bl	8009588 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087fa:	4806      	ldr	r0, [pc, #24]	@ (8008814 <CDC_Receive_FS+0x2c>)
 80087fc:	f000 fed8 	bl	80095b0 <USBD_CDC_ReceivePacket>

  test_cmd = (char)Buf[0];
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	4b04      	ldr	r3, [pc, #16]	@ (8008818 <CDC_Receive_FS+0x30>)
 8008806:	701a      	strb	r2, [r3, #0]
//	  data = get_register(&device_registers,addr);
//	  msg_tx = ((addr << 24)&0x7F000000) | (data&0x00FFFFFF);
//	  CDC_Transmit_FS((uint8_t*)&msg_tx,sizeof(msg_tx));
//  }

  return (USBD_OK);
 8008808:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20000750 	.word	0x20000750
 8008818:	20000748 	.word	0x20000748

0800881c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800882e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008832:	4618      	mov	r0, r3
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
	...

08008840 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2212      	movs	r2, #18
 8008850:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008852:	4b03      	ldr	r3, [pc, #12]	@ (8008860 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	20000040 	.word	0x20000040

08008864 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	6039      	str	r1, [r7, #0]
 800886e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	2204      	movs	r2, #4
 8008874:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008876:	4b03      	ldr	r3, [pc, #12]	@ (8008884 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	20000054 	.word	0x20000054

08008888 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d105      	bne.n	80088a6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	4907      	ldr	r1, [pc, #28]	@ (80088bc <USBD_CDC_ProductStrDescriptor+0x34>)
 800889e:	4808      	ldr	r0, [pc, #32]	@ (80088c0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80088a0:	f001 ff10 	bl	800a6c4 <USBD_GetString>
 80088a4:	e004      	b.n	80088b0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	4904      	ldr	r1, [pc, #16]	@ (80088bc <USBD_CDC_ProductStrDescriptor+0x34>)
 80088aa:	4805      	ldr	r0, [pc, #20]	@ (80088c0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80088ac:	f001 ff0a 	bl	800a6c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088b0:	4b02      	ldr	r3, [pc, #8]	@ (80088bc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20001a20 	.word	0x20001a20
 80088c0:	0800a8f4 	.word	0x0800a8f4

080088c4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	6039      	str	r1, [r7, #0]
 80088ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	4904      	ldr	r1, [pc, #16]	@ (80088e4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80088d4:	4804      	ldr	r0, [pc, #16]	@ (80088e8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80088d6:	f001 fef5 	bl	800a6c4 <USBD_GetString>
  return USBD_StrDesc;
 80088da:	4b02      	ldr	r3, [pc, #8]	@ (80088e4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20001a20 	.word	0x20001a20
 80088e8:	0800a90c 	.word	0x0800a90c

080088ec <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	6039      	str	r1, [r7, #0]
 80088f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	221a      	movs	r2, #26
 80088fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088fe:	f000 f843 	bl	8008988 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008902:	4b02      	ldr	r3, [pc, #8]	@ (800890c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20000058 	.word	0x20000058

08008910 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	4907      	ldr	r1, [pc, #28]	@ (8008944 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008926:	4808      	ldr	r0, [pc, #32]	@ (8008948 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008928:	f001 fecc 	bl	800a6c4 <USBD_GetString>
 800892c:	e004      	b.n	8008938 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	4904      	ldr	r1, [pc, #16]	@ (8008944 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008932:	4805      	ldr	r0, [pc, #20]	@ (8008948 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008934:	f001 fec6 	bl	800a6c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008938:	4b02      	ldr	r3, [pc, #8]	@ (8008944 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20001a20 	.word	0x20001a20
 8008948:	0800a920 	.word	0x0800a920

0800894c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	6039      	str	r1, [r7, #0]
 8008956:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d105      	bne.n	800896a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	4907      	ldr	r1, [pc, #28]	@ (8008980 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008962:	4808      	ldr	r0, [pc, #32]	@ (8008984 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008964:	f001 feae 	bl	800a6c4 <USBD_GetString>
 8008968:	e004      	b.n	8008974 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	4904      	ldr	r1, [pc, #16]	@ (8008980 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800896e:	4805      	ldr	r0, [pc, #20]	@ (8008984 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008970:	f001 fea8 	bl	800a6c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008974:	4b02      	ldr	r3, [pc, #8]	@ (8008980 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20001a20 	.word	0x20001a20
 8008984:	0800a92c 	.word	0x0800a92c

08008988 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800898e:	4b0f      	ldr	r3, [pc, #60]	@ (80089cc <Get_SerialNum+0x44>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008994:	4b0e      	ldr	r3, [pc, #56]	@ (80089d0 <Get_SerialNum+0x48>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800899a:	4b0e      	ldr	r3, [pc, #56]	@ (80089d4 <Get_SerialNum+0x4c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4413      	add	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089ae:	2208      	movs	r2, #8
 80089b0:	4909      	ldr	r1, [pc, #36]	@ (80089d8 <Get_SerialNum+0x50>)
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 f814 	bl	80089e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089b8:	2204      	movs	r2, #4
 80089ba:	4908      	ldr	r1, [pc, #32]	@ (80089dc <Get_SerialNum+0x54>)
 80089bc:	68b8      	ldr	r0, [r7, #8]
 80089be:	f000 f80f 	bl	80089e0 <IntToUnicode>
  }
}
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	0bfa0700 	.word	0x0bfa0700
 80089d0:	0bfa0704 	.word	0x0bfa0704
 80089d4:	0bfa0708 	.word	0x0bfa0708
 80089d8:	2000005a 	.word	0x2000005a
 80089dc:	2000006a 	.word	0x2000006a

080089e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089f2:	2300      	movs	r3, #0
 80089f4:	75fb      	strb	r3, [r7, #23]
 80089f6:	e027      	b.n	8008a48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	0f1b      	lsrs	r3, r3, #28
 80089fc:	2b09      	cmp	r3, #9
 80089fe:	d80b      	bhi.n	8008a18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	0f1b      	lsrs	r3, r3, #28
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	440b      	add	r3, r1
 8008a10:	3230      	adds	r2, #48	@ 0x30
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e00a      	b.n	8008a2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	0f1b      	lsrs	r3, r3, #28
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	4619      	mov	r1, r3
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	440b      	add	r3, r1
 8008a28:	3237      	adds	r2, #55	@ 0x37
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	3301      	adds	r3, #1
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	2200      	movs	r2, #0
 8008a40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	3301      	adds	r3, #1
 8008a46:	75fb      	strb	r3, [r7, #23]
 8008a48:	7dfa      	ldrb	r2, [r7, #23]
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d3d3      	bcc.n	80089f8 <IntToUnicode+0x18>
  }
}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f000 fe67 	bl	8009748 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	f000 fea1 	bl	80097f2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008aca:	78fa      	ldrb	r2, [r7, #3]
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3320      	adds	r3, #32
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	f000 feea 	bl	80098b8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 ffee 	bl	8009adc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	79db      	ldrb	r3, [r3, #7]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d001      	beq.n	8008b20 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b1c:	f7f7 feda 	bl	80008d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b26:	7bfa      	ldrb	r2, [r7, #15]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 ff9b 	bl	8009a66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 ff54 	bl	80099e4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008b3c:	bf00      	nop
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 ff97 	bl	8009a86 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	7adb      	ldrb	r3, [r3, #11]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b60:	4b04      	ldr	r3, [pc, #16]	@ (8008b74 <HAL_PCD_SuspendCallback+0x30>)
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	4a03      	ldr	r2, [pc, #12]	@ (8008b74 <HAL_PCD_SuspendCallback+0x30>)
 8008b66:	f043 0306 	orr.w	r3, r3, #6
 8008b6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	e000ed00 	.word	0xe000ed00

08008b78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	7adb      	ldrb	r3, [r3, #11]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d007      	beq.n	8008b98 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b88:	4b08      	ldr	r3, [pc, #32]	@ (8008bac <HAL_PCD_ResumeCallback+0x34>)
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	4a07      	ldr	r2, [pc, #28]	@ (8008bac <HAL_PCD_ResumeCallback+0x34>)
 8008b8e:	f023 0306 	bic.w	r3, r3, #6
 8008b92:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008b94:	f000 fa2a 	bl	8008fec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 ff86 	bl	8009ab0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	e000ed00 	.word	0xe000ed00

08008bb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 ffaf 	bl	8009b2a <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	4611      	mov	r1, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 ff90 	bl	8009b10 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 ff9c 	bl	8009b44 <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 ff99 	bl	8009b5a <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008c38:	4a24      	ldr	r2, [pc, #144]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a22      	ldr	r2, [pc, #136]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c44:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008c48:	f7fa fe4c 	bl	80038e4 <HAL_PWREx_EnableVddUSB>
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler( );
  }
#else
  hpcd_USB_FS.Instance = USB_OTG_FS;
 8008c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c4e:	4a20      	ldr	r2, [pc, #128]	@ (8008cd0 <USBD_LL_Init+0xa0>)
 8008c50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 6;
 8008c52:	4b1e      	ldr	r3, [pc, #120]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c54:	2206      	movs	r2, #6
 8008c56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c58:	4b1c      	ldr	r3, [pc, #112]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008c64:	4b19      	ldr	r3, [pc, #100]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008c6a:	4b18      	ldr	r3, [pc, #96]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008c70:	4b16      	ldr	r3, [pc, #88]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	735a      	strb	r2, [r3, #13]
  hpcd_USB_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c76:	4b15      	ldr	r3, [pc, #84]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_FS.Init.vbus_sensing_enable = DISABLE;
 8008c7c:	4b13      	ldr	r3, [pc, #76]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008c82:	4812      	ldr	r0, [pc, #72]	@ (8008ccc <USBD_LL_Init+0x9c>)
 8008c84:	f7f9 fb08 	bl	8002298 <HAL_PCD_Init>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <USBD_LL_Init+0x62>
  {
    Error_Handler();
 8008c8e:	f7f7 fe21 	bl	80008d4 <Error_Handler>
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , 0, 0xC0);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , 0, 0x110);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , 0, 0x100);
#else
  HAL_PCDEx_SetRxFiFo((PCD_HandleTypeDef*)pdev->pData, 0x80);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008c98:	2180      	movs	r1, #128	@ 0x80
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fa fd61 	bl	8003762 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 0, 0x40);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008ca6:	2240      	movs	r2, #64	@ 0x40
 8008ca8:	2100      	movs	r1, #0
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fa fd12 	bl	80036d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo((PCD_HandleTypeDef*)pdev->pData, 1, 0x80);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008cb6:	2280      	movs	r2, #128	@ 0x80
 8008cb8:	2101      	movs	r1, #1
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fa fd0a 	bl	80036d4 <HAL_PCDEx_SetTxFiFo>
#endif
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20001c20 	.word	0x20001c20
 8008cd0:	42040000 	.word	0x42040000

08008cd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7f9 fbec 	bl	80024c8 <HAL_PCD_Start>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 f97e 	bl	8008ff8 <USBD_Get_USB_Status>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	461a      	mov	r2, r3
 8008d18:	4603      	mov	r3, r0
 8008d1a:	70fb      	strb	r3, [r7, #3]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70bb      	strb	r3, [r7, #2]
 8008d20:	4613      	mov	r3, r2
 8008d22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008d32:	78bb      	ldrb	r3, [r7, #2]
 8008d34:	883a      	ldrh	r2, [r7, #0]
 8008d36:	78f9      	ldrb	r1, [r7, #3]
 8008d38:	f7fa f8e7 	bl	8002f0a <HAL_PCD_EP_Open>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f958 	bl	8008ff8 <USBD_Get_USB_Status>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	4611      	mov	r1, r2
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fa f932 	bl	8002fde <HAL_PCD_EP_Close>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 f939 	bl	8008ff8 <USBD_Get_USB_Status>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008dae:	78fa      	ldrb	r2, [r7, #3]
 8008db0:	4611      	mov	r1, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fa f9ea 	bl	800318c <HAL_PCD_EP_SetStall>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 f91a 	bl	8008ff8 <USBD_Get_USB_Status>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	4611      	mov	r1, r2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fa fa2e 	bl	8003252 <HAL_PCD_EP_ClrStall>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 f8fb 	bl	8008ff8 <USBD_Get_USB_Status>
 8008e02:	4603      	mov	r3, r0
 8008e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008e22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	da0b      	bge.n	8008e44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	4613      	mov	r3, r2
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	440b      	add	r3, r1
 8008e3e:	3316      	adds	r3, #22
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	e00b      	b.n	8008e5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	4413      	add	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008e5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	4611      	mov	r1, r2
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fa f81b 	bl	8002ec2 <HAL_PCD_SetAddress>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 f8b0 	bl	8008ff8 <USBD_Get_USB_Status>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b086      	sub	sp, #24
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008ec4:	7af9      	ldrb	r1, [r7, #11]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	f7fa f925 	bl	8003118 <HAL_PCD_EP_Transmit>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 f88f 	bl	8008ff8 <USBD_Get_USB_Status>
 8008eda:	4603      	mov	r3, r0
 8008edc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ede:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f06:	7af9      	ldrb	r1, [r7, #11]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	f7fa f8b1 	bl	8003072 <HAL_PCD_EP_Receive>
 8008f10:	4603      	mov	r3, r0
 8008f12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f86e 	bl	8008ff8 <USBD_Get_USB_Status>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f20:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	460b      	mov	r3, r1
 8008f34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fa f8d1 	bl	80030e8 <HAL_PCD_EP_GetRxCount>
 8008f46:	4603      	mov	r3, r0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <HAL_PCDEx_LPM_Callback+0x18>
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d013      	beq.n	8008f8e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8008f66:	e023      	b.n	8008fb0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7adb      	ldrb	r3, [r3, #11]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d007      	beq.n	8008f80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008f70:	f000 f83c 	bl	8008fec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f74:	4b10      	ldr	r3, [pc, #64]	@ (8008fb8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	4a0f      	ldr	r2, [pc, #60]	@ (8008fb8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008f7a:	f023 0306 	bic.w	r3, r3, #6
 8008f7e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fd92 	bl	8009ab0 <USBD_LL_Resume>
    break;
 8008f8c:	e010      	b.n	8008fb0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 fd76 	bl	8009a86 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7adb      	ldrb	r3, [r3, #11]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fa2:	4b05      	ldr	r3, [pc, #20]	@ (8008fb8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	4a04      	ldr	r2, [pc, #16]	@ (8008fb8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008fa8:	f043 0306 	orr.w	r3, r3, #6
 8008fac:	6113      	str	r3, [r2, #16]
    break;
 8008fae:	bf00      	nop
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	e000ed00 	.word	0xe000ed00

08008fbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fc4:	4b03      	ldr	r3, [pc, #12]	@ (8008fd4 <USBD_static_malloc+0x18>)
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	20002104 	.word	0x20002104

08008fd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]

}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008ff0:	f7f7 fa24 	bl	800043c <SystemClock_Config>
}
 8008ff4:	bf00      	nop
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	2b03      	cmp	r3, #3
 800900a:	d817      	bhi.n	800903c <USBD_Get_USB_Status+0x44>
 800900c:	a201      	add	r2, pc, #4	@ (adr r2, 8009014 <USBD_Get_USB_Status+0x1c>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	08009025 	.word	0x08009025
 8009018:	0800902b 	.word	0x0800902b
 800901c:	08009031 	.word	0x08009031
 8009020:	08009037 	.word	0x08009037
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	e00b      	b.n	8009042 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800902a:	2303      	movs	r3, #3
 800902c:	73fb      	strb	r3, [r7, #15]
    break;
 800902e:	e008      	b.n	8009042 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009030:	2301      	movs	r3, #1
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	e005      	b.n	8009042 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009036:	2303      	movs	r3, #3
 8009038:	73fb      	strb	r3, [r7, #15]
    break;
 800903a:	e002      	b.n	8009042 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	73fb      	strb	r3, [r7, #15]
    break;
 8009040:	bf00      	nop
  }
  return usb_status;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800905c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009060:	f7ff ffac 	bl	8008fbc <USBD_static_malloc>
 8009064:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d105      	bne.n	8009078 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009074:	2302      	movs	r3, #2
 8009076:	e066      	b.n	8009146 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	7c1b      	ldrb	r3, [r3, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d119      	bne.n	80090bc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009088:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800908c:	2202      	movs	r2, #2
 800908e:	2181      	movs	r1, #129	@ 0x81
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff fe3a 	bl	8008d0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800909c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090a0:	2202      	movs	r2, #2
 80090a2:	2101      	movs	r1, #1
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff fe30 	bl	8008d0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2210      	movs	r2, #16
 80090b6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80090ba:	e016      	b.n	80090ea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090bc:	2340      	movs	r3, #64	@ 0x40
 80090be:	2202      	movs	r2, #2
 80090c0:	2181      	movs	r1, #129	@ 0x81
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff fe21 	bl	8008d0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090ce:	2340      	movs	r3, #64	@ 0x40
 80090d0:	2202      	movs	r2, #2
 80090d2:	2101      	movs	r1, #1
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff fe18 	bl	8008d0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2210      	movs	r2, #16
 80090e6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090ea:	2308      	movs	r3, #8
 80090ec:	2203      	movs	r2, #3
 80090ee:	2182      	movs	r1, #130	@ 0x82
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff fe0a 	bl	8008d0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	7c1b      	ldrb	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d109      	bne.n	8009134 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800912a:	2101      	movs	r1, #1
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff fedb 	bl	8008ee8 <USBD_LL_PrepareReceive>
 8009132:	e007      	b.n	8009144 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800913a:	2340      	movs	r3, #64	@ 0x40
 800913c:	2101      	movs	r1, #1
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff fed2 	bl	8008ee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800915a:	2181      	movs	r1, #129	@ 0x81
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fdfa 	bl	8008d56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009168:	2101      	movs	r1, #1
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff fdf3 	bl	8008d56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009178:	2182      	movs	r1, #130	@ 0x82
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fdeb 	bl	8008d56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00e      	beq.n	80091b8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff ff14 	bl	8008fd8 <USBD_static_free>
    pdev->pClassData = NULL;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091d4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d03a      	beq.n	8009264 <USBD_CDC_Setup+0xa0>
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	f040 8097 	bne.w	8009322 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	88db      	ldrh	r3, [r3, #6]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d029      	beq.n	8009250 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	b25b      	sxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	da11      	bge.n	800922a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009212:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	88d2      	ldrh	r2, [r2, #6]
 8009218:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800921a:	6939      	ldr	r1, [r7, #16]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	88db      	ldrh	r3, [r3, #6]
 8009220:	461a      	mov	r2, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f001 faae 	bl	800a784 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009228:	e082      	b.n	8009330 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	785a      	ldrb	r2, [r3, #1]
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	88db      	ldrh	r3, [r3, #6]
 8009238:	b2da      	uxtb	r2, r3
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009240:	6939      	ldr	r1, [r7, #16]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	88db      	ldrh	r3, [r3, #6]
 8009246:	461a      	mov	r2, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 fac7 	bl	800a7dc <USBD_CtlPrepareRx>
      break;
 800924e:	e06f      	b.n	8009330 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	7850      	ldrb	r0, [r2, #1]
 800925c:	2200      	movs	r2, #0
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	4798      	blx	r3
      break;
 8009262:	e065      	b.n	8009330 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b0b      	cmp	r3, #11
 800926a:	d84f      	bhi.n	800930c <USBD_CDC_Setup+0x148>
 800926c:	a201      	add	r2, pc, #4	@ (adr r2, 8009274 <USBD_CDC_Setup+0xb0>)
 800926e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009272:	bf00      	nop
 8009274:	080092a5 	.word	0x080092a5
 8009278:	0800931b 	.word	0x0800931b
 800927c:	0800930d 	.word	0x0800930d
 8009280:	0800930d 	.word	0x0800930d
 8009284:	0800930d 	.word	0x0800930d
 8009288:	0800930d 	.word	0x0800930d
 800928c:	0800930d 	.word	0x0800930d
 8009290:	0800930d 	.word	0x0800930d
 8009294:	0800930d 	.word	0x0800930d
 8009298:	0800930d 	.word	0x0800930d
 800929c:	080092cd 	.word	0x080092cd
 80092a0:	080092f5 	.word	0x080092f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092aa:	2b03      	cmp	r3, #3
 80092ac:	d107      	bne.n	80092be <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092ae:	f107 030c 	add.w	r3, r7, #12
 80092b2:	2202      	movs	r2, #2
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 fa64 	bl	800a784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092bc:	e030      	b.n	8009320 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f001 f9ee 	bl	800a6a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80092c6:	2303      	movs	r3, #3
 80092c8:	75fb      	strb	r3, [r7, #23]
          break;
 80092ca:	e029      	b.n	8009320 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d107      	bne.n	80092e6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80092d6:	f107 030f 	add.w	r3, r7, #15
 80092da:	2201      	movs	r2, #1
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 fa50 	bl	800a784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092e4:	e01c      	b.n	8009320 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 f9da 	bl	800a6a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80092ee:	2303      	movs	r3, #3
 80092f0:	75fb      	strb	r3, [r7, #23]
          break;
 80092f2:	e015      	b.n	8009320 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d00f      	beq.n	800931e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 f9ce 	bl	800a6a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009306:	2303      	movs	r3, #3
 8009308:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800930a:	e008      	b.n	800931e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f9c7 	bl	800a6a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009314:	2303      	movs	r3, #3
 8009316:	75fb      	strb	r3, [r7, #23]
          break;
 8009318:	e002      	b.n	8009320 <USBD_CDC_Setup+0x15c>
          break;
 800931a:	bf00      	nop
 800931c:	e008      	b.n	8009330 <USBD_CDC_Setup+0x16c>
          break;
 800931e:	bf00      	nop
      }
      break;
 8009320:	e006      	b.n	8009330 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 f9bc 	bl	800a6a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800932a:	2303      	movs	r3, #3
 800932c:	75fb      	strb	r3, [r7, #23]
      break;
 800932e:	bf00      	nop
  }

  return (uint8_t)ret;
 8009330:	7dfb      	ldrb	r3, [r7, #23]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop

0800933c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800934e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800935a:	2303      	movs	r3, #3
 800935c:	e04f      	b.n	80093fe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009364:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	3318      	adds	r3, #24
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d029      	beq.n	80093d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800937c:	78fa      	ldrb	r2, [r7, #3]
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	440b      	add	r3, r1
 800938a:	3318      	adds	r3, #24
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	78f9      	ldrb	r1, [r7, #3]
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	460b      	mov	r3, r1
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	440b      	add	r3, r1
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4403      	add	r3, r0
 800939c:	331c      	adds	r3, #28
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80093a4:	fb01 f303 	mul.w	r3, r1, r3
 80093a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d110      	bne.n	80093d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80093ae:	78fa      	ldrb	r2, [r7, #3]
 80093b0:	6879      	ldr	r1, [r7, #4]
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	440b      	add	r3, r1
 80093bc:	3318      	adds	r3, #24
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093c2:	78f9      	ldrb	r1, [r7, #3]
 80093c4:	2300      	movs	r3, #0
 80093c6:	2200      	movs	r2, #0
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff fd6c 	bl	8008ea6 <USBD_LL_Transmit>
 80093ce:	e015      	b.n	80093fc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00b      	beq.n	80093fc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009418:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009424:	2303      	movs	r3, #3
 8009426:	e015      	b.n	8009454 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff fd7c 	bl	8008f2a <USBD_LL_GetRxDataSize>
 8009432:	4602      	mov	r2, r0
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800944e:	4611      	mov	r1, r2
 8009450:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800946a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d014      	beq.n	80094a0 <USBD_CDC_EP0_RxReady+0x44>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800947c:	2bff      	cmp	r3, #255	@ 0xff
 800947e:	d00f      	beq.n	80094a0 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800948e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009496:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	22ff      	movs	r2, #255	@ 0xff
 800949c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2243      	movs	r2, #67	@ 0x43
 80094b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80094ba:	4b03      	ldr	r3, [pc, #12]	@ (80094c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	200000fc 	.word	0x200000fc

080094cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2243      	movs	r2, #67	@ 0x43
 80094d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80094da:	4b03      	ldr	r3, [pc, #12]	@ (80094e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	200000b8 	.word	0x200000b8

080094ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2243      	movs	r2, #67	@ 0x43
 80094f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80094fa:	4b03      	ldr	r3, [pc, #12]	@ (8009508 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	20000140 	.word	0x20000140

0800950c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	220a      	movs	r2, #10
 8009518:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800951a:	4b03      	ldr	r3, [pc, #12]	@ (8009528 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	20000074 	.word	0x20000074

0800952c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800953c:	2303      	movs	r3, #3
 800953e:	e004      	b.n	800954a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009556:	b480      	push	{r7}
 8009558:	b087      	sub	sp, #28
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009568:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	371c      	adds	r7, #28
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009598:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e016      	b.n	80095fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	7c1b      	ldrb	r3, [r3, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d109      	bne.n	80095ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095e0:	2101      	movs	r1, #1
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff fc80 	bl	8008ee8 <USBD_LL_PrepareReceive>
 80095e8:	e007      	b.n	80095fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095f0:	2340      	movs	r3, #64	@ 0x40
 80095f2:	2101      	movs	r1, #1
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7ff fc77 	bl	8008ee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	4613      	mov	r3, r2
 8009610:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	e01f      	b.n	800965c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	79fa      	ldrb	r2, [r7, #7]
 800964e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7ff faed 	bl	8008c30 <USBD_LL_Init>
 8009656:	4603      	mov	r3, r0
 8009658:	75fb      	strb	r3, [r7, #23]

  return ret;
 800965a:	7dfb      	ldrb	r3, [r7, #23]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009678:	2303      	movs	r3, #3
 800967a:	e016      	b.n	80096aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800968a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00b      	beq.n	80096a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009698:	f107 020e 	add.w	r2, r7, #14
 800969c:	4610      	mov	r0, r2
 800969e:	4798      	blx	r3
 80096a0:	4602      	mov	r2, r0
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7ff fb0a 	bl	8008cd4 <USBD_LL_Start>
 80096c0:	4603      	mov	r3, r0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80096ec:	2303      	movs	r3, #3
 80096ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d009      	beq.n	800970e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	78fa      	ldrb	r2, [r7, #3]
 8009704:	4611      	mov	r1, r2
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	4798      	blx	r3
 800970a:	4603      	mov	r3, r0
 800970c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800970e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d007      	beq.n	800973e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	78fa      	ldrb	r2, [r7, #3]
 8009738:	4611      	mov	r1, r2
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	4798      	blx	r3
  }

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	f000 ff67 	bl	800a62e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800976e:	461a      	mov	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800977c:	f003 031f 	and.w	r3, r3, #31
 8009780:	2b02      	cmp	r3, #2
 8009782:	d01a      	beq.n	80097ba <USBD_LL_SetupStage+0x72>
 8009784:	2b02      	cmp	r3, #2
 8009786:	d822      	bhi.n	80097ce <USBD_LL_SetupStage+0x86>
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <USBD_LL_SetupStage+0x4a>
 800978c:	2b01      	cmp	r3, #1
 800978e:	d00a      	beq.n	80097a6 <USBD_LL_SetupStage+0x5e>
 8009790:	e01d      	b.n	80097ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fa18 	bl	8009bd0 <USBD_StdDevReq>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73fb      	strb	r3, [r7, #15]
      break;
 80097a4:	e020      	b.n	80097e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fa7c 	bl	8009cac <USBD_StdItfReq>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]
      break;
 80097b8:	e016      	b.n	80097e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 faba 	bl	8009d3c <USBD_StdEPReq>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
      break;
 80097cc:	e00c      	b.n	80097e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff fad9 	bl	8008d94 <USBD_LL_StallEP>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73fb      	strb	r3, [r7, #15]
      break;
 80097e6:	bf00      	nop
  }

  return ret;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b086      	sub	sp, #24
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	460b      	mov	r3, r1
 80097fc:	607a      	str	r2, [r7, #4]
 80097fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009800:	7afb      	ldrb	r3, [r7, #11]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d137      	bne.n	8009876 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800980c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009814:	2b03      	cmp	r3, #3
 8009816:	d14a      	bne.n	80098ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	429a      	cmp	r2, r3
 8009822:	d913      	bls.n	800984c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	689a      	ldr	r2, [r3, #8]
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	1ad2      	subs	r2, r2, r3
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	4293      	cmp	r3, r2
 800983c:	bf28      	it	cs
 800983e:	4613      	movcs	r3, r2
 8009840:	461a      	mov	r2, r3
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 ffe6 	bl	800a816 <USBD_CtlContinueRx>
 800984a:	e030      	b.n	80098ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00a      	beq.n	800986e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800985e:	2b03      	cmp	r3, #3
 8009860:	d105      	bne.n	800986e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 ffe2 	bl	800a838 <USBD_CtlSendStatus>
 8009874:	e01b      	b.n	80098ae <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d013      	beq.n	80098aa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009888:	2b03      	cmp	r3, #3
 800988a:	d10e      	bne.n	80098aa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	7afa      	ldrb	r2, [r7, #11]
 8009896:	4611      	mov	r1, r2
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	4798      	blx	r3
 800989c:	4603      	mov	r3, r0
 800989e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
 80098a8:	e002      	b.n	80098b0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e000      	b.n	80098b0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	460b      	mov	r3, r1
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d16a      	bne.n	80099a2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3314      	adds	r3, #20
 80098d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d155      	bne.n	8009988 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d914      	bls.n	8009912 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	1ad2      	subs	r2, r2, r3
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	461a      	mov	r2, r3
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 ff5b 	bl	800a7ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009904:	2300      	movs	r3, #0
 8009906:	2200      	movs	r2, #0
 8009908:	2100      	movs	r1, #0
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7ff faec 	bl	8008ee8 <USBD_LL_PrepareReceive>
 8009910:	e03a      	b.n	8009988 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	429a      	cmp	r2, r3
 800991c:	d11c      	bne.n	8009958 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009926:	429a      	cmp	r2, r3
 8009928:	d316      	bcc.n	8009958 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009934:	429a      	cmp	r2, r3
 8009936:	d20f      	bcs.n	8009958 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009938:	2200      	movs	r2, #0
 800993a:	2100      	movs	r1, #0
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 ff3c 	bl	800a7ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800994a:	2300      	movs	r3, #0
 800994c:	2200      	movs	r2, #0
 800994e:	2100      	movs	r1, #0
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f7ff fac9 	bl	8008ee8 <USBD_LL_PrepareReceive>
 8009956:	e017      	b.n	8009988 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00a      	beq.n	800997a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800996a:	2b03      	cmp	r3, #3
 800996c:	d105      	bne.n	800997a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800997a:	2180      	movs	r1, #128	@ 0x80
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f7ff fa09 	bl	8008d94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 ff6b 	bl	800a85e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800998e:	2b01      	cmp	r3, #1
 8009990:	d123      	bne.n	80099da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7ff fe99 	bl	80096ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80099a0:	e01b      	b.n	80099da <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d013      	beq.n	80099d6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d10e      	bne.n	80099d6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	7afa      	ldrb	r2, [r7, #11]
 80099c2:	4611      	mov	r1, r2
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	4798      	blx	r3
 80099c8:	4603      	mov	r3, r0
 80099ca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	e002      	b.n	80099dc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e000      	b.n	80099dc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d009      	beq.n	8009a28 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	6852      	ldr	r2, [r2, #4]
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	4611      	mov	r1, r2
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a28:	2340      	movs	r3, #64	@ 0x40
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff f96b 	bl	8008d0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2240      	movs	r2, #64	@ 0x40
 8009a40:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a44:	2340      	movs	r3, #64	@ 0x40
 8009a46:	2200      	movs	r2, #0
 8009a48:	2180      	movs	r1, #128	@ 0x80
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff f95d 	bl	8008d0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2240      	movs	r2, #64	@ 0x40
 8009a5a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	78fa      	ldrb	r2, [r7, #3]
 8009a76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2204      	movs	r2, #4
 8009a9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d105      	bne.n	8009ace <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d10b      	bne.n	8009b06 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	460b      	mov	r3, r1
 8009b34:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d009      	beq.n	8009b88 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	6852      	ldr	r2, [r2, #4]
 8009b80:	b2d2      	uxtb	r2, r2
 8009b82:	4611      	mov	r1, r2
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	4798      	blx	r3
  }

  return USBD_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b087      	sub	sp, #28
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009bb0:	8a3b      	ldrh	r3, [r7, #16]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	b21a      	sxth	r2, r3
 8009bb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	b21b      	sxth	r3, r3
 8009bbe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009bc0:	89fb      	ldrh	r3, [r7, #14]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
	...

08009bd0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009be6:	2b40      	cmp	r3, #64	@ 0x40
 8009be8:	d005      	beq.n	8009bf6 <USBD_StdDevReq+0x26>
 8009bea:	2b40      	cmp	r3, #64	@ 0x40
 8009bec:	d853      	bhi.n	8009c96 <USBD_StdDevReq+0xc6>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <USBD_StdDevReq+0x3a>
 8009bf2:	2b20      	cmp	r3, #32
 8009bf4:	d14f      	bne.n	8009c96 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	4798      	blx	r3
 8009c04:	4603      	mov	r3, r0
 8009c06:	73fb      	strb	r3, [r7, #15]
    break;
 8009c08:	e04a      	b.n	8009ca0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	785b      	ldrb	r3, [r3, #1]
 8009c0e:	2b09      	cmp	r3, #9
 8009c10:	d83b      	bhi.n	8009c8a <USBD_StdDevReq+0xba>
 8009c12:	a201      	add	r2, pc, #4	@ (adr r2, 8009c18 <USBD_StdDevReq+0x48>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009c6d 	.word	0x08009c6d
 8009c1c:	08009c81 	.word	0x08009c81
 8009c20:	08009c8b 	.word	0x08009c8b
 8009c24:	08009c77 	.word	0x08009c77
 8009c28:	08009c8b 	.word	0x08009c8b
 8009c2c:	08009c4b 	.word	0x08009c4b
 8009c30:	08009c41 	.word	0x08009c41
 8009c34:	08009c8b 	.word	0x08009c8b
 8009c38:	08009c63 	.word	0x08009c63
 8009c3c:	08009c55 	.word	0x08009c55
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f9da 	bl	8009ffc <USBD_GetDescriptor>
      break;
 8009c48:	e024      	b.n	8009c94 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fb69 	bl	800a324 <USBD_SetAddress>
      break;
 8009c52:	e01f      	b.n	8009c94 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fba8 	bl	800a3ac <USBD_SetConfig>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c60:	e018      	b.n	8009c94 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fc45 	bl	800a4f4 <USBD_GetConfig>
      break;
 8009c6a:	e013      	b.n	8009c94 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fc75 	bl	800a55e <USBD_GetStatus>
      break;
 8009c74:	e00e      	b.n	8009c94 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fca3 	bl	800a5c4 <USBD_SetFeature>
      break;
 8009c7e:	e009      	b.n	8009c94 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fcb2 	bl	800a5ec <USBD_ClrFeature>
      break;
 8009c88:	e004      	b.n	8009c94 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fd08 	bl	800a6a2 <USBD_CtlError>
      break;
 8009c92:	bf00      	nop
    }
    break;
 8009c94:	e004      	b.n	8009ca0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fd02 	bl	800a6a2 <USBD_CtlError>
    break;
 8009c9e:	bf00      	nop
  }

  return ret;
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop

08009cac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cc2:	2b40      	cmp	r3, #64	@ 0x40
 8009cc4:	d005      	beq.n	8009cd2 <USBD_StdItfReq+0x26>
 8009cc6:	2b40      	cmp	r3, #64	@ 0x40
 8009cc8:	d82e      	bhi.n	8009d28 <USBD_StdItfReq+0x7c>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <USBD_StdItfReq+0x26>
 8009cce:	2b20      	cmp	r3, #32
 8009cd0:	d12a      	bne.n	8009d28 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d81d      	bhi.n	8009d1a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	889b      	ldrh	r3, [r3, #4]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d813      	bhi.n	8009d10 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	4798      	blx	r3
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	88db      	ldrh	r3, [r3, #6]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d110      	bne.n	8009d24 <USBD_StdItfReq+0x78>
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10d      	bne.n	8009d24 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fd95 	bl	800a838 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009d0e:	e009      	b.n	8009d24 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fcc5 	bl	800a6a2 <USBD_CtlError>
      break;
 8009d18:	e004      	b.n	8009d24 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fcc0 	bl	800a6a2 <USBD_CtlError>
      break;
 8009d22:	e000      	b.n	8009d26 <USBD_StdItfReq+0x7a>
      break;
 8009d24:	bf00      	nop
    }
    break;
 8009d26:	e004      	b.n	8009d32 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fcb9 	bl	800a6a2 <USBD_CtlError>
    break;
 8009d30:	bf00      	nop
  }

  return ret;
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	889b      	ldrh	r3, [r3, #4]
 8009d4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d58:	2b40      	cmp	r3, #64	@ 0x40
 8009d5a:	d007      	beq.n	8009d6c <USBD_StdEPReq+0x30>
 8009d5c:	2b40      	cmp	r3, #64	@ 0x40
 8009d5e:	f200 8142 	bhi.w	8009fe6 <USBD_StdEPReq+0x2aa>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00c      	beq.n	8009d80 <USBD_StdEPReq+0x44>
 8009d66:	2b20      	cmp	r3, #32
 8009d68:	f040 813d 	bne.w	8009fe6 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	4798      	blx	r3
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d7e:	e137      	b.n	8009ff0 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	785b      	ldrb	r3, [r3, #1]
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d007      	beq.n	8009d98 <USBD_StdEPReq+0x5c>
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	f300 8126 	bgt.w	8009fda <USBD_StdEPReq+0x29e>
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d07d      	beq.n	8009e8e <USBD_StdEPReq+0x152>
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d03b      	beq.n	8009e0e <USBD_StdEPReq+0xd2>
 8009d96:	e120      	b.n	8009fda <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d002      	beq.n	8009da8 <USBD_StdEPReq+0x6c>
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d016      	beq.n	8009dd4 <USBD_StdEPReq+0x98>
 8009da6:	e02c      	b.n	8009e02 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00d      	beq.n	8009dca <USBD_StdEPReq+0x8e>
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b80      	cmp	r3, #128	@ 0x80
 8009db2:	d00a      	beq.n	8009dca <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7fe ffeb 	bl	8008d94 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dbe:	2180      	movs	r1, #128	@ 0x80
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7fe ffe7 	bl	8008d94 <USBD_LL_StallEP>
 8009dc6:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009dc8:	e020      	b.n	8009e0c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fc68 	bl	800a6a2 <USBD_CtlError>
        break;
 8009dd2:	e01b      	b.n	8009e0c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	885b      	ldrh	r3, [r3, #2]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10e      	bne.n	8009dfa <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00b      	beq.n	8009dfa <USBD_StdEPReq+0xbe>
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b80      	cmp	r3, #128	@ 0x80
 8009de6:	d008      	beq.n	8009dfa <USBD_StdEPReq+0xbe>
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	88db      	ldrh	r3, [r3, #6]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d104      	bne.n	8009dfa <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7fe ffcd 	bl	8008d94 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fd1c 	bl	800a838 <USBD_CtlSendStatus>

        break;
 8009e00:	e004      	b.n	8009e0c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fc4c 	bl	800a6a2 <USBD_CtlError>
        break;
 8009e0a:	bf00      	nop
      }
      break;
 8009e0c:	e0ea      	b.n	8009fe4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d002      	beq.n	8009e1e <USBD_StdEPReq+0xe2>
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d016      	beq.n	8009e4a <USBD_StdEPReq+0x10e>
 8009e1c:	e030      	b.n	8009e80 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00d      	beq.n	8009e40 <USBD_StdEPReq+0x104>
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	2b80      	cmp	r3, #128	@ 0x80
 8009e28:	d00a      	beq.n	8009e40 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7fe ffb0 	bl	8008d94 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e34:	2180      	movs	r1, #128	@ 0x80
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7fe ffac 	bl	8008d94 <USBD_LL_StallEP>
 8009e3c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009e3e:	e025      	b.n	8009e8c <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fc2d 	bl	800a6a2 <USBD_CtlError>
        break;
 8009e48:	e020      	b.n	8009e8c <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	885b      	ldrh	r3, [r3, #2]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d11b      	bne.n	8009e8a <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7fe ffb6 	bl	8008dd2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fce6 	bl	800a838 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	4798      	blx	r3
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e7e:	e004      	b.n	8009e8a <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fc0d 	bl	800a6a2 <USBD_CtlError>
        break;
 8009e88:	e000      	b.n	8009e8c <USBD_StdEPReq+0x150>
        break;
 8009e8a:	bf00      	nop
      }
      break;
 8009e8c:	e0aa      	b.n	8009fe4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d002      	beq.n	8009e9e <USBD_StdEPReq+0x162>
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d032      	beq.n	8009f02 <USBD_StdEPReq+0x1c6>
 8009e9c:	e097      	b.n	8009fce <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d007      	beq.n	8009eb4 <USBD_StdEPReq+0x178>
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
 8009ea6:	2b80      	cmp	r3, #128	@ 0x80
 8009ea8:	d004      	beq.n	8009eb4 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fbf8 	bl	800a6a2 <USBD_CtlError>
          break;
 8009eb2:	e091      	b.n	8009fd8 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	da0b      	bge.n	8009ed4 <USBD_StdEPReq+0x198>
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	3310      	adds	r3, #16
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	4413      	add	r3, r2
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	e00b      	b.n	8009eec <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	4413      	add	r3, r2
 8009eea:	3304      	adds	r3, #4
 8009eec:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fc42 	bl	800a784 <USBD_CtlSendData>
        break;
 8009f00:	e06a      	b.n	8009fd8 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da11      	bge.n	8009f2e <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	f003 020f 	and.w	r2, r3, #15
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	4613      	mov	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	440b      	add	r3, r1
 8009f1c:	3324      	adds	r3, #36	@ 0x24
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d117      	bne.n	8009f54 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fbbb 	bl	800a6a2 <USBD_CtlError>
            break;
 8009f2c:	e054      	b.n	8009fd8 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	f003 020f 	and.w	r2, r3, #15
 8009f34:	6879      	ldr	r1, [r7, #4]
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	440b      	add	r3, r1
 8009f40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d104      	bne.n	8009f54 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fba8 	bl	800a6a2 <USBD_CtlError>
            break;
 8009f52:	e041      	b.n	8009fd8 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	da0b      	bge.n	8009f74 <USBD_StdEPReq+0x238>
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	3310      	adds	r3, #16
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	4413      	add	r3, r2
 8009f70:	3304      	adds	r3, #4
 8009f72:	e00b      	b.n	8009f8c <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4413      	add	r3, r2
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f8e:	7bbb      	ldrb	r3, [r7, #14]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <USBD_StdEPReq+0x25e>
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b80      	cmp	r3, #128	@ 0x80
 8009f98:	d103      	bne.n	8009fa2 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	e00e      	b.n	8009fc0 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7fe ff32 	bl	8008e10 <USBD_LL_IsStallEP>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d003      	beq.n	8009fba <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	e002      	b.n	8009fc0 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fbdc 	bl	800a784 <USBD_CtlSendData>
          break;
 8009fcc:	e004      	b.n	8009fd8 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fb66 	bl	800a6a2 <USBD_CtlError>
        break;
 8009fd6:	bf00      	nop
      }
      break;
 8009fd8:	e004      	b.n	8009fe4 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fb60 	bl	800a6a2 <USBD_CtlError>
      break;
 8009fe2:	bf00      	nop
    }
    break;
 8009fe4:	e004      	b.n	8009ff0 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fb5a 	bl	800a6a2 <USBD_CtlError>
    break;
 8009fee:	bf00      	nop
  }

  return ret;
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a006:	2300      	movs	r3, #0
 800a008:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	885b      	ldrh	r3, [r3, #2]
 800a016:	0a1b      	lsrs	r3, r3, #8
 800a018:	b29b      	uxth	r3, r3
 800a01a:	3b01      	subs	r3, #1
 800a01c:	2b0e      	cmp	r3, #14
 800a01e:	f200 8152 	bhi.w	800a2c6 <USBD_GetDescriptor+0x2ca>
 800a022:	a201      	add	r2, pc, #4	@ (adr r2, 800a028 <USBD_GetDescriptor+0x2c>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a099 	.word	0x0800a099
 800a02c:	0800a0b1 	.word	0x0800a0b1
 800a030:	0800a0f1 	.word	0x0800a0f1
 800a034:	0800a2c7 	.word	0x0800a2c7
 800a038:	0800a2c7 	.word	0x0800a2c7
 800a03c:	0800a267 	.word	0x0800a267
 800a040:	0800a293 	.word	0x0800a293
 800a044:	0800a2c7 	.word	0x0800a2c7
 800a048:	0800a2c7 	.word	0x0800a2c7
 800a04c:	0800a2c7 	.word	0x0800a2c7
 800a050:	0800a2c7 	.word	0x0800a2c7
 800a054:	0800a2c7 	.word	0x0800a2c7
 800a058:	0800a2c7 	.word	0x0800a2c7
 800a05c:	0800a2c7 	.word	0x0800a2c7
 800a060:	0800a065 	.word	0x0800a065
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	7c12      	ldrb	r2, [r2, #16]
 800a07c:	f107 0108 	add.w	r1, r7, #8
 800a080:	4610      	mov	r0, r2
 800a082:	4798      	blx	r3
 800a084:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a086:	e126      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fb09 	bl	800a6a2 <USBD_CtlError>
      err++;
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	3301      	adds	r3, #1
 800a094:	72fb      	strb	r3, [r7, #11]
    break;
 800a096:	e11e      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	7c12      	ldrb	r2, [r2, #16]
 800a0a4:	f107 0108 	add.w	r1, r7, #8
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	60f8      	str	r0, [r7, #12]
    break;
 800a0ae:	e112      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7c1b      	ldrb	r3, [r3, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10d      	bne.n	800a0d4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c0:	f107 0208 	add.w	r2, r7, #8
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	4798      	blx	r3
 800a0c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a0d2:	e100      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0dc:	f107 0208 	add.w	r2, r7, #8
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
 800a0e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	701a      	strb	r2, [r3, #0]
    break;
 800a0ee:	e0f2      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	885b      	ldrh	r3, [r3, #2]
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b05      	cmp	r3, #5
 800a0f8:	f200 80ac 	bhi.w	800a254 <USBD_GetDescriptor+0x258>
 800a0fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a104 <USBD_GetDescriptor+0x108>)
 800a0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a102:	bf00      	nop
 800a104:	0800a11d 	.word	0x0800a11d
 800a108:	0800a151 	.word	0x0800a151
 800a10c:	0800a185 	.word	0x0800a185
 800a110:	0800a1b9 	.word	0x0800a1b9
 800a114:	0800a1ed 	.word	0x0800a1ed
 800a118:	0800a221 	.word	0x0800a221
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	7c12      	ldrb	r2, [r2, #16]
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	4610      	mov	r0, r2
 800a13a:	4798      	blx	r3
 800a13c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a13e:	e091      	b.n	800a264 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 faad 	bl	800a6a2 <USBD_CtlError>
        err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
      break;
 800a14e:	e089      	b.n	800a264 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a172:	e077      	b.n	800a264 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa93 	bl	800a6a2 <USBD_CtlError>
        err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
      break;
 800a182:	e06f      	b.n	800a264 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7c12      	ldrb	r2, [r2, #16]
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1a6:	e05d      	b.n	800a264 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa79 	bl	800a6a2 <USBD_CtlError>
        err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
      break;
 800a1b6:	e055      	b.n	800a264 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f107 0108 	add.w	r1, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1da:	e043      	b.n	800a264 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fa5f 	bl	800a6a2 <USBD_CtlError>
        err++;
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	72fb      	strb	r3, [r7, #11]
      break;
 800a1ea:	e03b      	b.n	800a264 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00b      	beq.n	800a210 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	7c12      	ldrb	r2, [r2, #16]
 800a204:	f107 0108 	add.w	r1, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a20e:	e029      	b.n	800a264 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa45 	bl	800a6a2 <USBD_CtlError>
        err++;
 800a218:	7afb      	ldrb	r3, [r7, #11]
 800a21a:	3301      	adds	r3, #1
 800a21c:	72fb      	strb	r3, [r7, #11]
      break;
 800a21e:	e021      	b.n	800a264 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	7c12      	ldrb	r2, [r2, #16]
 800a238:	f107 0108 	add.w	r1, r7, #8
 800a23c:	4610      	mov	r0, r2
 800a23e:	4798      	blx	r3
 800a240:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a242:	e00f      	b.n	800a264 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa2b 	bl	800a6a2 <USBD_CtlError>
        err++;
 800a24c:	7afb      	ldrb	r3, [r7, #11]
 800a24e:	3301      	adds	r3, #1
 800a250:	72fb      	strb	r3, [r7, #11]
      break;
 800a252:	e007      	b.n	800a264 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa23 	bl	800a6a2 <USBD_CtlError>
      err++;
 800a25c:	7afb      	ldrb	r3, [r7, #11]
 800a25e:	3301      	adds	r3, #1
 800a260:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a262:	bf00      	nop
    }
    break;
 800a264:	e037      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7c1b      	ldrb	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a276:	f107 0208 	add.w	r2, r7, #8
 800a27a:	4610      	mov	r0, r2
 800a27c:	4798      	blx	r3
 800a27e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a280:	e029      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fa0c 	bl	800a6a2 <USBD_CtlError>
      err++;
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	3301      	adds	r3, #1
 800a28e:	72fb      	strb	r3, [r7, #11]
    break;
 800a290:	e021      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	7c1b      	ldrb	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10d      	bne.n	800a2b6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a2:	f107 0208 	add.w	r2, r7, #8
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	4798      	blx	r3
 800a2aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a2b4:	e00f      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f9f2 	bl	800a6a2 <USBD_CtlError>
      err++;
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	72fb      	strb	r3, [r7, #11]
    break;
 800a2c4:	e007      	b.n	800a2d6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f9ea 	bl	800a6a2 <USBD_CtlError>
    err++;
 800a2ce:	7afb      	ldrb	r3, [r7, #11]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	72fb      	strb	r3, [r7, #11]
    break;
 800a2d4:	bf00      	nop
  }

  if (err != 0U)
 800a2d6:	7afb      	ldrb	r3, [r7, #11]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d11e      	bne.n	800a31a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	88db      	ldrh	r3, [r3, #6]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d016      	beq.n	800a312 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800a2e4:	893b      	ldrh	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00e      	beq.n	800a308 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	88da      	ldrh	r2, [r3, #6]
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	bf28      	it	cs
 800a2f4:	4613      	movcs	r3, r2
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2fa:	893b      	ldrh	r3, [r7, #8]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fa3f 	bl	800a784 <USBD_CtlSendData>
 800a306:	e009      	b.n	800a31c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f9c9 	bl	800a6a2 <USBD_CtlError>
 800a310:	e004      	b.n	800a31c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa90 	bl	800a838 <USBD_CtlSendStatus>
 800a318:	e000      	b.n	800a31c <USBD_GetDescriptor+0x320>
    return;
 800a31a:	bf00      	nop
    }
  }
}
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop

0800a324 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	889b      	ldrh	r3, [r3, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d130      	bne.n	800a398 <USBD_SetAddress+0x74>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	88db      	ldrh	r3, [r3, #6]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d12c      	bne.n	800a398 <USBD_SetAddress+0x74>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	885b      	ldrh	r3, [r3, #2]
 800a342:	2b7f      	cmp	r3, #127	@ 0x7f
 800a344:	d828      	bhi.n	800a398 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	885b      	ldrh	r3, [r3, #2]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a350:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d104      	bne.n	800a366 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f99f 	bl	800a6a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a364:	e01d      	b.n	800a3a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	7bfa      	ldrb	r2, [r7, #15]
 800a36a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7fe fd78 	bl	8008e68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fa5d 	bl	800a838 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2202      	movs	r2, #2
 800a388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38c:	e009      	b.n	800a3a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a396:	e004      	b.n	800a3a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f981 	bl	800a6a2 <USBD_CtlError>
  }
}
 800a3a0:	bf00      	nop
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	885b      	ldrh	r3, [r3, #2]
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	4b4b      	ldr	r3, [pc, #300]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a3c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3c4:	4b4a      	ldr	r3, [pc, #296]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d905      	bls.n	800a3d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f967 	bl	800a6a2 <USBD_CtlError>
    return USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e087      	b.n	800a4e8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d002      	beq.n	800a3e8 <USBD_SetConfig+0x3c>
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d025      	beq.n	800a432 <USBD_SetConfig+0x86>
 800a3e6:	e071      	b.n	800a4cc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a3e8:	4b41      	ldr	r3, [pc, #260]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d01c      	beq.n	800a42a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a3f0:	4b3f      	ldr	r3, [pc, #252]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3fa:	4b3d      	ldr	r3, [pc, #244]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7ff f96d 	bl	80096e0 <USBD_SetClassConfig>
 800a406:	4603      	mov	r3, r0
 800a408:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f945 	bl	800a6a2 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a418:	e065      	b.n	800a4e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fa0c 	bl	800a838 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2203      	movs	r2, #3
 800a424:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800a428:	e05d      	b.n	800a4e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fa04 	bl	800a838 <USBD_CtlSendStatus>
    break;
 800a430:	e059      	b.n	800a4e6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a432:	4b2f      	ldr	r3, [pc, #188]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d112      	bne.n	800a460 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2202      	movs	r2, #2
 800a43e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800a442:	4b2b      	ldr	r3, [pc, #172]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a44c:	4b28      	ldr	r3, [pc, #160]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff f960 	bl	8009718 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f9ed 	bl	800a838 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a45e:	e042      	b.n	800a4e6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a460:	4b23      	ldr	r3, [pc, #140]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	461a      	mov	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d02a      	beq.n	800a4c4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	b2db      	uxtb	r3, r3
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff f94e 	bl	8009718 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a47c:	4b1c      	ldr	r3, [pc, #112]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	461a      	mov	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a486:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7ff f927 	bl	80096e0 <USBD_SetClassConfig>
 800a492:	4603      	mov	r3, r0
 800a494:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a496:	7bfb      	ldrb	r3, [r7, #15]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00f      	beq.n	800a4bc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f8ff 	bl	800a6a2 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff f933 	bl	8009718 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800a4ba:	e014      	b.n	800a4e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f9bb 	bl	800a838 <USBD_CtlSendStatus>
    break;
 800a4c2:	e010      	b.n	800a4e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f9b7 	bl	800a838 <USBD_CtlSendStatus>
    break;
 800a4ca:	e00c      	b.n	800a4e6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f8e7 	bl	800a6a2 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4d4:	4b06      	ldr	r3, [pc, #24]	@ (800a4f0 <USBD_SetConfig+0x144>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff f91c 	bl	8009718 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e4:	bf00      	nop
  }

  return ret;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20002324 	.word	0x20002324

0800a4f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	88db      	ldrh	r3, [r3, #6]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d004      	beq.n	800a510 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f8ca 	bl	800a6a2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a50e:	e022      	b.n	800a556 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a516:	2b02      	cmp	r3, #2
 800a518:	dc02      	bgt.n	800a520 <USBD_GetConfig+0x2c>
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	dc03      	bgt.n	800a526 <USBD_GetConfig+0x32>
 800a51e:	e015      	b.n	800a54c <USBD_GetConfig+0x58>
 800a520:	2b03      	cmp	r3, #3
 800a522:	d00b      	beq.n	800a53c <USBD_GetConfig+0x48>
 800a524:	e012      	b.n	800a54c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3308      	adds	r3, #8
 800a530:	2201      	movs	r2, #1
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f925 	bl	800a784 <USBD_CtlSendData>
      break;
 800a53a:	e00c      	b.n	800a556 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3304      	adds	r3, #4
 800a540:	2201      	movs	r2, #1
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 f91d 	bl	800a784 <USBD_CtlSendData>
      break;
 800a54a:	e004      	b.n	800a556 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f8a7 	bl	800a6a2 <USBD_CtlError>
      break;
 800a554:	bf00      	nop
}
 800a556:	bf00      	nop
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a56e:	3b01      	subs	r3, #1
 800a570:	2b02      	cmp	r3, #2
 800a572:	d81e      	bhi.n	800a5b2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	88db      	ldrh	r3, [r3, #6]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d004      	beq.n	800a586 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f88f 	bl	800a6a2 <USBD_CtlError>
      break;
 800a584:	e01a      	b.n	800a5bc <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a592:	2b00      	cmp	r3, #0
 800a594:	d005      	beq.n	800a5a2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	f043 0202 	orr.w	r2, r3, #2
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	330c      	adds	r3, #12
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f8ea 	bl	800a784 <USBD_CtlSendData>
    break;
 800a5b0:	e004      	b.n	800a5bc <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f874 	bl	800a6a2 <USBD_CtlError>
    break;
 800a5ba:	bf00      	nop
  }
}
 800a5bc:	bf00      	nop
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	885b      	ldrh	r3, [r3, #2]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d106      	bne.n	800a5e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f92a 	bl	800a838 <USBD_CtlSendStatus>
  }
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d80b      	bhi.n	800a61a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	885b      	ldrh	r3, [r3, #2]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d10c      	bne.n	800a624 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f910 	bl	800a838 <USBD_CtlSendStatus>
      }
      break;
 800a618:	e004      	b.n	800a624 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f840 	bl	800a6a2 <USBD_CtlError>
      break;
 800a622:	e000      	b.n	800a626 <USBD_ClrFeature+0x3a>
      break;
 800a624:	bf00      	nop
  }
}
 800a626:	bf00      	nop
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	781a      	ldrb	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3301      	adds	r3, #1
 800a648:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	781a      	ldrb	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3301      	adds	r3, #1
 800a656:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f7ff fa9a 	bl	8009b92 <SWAPBYTE>
 800a65e:	4603      	mov	r3, r0
 800a660:	461a      	mov	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3301      	adds	r3, #1
 800a66a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3301      	adds	r3, #1
 800a670:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff fa8d 	bl	8009b92 <SWAPBYTE>
 800a678:	4603      	mov	r3, r0
 800a67a:	461a      	mov	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3301      	adds	r3, #1
 800a684:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3301      	adds	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f7ff fa80 	bl	8009b92 <SWAPBYTE>
 800a692:	4603      	mov	r3, r0
 800a694:	461a      	mov	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	80da      	strh	r2, [r3, #6]
}
 800a69a:	bf00      	nop
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6ac:	2180      	movs	r1, #128	@ 0x80
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7fe fb70 	bl	8008d94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7fe fb6c 	bl	8008d94 <USBD_LL_StallEP>
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d036      	beq.n	800a748 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a6de:	6938      	ldr	r0, [r7, #16]
 800a6e0:	f000 f836 	bl	800a750 <USBD_GetLen>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	005b      	lsls	r3, r3, #1
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	7812      	ldrb	r2, [r2, #0]
 800a6fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
 800a700:	3301      	adds	r3, #1
 800a702:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a704:	7dfb      	ldrb	r3, [r7, #23]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	4413      	add	r3, r2
 800a70a:	2203      	movs	r2, #3
 800a70c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	3301      	adds	r3, #1
 800a712:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a714:	e013      	b.n	800a73e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a716:	7dfb      	ldrb	r3, [r7, #23]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	4413      	add	r3, r2
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	7812      	ldrb	r2, [r2, #0]
 800a720:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	3301      	adds	r3, #1
 800a726:	613b      	str	r3, [r7, #16]
    idx++;
 800a728:	7dfb      	ldrb	r3, [r7, #23]
 800a72a:	3301      	adds	r3, #1
 800a72c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	4413      	add	r3, r2
 800a734:	2200      	movs	r2, #0
 800a736:	701a      	strb	r2, [r3, #0]
    idx++;
 800a738:	7dfb      	ldrb	r3, [r7, #23]
 800a73a:	3301      	adds	r3, #1
 800a73c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e7      	bne.n	800a716 <USBD_GetString+0x52>
 800a746:	e000      	b.n	800a74a <USBD_GetString+0x86>
    return;
 800a748:	bf00      	nop
  }
}
 800a74a:	3718      	adds	r7, #24
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a760:	e005      	b.n	800a76e <USBD_GetLen+0x1e>
  {
    len++;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	3301      	adds	r3, #1
 800a766:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	3301      	adds	r3, #1
 800a76c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1f5      	bne.n	800a762 <USBD_GetLen+0x12>
  }

  return len;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2202      	movs	r2, #2
 800a794:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f7fe fb7b 	bl	8008ea6 <USBD_LL_Transmit>

  return USBD_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	60f8      	str	r0, [r7, #12]
 800a7c2:	60b9      	str	r1, [r7, #8]
 800a7c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f7fe fb6a 	bl	8008ea6 <USBD_LL_Transmit>

  return USBD_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2203      	movs	r2, #3
 800a7ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	2100      	movs	r1, #0
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7fe fb6e 	bl	8008ee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	60b9      	str	r1, [r7, #8]
 800a820:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	2100      	movs	r1, #0
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f7fe fb5d 	bl	8008ee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2204      	movs	r2, #4
 800a844:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a848:	2300      	movs	r3, #0
 800a84a:	2200      	movs	r2, #0
 800a84c:	2100      	movs	r1, #0
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7fe fb29 	bl	8008ea6 <USBD_LL_Transmit>

  return USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2205      	movs	r2, #5
 800a86a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a86e:	2300      	movs	r3, #0
 800a870:	2200      	movs	r2, #0
 800a872:	2100      	movs	r1, #0
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7fe fb37 	bl	8008ee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <memset>:
 800a884:	4402      	add	r2, r0
 800a886:	4603      	mov	r3, r0
 800a888:	4293      	cmp	r3, r2
 800a88a:	d100      	bne.n	800a88e <memset+0xa>
 800a88c:	4770      	bx	lr
 800a88e:	f803 1b01 	strb.w	r1, [r3], #1
 800a892:	e7f9      	b.n	800a888 <memset+0x4>

0800a894 <__libc_init_array>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	4d0d      	ldr	r5, [pc, #52]	@ (800a8cc <__libc_init_array+0x38>)
 800a898:	2600      	movs	r6, #0
 800a89a:	4c0d      	ldr	r4, [pc, #52]	@ (800a8d0 <__libc_init_array+0x3c>)
 800a89c:	1b64      	subs	r4, r4, r5
 800a89e:	10a4      	asrs	r4, r4, #2
 800a8a0:	42a6      	cmp	r6, r4
 800a8a2:	d109      	bne.n	800a8b8 <__libc_init_array+0x24>
 800a8a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a8d4 <__libc_init_array+0x40>)
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	4c0b      	ldr	r4, [pc, #44]	@ (800a8d8 <__libc_init_array+0x44>)
 800a8aa:	f000 f817 	bl	800a8dc <_init>
 800a8ae:	1b64      	subs	r4, r4, r5
 800a8b0:	10a4      	asrs	r4, r4, #2
 800a8b2:	42a6      	cmp	r6, r4
 800a8b4:	d105      	bne.n	800a8c2 <__libc_init_array+0x2e>
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8bc:	3601      	adds	r6, #1
 800a8be:	4798      	blx	r3
 800a8c0:	e7ee      	b.n	800a8a0 <__libc_init_array+0xc>
 800a8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c6:	3601      	adds	r6, #1
 800a8c8:	4798      	blx	r3
 800a8ca:	e7f2      	b.n	800a8b2 <__libc_init_array+0x1e>
 800a8cc:	0800aa0c 	.word	0x0800aa0c
 800a8d0:	0800aa0c 	.word	0x0800aa0c
 800a8d4:	0800aa0c 	.word	0x0800aa0c
 800a8d8:	0800aa10 	.word	0x0800aa10

0800a8dc <_init>:
 800a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8de:	bf00      	nop
 800a8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8e2:	bc08      	pop	{r3}
 800a8e4:	469e      	mov	lr, r3
 800a8e6:	4770      	bx	lr

0800a8e8 <_fini>:
 800a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ea:	bf00      	nop
 800a8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ee:	bc08      	pop	{r3}
 800a8f0:	469e      	mov	lr, r3
 800a8f2:	4770      	bx	lr
